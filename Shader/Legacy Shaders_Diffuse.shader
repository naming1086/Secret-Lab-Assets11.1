//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Legacy Shaders/Diffuse" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 12924
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %58 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate %58 Location 58 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %57 = OpTypePointer Output %24 
                         Output f32_4* %58 = OpVariable Output 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                                       %68 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %59 = OpLoad %45 
                                 f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                 f32_3 %61 = OpLoad %9 
                                 f32_3 %62 = OpFMul %60 %61 
                                 f32_4 %63 = OpLoad %58 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %58 %64 
                           Output f32* %69 = OpAccessChain %58 %67 
                                               OpStore %69 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 245
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %231 %237 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 231 
                                                      OpDecorate vs_TEXCOORD5 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_4* %170 = OpVariable Private 
                                             %176 = OpTypePointer Private %51 
                              Private f32_3* %177 = OpVariable Private 
                                         i32 %183 = OpConstant 4 
                                         i32 %189 = OpConstant 5 
                                         i32 %195 = OpConstant 6 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         u32 %207 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_3 %235 = OpConstantComposite %234 %234 %234 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %238 = OpConstantComposite %234 %234 %234 %234 
                                             %239 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                Private f32* %154 = OpAccessChain %9 %83 
                                         f32 %155 = OpLoad %154 
                                Private f32* %156 = OpAccessChain %9 %83 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFMul %155 %157 
                                Private f32* %159 = OpAccessChain %45 %120 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %120 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %120 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %45 %120 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                         f32 %168 = OpFAdd %164 %167 
                                Private f32* %169 = OpAccessChain %45 %120 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_4 %172 = OpVectorShuffle %171 %171 1 2 2 0 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 0 1 2 2 
                                       f32_4 %175 = OpFMul %172 %174 
                                                      OpStore %170 %175 
                              Uniform f32_4* %178 = OpAccessChain %21 %47 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpLoad %170 
                                         f32 %181 = OpDot %179 %180 
                                Private f32* %182 = OpAccessChain %177 %120 
                                                      OpStore %182 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %170 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %177 %83 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %170 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %177 %134 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %45 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_3 %202 = OpLoad %177 
                                       f32_3 %203 = OpFAdd %201 %202 
                                       f32_4 %204 = OpLoad %45 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %45 %205 
                                Private f32* %208 = OpAccessChain %9 %207 
                                                      OpStore %208 %206 
                              Uniform f32_4* %209 = OpAccessChain %21 %29 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %9 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %170 %120 
                                                      OpStore %213 %212 
                              Uniform f32_4* %214 = OpAccessChain %21 %24 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %9 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %170 %83 
                                                      OpStore %218 %217 
                              Uniform f32_4* %219 = OpAccessChain %21 %37 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %9 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %170 %134 
                                                      OpStore %223 %222 
                                       f32_4 %224 = OpLoad %45 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_4 %226 = OpLoad %170 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %9 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %236 = OpExtInst %1 40 %233 %235 
                                                      OpStore vs_TEXCOORD3 %236 
                                                      OpStore vs_TEXCOORD5 %238 
                                 Output f32* %240 = OpAccessChain %87 %29 %83 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                                      OpStore %243 %242 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %41 %59 %63 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpDecorate vs_TEXCOORD1 Location 11 
                                               OpMemberDecorate %14 0 Offset 14 
                                               OpMemberDecorate %14 1 Offset 14 
                                               OpMemberDecorate %14 2 Offset 14 
                                               OpDecorate %14 Block 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate %31 DescriptorSet 31 
                                               OpDecorate %31 Binding 31 
                                               OpDecorate %35 DescriptorSet 35 
                                               OpDecorate %35 Binding 35 
                                               OpDecorate vs_TEXCOORD0 Location 41 
                                               OpDecorate vs_TEXCOORD3 Location 59 
                                               OpDecorate %63 Location 63 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypePointer Private %6 
                           Private f32* %8 = OpVariable Private 
                                        %9 = OpTypeVector %6 3 
                                       %10 = OpTypePointer Input %9 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                       %13 = OpTypeVector %6 4 
                                       %14 = OpTypeStruct %13 %13 %13 
                                       %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                       %17 = OpTypeInt 32 1 
                                   i32 %18 = OpConstant 0 
                                       %19 = OpTypePointer Uniform %13 
                                   f32 %25 = OpConstant 3.674022E-40 
                                       %27 = OpTypePointer Private %9 
                        Private f32_3* %28 = OpVariable Private 
                                       %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %30 = OpTypePointer UniformConstant %29 
  UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                       %33 = OpTypeSampler 
                                       %34 = OpTypePointer UniformConstant %33 
              UniformConstant sampler* %35 = OpVariable UniformConstant 
                                       %37 = OpTypeSampledImage %29 
                                       %39 = OpTypeVector %6 2 
                                       %40 = OpTypePointer Input %39 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %46 = OpConstant 2 
                        Private f32_3* %51 = OpVariable Private 
                                   i32 %53 = OpConstant 1 
                 Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       %62 = OpTypePointer Output %13 
                         Output f32_4* %63 = OpVariable Output 
                                   f32 %72 = OpConstant 3.674022E-40 
                                       %73 = OpTypeInt 32 0 
                                   u32 %74 = OpConstant 3 
                                       %75 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_3 %12 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %20 = OpAccessChain %16 %18 
                                 f32_4 %21 = OpLoad %20 
                                 f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                   f32 %23 = OpDot %12 %22 
                                               OpStore %8 %23 
                                   f32 %24 = OpLoad %8 
                                   f32 %26 = OpExtInst %1 40 %24 %25 
                                               OpStore %8 %26 
                   read_only Texture2D %32 = OpLoad %31 
                               sampler %36 = OpLoad %35 
            read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                                 f32_2 %42 = OpLoad vs_TEXCOORD0 
                                 f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                                 f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                               OpStore %28 %44 
                                 f32_3 %45 = OpLoad %28 
                        Uniform f32_4* %47 = OpAccessChain %16 %46 
                                 f32_4 %48 = OpLoad %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                 f32_3 %50 = OpFMul %45 %49 
                                               OpStore %28 %50 
                                 f32_3 %52 = OpLoad %28 
                        Uniform f32_4* %54 = OpAccessChain %16 %53 
                                 f32_4 %55 = OpLoad %54 
                                 f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                 f32_3 %57 = OpFMul %52 %56 
                                               OpStore %51 %57 
                                 f32_3 %58 = OpLoad %28 
                                 f32_3 %60 = OpLoad vs_TEXCOORD3 
                                 f32_3 %61 = OpFMul %58 %60 
                                               OpStore %28 %61 
                                 f32_3 %64 = OpLoad %51 
                                   f32 %65 = OpLoad %8 
                                 f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                 f32_3 %67 = OpFMul %64 %66 
                                 f32_3 %68 = OpLoad %28 
                                 f32_3 %69 = OpFAdd %67 %68 
                                 f32_4 %70 = OpLoad %63 
                                 f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                               OpStore %63 %71 
                           Output f32* %76 = OpAccessChain %63 %74 
                                               OpStore %76 %72 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate vs_TEXCOORD1 Location 142 
                                                      OpDecorate vs_TEXCOORD5 Location 162 
                                                      OpDecorate vs_TEXCOORD6 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore vs_TEXCOORD0 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad vs_TEXCOORD5 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %173 
                                                      OpStore vs_TEXCOORD6 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %163 %172 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate %172 Location 172 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %154 = OpConstant 6 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %171 = OpTypePointer Output %13 
                               Output f32_4* %172 = OpVariable Output 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                              Uniform f32_4* %155 = OpAccessChain %19 %154 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %153 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %53 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %94 
                                                      OpStore %162 %170 
                                         f32 %173 = OpLoad %162 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpLoad %9 
                                       f32_3 %176 = OpFMul %174 %175 
                                       f32_4 %177 = OpLoad %172 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %172 %178 
                                 Output f32* %180 = OpAccessChain %172 %73 
                                                      OpStore %180 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 235
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %189 %214 %226 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD1 Location 152 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate vs_TEXCOORD5 Location 214 
                                                      OpDecorate vs_TEXCOORD6 Location 226 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 8 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 6 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_4* %168 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %190 = OpConstant 4 
                                             %202 = OpTypePointer Uniform %6 
                                         f32 %209 = OpConstant 3.674022E-40 
                                       f32_3 %210 = OpConstantComposite %209 %209 %209 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_4 %228 = OpConstantComposite %227 %227 %227 %227 
                                             %229 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore vs_TEXCOORD1 %154 
                                Private f32* %155 = OpAccessChain %45 %90 
                                         f32 %156 = OpLoad %155 
                                Private f32* %157 = OpAccessChain %45 %90 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                                      OpStore %137 %159 
                                Private f32* %160 = OpAccessChain %45 %121 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %45 %121 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                         f32 %165 = OpLoad %137 
                                         f32 %166 = OpFNegate %165 
                                         f32 %167 = OpFAdd %164 %166 
                                                      OpStore %137 %167 
                                       f32_4 %169 = OpLoad %45 
                                       f32_4 %170 = OpVectorShuffle %169 %169 1 2 2 0 
                                       f32_4 %171 = OpLoad %45 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 2 2 
                                       f32_4 %173 = OpFMul %170 %172 
                                                      OpStore %168 %173 
                              Uniform f32_4* %174 = OpAccessChain %21 %24 
                                       f32_4 %175 = OpLoad %174 
                                       f32_4 %176 = OpLoad %168 
                                         f32 %177 = OpDot %175 %176 
                                Private f32* %178 = OpAccessChain %45 %121 
                                                      OpStore %178 %177 
                              Uniform f32_4* %179 = OpAccessChain %21 %37 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %168 
                                         f32 %182 = OpDot %180 %181 
                                Private f32* %183 = OpAccessChain %45 %90 
                                                      OpStore %183 %182 
                              Uniform f32_4* %184 = OpAccessChain %21 %47 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %168 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %45 %135 
                                                      OpStore %188 %187 
                              Uniform f32_4* %191 = OpAccessChain %21 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpLoad %137 
                                       f32_3 %195 = OpCompositeConstruct %194 %194 %194 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %45 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore vs_TEXCOORD3 %199 
                                Private f32* %200 = OpAccessChain %9 %90 
                                         f32 %201 = OpLoad %200 
                                Uniform f32* %203 = OpAccessChain %21 %29 %121 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %201 %204 
                                Private f32* %206 = OpAccessChain %9 %90 
                                                      OpStore %206 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 3 1 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %45 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 1 5 6 
                                                      OpStore %45 %213 
                                       f32_4 %215 = OpLoad %9 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_4 %217 = OpLoad vs_TEXCOORD5 
                                       f32_4 %218 = OpVectorShuffle %217 %216 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %218 
                                       f32_4 %219 = OpLoad %45 
                                       f32_2 %220 = OpVectorShuffle %219 %219 2 2 
                                       f32_4 %221 = OpLoad %45 
                                       f32_2 %222 = OpVectorShuffle %221 %221 0 3 
                                       f32_2 %223 = OpFAdd %220 %222 
                                       f32_4 %224 = OpLoad vs_TEXCOORD5 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %225 
                                                      OpStore vs_TEXCOORD6 %228 
                                 Output f32* %230 = OpAccessChain %94 %29 %90 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                 Output f32* %233 = OpAccessChain %94 %29 %90 
                                                      OpStore %233 %232 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 225
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %165 %189 %213 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate %213 Location 213 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 6 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 7 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 5 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                             %163 = OpTypePointer Private %13 
                              Private f32_4* %164 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %170 = OpVariable Private 
                                         i32 %176 = OpConstant 3 
                                         i32 %182 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %196 = OpConstantComposite %95 %95 %95 
                                Private f32* %204 = OpVariable Private 
                                             %212 = OpTypePointer Output %13 
                               Output f32_4* %213 = OpVariable Output 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %166 = OpLoad vs_TEXCOORD1 
                                       f32_4 %167 = OpLoad %164 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %164 %168 
                                Private f32* %169 = OpAccessChain %164 %73 
                                                      OpStore %169 %96 
                              Uniform f32_4* %171 = OpAccessChain %19 %58 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %170 %31 
                                                      OpStore %175 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %164 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %170 %56 
                                                      OpStore %181 %180 
                              Uniform f32_4* %183 = OpAccessChain %19 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %164 
                                         f32 %186 = OpDot %184 %185 
                                Private f32* %187 = OpAccessChain %170 %48 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %170 
                                       f32_3 %190 = OpLoad vs_TEXCOORD3 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %164 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %164 %193 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %197 = OpExtInst %1 40 %195 %196 
                                       f32_4 %198 = OpLoad %164 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %164 %199 
                                       f32_3 %200 = OpLoad %46 
                                       f32_4 %201 = OpLoad %164 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %46 %203 
                                       f32_3 %205 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %206 = OpAccessChain %19 %53 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 40 %210 %95 
                                                      OpStore %204 %211 
                                       f32_3 %214 = OpLoad %9 
                                         f32 %215 = OpLoad %204 
                                       f32_3 %216 = OpCompositeConstruct %215 %215 %215 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_3 %218 = OpLoad %46 
                                       f32_3 %219 = OpFAdd %217 %218 
                                       f32_4 %220 = OpLoad %213 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %213 %221 
                                 Output f32* %223 = OpAccessChain %213 %73 
                                                      OpStore %223 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD5 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD5 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %58 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate %58 Location 58 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %57 = OpTypePointer Output %24 
                         Output f32_4* %58 = OpVariable Output 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                                       %68 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %59 = OpLoad %45 
                                 f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                 f32_3 %61 = OpLoad %9 
                                 f32_3 %62 = OpFMul %60 %61 
                                 f32_4 %63 = OpLoad %58 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %58 %64 
                           Output f32* %69 = OpAccessChain %58 %67 
                                               OpStore %69 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 372
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %359 %365 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate vs_TEXCOORD3 Location 359 
                                                      OpDecorate vs_TEXCOORD5 Location 365 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %179 = OpVariable Private 
                                         i32 %180 = OpConstant 8 
                                         i32 %186 = OpConstant 9 
                                         i32 %192 = OpConstant 10 
                                         i32 %198 = OpConstant 11 
                                         f32 %210 = OpConstant 3.674022E-40 
                                         u32 %211 = OpConstant 3 
                                         i32 %213 = OpConstant 5 
                                         i32 %219 = OpConstant 6 
                                         i32 %225 = OpConstant 7 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %240 
                              Private f32_4* %251 = OpVariable Private 
                              Private f32_4* %259 = OpVariable Private 
                                         f32 %295 = OpConstant 3.674022E-40 
                                       f32_4 %296 = OpConstantComposite %295 %295 %295 %295 
                                       f32_4 %304 = OpConstantComposite %210 %210 %210 %210 
                                       f32_4 %312 = OpConstantComposite %240 %240 %240 %240 
                                         i32 %319 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %366 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                Private f32* %161 = OpAccessChain %47 %86 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %47 %86 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                                      OpStore %139 %165 
                                Private f32* %166 = OpAccessChain %47 %123 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %47 %123 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                         f32 %171 = OpLoad %139 
                                         f32 %172 = OpFNegate %171 
                                         f32 %173 = OpFAdd %170 %172 
                                                      OpStore %139 %173 
                                       f32_4 %174 = OpLoad %47 
                                       f32_4 %175 = OpVectorShuffle %174 %174 1 2 2 0 
                                       f32_4 %176 = OpLoad %47 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 2 2 
                                       f32_4 %178 = OpFMul %175 %177 
                                                      OpStore %65 %178 
                              Uniform f32_4* %181 = OpAccessChain %23 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %65 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %179 %123 
                                                      OpStore %185 %184 
                              Uniform f32_4* %187 = OpAccessChain %23 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %65 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %179 %86 
                                                      OpStore %191 %190 
                              Uniform f32_4* %193 = OpAccessChain %23 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpLoad %65 
                                         f32 %196 = OpDot %194 %195 
                                Private f32* %197 = OpAccessChain %179 %137 
                                                      OpStore %197 %196 
                              Uniform f32_4* %199 = OpAccessChain %23 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpLoad %139 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %179 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFAdd %204 %206 
                                       f32_4 %208 = OpLoad %65 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %65 %209 
                                Private f32* %212 = OpAccessChain %47 %211 
                                                      OpStore %212 %210 
                              Uniform f32_4* %214 = OpAccessChain %23 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %47 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %179 %123 
                                                      OpStore %218 %217 
                              Uniform f32_4* %220 = OpAccessChain %23 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %47 
                                         f32 %223 = OpDot %221 %222 
                                Private f32* %224 = OpAccessChain %179 %86 
                                                      OpStore %224 %223 
                              Uniform f32_4* %226 = OpAccessChain %23 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %47 
                                         f32 %229 = OpDot %227 %228 
                                Private f32* %230 = OpAccessChain %179 %137 
                                                      OpStore %230 %229 
                                       f32_4 %231 = OpLoad %65 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %179 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFAdd %232 %234 
                                       f32_4 %236 = OpLoad %65 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %65 %237 
                                       f32_4 %238 = OpLoad %65 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpExtInst %1 40 %239 %241 
                                       f32_4 %243 = OpLoad %65 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %65 %244 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 1 1 1 
                                       f32_4 %247 = OpFNegate %246 
                              Uniform f32_4* %248 = OpAccessChain %23 %26 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpFAdd %247 %249 
                                                      OpStore %179 %250 
                                       f32_4 %252 = OpLoad %47 
                                       f32_4 %253 = OpVectorShuffle %252 %252 1 1 1 1 
                                       f32_4 %254 = OpLoad %179 
                                       f32_4 %255 = OpFMul %253 %254 
                                                      OpStore %251 %255 
                                       f32_4 %256 = OpLoad %179 
                                       f32_4 %257 = OpLoad %179 
                                       f32_4 %258 = OpFMul %256 %257 
                                                      OpStore %179 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %260 0 0 0 0 
                                       f32_4 %262 = OpFNegate %261 
                              Uniform f32_4* %263 = OpAccessChain %23 %31 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpFAdd %262 %264 
                                                      OpStore %259 %265 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %266 2 2 2 2 
                                       f32_4 %268 = OpFNegate %267 
                              Uniform f32_4* %269 = OpAccessChain %23 %39 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpFAdd %268 %270 
                                                      OpStore %9 %271 
                                       f32_4 %272 = OpLoad %259 
                                       f32_4 %273 = OpLoad %47 
                                       f32_4 %274 = OpVectorShuffle %273 %273 0 0 0 0 
                                       f32_4 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %251 
                                       f32_4 %277 = OpFAdd %275 %276 
                                                      OpStore %251 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpLoad %47 
                                       f32_4 %280 = OpVectorShuffle %279 %279 2 2 2 2 
                                       f32_4 %281 = OpFMul %278 %280 
                                       f32_4 %282 = OpLoad %251 
                                       f32_4 %283 = OpFAdd %281 %282 
                                                      OpStore %47 %283 
                                       f32_4 %284 = OpLoad %259 
                                       f32_4 %285 = OpLoad %259 
                                       f32_4 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %179 
                                       f32_4 %288 = OpFAdd %286 %287 
                                                      OpStore %179 %288 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpFMul %289 %290 
                                       f32_4 %292 = OpLoad %179 
                                       f32_4 %293 = OpFAdd %291 %292 
                                                      OpStore %9 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_4 %297 = OpExtInst %1 40 %294 %296 
                                                      OpStore %9 %297 
                                       f32_4 %298 = OpLoad %9 
                                       f32_4 %299 = OpExtInst %1 32 %298 
                                                      OpStore %179 %299 
                                       f32_4 %300 = OpLoad %9 
                              Uniform f32_4* %301 = OpAccessChain %23 %49 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpFMul %300 %302 
                                       f32_4 %305 = OpFAdd %303 %304 
                                                      OpStore %9 %305 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %307 = OpFDiv %304 %306 
                                                      OpStore %9 %307 
                                       f32_4 %308 = OpLoad %47 
                                       f32_4 %309 = OpLoad %179 
                                       f32_4 %310 = OpFMul %308 %309 
                                                      OpStore %47 %310 
                                       f32_4 %311 = OpLoad %47 
                                       f32_4 %313 = OpExtInst %1 40 %311 %312 
                                                      OpStore %47 %313 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpLoad %47 
                                       f32_4 %316 = OpFMul %314 %315 
                                                      OpStore %9 %316 
                                       f32_4 %317 = OpLoad %9 
                                       f32_3 %318 = OpVectorShuffle %317 %317 1 1 1 
                              Uniform f32_4* %320 = OpAccessChain %23 %319 %26 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFMul %318 %322 
                                       f32_4 %324 = OpLoad %47 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %47 %325 
                              Uniform f32_4* %326 = OpAccessChain %23 %319 %31 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_4 %332 = OpLoad %47 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFAdd %331 %333 
                                       f32_4 %335 = OpLoad %47 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %47 %336 
                              Uniform f32_4* %337 = OpAccessChain %23 %319 %39 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %9 
                                       f32_3 %341 = OpVectorShuffle %340 %340 2 2 2 
                                       f32_3 %342 = OpFMul %339 %341 
                                       f32_4 %343 = OpLoad %47 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %9 %347 
                              Uniform f32_4* %348 = OpAccessChain %23 %319 %49 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %9 
                                       f32_3 %352 = OpVectorShuffle %351 %351 3 3 3 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %9 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %9 %358 
                                       f32_4 %360 = OpLoad %65 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %9 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %361 %363 
                                                      OpStore vs_TEXCOORD3 %364 
                                                      OpStore vs_TEXCOORD5 %312 
                                 Output f32* %367 = OpAccessChain %90 %31 %86 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                 Output f32* %370 = OpAccessChain %90 %31 %86 
                                                      OpStore %370 %369 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %41 %59 %63 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpDecorate vs_TEXCOORD1 Location 11 
                                               OpMemberDecorate %14 0 Offset 14 
                                               OpMemberDecorate %14 1 Offset 14 
                                               OpMemberDecorate %14 2 Offset 14 
                                               OpDecorate %14 Block 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate %31 DescriptorSet 31 
                                               OpDecorate %31 Binding 31 
                                               OpDecorate %35 DescriptorSet 35 
                                               OpDecorate %35 Binding 35 
                                               OpDecorate vs_TEXCOORD0 Location 41 
                                               OpDecorate vs_TEXCOORD3 Location 59 
                                               OpDecorate %63 Location 63 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypePointer Private %6 
                           Private f32* %8 = OpVariable Private 
                                        %9 = OpTypeVector %6 3 
                                       %10 = OpTypePointer Input %9 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                       %13 = OpTypeVector %6 4 
                                       %14 = OpTypeStruct %13 %13 %13 
                                       %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                       %17 = OpTypeInt 32 1 
                                   i32 %18 = OpConstant 0 
                                       %19 = OpTypePointer Uniform %13 
                                   f32 %25 = OpConstant 3.674022E-40 
                                       %27 = OpTypePointer Private %9 
                        Private f32_3* %28 = OpVariable Private 
                                       %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %30 = OpTypePointer UniformConstant %29 
  UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                       %33 = OpTypeSampler 
                                       %34 = OpTypePointer UniformConstant %33 
              UniformConstant sampler* %35 = OpVariable UniformConstant 
                                       %37 = OpTypeSampledImage %29 
                                       %39 = OpTypeVector %6 2 
                                       %40 = OpTypePointer Input %39 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %46 = OpConstant 2 
                        Private f32_3* %51 = OpVariable Private 
                                   i32 %53 = OpConstant 1 
                 Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       %62 = OpTypePointer Output %13 
                         Output f32_4* %63 = OpVariable Output 
                                   f32 %72 = OpConstant 3.674022E-40 
                                       %73 = OpTypeInt 32 0 
                                   u32 %74 = OpConstant 3 
                                       %75 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_3 %12 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %20 = OpAccessChain %16 %18 
                                 f32_4 %21 = OpLoad %20 
                                 f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                   f32 %23 = OpDot %12 %22 
                                               OpStore %8 %23 
                                   f32 %24 = OpLoad %8 
                                   f32 %26 = OpExtInst %1 40 %24 %25 
                                               OpStore %8 %26 
                   read_only Texture2D %32 = OpLoad %31 
                               sampler %36 = OpLoad %35 
            read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                                 f32_2 %42 = OpLoad vs_TEXCOORD0 
                                 f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                                 f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                               OpStore %28 %44 
                                 f32_3 %45 = OpLoad %28 
                        Uniform f32_4* %47 = OpAccessChain %16 %46 
                                 f32_4 %48 = OpLoad %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                 f32_3 %50 = OpFMul %45 %49 
                                               OpStore %28 %50 
                                 f32_3 %52 = OpLoad %28 
                        Uniform f32_4* %54 = OpAccessChain %16 %53 
                                 f32_4 %55 = OpLoad %54 
                                 f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                 f32_3 %57 = OpFMul %52 %56 
                                               OpStore %51 %57 
                                 f32_3 %58 = OpLoad %28 
                                 f32_3 %60 = OpLoad vs_TEXCOORD3 
                                 f32_3 %61 = OpFMul %58 %60 
                                               OpStore %28 %61 
                                 f32_3 %64 = OpLoad %51 
                                   f32 %65 = OpLoad %8 
                                 f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                                 f32_3 %67 = OpFMul %64 %66 
                                 f32_3 %68 = OpLoad %28 
                                 f32_3 %69 = OpFAdd %67 %68 
                                 f32_4 %70 = OpLoad %63 
                                 f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                               OpStore %63 %71 
                           Output f32* %76 = OpAccessChain %63 %74 
                                               OpStore %76 %72 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 183
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %162 %174 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate vs_TEXCOORD1 Location 142 
                                                      OpDecorate vs_TEXCOORD5 Location 162 
                                                      OpDecorate vs_TEXCOORD6 Location 174 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %150 = OpTypePointer Uniform %6 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore vs_TEXCOORD0 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                Private f32* %148 = OpAccessChain %9 %88 
                                         f32 %149 = OpLoad %148 
                                Uniform f32* %151 = OpAccessChain %21 %28 %118 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %149 %152 
                                Private f32* %154 = OpAccessChain %9 %88 
                                                      OpStore %154 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 3 1 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %44 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 6 
                                                      OpStore %44 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad vs_TEXCOORD5 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %166 
                                       f32_4 %167 = OpLoad %44 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %44 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad vs_TEXCOORD5 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %173 
                                                      OpStore vs_TEXCOORD6 %176 
                                 Output f32* %178 = OpAccessChain %92 %28 %88 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFNegate %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                                      OpStore %181 %180 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %163 %172 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate %172 Location 172 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %154 = OpConstant 6 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %171 = OpTypePointer Output %13 
                               Output f32_4* %172 = OpVariable Output 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                              Uniform f32_4* %155 = OpAccessChain %19 %154 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %153 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %53 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %94 
                                                      OpStore %162 %170 
                                         f32 %173 = OpLoad %162 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpLoad %9 
                                       f32_3 %176 = OpFMul %174 %175 
                                       f32_4 %177 = OpLoad %172 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %172 %178 
                                 Output f32* %180 = OpAccessChain %172 %73 
                                                      OpStore %180 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 372
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %328 %353 %365 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD1 Location 156 
                                                      OpDecorate vs_TEXCOORD2 Location 159 
                                                      OpDecorate vs_TEXCOORD3 Location 328 
                                                      OpDecorate vs_TEXCOORD5 Location 353 
                                                      OpDecorate vs_TEXCOORD6 Location 365 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 13 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 11 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %162 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                              Private f32_4* %182 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_4 %214 = OpConstantComposite %213 %213 %213 %213 
                                         i32 %219 = OpConstant 4 
                                         f32 %223 = OpConstant 3.674022E-40 
                                       f32_4 %224 = OpConstantComposite %223 %223 %223 %223 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_4 %233 = OpConstantComposite %232 %232 %232 %232 
                                         i32 %240 = OpConstant 5 
                                         i32 %298 = OpConstant 6 
                                         i32 %304 = OpConstant 7 
                                         i32 %310 = OpConstant 8 
                                         i32 %316 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %336 = OpTypePointer Uniform %6 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         u32 %345 = OpConstant 3 
                                       f32_2 %349 = OpConstantComposite %343 %343 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %366 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore vs_TEXCOORD0 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore vs_TEXCOORD1 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore vs_TEXCOORD2 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFNegate %164 
                              Uniform f32_4* %166 = OpAccessChain %23 %26 
                                       f32_4 %167 = OpLoad %166 
                                       f32_4 %168 = OpFAdd %165 %167 
                                                      OpStore %162 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 1 1 1 1 
                                       f32_4 %172 = OpFNegate %171 
                              Uniform f32_4* %173 = OpAccessChain %23 %39 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpFAdd %172 %174 
                                                      OpStore %169 %175 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 2 2 2 2 
                                       f32_4 %178 = OpFNegate %177 
                              Uniform f32_4* %179 = OpAccessChain %23 %49 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpFAdd %178 %180 
                                                      OpStore %9 %181 
                                       f32_4 %183 = OpLoad %65 
                                       f32_4 %184 = OpVectorShuffle %183 %183 1 1 1 1 
                                       f32_4 %185 = OpLoad %169 
                                       f32_4 %186 = OpFMul %184 %185 
                                                      OpStore %182 %186 
                                       f32_4 %187 = OpLoad %169 
                                       f32_4 %188 = OpLoad %169 
                                       f32_4 %189 = OpFMul %187 %188 
                                                      OpStore %169 %189 
                                       f32_4 %190 = OpLoad %162 
                                       f32_4 %191 = OpLoad %162 
                                       f32_4 %192 = OpFMul %190 %191 
                                       f32_4 %193 = OpLoad %169 
                                       f32_4 %194 = OpFAdd %192 %193 
                                                      OpStore %169 %194 
                                       f32_4 %195 = OpLoad %162 
                                       f32_4 %196 = OpLoad %65 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 0 0 0 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %182 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %162 %200 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpLoad %65 
                                       f32_4 %203 = OpVectorShuffle %202 %202 2 2 2 2 
                                       f32_4 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %162 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %162 %206 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpFMul %207 %208 
                                       f32_4 %210 = OpLoad %169 
                                       f32_4 %211 = OpFAdd %209 %210 
                                                      OpStore %9 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_4 %215 = OpExtInst %1 40 %212 %214 
                                                      OpStore %9 %215 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpExtInst %1 32 %216 
                                                      OpStore %169 %217 
                                       f32_4 %218 = OpLoad %9 
                              Uniform f32_4* %220 = OpAccessChain %23 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpFMul %218 %221 
                                       f32_4 %225 = OpFAdd %222 %224 
                                                      OpStore %9 %225 
                                       f32_4 %226 = OpLoad %9 
                                       f32_4 %227 = OpFDiv %224 %226 
                                                      OpStore %9 %227 
                                       f32_4 %228 = OpLoad %162 
                                       f32_4 %229 = OpLoad %169 
                                       f32_4 %230 = OpFMul %228 %229 
                                                      OpStore %162 %230 
                                       f32_4 %231 = OpLoad %162 
                                       f32_4 %234 = OpExtInst %1 40 %231 %233 
                                                      OpStore %162 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpLoad %162 
                                       f32_4 %237 = OpFMul %235 %236 
                                                      OpStore %9 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 1 1 
                              Uniform f32_4* %241 = OpAccessChain %23 %240 %26 
                                       f32_4 %242 = OpLoad %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %162 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %162 %246 
                              Uniform f32_4* %247 = OpAccessChain %23 %240 %31 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_4 %253 = OpLoad %162 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %162 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %162 %257 
                              Uniform f32_4* %258 = OpAccessChain %23 %240 %39 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 2 2 2 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_4 %264 = OpLoad %162 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFAdd %263 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                              Uniform f32_4* %269 = OpAccessChain %23 %240 %49 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 3 3 3 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %9 %279 
                                Private f32* %280 = OpAccessChain %65 %93 
                                         f32 %281 = OpLoad %280 
                                Private f32* %282 = OpAccessChain %65 %93 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFMul %281 %283 
                                                      OpStore %140 %284 
                                Private f32* %285 = OpAccessChain %65 %124 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %65 %124 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                         f32 %290 = OpLoad %140 
                                         f32 %291 = OpFNegate %290 
                                         f32 %292 = OpFAdd %289 %291 
                                                      OpStore %140 %292 
                                       f32_4 %293 = OpLoad %65 
                                       f32_4 %294 = OpVectorShuffle %293 %293 1 2 2 0 
                                       f32_4 %295 = OpLoad %65 
                                       f32_4 %296 = OpVectorShuffle %295 %295 0 1 2 2 
                                       f32_4 %297 = OpFMul %294 %296 
                                                      OpStore %65 %297 
                              Uniform f32_4* %299 = OpAccessChain %23 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_4 %301 = OpLoad %65 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %162 %124 
                                                      OpStore %303 %302 
                              Uniform f32_4* %305 = OpAccessChain %23 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpLoad %65 
                                         f32 %308 = OpDot %306 %307 
                                Private f32* %309 = OpAccessChain %162 %93 
                                                      OpStore %309 %308 
                              Uniform f32_4* %311 = OpAccessChain %23 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %65 
                                         f32 %314 = OpDot %312 %313 
                                Private f32* %315 = OpAccessChain %162 %138 
                                                      OpStore %315 %314 
                              Uniform f32_4* %317 = OpAccessChain %23 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                         f32 %320 = OpLoad %140 
                                       f32_3 %321 = OpCompositeConstruct %320 %320 %320 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %162 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_3 %325 = OpFAdd %322 %324 
                                       f32_4 %326 = OpLoad %65 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %65 %327 
                                       f32_4 %329 = OpLoad %9 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %65 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_3 %333 = OpFAdd %330 %332 
                                                      OpStore vs_TEXCOORD3 %333 
                                Private f32* %334 = OpAccessChain %47 %93 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %337 = OpAccessChain %23 %31 %124 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                Private f32* %340 = OpAccessChain %9 %124 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %9 %124 
                                         f32 %342 = OpLoad %341 
                                         f32 %344 = OpFMul %342 %343 
                                Private f32* %346 = OpAccessChain %9 %345 
                                                      OpStore %346 %344 
                                       f32_4 %347 = OpLoad %47 
                                       f32_2 %348 = OpVectorShuffle %347 %347 0 3 
                                       f32_2 %350 = OpFMul %348 %349 
                                       f32_4 %351 = OpLoad %9 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 1 5 3 
                                                      OpStore %9 %352 
                                       f32_4 %354 = OpLoad %47 
                                       f32_2 %355 = OpVectorShuffle %354 %354 2 3 
                                       f32_4 %356 = OpLoad vs_TEXCOORD5 
                                       f32_4 %357 = OpVectorShuffle %356 %355 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_2 %359 = OpVectorShuffle %358 %358 2 2 
                                       f32_4 %360 = OpLoad %9 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 3 
                                       f32_2 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad vs_TEXCOORD5 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %364 
                                                      OpStore vs_TEXCOORD6 %233 
                                 Output f32* %367 = OpAccessChain %97 %31 %93 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFNegate %368 
                                 Output f32* %370 = OpAccessChain %97 %31 %93 
                                                      OpStore %370 %369 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 225
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %165 %189 %213 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate %213 Location 213 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 6 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 7 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 5 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                             %163 = OpTypePointer Private %13 
                              Private f32_4* %164 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %170 = OpVariable Private 
                                         i32 %176 = OpConstant 3 
                                         i32 %182 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %196 = OpConstantComposite %95 %95 %95 
                                Private f32* %204 = OpVariable Private 
                                             %212 = OpTypePointer Output %13 
                               Output f32_4* %213 = OpVariable Output 
                                             %222 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %166 = OpLoad vs_TEXCOORD1 
                                       f32_4 %167 = OpLoad %164 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %164 %168 
                                Private f32* %169 = OpAccessChain %164 %73 
                                                      OpStore %169 %96 
                              Uniform f32_4* %171 = OpAccessChain %19 %58 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %170 %31 
                                                      OpStore %175 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %164 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %170 %56 
                                                      OpStore %181 %180 
                              Uniform f32_4* %183 = OpAccessChain %19 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %164 
                                         f32 %186 = OpDot %184 %185 
                                Private f32* %187 = OpAccessChain %170 %48 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %170 
                                       f32_3 %190 = OpLoad vs_TEXCOORD3 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %164 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %164 %193 
                                       f32_4 %194 = OpLoad %164 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %197 = OpExtInst %1 40 %195 %196 
                                       f32_4 %198 = OpLoad %164 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %164 %199 
                                       f32_3 %200 = OpLoad %46 
                                       f32_4 %201 = OpLoad %164 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %46 %203 
                                       f32_3 %205 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %206 = OpAccessChain %19 %53 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 40 %210 %95 
                                                      OpStore %204 %211 
                                       f32_3 %214 = OpLoad %9 
                                         f32 %215 = OpLoad %204 
                                       f32_3 %216 = OpCompositeConstruct %215 %215 %215 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_3 %218 = OpLoad %46 
                                       f32_3 %219 = OpFAdd %217 %218 
                                       f32_4 %220 = OpLoad %213 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %213 %221 
                                 Output f32* %223 = OpAccessChain %213 %73 
                                                      OpStore %223 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 197
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %186 %188 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate vs_TEXCOORD5 Location 183 
                                                      OpDecorate vs_TEXCOORD6 Location 186 
                                                      OpDecorate %188 Flat 
                                                      OpDecorate %188 Location 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %184 = OpConstant 3.674022E-40 
                                       f32_4 %185 = OpConstantComposite %184 %184 %184 %184 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %187 = OpTypePointer Output %31 
                                 Output u32* %188 = OpVariable Output 
                                             %191 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                                      OpStore vs_TEXCOORD5 %185 
                                                      OpStore vs_TEXCOORD6 %185 
                                         i32 %189 = OpLoad %10 
                                         u32 %190 = OpBitcast %189 
                                                      OpStore %188 %190 
                                 Output f32* %192 = OpAccessChain %116 %15 %112 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                 Output f32* %195 = OpAccessChain %116 %15 %112 
                                                      OpStore %195 %194 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %58 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate %58 Location 58 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %57 = OpTypePointer Output %24 
                         Output f32_4* %58 = OpVariable Output 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                                       %68 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %59 = OpLoad %45 
                                 f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                 f32_3 %61 = OpLoad %9 
                                 f32_3 %62 = OpFMul %60 %61 
                                 f32_4 %63 = OpLoad %58 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %58 %64 
                           Output f32* %69 = OpAccessChain %58 %67 
                                               OpStore %69 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %242 %254 %257 %259 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpMemberDecorate %214 0 Offset 214 
                                                      OpMemberDecorate %214 1 Offset 214 
                                                      OpMemberDecorate %214 2 Offset 214 
                                                      OpMemberDecorate %214 3 Offset 214 
                                                      OpMemberDecorate %214 4 Offset 214 
                                                      OpMemberDecorate %214 5 Offset 214 
                                                      OpMemberDecorate %214 6 Offset 214 
                                                      OpDecorate %215 ArrayStride 215 
                                                      OpMemberDecorate %216 0 Offset 216 
                                                      OpDecorate %216 Block 
                                                      OpDecorate %218 DescriptorSet 218 
                                                      OpDecorate %218 Binding 218 
                                                      OpDecorate vs_TEXCOORD3 Location 242 
                                                      OpDecorate vs_TEXCOORD5 Location 254 
                                                      OpDecorate vs_TEXCOORD6 Location 257 
                                                      OpDecorate %259 Flat 
                                                      OpDecorate %259 Location 259 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_3* %213 = OpVariable Private 
                                             %214 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %215 = OpTypeArray %214 %40 
                                             %216 = OpTypeStruct %215 
                                             %217 = OpTypePointer Uniform %216 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %218 = OpVariable Uniform 
                                         i32 %228 = OpConstant 4 
                                         i32 %236 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %245 = OpConstant 6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %255 = OpConstant 3.674022E-40 
                                       f32_4 %256 = OpConstantComposite %255 %255 %255 %255 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %258 = OpTypePointer Output %35 
                                 Output u32* %259 = OpVariable Output 
                                             %262 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                Private f32* %192 = OpAccessChain %174 %116 
                                         f32 %193 = OpLoad %192 
                                Private f32* %194 = OpAccessChain %174 %116 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %193 %195 
                                Private f32* %197 = OpAccessChain %30 %153 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %174 %153 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %174 %153 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                Private f32* %203 = OpAccessChain %30 %153 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                         f32 %206 = OpFAdd %202 %205 
                                Private f32* %207 = OpAccessChain %30 %153 
                                                      OpStore %207 %206 
                                       f32_3 %208 = OpLoad %174 
                                       f32_4 %209 = OpVectorShuffle %208 %208 1 2 2 0 
                                       f32_3 %210 = OpLoad %174 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 1 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                                      OpStore %72 %212 
                                         i32 %219 = OpLoad %8 
                                         i32 %220 = OpSDiv %219 %25 
                              Uniform f32_4* %221 = OpAccessChain %218 %15 %220 %22 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %72 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %213 %153 
                                                      OpStore %225 %224 
                                         i32 %226 = OpLoad %8 
                                         i32 %227 = OpSDiv %226 %25 
                              Uniform f32_4* %229 = OpAccessChain %218 %15 %227 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %72 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %213 %116 
                                                      OpStore %233 %232 
                                         i32 %234 = OpLoad %8 
                                         i32 %235 = OpSDiv %234 %25 
                              Uniform f32_4* %237 = OpAccessChain %218 %15 %235 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %72 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %213 %171 
                                                      OpStore %241 %240 
                                         i32 %243 = OpLoad %8 
                                         i32 %244 = OpSDiv %243 %25 
                              Uniform f32_4* %246 = OpAccessChain %218 %15 %244 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_4 %249 = OpLoad %30 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad %213 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore vs_TEXCOORD3 %253 
                                                      OpStore vs_TEXCOORD5 %256 
                                                      OpStore vs_TEXCOORD6 %256 
                                         i32 %260 = OpLoad %10 
                                         u32 %261 = OpBitcast %260 
                                                      OpStore %259 %261 
                                 Output f32* %263 = OpAccessChain %120 %15 %116 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %120 %15 %116 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 153
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %89 %113 %140 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 89 
                                                      OpDecorate %103 DescriptorSet 103 
                                                      OpDecorate %103 Binding 103 
                                                      OpDecorate %107 DescriptorSet 107 
                                                      OpDecorate %107 Binding 107 
                                                      OpDecorate vs_TEXCOORD0 Location 113 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
       Uniform struct {f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %83 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %102 = OpTypePointer UniformConstant %101 
        UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                             %105 = OpTypeSampler 
                                             %106 = OpTypePointer UniformConstant %105 
                    UniformConstant sampler* %107 = OpVariable UniformConstant 
                                             %109 = OpTypeSampledImage %101 
                                             %111 = OpTypeVector %25 2 
                                             %112 = OpTypePointer Input %111 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %131 = OpVariable Private 
                                             %139 = OpTypePointer Output %26 
                               Output f32_4* %140 = OpVariable Output 
                                             %150 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %78 = OpAccessChain %77 %58 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                          i32 %81 = OpLoad %8 
                                          i32 %82 = OpSDiv %81 %23 
                               Uniform f32_4* %84 = OpAccessChain %46 %17 %82 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %80 %86 
                                                      OpStore %74 %87 
                                        f32_3 %88 = OpLoad %40 
                                        f32_3 %90 = OpLoad vs_TEXCOORD3 
                                        f32_3 %91 = OpFAdd %88 %90 
                                        f32_4 %92 = OpLoad %28 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %28 %93 
                                        f32_4 %94 = OpLoad %28 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                        f32_4 %99 = OpLoad %28 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %28 %100 
                         read_only Texture2D %104 = OpLoad %103 
                                     sampler %108 = OpLoad %107 
                  read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                                       f32_2 %114 = OpLoad vs_TEXCOORD0 
                                       f32_4 %115 = OpImageSampleImplicitLod %110 %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                                      OpStore %40 %116 
                                       f32_3 %117 = OpLoad %40 
                              Uniform f32_4* %118 = OpAccessChain %77 %67 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %117 %120 
                                                      OpStore %40 %121 
                                       f32_4 %122 = OpLoad %28 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFMul %123 %124 
                                       f32_4 %126 = OpLoad %28 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                                      OpStore %28 %127 
                                       f32_3 %128 = OpLoad %74 
                                       f32_3 %129 = OpLoad %40 
                                       f32_3 %130 = OpFMul %128 %129 
                                                      OpStore %74 %130 
                                       f32_3 %132 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %133 = OpAccessChain %77 %17 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                                      OpStore %131 %136 
                                         f32 %137 = OpLoad %131 
                                         f32 %138 = OpExtInst %1 40 %137 %96 
                                                      OpStore %131 %138 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %131 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                 Output f32* %151 = OpAccessChain %140 %36 
                                                      OpStore %151 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 231
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %181 %206 %218 %222 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 181 
                                                      OpDecorate vs_TEXCOORD5 Location 206 
                                                      OpDecorate vs_TEXCOORD6 Location 218 
                                                      OpDecorate %222 Flat 
                                                      OpDecorate %222 Location 222 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                             %141 = OpTypePointer Input %75 
                                Input f32_3* %142 = OpVariable Input 
                                         u32 %150 = OpConstant 0 
                                             %151 = OpTypePointer Private %23 
                                         u32 %168 = OpConstant 2 
                              Private f32_4* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %189 = OpTypePointer Uniform %23 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         u32 %198 = OpConstant 3 
                                       f32_2 %202 = OpConstantComposite %196 %196 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %219 = OpConstant 3.674022E-40 
                                       f32_4 %220 = OpConstantComposite %219 %219 %219 %219 
                                             %221 = OpTypePointer Output %31 
                                 Output u32* %222 = OpVariable Output 
                                             %225 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %133 = OpAccessChain %94 %60 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %132 %135 
                              Uniform f32_4* %137 = OpAccessChain %94 %60 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD0 %140 
                                       f32_3 %143 = OpLoad %142 
                                         i32 %144 = OpLoad %8 
                                         i32 %145 = OpSDiv %144 %42 
                              Uniform f32_4* %146 = OpAccessChain %40 %15 %145 %44 %15 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                         f32 %149 = OpDot %143 %148 
                                Private f32* %152 = OpAccessChain %68 %150 
                                                      OpStore %152 %149 
                                       f32_3 %153 = OpLoad %142 
                                         i32 %154 = OpLoad %8 
                                         i32 %155 = OpSDiv %154 %42 
                              Uniform f32_4* %156 = OpAccessChain %40 %15 %155 %44 %44 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %160 = OpAccessChain %68 %119 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %142 
                                         i32 %162 = OpLoad %8 
                                         i32 %163 = OpSDiv %162 %42 
                              Uniform f32_4* %164 = OpAccessChain %40 %15 %163 %44 %60 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %169 = OpAccessChain %68 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %68 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %68 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                Private f32* %176 = OpAccessChain %170 %150 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %170 %150 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 32 %178 
                                Private f32* %180 = OpAccessChain %170 %150 
                                                      OpStore %180 %179 
                                       f32_4 %182 = OpLoad %170 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 0 0 
                                       f32_4 %184 = OpLoad %68 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                                      OpStore vs_TEXCOORD1 %186 
                                Private f32* %187 = OpAccessChain %26 %119 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %190 = OpAccessChain %94 %15 %150 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFMul %188 %191 
                                Private f32* %193 = OpAccessChain %170 %150 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %170 %150 
                                         f32 %195 = OpLoad %194 
                                         f32 %197 = OpFMul %195 %196 
                                Private f32* %199 = OpAccessChain %170 %198 
                                                      OpStore %199 %197 
                                       f32_4 %200 = OpLoad %26 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 3 
                                       f32_2 %203 = OpFMul %201 %202 
                                       f32_4 %204 = OpLoad %170 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 1 5 3 
                                                      OpStore %170 %205 
                                       f32_4 %207 = OpLoad %26 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_4 %209 = OpLoad vs_TEXCOORD5 
                                       f32_4 %210 = OpVectorShuffle %209 %208 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %210 
                                       f32_4 %211 = OpLoad %170 
                                       f32_2 %212 = OpVectorShuffle %211 %211 2 2 
                                       f32_4 %213 = OpLoad %170 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 3 
                                       f32_2 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad vs_TEXCOORD5 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %217 
                                                      OpStore vs_TEXCOORD6 %220 
                                         i32 %223 = OpLoad %10 
                                         u32 %224 = OpBitcast %223 
                                                      OpStore %222 %224 
                                 Output f32* %226 = OpAccessChain %123 %15 %119 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                 Output f32* %229 = OpAccessChain %123 %15 %119 
                                                      OpStore %229 %228 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %163 %172 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate %172 Location 172 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %154 = OpConstant 6 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %171 = OpTypePointer Output %13 
                               Output f32_4* %172 = OpVariable Output 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                              Uniform f32_4* %155 = OpAccessChain %19 %154 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %153 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %53 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %94 
                                                      OpStore %162 %170 
                                         f32 %173 = OpLoad %162 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpLoad %9 
                                       f32_3 %176 = OpFMul %174 %175 
                                       f32_4 %177 = OpLoad %172 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %172 %178 
                                 Output f32* %180 = OpAccessChain %172 %73 
                                                      OpStore %180 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
int u_xlati5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati5 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat5.xyz;
    u_xlat2.x = u_xlat5.y * u_xlat5.y;
    u_xlat2.x = u_xlat5.x * u_xlat5.x + (-u_xlat2.x);
    u_xlat3 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    SV_Target0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 301
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %146 %191 %244 %276 %288 %292 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate vs_TEXCOORD1 Location 191 
                                                      OpMemberDecorate %216 0 Offset 216 
                                                      OpMemberDecorate %216 1 Offset 216 
                                                      OpMemberDecorate %216 2 Offset 216 
                                                      OpMemberDecorate %216 3 Offset 216 
                                                      OpMemberDecorate %216 4 Offset 216 
                                                      OpMemberDecorate %216 5 Offset 216 
                                                      OpMemberDecorate %216 6 Offset 216 
                                                      OpDecorate %217 ArrayStride 217 
                                                      OpMemberDecorate %218 0 Offset 218 
                                                      OpDecorate %218 Block 
                                                      OpDecorate %220 DescriptorSet 220 
                                                      OpDecorate %220 Binding 220 
                                                      OpDecorate vs_TEXCOORD3 Location 244 
                                                      OpDecorate vs_TEXCOORD5 Location 276 
                                                      OpDecorate vs_TEXCOORD6 Location 288 
                                                      OpDecorate %292 Flat 
                                                      OpDecorate %292 Location 292 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %145 = OpTypePointer Input %79 
                                Input f32_3* %146 = OpVariable Input 
                                         u32 %154 = OpConstant 0 
                                             %155 = OpTypePointer Private %27 
                                         u32 %172 = OpConstant 2 
                                             %174 = OpTypePointer Private %79 
                              Private f32_3* %175 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_4* %209 = OpVariable Private 
                              Private f32_3* %215 = OpVariable Private 
                                             %216 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %217 = OpTypeArray %216 %40 
                                             %218 = OpTypeStruct %217 
                                             %219 = OpTypePointer Uniform %218 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %220 = OpVariable Uniform 
                                         i32 %230 = OpConstant 4 
                                         i32 %238 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %247 = OpConstant 6 
                              Private f32_4* %256 = OpVariable Private 
                                             %259 = OpTypePointer Uniform %27 
                                         f32 %266 = OpConstant 3.674022E-40 
                                         u32 %268 = OpConstant 3 
                                       f32_2 %272 = OpConstantComposite %266 %266 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_4 %290 = OpConstantComposite %289 %289 %289 %289 
                                             %291 = OpTypePointer Output %35 
                                 Output u32* %292 = OpVariable Output 
                                             %295 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                       f32_3 %147 = OpLoad %146 
                                         i32 %148 = OpLoad %20 
                                         i32 %149 = OpSDiv %148 %46 
                              Uniform f32_4* %150 = OpAccessChain %44 %15 %149 %48 %15 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %147 %152 
                                Private f32* %156 = OpAccessChain %72 %154 
                                                      OpStore %156 %153 
                                       f32_3 %157 = OpLoad %146 
                                         i32 %158 = OpLoad %20 
                                         i32 %159 = OpSDiv %158 %46 
                              Uniform f32_4* %160 = OpAccessChain %44 %15 %159 %48 %48 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %157 %162 
                                Private f32* %164 = OpAccessChain %72 %123 
                                                      OpStore %164 %163 
                                       f32_3 %165 = OpLoad %146 
                                         i32 %166 = OpLoad %20 
                                         i32 %167 = OpSDiv %166 %46 
                              Uniform f32_4* %168 = OpAccessChain %44 %15 %167 %48 %64 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %165 %170 
                                Private f32* %173 = OpAccessChain %72 %172 
                                                      OpStore %173 %171 
                                       f32_4 %176 = OpLoad %72 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_4 %178 = OpLoad %72 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %177 %179 
                                Private f32* %181 = OpAccessChain %175 %154 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %175 %154 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpExtInst %1 32 %183 
                                Private f32* %185 = OpAccessChain %175 %154 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %175 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_4 %188 = OpLoad %72 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %187 %189 
                                                      OpStore %175 %190 
                                       f32_3 %192 = OpLoad %175 
                                                      OpStore vs_TEXCOORD1 %192 
                                Private f32* %193 = OpAccessChain %175 %123 
                                         f32 %194 = OpLoad %193 
                                Private f32* %195 = OpAccessChain %175 %123 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %194 %196 
                                Private f32* %198 = OpAccessChain %72 %154 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %175 %154 
                                         f32 %200 = OpLoad %199 
                                Private f32* %201 = OpAccessChain %175 %154 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %200 %202 
                                Private f32* %204 = OpAccessChain %72 %154 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFNegate %205 
                                         f32 %207 = OpFAdd %203 %206 
                                Private f32* %208 = OpAccessChain %72 %154 
                                                      OpStore %208 %207 
                                       f32_3 %210 = OpLoad %175 
                                       f32_4 %211 = OpVectorShuffle %210 %210 1 2 2 0 
                                       f32_3 %212 = OpLoad %175 
                                       f32_4 %213 = OpVectorShuffle %212 %212 0 1 2 2 
                                       f32_4 %214 = OpFMul %211 %213 
                                                      OpStore %209 %214 
                                         i32 %221 = OpLoad %8 
                                         i32 %222 = OpSDiv %221 %25 
                              Uniform f32_4* %223 = OpAccessChain %220 %15 %222 %22 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %209 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %215 %154 
                                                      OpStore %227 %226 
                                         i32 %228 = OpLoad %8 
                                         i32 %229 = OpSDiv %228 %25 
                              Uniform f32_4* %231 = OpAccessChain %220 %15 %229 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %209 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %215 %123 
                                                      OpStore %235 %234 
                                         i32 %236 = OpLoad %8 
                                         i32 %237 = OpSDiv %236 %25 
                              Uniform f32_4* %239 = OpAccessChain %220 %15 %237 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %209 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %215 %172 
                                                      OpStore %243 %242 
                                         i32 %245 = OpLoad %8 
                                         i32 %246 = OpSDiv %245 %25 
                              Uniform f32_4* %248 = OpAccessChain %220 %15 %246 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %72 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_3 %254 = OpLoad %215 
                                       f32_3 %255 = OpFAdd %253 %254 
                                                      OpStore vs_TEXCOORD3 %255 
                                Private f32* %257 = OpAccessChain %30 %123 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %260 = OpAccessChain %98 %15 %154 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFMul %258 %261 
                                Private f32* %263 = OpAccessChain %256 %154 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %256 %154 
                                         f32 %265 = OpLoad %264 
                                         f32 %267 = OpFMul %265 %266 
                                Private f32* %269 = OpAccessChain %256 %268 
                                                      OpStore %269 %267 
                                       f32_4 %270 = OpLoad %30 
                                       f32_2 %271 = OpVectorShuffle %270 %270 0 3 
                                       f32_2 %273 = OpFMul %271 %272 
                                       f32_4 %274 = OpLoad %256 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 3 
                                                      OpStore %256 %275 
                                       f32_4 %277 = OpLoad %30 
                                       f32_2 %278 = OpVectorShuffle %277 %277 2 3 
                                       f32_4 %279 = OpLoad vs_TEXCOORD5 
                                       f32_4 %280 = OpVectorShuffle %279 %278 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %280 
                                       f32_4 %281 = OpLoad %256 
                                       f32_2 %282 = OpVectorShuffle %281 %281 2 2 
                                       f32_4 %283 = OpLoad %256 
                                       f32_2 %284 = OpVectorShuffle %283 %283 0 3 
                                       f32_2 %285 = OpFAdd %282 %284 
                                       f32_4 %286 = OpLoad vs_TEXCOORD5 
                                       f32_4 %287 = OpVectorShuffle %286 %285 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %287 
                                                      OpStore vs_TEXCOORD6 %290 
                                         i32 %293 = OpLoad %10 
                                         u32 %294 = OpBitcast %293 
                                                      OpStore %292 %294 
                                 Output f32* %296 = OpAccessChain %127 %15 %123 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                 Output f32* %299 = OpAccessChain %127 %15 %123 
                                                      OpStore %299 %298 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %104 %131 %183 %199 %227 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %131 Flat 
                                                      OpDecorate %131 Location 131 
                                                      OpMemberDecorate %134 0 Offset 134 
                                                      OpMemberDecorate %134 1 Offset 134 
                                                      OpDecorate %134 Block 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpMemberDecorate %148 0 Offset 148 
                                                      OpMemberDecorate %148 1 Offset 148 
                                                      OpMemberDecorate %148 2 Offset 148 
                                                      OpMemberDecorate %148 3 Offset 148 
                                                      OpMemberDecorate %148 4 Offset 148 
                                                      OpMemberDecorate %148 5 Offset 148 
                                                      OpMemberDecorate %148 6 Offset 148 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %150 ArrayStride 150 
                                                      OpMemberDecorate %151 0 Offset 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate vs_TEXCOORD0 Location 183 
                                                      OpDecorate vs_TEXCOORD1 Location 199 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %16 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 4 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                             %103 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %105 = OpTypeVector %6 2 
                                             %113 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %114 = OpTypePointer UniformConstant %113 
        UniformConstant read_only Texture2D* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampler 
                                             %118 = OpTypePointer UniformConstant %117 
                    UniformConstant sampler* %119 = OpVariable UniformConstant 
                                             %121 = OpTypeSampledImage %113 
                                             %128 = OpTypePointer Private %20 
                                Private i32* %129 = OpVariable Private 
                                             %130 = OpTypePointer Input %14 
                                  Input u32* %131 = OpVariable Input 
                                             %134 = OpTypeStruct %20 %20 
                                             %135 = OpTypePointer Uniform %134 
                 Uniform struct {i32; i32;}* %136 = OpVariable Uniform 
                                             %137 = OpTypePointer Uniform %20 
                                         i32 %142 = OpConstant 7 
                                Private f32* %144 = OpVariable Private 
                                             %148 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %149 = OpSpecConstant 2 
                                             %150 = OpTypeArray %148 %149 
                                             %151 = OpTypeStruct %150 
                                             %152 = OpTypePointer Uniform %151 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %153 = OpVariable Uniform 
                                         i32 %156 = OpConstant 6 
                                         i32 %170 = OpConstant 5 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                             %182 = OpTypePointer Input %105 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_4* %198 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %204 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %234 = OpConstantComposite %99 %99 %99 
                                Private f32* %242 = OpVariable Private 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %19 %63 %53 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Uniform f32* %93 = OpAccessChain %19 %63 %78 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %35 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %35 
                                                      OpStore %102 %101 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_2 %109 = OpVectorShuffle %108 %108 3 3 
                                       f32_2 %110 = OpFDiv %107 %109 
                                       f32_3 %111 = OpLoad %43 
                                       f32_3 %112 = OpVectorShuffle %111 %110 3 4 2 
                                                      OpStore %43 %112 
                         read_only Texture2D %116 = OpLoad %115 
                                     sampler %120 = OpLoad %119 
                  read_only Texture2DSampled %122 = OpSampledImage %116 %120 
                                       f32_3 %123 = OpLoad %43 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                                         f32 %126 = OpCompositeExtract %125 0 
                                Private f32* %127 = OpAccessChain %43 %35 
                                                      OpStore %127 %126 
                                         u32 %132 = OpLoad %131 
                                         i32 %133 = OpBitcast %132 
                                Uniform i32* %138 = OpAccessChain %136 %46 
                                         i32 %139 = OpLoad %138 
                                         i32 %140 = OpIAdd %133 %139 
                                                      OpStore %129 %140 
                                         i32 %141 = OpLoad %129 
                                         i32 %143 = OpIMul %141 %142 
                                                      OpStore %129 %143 
                                Private f32* %145 = OpAccessChain %43 %35 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFNegate %146 
                                         i32 %154 = OpLoad %129 
                                         i32 %155 = OpSDiv %154 %142 
                                Uniform f32* %157 = OpAccessChain %153 %46 %155 %156 %78 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFAdd %147 %158 
                                                      OpStore %144 %159 
                                Private f32* %160 = OpAccessChain %9 %35 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpLoad %144 
                                         f32 %163 = OpFMul %161 %162 
                                Private f32* %164 = OpAccessChain %43 %35 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %35 
                                                      OpStore %167 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %169 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 6 
                                                      OpStore %9 %176 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_2 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpImageSampleImplicitLod %181 %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore %51 %186 
                                       f32_3 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %19 %156 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %187 %190 
                                                      OpStore %51 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 3 
                                       f32_3 %194 = OpLoad %51 
                                       f32_3 %195 = OpFMul %193 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 2 6 
                                                      OpStore %9 %197 
                                       f32_3 %200 = OpLoad vs_TEXCOORD1 
                                       f32_4 %201 = OpLoad %198 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %198 %202 
                                Private f32* %203 = OpAccessChain %198 %78 
                                                      OpStore %203 %100 
                                         i32 %205 = OpLoad %129 
                                         i32 %206 = OpSDiv %205 %142 
                              Uniform f32_4* %207 = OpAccessChain %153 %46 %206 %46 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %198 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %204 %35 
                                                      OpStore %211 %210 
                                         i32 %212 = OpLoad %129 
                                         i32 %213 = OpSDiv %212 %142 
                              Uniform f32_4* %214 = OpAccessChain %153 %46 %213 %58 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %198 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %204 %61 
                                                      OpStore %218 %217 
                                         i32 %219 = OpLoad %129 
                                         i32 %220 = OpSDiv %219 %142 
                              Uniform f32_4* %221 = OpAccessChain %153 %46 %220 %63 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %198 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %204 %53 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %204 
                                       f32_3 %228 = OpLoad vs_TEXCOORD3 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %198 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %198 %231 
                                       f32_4 %232 = OpLoad %198 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %235 = OpExtInst %1 40 %233 %234 
                                       f32_4 %236 = OpLoad %198 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %198 %237 
                                       f32_3 %238 = OpLoad %51 
                                       f32_4 %239 = OpLoad %198 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %51 %241 
                                       f32_3 %243 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %244 = OpAccessChain %19 %58 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 40 %248 %99 
                                                      OpStore %242 %249 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %242 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                                 Output f32* %262 = OpAccessChain %251 %78 
                                                      OpStore %262 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 197
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %186 %188 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate vs_TEXCOORD5 Location 183 
                                                      OpDecorate vs_TEXCOORD6 Location 186 
                                                      OpDecorate %188 Flat 
                                                      OpDecorate %188 Location 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %184 = OpConstant 3.674022E-40 
                                       f32_4 %185 = OpConstantComposite %184 %184 %184 %184 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %187 = OpTypePointer Output %31 
                                 Output u32* %188 = OpVariable Output 
                                             %191 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                                      OpStore vs_TEXCOORD5 %185 
                                                      OpStore vs_TEXCOORD6 %185 
                                         i32 %189 = OpLoad %10 
                                         u32 %190 = OpBitcast %189 
                                                      OpStore %188 %190 
                                 Output f32* %192 = OpAccessChain %116 %15 %112 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                 Output f32* %195 = OpAccessChain %116 %15 %112 
                                                      OpStore %195 %194 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %58 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate %58 Location 58 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %57 = OpTypePointer Output %24 
                         Output f32_4* %58 = OpVariable Output 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                                       %68 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %59 = OpLoad %45 
                                 f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                 f32_3 %61 = OpLoad %9 
                                 f32_3 %62 = OpFMul %60 %61 
                                 f32_4 %63 = OpLoad %58 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %58 %64 
                           Output f32* %69 = OpAccessChain %58 %67 
                                               OpStore %69 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
int u_xlati6;
float u_xlat19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat19 = u_xlat6.y * u_xlat6.y;
    u_xlat19 = u_xlat6.x * u_xlat6.x + (-u_xlat19);
    u_xlat2 = u_xlat6.yzzx * u_xlat6.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat2.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat6.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat6.xxxx + u_xlat4;
    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 394
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %124 %136 %137 %150 %196 %198 %376 %382 %383 %385 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %122 0 BuiltIn 122 
                                                      OpMemberDecorate %122 1 BuiltIn 122 
                                                      OpMemberDecorate %122 2 BuiltIn 122 
                                                      OpDecorate %122 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 198 
                                                      OpMemberDecorate %220 0 Offset 220 
                                                      OpMemberDecorate %220 1 Offset 220 
                                                      OpMemberDecorate %220 2 Offset 220 
                                                      OpMemberDecorate %220 3 Offset 220 
                                                      OpMemberDecorate %220 4 Offset 220 
                                                      OpMemberDecorate %220 5 Offset 220 
                                                      OpMemberDecorate %220 6 Offset 220 
                                                      OpDecorate %221 ArrayStride 221 
                                                      OpMemberDecorate %222 0 Offset 222 
                                                      OpDecorate %222 Block 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate vs_TEXCOORD3 Location 376 
                                                      OpDecorate vs_TEXCOORD5 Location 382 
                                                      OpDecorate vs_TEXCOORD6 Location 383 
                                                      OpDecorate %385 Flat 
                                                      OpDecorate %385 Location 385 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 5 
                                         u32 %120 = OpConstant 1 
                                             %121 = OpTypeArray %27 %120 
                                             %122 = OpTypeStruct %28 %27 %121 
                                             %123 = OpTypePointer Output %122 
        Output struct {f32_4; f32; f32[1];}* %124 = OpVariable Output 
                                             %132 = OpTypePointer Output %28 
                                             %134 = OpTypeVector %27 2 
                                             %135 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                         i32 %140 = OpConstant 6 
                                             %149 = OpTypePointer Input %81 
                                Input f32_3* %150 = OpVariable Input 
                                         u32 %158 = OpConstant 0 
                                             %159 = OpTypePointer Private %27 
                                         u32 %176 = OpConstant 2 
                                             %178 = OpTypePointer Private %81 
                              Private f32_3* %179 = OpVariable Private 
                                             %195 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                Private f32* %201 = OpVariable Private 
                                             %220 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %221 = OpTypeArray %220 %40 
                                             %222 = OpTypeStruct %221 
                                             %223 = OpTypePointer Uniform %222 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %224 = OpVariable Uniform 
                                         i32 %234 = OpConstant 4 
                              Private f32_4* %266 = OpVariable Private 
                              Private f32_4* %274 = OpVariable Private 
                              Private f32_4* %293 = OpVariable Private 
                                         f32 %311 = OpConstant 3.674022E-40 
                                       f32_4 %312 = OpConstantComposite %311 %311 %311 %311 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_4 %321 = OpConstantComposite %320 %320 %320 %320 
                                         f32 %329 = OpConstant 3.674022E-40 
                                       f32_4 %330 = OpConstantComposite %329 %329 %329 %329 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %384 = OpTypePointer Output %35 
                                 Output u32* %385 = OpVariable Output 
                                             %388 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %125 = OpAccessChain %101 %102 %22 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %72 
                                       f32_4 %128 = OpVectorShuffle %127 %127 3 3 3 3 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %93 
                                       f32_4 %131 = OpFAdd %129 %130 
                               Output f32_4* %133 = OpAccessChain %124 %15 
                                                      OpStore %133 %131 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                              Uniform f32_4* %141 = OpAccessChain %101 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %139 %143 
                              Uniform f32_4* %145 = OpAccessChain %101 %140 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 2 3 
                                       f32_2 %148 = OpFAdd %144 %147 
                                                      OpStore vs_TEXCOORD0 %148 
                                       f32_3 %151 = OpLoad %150 
                                         i32 %152 = OpLoad %20 
                                         i32 %153 = OpSDiv %152 %46 
                              Uniform f32_4* %154 = OpAccessChain %44 %15 %153 %48 %15 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %151 %156 
                                Private f32* %160 = OpAccessChain %72 %158 
                                                      OpStore %160 %157 
                                       f32_3 %161 = OpLoad %150 
                                         i32 %162 = OpLoad %20 
                                         i32 %163 = OpSDiv %162 %46 
                              Uniform f32_4* %164 = OpAccessChain %44 %15 %163 %48 %48 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %168 = OpAccessChain %72 %120 
                                                      OpStore %168 %167 
                                       f32_3 %169 = OpLoad %150 
                                         i32 %170 = OpLoad %20 
                                         i32 %171 = OpSDiv %170 %46 
                              Uniform f32_4* %172 = OpAccessChain %44 %15 %171 %48 %64 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %169 %174 
                                Private f32* %177 = OpAccessChain %72 %176 
                                                      OpStore %177 %175 
                                       f32_4 %180 = OpLoad %72 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %72 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %158 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %158 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %158 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %72 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %197 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %197 
                                       f32_4 %199 = OpLoad %30 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                                      OpStore vs_TEXCOORD2 %200 
                                Private f32* %202 = OpAccessChain %179 %120 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %179 %120 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %201 %206 
                                Private f32* %207 = OpAccessChain %179 %158 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %179 %158 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                         f32 %212 = OpLoad %201 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %211 %213 
                                                      OpStore %201 %214 
                                       f32_3 %215 = OpLoad %179 
                                       f32_4 %216 = OpVectorShuffle %215 %215 1 2 2 0 
                                       f32_3 %217 = OpLoad %179 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 1 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                                      OpStore %72 %219 
                                         i32 %225 = OpLoad %8 
                                         i32 %226 = OpSDiv %225 %25 
                              Uniform f32_4* %227 = OpAccessChain %224 %15 %226 %22 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %72 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %93 %158 
                                                      OpStore %231 %230 
                                         i32 %232 = OpLoad %8 
                                         i32 %233 = OpSDiv %232 %25 
                              Uniform f32_4* %235 = OpAccessChain %224 %15 %233 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpLoad %72 
                                         f32 %238 = OpDot %236 %237 
                                Private f32* %239 = OpAccessChain %93 %120 
                                                      OpStore %239 %238 
                                         i32 %240 = OpLoad %8 
                                         i32 %241 = OpSDiv %240 %25 
                              Uniform f32_4* %242 = OpAccessChain %224 %15 %241 %102 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %72 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %93 %176 
                                                      OpStore %246 %245 
                                         i32 %247 = OpLoad %8 
                                         i32 %248 = OpSDiv %247 %25 
                              Uniform f32_4* %249 = OpAccessChain %224 %15 %248 %140 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpLoad %201 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %93 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %72 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %72 %259 
                                       f32_4 %260 = OpLoad %30 
                                       f32_4 %261 = OpVectorShuffle %260 %260 1 1 1 1 
                                       f32_4 %262 = OpFNegate %261 
                              Uniform f32_4* %263 = OpAccessChain %101 %48 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpFAdd %262 %264 
                                                      OpStore %93 %265 
                                       f32_3 %267 = OpLoad %179 
                                       f32_4 %268 = OpVectorShuffle %267 %267 1 1 1 1 
                                       f32_4 %269 = OpLoad %93 
                                       f32_4 %270 = OpFMul %268 %269 
                                                      OpStore %266 %270 
                                       f32_4 %271 = OpLoad %93 
                                       f32_4 %272 = OpLoad %93 
                                       f32_4 %273 = OpFMul %271 %272 
                                                      OpStore %93 %273 
                                       f32_4 %275 = OpLoad %30 
                                       f32_4 %276 = OpVectorShuffle %275 %275 0 0 0 0 
                                       f32_4 %277 = OpFNegate %276 
                              Uniform f32_4* %278 = OpAccessChain %101 %15 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpFAdd %277 %279 
                                                      OpStore %274 %280 
                                       f32_4 %281 = OpLoad %30 
                                       f32_4 %282 = OpVectorShuffle %281 %281 2 2 2 2 
                                       f32_4 %283 = OpFNegate %282 
                              Uniform f32_4* %284 = OpAccessChain %101 %64 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpFAdd %283 %285 
                                                      OpStore %30 %286 
                                       f32_4 %287 = OpLoad %274 
                                       f32_3 %288 = OpLoad %179 
                                       f32_4 %289 = OpVectorShuffle %288 %288 0 0 0 0 
                                       f32_4 %290 = OpFMul %287 %289 
                                       f32_4 %291 = OpLoad %266 
                                       f32_4 %292 = OpFAdd %290 %291 
                                                      OpStore %266 %292 
                                       f32_4 %294 = OpLoad %30 
                                       f32_3 %295 = OpLoad %179 
                                       f32_4 %296 = OpVectorShuffle %295 %295 2 2 2 2 
                                       f32_4 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %266 
                                       f32_4 %299 = OpFAdd %297 %298 
                                                      OpStore %293 %299 
                                       f32_4 %300 = OpLoad %274 
                                       f32_4 %301 = OpLoad %274 
                                       f32_4 %302 = OpFMul %300 %301 
                                       f32_4 %303 = OpLoad %93 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %93 %304 
                                       f32_4 %305 = OpLoad %30 
                                       f32_4 %306 = OpLoad %30 
                                       f32_4 %307 = OpFMul %305 %306 
                                       f32_4 %308 = OpLoad %93 
                                       f32_4 %309 = OpFAdd %307 %308 
                                                      OpStore %30 %309 
                                       f32_4 %310 = OpLoad %30 
                                       f32_4 %313 = OpExtInst %1 40 %310 %312 
                                                      OpStore %30 %313 
                                       f32_4 %314 = OpLoad %30 
                                       f32_4 %315 = OpExtInst %1 32 %314 
                                                      OpStore %93 %315 
                                       f32_4 %316 = OpLoad %30 
                              Uniform f32_4* %317 = OpAccessChain %101 %22 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpFMul %316 %318 
                                       f32_4 %322 = OpFAdd %319 %321 
                                                      OpStore %30 %322 
                                       f32_4 %323 = OpLoad %30 
                                       f32_4 %324 = OpFDiv %321 %323 
                                                      OpStore %30 %324 
                                       f32_4 %325 = OpLoad %293 
                                       f32_4 %326 = OpLoad %93 
                                       f32_4 %327 = OpFMul %325 %326 
                                                      OpStore %293 %327 
                                       f32_4 %328 = OpLoad %293 
                                       f32_4 %331 = OpExtInst %1 40 %328 %330 
                                                      OpStore %293 %331 
                                       f32_4 %332 = OpLoad %30 
                                       f32_4 %333 = OpLoad %293 
                                       f32_4 %334 = OpFMul %332 %333 
                                                      OpStore %293 %334 
                                       f32_4 %335 = OpLoad %293 
                                       f32_3 %336 = OpVectorShuffle %335 %335 1 1 1 
                              Uniform f32_4* %337 = OpAccessChain %101 %234 %48 
                                       f32_4 %338 = OpLoad %337 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFMul %336 %339 
                                       f32_4 %341 = OpLoad %30 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %30 %342 
                              Uniform f32_4* %343 = OpAccessChain %101 %234 %15 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_4 %346 = OpLoad %293 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 0 0 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %30 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %30 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %30 %353 
                              Uniform f32_4* %354 = OpAccessChain %101 %234 %64 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %293 
                                       f32_3 %358 = OpVectorShuffle %357 %357 2 2 2 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %30 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %293 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %293 %364 
                              Uniform f32_4* %365 = OpAccessChain %101 %234 %22 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %293 
                                       f32_3 %369 = OpVectorShuffle %368 %368 3 3 3 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %293 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %370 %372 
                                       f32_4 %374 = OpLoad %293 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %293 %375 
                                       f32_4 %377 = OpLoad %72 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %293 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                                      OpStore vs_TEXCOORD3 %381 
                                                      OpStore vs_TEXCOORD5 %330 
                                                      OpStore vs_TEXCOORD6 %330 
                                         i32 %386 = OpLoad %10 
                                         u32 %387 = OpBitcast %386 
                                                      OpStore %385 %387 
                                 Output f32* %389 = OpAccessChain %124 %15 %120 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFNegate %390 
                                 Output f32* %392 = OpAccessChain %124 %15 %120 
                                                      OpStore %392 %391 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 153
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %89 %113 %140 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 89 
                                                      OpDecorate %103 DescriptorSet 103 
                                                      OpDecorate %103 Binding 103 
                                                      OpDecorate %107 DescriptorSet 107 
                                                      OpDecorate %107 Binding 107 
                                                      OpDecorate vs_TEXCOORD0 Location 113 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
       Uniform struct {f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %83 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %102 = OpTypePointer UniformConstant %101 
        UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                             %105 = OpTypeSampler 
                                             %106 = OpTypePointer UniformConstant %105 
                    UniformConstant sampler* %107 = OpVariable UniformConstant 
                                             %109 = OpTypeSampledImage %101 
                                             %111 = OpTypeVector %25 2 
                                             %112 = OpTypePointer Input %111 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %131 = OpVariable Private 
                                             %139 = OpTypePointer Output %26 
                               Output f32_4* %140 = OpVariable Output 
                                             %150 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %78 = OpAccessChain %77 %58 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                          i32 %81 = OpLoad %8 
                                          i32 %82 = OpSDiv %81 %23 
                               Uniform f32_4* %84 = OpAccessChain %46 %17 %82 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %80 %86 
                                                      OpStore %74 %87 
                                        f32_3 %88 = OpLoad %40 
                                        f32_3 %90 = OpLoad vs_TEXCOORD3 
                                        f32_3 %91 = OpFAdd %88 %90 
                                        f32_4 %92 = OpLoad %28 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %28 %93 
                                        f32_4 %94 = OpLoad %28 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                        f32_4 %99 = OpLoad %28 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %28 %100 
                         read_only Texture2D %104 = OpLoad %103 
                                     sampler %108 = OpLoad %107 
                  read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                                       f32_2 %114 = OpLoad vs_TEXCOORD0 
                                       f32_4 %115 = OpImageSampleImplicitLod %110 %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                                      OpStore %40 %116 
                                       f32_3 %117 = OpLoad %40 
                              Uniform f32_4* %118 = OpAccessChain %77 %67 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %117 %120 
                                                      OpStore %40 %121 
                                       f32_4 %122 = OpLoad %28 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpLoad %40 
                                       f32_3 %125 = OpFMul %123 %124 
                                       f32_4 %126 = OpLoad %28 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                                      OpStore %28 %127 
                                       f32_3 %128 = OpLoad %74 
                                       f32_3 %129 = OpLoad %40 
                                       f32_3 %130 = OpFMul %128 %129 
                                                      OpStore %74 %130 
                                       f32_3 %132 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %133 = OpAccessChain %77 %17 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                                      OpStore %131 %136 
                                         f32 %137 = OpLoad %131 
                                         f32 %138 = OpExtInst %1 40 %137 %96 
                                                      OpStore %131 %138 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %131 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                       f32_4 %148 = OpLoad %140 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %140 %149 
                                 Output f32* %151 = OpAccessChain %140 %36 
                                                      OpStore %151 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 231
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %181 %206 %218 %222 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 181 
                                                      OpDecorate vs_TEXCOORD5 Location 206 
                                                      OpDecorate vs_TEXCOORD6 Location 218 
                                                      OpDecorate %222 Flat 
                                                      OpDecorate %222 Location 222 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                             %141 = OpTypePointer Input %75 
                                Input f32_3* %142 = OpVariable Input 
                                         u32 %150 = OpConstant 0 
                                             %151 = OpTypePointer Private %23 
                                         u32 %168 = OpConstant 2 
                              Private f32_4* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %189 = OpTypePointer Uniform %23 
                                         f32 %196 = OpConstant 3.674022E-40 
                                         u32 %198 = OpConstant 3 
                                       f32_2 %202 = OpConstantComposite %196 %196 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %219 = OpConstant 3.674022E-40 
                                       f32_4 %220 = OpConstantComposite %219 %219 %219 %219 
                                             %221 = OpTypePointer Output %31 
                                 Output u32* %222 = OpVariable Output 
                                             %225 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %133 = OpAccessChain %94 %60 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %132 %135 
                              Uniform f32_4* %137 = OpAccessChain %94 %60 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD0 %140 
                                       f32_3 %143 = OpLoad %142 
                                         i32 %144 = OpLoad %8 
                                         i32 %145 = OpSDiv %144 %42 
                              Uniform f32_4* %146 = OpAccessChain %40 %15 %145 %44 %15 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                         f32 %149 = OpDot %143 %148 
                                Private f32* %152 = OpAccessChain %68 %150 
                                                      OpStore %152 %149 
                                       f32_3 %153 = OpLoad %142 
                                         i32 %154 = OpLoad %8 
                                         i32 %155 = OpSDiv %154 %42 
                              Uniform f32_4* %156 = OpAccessChain %40 %15 %155 %44 %44 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %160 = OpAccessChain %68 %119 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %142 
                                         i32 %162 = OpLoad %8 
                                         i32 %163 = OpSDiv %162 %42 
                              Uniform f32_4* %164 = OpAccessChain %40 %15 %163 %44 %60 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %169 = OpAccessChain %68 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %68 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %68 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                Private f32* %176 = OpAccessChain %170 %150 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %170 %150 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 32 %178 
                                Private f32* %180 = OpAccessChain %170 %150 
                                                      OpStore %180 %179 
                                       f32_4 %182 = OpLoad %170 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 0 0 
                                       f32_4 %184 = OpLoad %68 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                                      OpStore vs_TEXCOORD1 %186 
                                Private f32* %187 = OpAccessChain %26 %119 
                                         f32 %188 = OpLoad %187 
                                Uniform f32* %190 = OpAccessChain %94 %15 %150 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFMul %188 %191 
                                Private f32* %193 = OpAccessChain %170 %150 
                                                      OpStore %193 %192 
                                Private f32* %194 = OpAccessChain %170 %150 
                                         f32 %195 = OpLoad %194 
                                         f32 %197 = OpFMul %195 %196 
                                Private f32* %199 = OpAccessChain %170 %198 
                                                      OpStore %199 %197 
                                       f32_4 %200 = OpLoad %26 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 3 
                                       f32_2 %203 = OpFMul %201 %202 
                                       f32_4 %204 = OpLoad %170 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 1 5 3 
                                                      OpStore %170 %205 
                                       f32_4 %207 = OpLoad %26 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_4 %209 = OpLoad vs_TEXCOORD5 
                                       f32_4 %210 = OpVectorShuffle %209 %208 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %210 
                                       f32_4 %211 = OpLoad %170 
                                       f32_2 %212 = OpVectorShuffle %211 %211 2 2 
                                       f32_4 %213 = OpLoad %170 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 3 
                                       f32_2 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad vs_TEXCOORD5 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %217 
                                                      OpStore vs_TEXCOORD6 %220 
                                         i32 %223 = OpLoad %10 
                                         u32 %224 = OpBitcast %223 
                                                      OpStore %222 %224 
                                 Output f32* %226 = OpAccessChain %123 %15 %119 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                 Output f32* %229 = OpAccessChain %123 %15 %119 
                                                      OpStore %229 %228 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %163 %172 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate %172 Location 172 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %154 = OpConstant 6 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %171 = OpTypePointer Output %13 
                               Output f32_4* %172 = OpVariable Output 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                              Uniform f32_4* %155 = OpAccessChain %19 %154 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %153 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %53 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %94 
                                                      OpStore %162 %170 
                                         f32 %173 = OpLoad %162 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpLoad %9 
                                       f32_3 %176 = OpFMul %174 %175 
                                       f32_4 %177 = OpLoad %172 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %172 %178 
                                 Output f32* %180 = OpAccessChain %172 %73 
                                                      OpStore %180 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat22 = u_xlat7.y * u_xlat7.y;
    u_xlat22 = u_xlat7.x * u_xlat7.x + (-u_xlat22);
    u_xlat3 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    u_xlat3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat7.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat7.xxxx + u_xlat5;
    u_xlat0 = u_xlat1 * u_xlat7.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    SV_Target0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 426
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %137 %138 %150 %196 %198 %378 %403 %415 %417 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpMemberDecorate %99 7 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 198 
                                                      OpMemberDecorate %221 0 Offset 221 
                                                      OpMemberDecorate %221 1 Offset 221 
                                                      OpMemberDecorate %221 2 Offset 221 
                                                      OpMemberDecorate %221 3 Offset 221 
                                                      OpMemberDecorate %221 4 Offset 221 
                                                      OpMemberDecorate %221 5 Offset 221 
                                                      OpMemberDecorate %221 6 Offset 221 
                                                      OpDecorate %222 ArrayStride 222 
                                                      OpMemberDecorate %223 0 Offset 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate vs_TEXCOORD3 Location 378 
                                                      OpDecorate vs_TEXCOORD5 Location 403 
                                                      OpDecorate vs_TEXCOORD6 Location 415 
                                                      OpDecorate %417 Flat 
                                                      OpDecorate %417 Location 417 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 6 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypeVector %27 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %149 = OpTypePointer Input %81 
                                Input f32_3* %150 = OpVariable Input 
                                         u32 %158 = OpConstant 0 
                                             %159 = OpTypePointer Private %27 
                                         u32 %176 = OpConstant 2 
                                             %178 = OpTypePointer Private %81 
                              Private f32_3* %179 = OpVariable Private 
                                             %195 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                Private f32* %201 = OpVariable Private 
                              Private f32_4* %220 = OpVariable Private 
                                             %221 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %222 = OpTypeArray %221 %40 
                                             %223 = OpTypeStruct %222 
                                             %224 = OpTypePointer Uniform %223 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %225 = OpVariable Uniform 
                                         i32 %235 = OpConstant 4 
                                         i32 %243 = OpConstant 5 
                              Private f32_4* %268 = OpVariable Private 
                              Private f32_4* %276 = OpVariable Private 
                              Private f32_4* %295 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_4 %314 = OpConstantComposite %313 %313 %313 %313 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_4 %323 = OpConstantComposite %322 %322 %322 %322 
                                         f32 %331 = OpConstant 3.674022E-40 
                                       f32_4 %332 = OpConstantComposite %331 %331 %331 %331 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %386 = OpTypePointer Uniform %27 
                                         f32 %393 = OpConstant 3.674022E-40 
                                         u32 %395 = OpConstant 3 
                                       f32_2 %399 = OpConstantComposite %393 %393 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %416 = OpTypePointer Output %35 
                                 Output u32* %417 = OpVariable Output 
                                             %420 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %141 = OpAccessChain %101 %25 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %140 %143 
                              Uniform f32_4* %145 = OpAccessChain %101 %25 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 2 3 
                                       f32_2 %148 = OpFAdd %144 %147 
                                                      OpStore vs_TEXCOORD0 %148 
                                       f32_3 %151 = OpLoad %150 
                                         i32 %152 = OpLoad %20 
                                         i32 %153 = OpSDiv %152 %46 
                              Uniform f32_4* %154 = OpAccessChain %44 %15 %153 %48 %15 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %151 %156 
                                Private f32* %160 = OpAccessChain %93 %158 
                                                      OpStore %160 %157 
                                       f32_3 %161 = OpLoad %150 
                                         i32 %162 = OpLoad %20 
                                         i32 %163 = OpSDiv %162 %46 
                              Uniform f32_4* %164 = OpAccessChain %44 %15 %163 %48 %48 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %168 = OpAccessChain %93 %127 
                                                      OpStore %168 %167 
                                       f32_3 %169 = OpLoad %150 
                                         i32 %170 = OpLoad %20 
                                         i32 %171 = OpSDiv %170 %46 
                              Uniform f32_4* %172 = OpAccessChain %44 %15 %171 %48 %64 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %169 %174 
                                Private f32* %177 = OpAccessChain %93 %176 
                                                      OpStore %177 %175 
                                       f32_4 %180 = OpLoad %93 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %93 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %158 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %158 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %158 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %93 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %197 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %197 
                                       f32_4 %199 = OpLoad %30 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                                      OpStore vs_TEXCOORD2 %200 
                                Private f32* %202 = OpAccessChain %179 %127 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %179 %127 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %201 %206 
                                Private f32* %207 = OpAccessChain %179 %158 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %179 %158 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                         f32 %212 = OpLoad %201 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %211 %213 
                                                      OpStore %201 %214 
                                       f32_3 %215 = OpLoad %179 
                                       f32_4 %216 = OpVectorShuffle %215 %215 1 2 2 0 
                                       f32_3 %217 = OpLoad %179 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 1 2 2 
                                       f32_4 %219 = OpFMul %216 %218 
                                                      OpStore %93 %219 
                                         i32 %226 = OpLoad %8 
                                         i32 %227 = OpSDiv %226 %25 
                              Uniform f32_4* %228 = OpAccessChain %225 %15 %227 %22 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %93 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %220 %158 
                                                      OpStore %232 %231 
                                         i32 %233 = OpLoad %8 
                                         i32 %234 = OpSDiv %233 %25 
                              Uniform f32_4* %236 = OpAccessChain %225 %15 %234 %235 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpLoad %93 
                                         f32 %239 = OpDot %237 %238 
                                Private f32* %240 = OpAccessChain %220 %127 
                                                      OpStore %240 %239 
                                         i32 %241 = OpLoad %8 
                                         i32 %242 = OpSDiv %241 %25 
                              Uniform f32_4* %244 = OpAccessChain %225 %15 %242 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_4 %246 = OpLoad %93 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %220 %176 
                                                      OpStore %248 %247 
                                         i32 %249 = OpLoad %8 
                                         i32 %250 = OpSDiv %249 %25 
                              Uniform f32_4* %251 = OpAccessChain %225 %15 %250 %102 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpLoad %201 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %220 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %93 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %93 %261 
                                       f32_4 %262 = OpLoad %30 
                                       f32_4 %263 = OpVectorShuffle %262 %262 1 1 1 1 
                                       f32_4 %264 = OpFNegate %263 
                              Uniform f32_4* %265 = OpAccessChain %101 %64 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpFAdd %264 %266 
                                                      OpStore %220 %267 
                                       f32_3 %269 = OpLoad %179 
                                       f32_4 %270 = OpVectorShuffle %269 %269 1 1 1 1 
                                       f32_4 %271 = OpLoad %220 
                                       f32_4 %272 = OpFMul %270 %271 
                                                      OpStore %268 %272 
                                       f32_4 %273 = OpLoad %220 
                                       f32_4 %274 = OpLoad %220 
                                       f32_4 %275 = OpFMul %273 %274 
                                                      OpStore %220 %275 
                                       f32_4 %277 = OpLoad %30 
                                       f32_4 %278 = OpVectorShuffle %277 %277 0 0 0 0 
                                       f32_4 %279 = OpFNegate %278 
                              Uniform f32_4* %280 = OpAccessChain %101 %48 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpFAdd %279 %281 
                                                      OpStore %276 %282 
                                       f32_4 %283 = OpLoad %30 
                                       f32_4 %284 = OpVectorShuffle %283 %283 2 2 2 2 
                                       f32_4 %285 = OpFNegate %284 
                              Uniform f32_4* %286 = OpAccessChain %101 %22 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFAdd %285 %287 
                                                      OpStore %30 %288 
                                       f32_4 %289 = OpLoad %276 
                                       f32_3 %290 = OpLoad %179 
                                       f32_4 %291 = OpVectorShuffle %290 %290 0 0 0 0 
                                       f32_4 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %268 
                                       f32_4 %294 = OpFAdd %292 %293 
                                                      OpStore %268 %294 
                                       f32_4 %296 = OpLoad %30 
                                       f32_3 %297 = OpLoad %179 
                                       f32_4 %298 = OpVectorShuffle %297 %297 2 2 2 2 
                                       f32_4 %299 = OpFMul %296 %298 
                                       f32_4 %300 = OpLoad %268 
                                       f32_4 %301 = OpFAdd %299 %300 
                                                      OpStore %295 %301 
                                       f32_4 %302 = OpLoad %276 
                                       f32_4 %303 = OpLoad %276 
                                       f32_4 %304 = OpFMul %302 %303 
                                       f32_4 %305 = OpLoad %220 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %220 %306 
                                       f32_4 %307 = OpLoad %30 
                                       f32_4 %308 = OpLoad %30 
                                       f32_4 %309 = OpFMul %307 %308 
                                       f32_4 %310 = OpLoad %220 
                                       f32_4 %311 = OpFAdd %309 %310 
                                                      OpStore %30 %311 
                                       f32_4 %312 = OpLoad %30 
                                       f32_4 %315 = OpExtInst %1 40 %312 %314 
                                                      OpStore %30 %315 
                                       f32_4 %316 = OpLoad %30 
                                       f32_4 %317 = OpExtInst %1 32 %316 
                                                      OpStore %220 %317 
                                       f32_4 %318 = OpLoad %30 
                              Uniform f32_4* %319 = OpAccessChain %101 %235 
                                       f32_4 %320 = OpLoad %319 
                                       f32_4 %321 = OpFMul %318 %320 
                                       f32_4 %324 = OpFAdd %321 %323 
                                                      OpStore %30 %324 
                                       f32_4 %325 = OpLoad %30 
                                       f32_4 %326 = OpFDiv %323 %325 
                                                      OpStore %30 %326 
                                       f32_4 %327 = OpLoad %295 
                                       f32_4 %328 = OpLoad %220 
                                       f32_4 %329 = OpFMul %327 %328 
                                                      OpStore %295 %329 
                                       f32_4 %330 = OpLoad %295 
                                       f32_4 %333 = OpExtInst %1 40 %330 %332 
                                                      OpStore %295 %333 
                                       f32_4 %334 = OpLoad %30 
                                       f32_4 %335 = OpLoad %295 
                                       f32_4 %336 = OpFMul %334 %335 
                                                      OpStore %295 %336 
                                       f32_4 %337 = OpLoad %295 
                                       f32_3 %338 = OpVectorShuffle %337 %337 1 1 1 
                              Uniform f32_4* %339 = OpAccessChain %101 %243 %48 
                                       f32_4 %340 = OpLoad %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFMul %338 %341 
                                       f32_4 %343 = OpLoad %30 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %30 %344 
                              Uniform f32_4* %345 = OpAccessChain %101 %243 %15 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %295 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 0 0 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %30 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFAdd %350 %352 
                                       f32_4 %354 = OpLoad %30 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %30 %355 
                              Uniform f32_4* %356 = OpAccessChain %101 %243 %64 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_4 %359 = OpLoad %295 
                                       f32_3 %360 = OpVectorShuffle %359 %359 2 2 2 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %30 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %295 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %295 %366 
                              Uniform f32_4* %367 = OpAccessChain %101 %243 %22 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %295 
                                       f32_3 %371 = OpVectorShuffle %370 %370 3 3 3 
                                       f32_3 %372 = OpFMul %369 %371 
                                       f32_4 %373 = OpLoad %295 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %372 %374 
                                       f32_4 %376 = OpLoad %295 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %295 %377 
                                       f32_4 %379 = OpLoad %93 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_4 %381 = OpLoad %295 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %380 %382 
                                                      OpStore vs_TEXCOORD3 %383 
                                Private f32* %384 = OpAccessChain %72 %127 
                                         f32 %385 = OpLoad %384 
                                Uniform f32* %387 = OpAccessChain %101 %15 %158 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpFMul %385 %388 
                                Private f32* %390 = OpAccessChain %295 %158 
                                                      OpStore %390 %389 
                                Private f32* %391 = OpAccessChain %295 %158 
                                         f32 %392 = OpLoad %391 
                                         f32 %394 = OpFMul %392 %393 
                                Private f32* %396 = OpAccessChain %295 %395 
                                                      OpStore %396 %394 
                                       f32_4 %397 = OpLoad %72 
                                       f32_2 %398 = OpVectorShuffle %397 %397 0 3 
                                       f32_2 %400 = OpFMul %398 %399 
                                       f32_4 %401 = OpLoad %295 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 1 5 3 
                                                      OpStore %295 %402 
                                       f32_4 %404 = OpLoad %72 
                                       f32_2 %405 = OpVectorShuffle %404 %404 2 3 
                                       f32_4 %406 = OpLoad vs_TEXCOORD5 
                                       f32_4 %407 = OpVectorShuffle %406 %405 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %407 
                                       f32_4 %408 = OpLoad %295 
                                       f32_2 %409 = OpVectorShuffle %408 %408 2 2 
                                       f32_4 %410 = OpLoad %295 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 3 
                                       f32_2 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad vs_TEXCOORD5 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %414 
                                                      OpStore vs_TEXCOORD6 %332 
                                         i32 %418 = OpLoad %10 
                                         u32 %419 = OpBitcast %418 
                                                      OpStore %417 %419 
                                 Output f32* %421 = OpAccessChain %131 %15 %127 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFNegate %422 
                                 Output f32* %424 = OpAccessChain %131 %15 %127 
                                                      OpStore %424 %423 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %104 %131 %183 %199 %227 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %131 Flat 
                                                      OpDecorate %131 Location 131 
                                                      OpMemberDecorate %134 0 Offset 134 
                                                      OpMemberDecorate %134 1 Offset 134 
                                                      OpDecorate %134 Block 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpMemberDecorate %148 0 Offset 148 
                                                      OpMemberDecorate %148 1 Offset 148 
                                                      OpMemberDecorate %148 2 Offset 148 
                                                      OpMemberDecorate %148 3 Offset 148 
                                                      OpMemberDecorate %148 4 Offset 148 
                                                      OpMemberDecorate %148 5 Offset 148 
                                                      OpMemberDecorate %148 6 Offset 148 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %150 ArrayStride 150 
                                                      OpMemberDecorate %151 0 Offset 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate vs_TEXCOORD0 Location 183 
                                                      OpDecorate vs_TEXCOORD1 Location 199 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %16 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 4 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                             %103 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %105 = OpTypeVector %6 2 
                                             %113 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %114 = OpTypePointer UniformConstant %113 
        UniformConstant read_only Texture2D* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampler 
                                             %118 = OpTypePointer UniformConstant %117 
                    UniformConstant sampler* %119 = OpVariable UniformConstant 
                                             %121 = OpTypeSampledImage %113 
                                             %128 = OpTypePointer Private %20 
                                Private i32* %129 = OpVariable Private 
                                             %130 = OpTypePointer Input %14 
                                  Input u32* %131 = OpVariable Input 
                                             %134 = OpTypeStruct %20 %20 
                                             %135 = OpTypePointer Uniform %134 
                 Uniform struct {i32; i32;}* %136 = OpVariable Uniform 
                                             %137 = OpTypePointer Uniform %20 
                                         i32 %142 = OpConstant 7 
                                Private f32* %144 = OpVariable Private 
                                             %148 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %149 = OpSpecConstant 2 
                                             %150 = OpTypeArray %148 %149 
                                             %151 = OpTypeStruct %150 
                                             %152 = OpTypePointer Uniform %151 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %153 = OpVariable Uniform 
                                         i32 %156 = OpConstant 6 
                                         i32 %170 = OpConstant 5 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                             %182 = OpTypePointer Input %105 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                              Private f32_4* %198 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %204 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %234 = OpConstantComposite %99 %99 %99 
                                Private f32* %242 = OpVariable Private 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %19 %63 %53 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Uniform f32* %93 = OpAccessChain %19 %63 %78 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %35 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %35 
                                                      OpStore %102 %101 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_2 %109 = OpVectorShuffle %108 %108 3 3 
                                       f32_2 %110 = OpFDiv %107 %109 
                                       f32_3 %111 = OpLoad %43 
                                       f32_3 %112 = OpVectorShuffle %111 %110 3 4 2 
                                                      OpStore %43 %112 
                         read_only Texture2D %116 = OpLoad %115 
                                     sampler %120 = OpLoad %119 
                  read_only Texture2DSampled %122 = OpSampledImage %116 %120 
                                       f32_3 %123 = OpLoad %43 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                                         f32 %126 = OpCompositeExtract %125 0 
                                Private f32* %127 = OpAccessChain %43 %35 
                                                      OpStore %127 %126 
                                         u32 %132 = OpLoad %131 
                                         i32 %133 = OpBitcast %132 
                                Uniform i32* %138 = OpAccessChain %136 %46 
                                         i32 %139 = OpLoad %138 
                                         i32 %140 = OpIAdd %133 %139 
                                                      OpStore %129 %140 
                                         i32 %141 = OpLoad %129 
                                         i32 %143 = OpIMul %141 %142 
                                                      OpStore %129 %143 
                                Private f32* %145 = OpAccessChain %43 %35 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFNegate %146 
                                         i32 %154 = OpLoad %129 
                                         i32 %155 = OpSDiv %154 %142 
                                Uniform f32* %157 = OpAccessChain %153 %46 %155 %156 %78 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFAdd %147 %158 
                                                      OpStore %144 %159 
                                Private f32* %160 = OpAccessChain %9 %35 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpLoad %144 
                                         f32 %163 = OpFMul %161 %162 
                                Private f32* %164 = OpAccessChain %43 %35 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %35 
                                                      OpStore %167 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %169 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 6 
                                                      OpStore %9 %176 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_2 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpImageSampleImplicitLod %181 %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore %51 %186 
                                       f32_3 %187 = OpLoad %51 
                              Uniform f32_4* %188 = OpAccessChain %19 %156 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %187 %190 
                                                      OpStore %51 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 3 
                                       f32_3 %194 = OpLoad %51 
                                       f32_3 %195 = OpFMul %193 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 2 6 
                                                      OpStore %9 %197 
                                       f32_3 %200 = OpLoad vs_TEXCOORD1 
                                       f32_4 %201 = OpLoad %198 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %198 %202 
                                Private f32* %203 = OpAccessChain %198 %78 
                                                      OpStore %203 %100 
                                         i32 %205 = OpLoad %129 
                                         i32 %206 = OpSDiv %205 %142 
                              Uniform f32_4* %207 = OpAccessChain %153 %46 %206 %46 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %198 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %204 %35 
                                                      OpStore %211 %210 
                                         i32 %212 = OpLoad %129 
                                         i32 %213 = OpSDiv %212 %142 
                              Uniform f32_4* %214 = OpAccessChain %153 %46 %213 %58 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %198 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %204 %61 
                                                      OpStore %218 %217 
                                         i32 %219 = OpLoad %129 
                                         i32 %220 = OpSDiv %219 %142 
                              Uniform f32_4* %221 = OpAccessChain %153 %46 %220 %63 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %198 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %204 %53 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %204 
                                       f32_3 %228 = OpLoad vs_TEXCOORD3 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %198 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %198 %231 
                                       f32_4 %232 = OpLoad %198 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %235 = OpExtInst %1 40 %233 %234 
                                       f32_4 %236 = OpLoad %198 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %198 %237 
                                       f32_3 %238 = OpLoad %51 
                                       f32_4 %239 = OpLoad %198 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %51 %241 
                                       f32_3 %243 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %244 = OpAccessChain %19 %58 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 40 %248 %99 
                                                      OpStore %242 %249 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %242 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                                 Output f32* %262 = OpAccessChain %251 %78 
                                                      OpStore %262 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 191
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate vs_TEXCOORD5 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %185 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD4 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                                      OpStore vs_TEXCOORD5 %185 
                                 Output f32* %186 = OpAccessChain %92 %28 %88 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                                      OpStore %189 %188 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 90
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %47 %68 %74 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %74 Location 74 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 %24 %24 %24 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 3 
                                              %33 = OpTypePointer Uniform %24 
                                          i32 %39 = OpConstant 2 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 0 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 1 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %73 = OpTypePointer Output %24 
                                Output f32_4* %74 = OpVariable Output 
                                              %85 = OpTypeInt 32 0 
                                          u32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %38 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %30 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %38 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %30 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %30 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                                      OpStore %45 %69 
                                          f32 %70 = OpLoad %45 
                                          f32 %72 = OpExtInst %1 43 %70 %55 %71 
                                                      OpStore %45 %72 
                                          f32 %75 = OpLoad %45 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_3 %77 = OpLoad %9 
                                        f32_3 %78 = OpFMul %76 %77 
                               Uniform f32_4* %79 = OpAccessChain %30 %61 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFAdd %78 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                  Output f32* %88 = OpAccessChain %74 %86 
                                                      OpStore %88 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 279
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %153 %188 %267 %272 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 188 
                                                      OpDecorate vs_TEXCOORD3 Location 267 
                                                      OpDecorate vs_TEXCOORD5 Location 272 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                             %152 = OpTypePointer Input %51 
                                Input f32_3* %153 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %173 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_4* %207 = OpVariable Private 
                                             %213 = OpTypePointer Private %51 
                              Private f32_3* %214 = OpVariable Private 
                                         i32 %215 = OpConstant 4 
                                         i32 %221 = OpConstant 5 
                                         i32 %227 = OpConstant 6 
                                         i32 %233 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                       f32_3 %270 = OpConstantComposite %122 %122 %122 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %273 = OpConstantComposite %122 %122 %122 %122 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %9 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %9 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %9 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %9 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %9 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %9 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %9 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                              Uniform f32_4* %156 = OpAccessChain %21 %155 %29 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %154 %158 
                                Private f32* %160 = OpAccessChain %9 %106 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %153 
                              Uniform f32_4* %162 = OpAccessChain %21 %155 %24 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                         f32 %165 = OpDot %161 %164 
                                Private f32* %166 = OpAccessChain %9 %90 
                                                      OpStore %166 %165 
                                       f32_3 %167 = OpLoad %153 
                              Uniform f32_4* %168 = OpAccessChain %21 %155 %37 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %9 %98 
                                                      OpStore %172 %171 
                                       f32_4 %174 = OpLoad %9 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %175 %177 
                                                      OpStore %173 %178 
                                         f32 %179 = OpLoad %173 
                                         f32 %180 = OpExtInst %1 32 %179 
                                                      OpStore %173 %180 
                                         f32 %181 = OpLoad %173 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                                      OpStore vs_TEXCOORD1 %190 
                                Private f32* %191 = OpAccessChain %9 %90 
                                         f32 %192 = OpLoad %191 
                                Private f32* %193 = OpAccessChain %9 %90 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %192 %194 
                                Private f32* %196 = OpAccessChain %45 %106 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %9 %106 
                                         f32 %198 = OpLoad %197 
                                Private f32* %199 = OpAccessChain %9 %106 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %198 %200 
                                Private f32* %202 = OpAccessChain %45 %106 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %201 %204 
                                Private f32* %206 = OpAccessChain %45 %106 
                                                      OpStore %206 %205 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpVectorShuffle %208 %208 1 2 2 0 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpVectorShuffle %210 %210 0 1 2 2 
                                       f32_4 %212 = OpFMul %209 %211 
                                                      OpStore %207 %212 
                              Uniform f32_4* %216 = OpAccessChain %21 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %207 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %214 %106 
                                                      OpStore %220 %219 
                              Uniform f32_4* %222 = OpAccessChain %21 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %207 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %214 %90 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %21 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_4 %230 = OpLoad %207 
                                         f32 %231 = OpDot %229 %230 
                                Private f32* %232 = OpAccessChain %214 %98 
                                                      OpStore %232 %231 
                              Uniform f32_4* %234 = OpAccessChain %21 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_4 %237 = OpLoad %45 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_3 %240 = OpLoad %214 
                                       f32_3 %241 = OpFAdd %239 %240 
                                       f32_4 %242 = OpLoad %45 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %45 %243 
                                Private f32* %244 = OpAccessChain %9 %133 
                                                      OpStore %244 %111 
                              Uniform f32_4* %245 = OpAccessChain %21 %24 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %207 %106 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %37 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %207 %90 
                                                      OpStore %254 %253 
                              Uniform f32_4* %255 = OpAccessChain %21 %47 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %9 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %207 %98 
                                                      OpStore %259 %258 
                                       f32_4 %260 = OpLoad %45 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_4 %262 = OpLoad %207 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %9 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %271 = OpExtInst %1 40 %269 %270 
                                                      OpStore vs_TEXCOORD3 %271 
                                                      OpStore vs_TEXCOORD5 %273 
                                 Output f32* %274 = OpAccessChain %94 %29 %90 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFNegate %275 
                                 Output f32* %277 = OpAccessChain %94 %29 %90 
                                                      OpStore %277 %276 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %46 %64 %82 %88 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD1 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 46 
                                                      OpDecorate vs_TEXCOORD3 Location 64 
                                                      OpDecorate vs_TEXCOORD4 Location 82 
                                                      OpDecorate %88 Location 88 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeStruct %13 %13 %13 %13 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Uniform %13 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %30 = OpConstant 3.674022E-40 
                               Private f32_3* %33 = OpVariable Private 
                                              %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %35 = OpTypePointer UniformConstant %34 
         UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                              %38 = OpTypeSampler 
                                              %39 = OpTypePointer UniformConstant %38 
                     UniformConstant sampler* %40 = OpVariable UniformConstant 
                                              %42 = OpTypeSampledImage %34 
                                              %44 = OpTypeVector %6 2 
                                              %45 = OpTypePointer Input %44 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %51 = OpConstant 3 
                               Private f32_3* %56 = OpVariable Private 
                                          i32 %58 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          i32 %74 = OpConstant 1 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %87 = OpTypePointer Output %13 
                                Output f32_4* %88 = OpVariable Output 
                                          u32 %99 = OpConstant 3 
                                             %100 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                          f32 %23 = OpDot %12 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %23 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                          f32 %31 = OpExtInst %1 40 %29 %30 
                                 Private f32* %32 = OpAccessChain %9 %25 
                                                      OpStore %32 %31 
                          read_only Texture2D %37 = OpLoad %36 
                                      sampler %41 = OpLoad %40 
                   read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                        f32_2 %47 = OpLoad vs_TEXCOORD0 
                                        f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                                      OpStore %33 %49 
                                        f32_3 %50 = OpLoad %33 
                               Uniform f32_4* %52 = OpAccessChain %16 %51 
                                        f32_4 %53 = OpLoad %52 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpFMul %50 %54 
                                                      OpStore %33 %55 
                                        f32_3 %57 = OpLoad %33 
                               Uniform f32_4* %59 = OpAccessChain %16 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFMul %57 %61 
                                                      OpStore %56 %62 
                                        f32_3 %63 = OpLoad %33 
                                        f32_3 %65 = OpLoad vs_TEXCOORD3 
                                        f32_3 %66 = OpFMul %63 %65 
                                                      OpStore %33 %66 
                                        f32_3 %67 = OpLoad %56 
                                        f32_3 %68 = OpLoad %9 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 0 0 
                                        f32_3 %70 = OpFMul %67 %69 
                                        f32_3 %71 = OpLoad %33 
                                        f32_3 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                                        f32_3 %73 = OpLoad %9 
                               Uniform f32_4* %75 = OpAccessChain %16 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %79 = OpFAdd %73 %78 
                                                      OpStore %9 %79 
                                          f32 %83 = OpLoad vs_TEXCOORD4 
                                                      OpStore %80 %83 
                                          f32 %84 = OpLoad %80 
                                          f32 %86 = OpExtInst %1 43 %84 %30 %85 
                                                      OpStore %80 %86 
                                          f32 %89 = OpLoad %80 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpLoad %9 
                                        f32_3 %92 = OpFMul %90 %91 
                               Uniform f32_4* %93 = OpAccessChain %16 %74 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %88 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %88 %98 
                                 Output f32* %101 = OpAccessChain %88 %99 
                                                      OpStore %101 %85 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4 = inversesqrt(u_xlat4);
    vs_TEXCOORD1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat2 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 190
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %97 %102 %109 %110 %123 %151 %182 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 97 
                                                      OpDecorate vs_TEXCOORD5 Location 102 
                                                      OpDecorate vs_TEXCOORD0 Location 109 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %123 Location 123 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD6 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                             %108 = OpTypePointer Output %103 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %110 = OpVariable Input 
                                         i32 %113 = OpConstant 4 
                                             %122 = OpTypePointer Input %50 
                                Input f32_3* %123 = OpVariable Input 
                                         u32 %129 = OpConstant 0 
                                Private f32* %143 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %157 = OpVariable Private 
                                             %160 = OpTypePointer Uniform %6 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                                      OpStore vs_TEXCOORD4 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %107 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFMul %112 %116 
                              Uniform f32_4* %118 = OpAccessChain %21 %113 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
                                       f32_2 %121 = OpFAdd %117 %120 
                                                      OpStore vs_TEXCOORD0 %121 
                                       f32_3 %124 = OpLoad %123 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %28 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %44 %129 
                                                      OpStore %130 %128 
                                       f32_3 %131 = OpLoad %123 
                              Uniform f32_4* %132 = OpAccessChain %21 %36 %23 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                         f32 %135 = OpDot %131 %134 
                                Private f32* %136 = OpAccessChain %44 %88 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %123 
                              Uniform f32_4* %138 = OpAccessChain %21 %36 %36 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %44 %98 
                                                      OpStore %142 %141 
                                       f32_4 %144 = OpLoad %44 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %44 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %143 %148 
                                         f32 %149 = OpLoad %143 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %143 %150 
                                         f32 %152 = OpLoad %143 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_4 %154 = OpLoad %44 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %153 %155 
                                                      OpStore vs_TEXCOORD1 %156 
                                Private f32* %158 = OpAccessChain %9 %88 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %161 = OpAccessChain %21 %28 %129 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %159 %162 
                                                      OpStore %157 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %9 %170 
                                         f32 %171 = OpLoad %157 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %9 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %9 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %9 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD5 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %181 
                                                      OpStore vs_TEXCOORD6 %184 
                                 Output f32* %185 = OpAccessChain %92 %28 %88 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                 Output f32* %188 = OpAccessChain %92 %28 %88 
                                                      OpStore %188 %187 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %164 %183 %208 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD4 Location 183 
                                                      OpDecorate %208 Location 208 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %176 = OpConstant 6 
                                             %182 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %198 = OpConstant 7 
                                             %207 = OpTypePointer Output %13 
                               Output f32_4* %208 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %166 = OpAccessChain %19 %58 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                                      OpStore %163 %169 
                                         f32 %170 = OpLoad %163 
                                         f32 %171 = OpExtInst %1 40 %170 %95 
                                                      OpStore %163 %171 
                                       f32_3 %172 = OpLoad %9 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFNegate %179 
                                       f32_3 %181 = OpFAdd %175 %180 
                                                      OpStore %9 %181 
                                         f32 %184 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %185 = OpAccessChain %19 %53 %56 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFDiv %184 %186 
                                                      OpStore %163 %187 
                                         f32 %188 = OpLoad %163 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %189 %96 
                                                      OpStore %163 %190 
                                         f32 %191 = OpLoad %163 
                                Uniform f32* %192 = OpAccessChain %19 %53 %48 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                                      OpStore %163 %194 
                                         f32 %195 = OpLoad %163 
                                         f32 %196 = OpExtInst %1 40 %195 %95 
                                                      OpStore %163 %196 
                                         f32 %197 = OpLoad %163 
                                Uniform f32* %199 = OpAccessChain %19 %198 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                Uniform f32* %202 = OpAccessChain %19 %198 %73 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                                      OpStore %163 %204 
                                         f32 %205 = OpLoad %163 
                                         f32 %206 = OpExtInst %1 43 %205 %95 %96 
                                                      OpStore %163 %206 
                                         f32 %209 = OpLoad %163 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                              Uniform f32_4* %213 = OpAccessChain %19 %176 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %208 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %208 %218 
                                 Output f32* %220 = OpAccessChain %208 %73 
                                                      OpStore %220 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat1.y * u_xlat1.y;
    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat3 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 242
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %99 %104 %111 %112 %125 %161 %199 %234 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 99 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate vs_TEXCOORD0 Location 111 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate vs_TEXCOORD1 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 199 
                                                      OpDecorate vs_TEXCOORD6 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %100 = OpConstant 2 
                                             %101 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %105 = OpTypeVector %6 2 
                                             %110 = OpTypePointer Output %105 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %112 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                             %124 = OpTypePointer Input %51 
                                Input f32_3* %125 = OpVariable Input 
                                         i32 %127 = OpConstant 6 
                                         u32 %132 = OpConstant 0 
                                Private f32* %146 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %182 = OpTypePointer Private %51 
                              Private f32_3* %183 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %200 = OpConstant 4 
                                Private f32* %209 = OpVariable Private 
                                             %212 = OpTypePointer Uniform %6 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_2 %219 = OpConstantComposite %218 %218 
                                         u32 %225 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %235 = OpConstant 3.674022E-40 
                                       f32_4 %236 = OpConstantComposite %235 %235 %235 %235 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %102 = OpAccessChain %9 %100 
                                         f32 %103 = OpLoad %102 
                                                      OpStore vs_TEXCOORD4 %103 
                                       f32_4 %106 = OpLoad %9 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_4 %109 = OpVectorShuffle %108 %107 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %109 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %21 %115 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                                      OpStore vs_TEXCOORD0 %123 
                                       f32_3 %126 = OpLoad %125 
                              Uniform f32_4* %128 = OpAccessChain %21 %127 %29 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %126 %130 
                                Private f32* %133 = OpAccessChain %45 %132 
                                                      OpStore %133 %131 
                                       f32_3 %134 = OpLoad %125 
                              Uniform f32_4* %135 = OpAccessChain %21 %127 %24 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                Private f32* %139 = OpAccessChain %45 %90 
                                                      OpStore %139 %138 
                                       f32_3 %140 = OpLoad %125 
                              Uniform f32_4* %141 = OpAccessChain %21 %127 %37 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %140 %143 
                                Private f32* %145 = OpAccessChain %45 %100 
                                                      OpStore %145 %144 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %45 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                       f32_3 %155 = OpCompositeConstruct %154 %154 %154 
                                       f32_4 %156 = OpLoad %45 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %45 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %45 %160 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                                      OpStore vs_TEXCOORD1 %163 
                                Private f32* %164 = OpAccessChain %45 %90 
                                         f32 %165 = OpLoad %164 
                                Private f32* %166 = OpAccessChain %45 %90 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                                      OpStore %146 %168 
                                Private f32* %169 = OpAccessChain %45 %132 
                                         f32 %170 = OpLoad %169 
                                Private f32* %171 = OpAccessChain %45 %132 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpLoad %146 
                                         f32 %175 = OpFNegate %174 
                                         f32 %176 = OpFAdd %173 %175 
                                                      OpStore %146 %176 
                                       f32_4 %177 = OpLoad %45 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %45 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %45 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %24 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %45 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %183 %132 
                                                      OpStore %188 %187 
                              Uniform f32_4* %189 = OpAccessChain %21 %37 
                                       f32_4 %190 = OpLoad %189 
                                       f32_4 %191 = OpLoad %45 
                                         f32 %192 = OpDot %190 %191 
                                Private f32* %193 = OpAccessChain %183 %90 
                                                      OpStore %193 %192 
                              Uniform f32_4* %194 = OpAccessChain %21 %47 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %45 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %183 %100 
                                                      OpStore %198 %197 
                              Uniform f32_4* %201 = OpAccessChain %21 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpLoad %146 
                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_3 %207 = OpLoad %183 
                                       f32_3 %208 = OpFAdd %206 %207 
                                                      OpStore vs_TEXCOORD3 %208 
                                Private f32* %210 = OpAccessChain %9 %90 
                                         f32 %211 = OpLoad %210 
                                Uniform f32* %213 = OpAccessChain %21 %29 %132 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %211 %214 
                                                      OpStore %209 %215 
                                       f32_4 %216 = OpLoad %9 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 3 
                                       f32_2 %220 = OpFMul %217 %219 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 1 5 3 
                                                      OpStore %9 %222 
                                         f32 %223 = OpLoad %209 
                                         f32 %224 = OpFMul %223 %218 
                                Private f32* %226 = OpAccessChain %9 %225 
                                                      OpStore %226 %224 
                                       f32_4 %227 = OpLoad %9 
                                       f32_2 %228 = OpVectorShuffle %227 %227 2 2 
                                       f32_4 %229 = OpLoad %9 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 3 
                                       f32_2 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad vs_TEXCOORD5 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %233 
                                                      OpStore vs_TEXCOORD6 %236 
                                 Output f32* %237 = OpAccessChain %94 %29 %90 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFNegate %238 
                                 Output f32* %240 = OpAccessChain %94 %29 %90 
                                                      OpStore %240 %239 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 266
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %165 %190 %227 %252 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 190 
                                                      OpDecorate vs_TEXCOORD4 Location 227 
                                                      OpDecorate %252 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 7 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 8 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 6 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 11 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 12 
                                             %163 = OpTypePointer Private %13 
                              Private f32_4* %164 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %170 = OpVariable Private 
                                         i32 %171 = OpConstant 3 
                                         i32 %177 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %197 = OpConstantComposite %95 %95 %95 
                                Private f32* %205 = OpVariable Private 
                                         i32 %220 = OpConstant 9 
                                             %226 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %242 = OpConstant 10 
                                             %251 = OpTypePointer Output %13 
                               Output f32_4* %252 = OpVariable Output 
                                             %263 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %166 = OpLoad vs_TEXCOORD1 
                                       f32_4 %167 = OpLoad %164 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %164 %168 
                                Private f32* %169 = OpAccessChain %164 %73 
                                                      OpStore %169 %96 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %164 
                                         f32 %175 = OpDot %173 %174 
                                Private f32* %176 = OpAccessChain %170 %31 
                                                      OpStore %176 %175 
                              Uniform f32_4* %178 = OpAccessChain %19 %177 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpLoad %164 
                                         f32 %181 = OpDot %179 %180 
                                Private f32* %182 = OpAccessChain %170 %56 
                                                      OpStore %182 %181 
                              Uniform f32_4* %184 = OpAccessChain %19 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %164 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %170 %48 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %170 
                                       f32_3 %191 = OpLoad vs_TEXCOORD3 
                                       f32_3 %192 = OpFAdd %189 %191 
                                       f32_4 %193 = OpLoad %164 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %164 %194 
                                       f32_4 %195 = OpLoad %164 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpExtInst %1 40 %196 %197 
                                       f32_4 %199 = OpLoad %164 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %164 %200 
                                       f32_3 %201 = OpLoad %46 
                                       f32_4 %202 = OpLoad %164 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFMul %201 %203 
                                                      OpStore %46 %204 
                                       f32_3 %206 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %207 = OpAccessChain %19 %58 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %206 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 40 %211 %95 
                                                      OpStore %205 %212 
                                       f32_3 %213 = OpLoad %9 
                                         f32 %214 = OpLoad %205 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_3 %217 = OpLoad %46 
                                       f32_3 %218 = OpFAdd %216 %217 
                                                      OpStore %9 %218 
                                       f32_3 %219 = OpLoad %9 
                              Uniform f32_4* %221 = OpAccessChain %19 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFNegate %223 
                                       f32_3 %225 = OpFAdd %219 %224 
                                                      OpStore %9 %225 
                                         f32 %228 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %229 = OpAccessChain %19 %53 %56 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFDiv %228 %230 
                                                      OpStore %205 %231 
                                         f32 %232 = OpLoad %205 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %233 %96 
                                                      OpStore %205 %234 
                                         f32 %235 = OpLoad %205 
                                Uniform f32* %236 = OpAccessChain %19 %53 %48 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFMul %235 %237 
                                                      OpStore %205 %238 
                                         f32 %239 = OpLoad %205 
                                         f32 %240 = OpExtInst %1 40 %239 %95 
                                                      OpStore %205 %240 
                                         f32 %241 = OpLoad %205 
                                Uniform f32* %243 = OpAccessChain %19 %242 %48 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                Uniform f32* %246 = OpAccessChain %19 %242 %73 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFAdd %245 %247 
                                                      OpStore %205 %248 
                                         f32 %249 = OpLoad %205 
                                         f32 %250 = OpExtInst %1 43 %249 %95 %96 
                                                      OpStore %205 %250 
                                         f32 %253 = OpLoad %205 
                                       f32_3 %254 = OpCompositeConstruct %253 %253 %253 
                                       f32_3 %255 = OpLoad %9 
                                       f32_3 %256 = OpFMul %254 %255 
                              Uniform f32_4* %257 = OpAccessChain %19 %220 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %256 %259 
                                       f32_4 %261 = OpLoad %252 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %252 %262 
                                 Output f32* %264 = OpAccessChain %252 %73 
                                                      OpStore %264 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 191
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate vs_TEXCOORD5 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %185 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD4 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                                      OpStore vs_TEXCOORD5 %185 
                                 Output f32* %186 = OpAccessChain %92 %28 %88 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                                      OpStore %189 %188 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 90
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %47 %68 %74 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %74 Location 74 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 %24 %24 %24 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 3 
                                              %33 = OpTypePointer Uniform %24 
                                          i32 %39 = OpConstant 2 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 0 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 1 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %73 = OpTypePointer Output %24 
                                Output f32_4* %74 = OpVariable Output 
                                              %85 = OpTypeInt 32 0 
                                          u32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %38 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %30 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %38 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %30 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %30 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                                      OpStore %45 %69 
                                          f32 %70 = OpLoad %45 
                                          f32 %72 = OpExtInst %1 43 %70 %55 %71 
                                                      OpStore %45 %72 
                                          f32 %75 = OpLoad %45 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_3 %77 = OpLoad %9 
                                        f32_3 %78 = OpFMul %76 %77 
                               Uniform f32_4* %79 = OpAccessChain %30 %61 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFAdd %78 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                  Output f32* %88 = OpAccessChain %74 %86 
                                                      OpStore %88 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %122 %134 %135 %148 %184 %187 %386 %392 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpMemberDecorate %21 17 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 122 
                                                      OpDecorate vs_TEXCOORD0 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 184 
                                                      OpDecorate vs_TEXCOORD2 Location 187 
                                                      OpDecorate vs_TEXCOORD3 Location 386 
                                                      OpDecorate vs_TEXCOORD5 Location 392 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypePointer Private %6 
                                Private f32* %102 = OpVariable Private 
                                         u32 %103 = OpConstant 2 
                                             %106 = OpTypePointer Uniform %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                             %121 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %124 = OpConstant 16 
                                         u32 %128 = OpConstant 3 
                                             %132 = OpTypeVector %6 2 
                                             %133 = OpTypePointer Output %132 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 17 
                                             %147 = OpTypePointer Input %53 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 14 
                                         u32 %155 = OpConstant 0 
                                             %183 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %208 = OpVariable Private 
                                         i32 %209 = OpConstant 9 
                                         i32 %215 = OpConstant 10 
                                         i32 %221 = OpConstant 11 
                                         i32 %227 = OpConstant 12 
                                         i32 %240 = OpConstant 6 
                                         i32 %246 = OpConstant 7 
                                         i32 %252 = OpConstant 8 
                                       f32_3 %267 = OpConstantComposite %119 %119 %119 
                              Private f32_4* %277 = OpVariable Private 
                              Private f32_4* %285 = OpVariable Private 
                                         f32 %321 = OpConstant 3.674022E-40 
                                       f32_4 %322 = OpConstantComposite %321 %321 %321 %321 
                                         i32 %327 = OpConstant 4 
                                       f32_4 %331 = OpConstantComposite %112 %112 %112 %112 
                                       f32_4 %339 = OpConstantComposite %119 %119 %119 %119 
                                         i32 %346 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                Private f32* %104 = OpAccessChain %47 %103 
                                         f32 %105 = OpLoad %104 
                                Uniform f32* %107 = OpAccessChain %23 %31 %93 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFDiv %105 %108 
                                                      OpStore %102 %109 
                                         f32 %110 = OpLoad %102 
                                         f32 %111 = OpFNegate %110 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                Uniform f32* %115 = OpAccessChain %23 %31 %103 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFMul %114 %116 
                                                      OpStore %102 %117 
                                         f32 %118 = OpLoad %102 
                                         f32 %120 = OpExtInst %1 40 %118 %119 
                                                      OpStore %102 %120 
                                         f32 %123 = OpLoad %102 
                                Uniform f32* %125 = OpAccessChain %23 %124 %103 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %129 = OpAccessChain %23 %124 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %127 %130 
                                                      OpStore vs_TEXCOORD4 %131 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %23 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %23 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %23 %150 %31 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %156 = OpAccessChain %47 %155 
                                                      OpStore %156 %154 
                                       f32_3 %157 = OpLoad %148 
                              Uniform f32_4* %158 = OpAccessChain %23 %150 %26 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %157 %160 
                                Private f32* %162 = OpAccessChain %47 %93 
                                                      OpStore %162 %161 
                                       f32_3 %163 = OpLoad %148 
                              Uniform f32_4* %164 = OpAccessChain %23 %150 %39 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                Private f32* %168 = OpAccessChain %47 %103 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %47 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %47 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %170 %172 
                                                      OpStore %102 %173 
                                         f32 %174 = OpLoad %102 
                                         f32 %175 = OpExtInst %1 32 %174 
                                                      OpStore %102 %175 
                                         f32 %176 = OpLoad %102 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_4 %178 = OpLoad %47 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %47 %182 
                                       f32_4 %185 = OpLoad %47 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore vs_TEXCOORD1 %186 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore vs_TEXCOORD2 %189 
                                Private f32* %190 = OpAccessChain %47 %93 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %47 %93 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                                      OpStore %102 %194 
                                Private f32* %195 = OpAccessChain %47 %155 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %47 %155 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFMul %196 %198 
                                         f32 %200 = OpLoad %102 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %199 %201 
                                                      OpStore %102 %202 
                                       f32_4 %203 = OpLoad %47 
                                       f32_4 %204 = OpVectorShuffle %203 %203 1 2 2 0 
                                       f32_4 %205 = OpLoad %47 
                                       f32_4 %206 = OpVectorShuffle %205 %205 0 1 2 2 
                                       f32_4 %207 = OpFMul %204 %206 
                                                      OpStore %65 %207 
                              Uniform f32_4* %210 = OpAccessChain %23 %209 
                                       f32_4 %211 = OpLoad %210 
                                       f32_4 %212 = OpLoad %65 
                                         f32 %213 = OpDot %211 %212 
                                Private f32* %214 = OpAccessChain %208 %155 
                                                      OpStore %214 %213 
                              Uniform f32_4* %216 = OpAccessChain %23 %215 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %65 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %208 %93 
                                                      OpStore %220 %219 
                              Uniform f32_4* %222 = OpAccessChain %23 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %65 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %208 %103 
                                                      OpStore %226 %225 
                              Uniform f32_4* %228 = OpAccessChain %23 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                         f32 %231 = OpLoad %102 
                                       f32_3 %232 = OpCompositeConstruct %231 %231 %231 
                                       f32_3 %233 = OpFMul %230 %232 
                                       f32_4 %234 = OpLoad %208 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                       f32_4 %237 = OpLoad %65 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %65 %238 
                                Private f32* %239 = OpAccessChain %47 %128 
                                                      OpStore %239 %112 
                              Uniform f32_4* %241 = OpAccessChain %23 %240 
                                       f32_4 %242 = OpLoad %241 
                                       f32_4 %243 = OpLoad %47 
                                         f32 %244 = OpDot %242 %243 
                                Private f32* %245 = OpAccessChain %208 %155 
                                                      OpStore %245 %244 
                              Uniform f32_4* %247 = OpAccessChain %23 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %47 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %208 %93 
                                                      OpStore %251 %250 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %47 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %208 %103 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %65 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %208 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %65 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %65 %264 
                                       f32_4 %265 = OpLoad %65 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %268 = OpExtInst %1 40 %266 %267 
                                       f32_4 %269 = OpLoad %65 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %65 %270 
                                       f32_4 %271 = OpLoad %9 
                                       f32_4 %272 = OpVectorShuffle %271 %271 1 1 1 1 
                                       f32_4 %273 = OpFNegate %272 
                              Uniform f32_4* %274 = OpAccessChain %23 %39 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpFAdd %273 %275 
                                                      OpStore %208 %276 
                                       f32_4 %278 = OpLoad %47 
                                       f32_4 %279 = OpVectorShuffle %278 %278 1 1 1 1 
                                       f32_4 %280 = OpLoad %208 
                                       f32_4 %281 = OpFMul %279 %280 
                                                      OpStore %277 %281 
                                       f32_4 %282 = OpLoad %208 
                                       f32_4 %283 = OpLoad %208 
                                       f32_4 %284 = OpFMul %282 %283 
                                                      OpStore %208 %284 
                                       f32_4 %286 = OpLoad %9 
                                       f32_4 %287 = OpVectorShuffle %286 %286 0 0 0 0 
                                       f32_4 %288 = OpFNegate %287 
                              Uniform f32_4* %289 = OpAccessChain %23 %26 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpFAdd %288 %290 
                                                      OpStore %285 %291 
                                       f32_4 %292 = OpLoad %9 
                                       f32_4 %293 = OpVectorShuffle %292 %292 2 2 2 2 
                                       f32_4 %294 = OpFNegate %293 
                              Uniform f32_4* %295 = OpAccessChain %23 %49 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %294 %296 
                                                      OpStore %9 %297 
                                       f32_4 %298 = OpLoad %285 
                                       f32_4 %299 = OpLoad %47 
                                       f32_4 %300 = OpVectorShuffle %299 %299 0 0 0 0 
                                       f32_4 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %277 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %277 %303 
                                       f32_4 %304 = OpLoad %9 
                                       f32_4 %305 = OpLoad %47 
                                       f32_4 %306 = OpVectorShuffle %305 %305 2 2 2 2 
                                       f32_4 %307 = OpFMul %304 %306 
                                       f32_4 %308 = OpLoad %277 
                                       f32_4 %309 = OpFAdd %307 %308 
                                                      OpStore %47 %309 
                                       f32_4 %310 = OpLoad %285 
                                       f32_4 %311 = OpLoad %285 
                                       f32_4 %312 = OpFMul %310 %311 
                                       f32_4 %313 = OpLoad %208 
                                       f32_4 %314 = OpFAdd %312 %313 
                                                      OpStore %208 %314 
                                       f32_4 %315 = OpLoad %9 
                                       f32_4 %316 = OpLoad %9 
                                       f32_4 %317 = OpFMul %315 %316 
                                       f32_4 %318 = OpLoad %208 
                                       f32_4 %319 = OpFAdd %317 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_4 %323 = OpExtInst %1 40 %320 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpExtInst %1 32 %324 
                                                      OpStore %208 %325 
                                       f32_4 %326 = OpLoad %9 
                              Uniform f32_4* %328 = OpAccessChain %23 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_4 %330 = OpFMul %326 %329 
                                       f32_4 %332 = OpFAdd %330 %331 
                                                      OpStore %9 %332 
                                       f32_4 %333 = OpLoad %9 
                                       f32_4 %334 = OpFDiv %331 %333 
                                                      OpStore %9 %334 
                                       f32_4 %335 = OpLoad %47 
                                       f32_4 %336 = OpLoad %208 
                                       f32_4 %337 = OpFMul %335 %336 
                                                      OpStore %47 %337 
                                       f32_4 %338 = OpLoad %47 
                                       f32_4 %340 = OpExtInst %1 40 %338 %339 
                                                      OpStore %47 %340 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpLoad %47 
                                       f32_4 %343 = OpFMul %341 %342 
                                                      OpStore %9 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 1 1 1 
                              Uniform f32_4* %347 = OpAccessChain %23 %346 %26 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFMul %345 %349 
                                       f32_4 %351 = OpLoad %47 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %47 %352 
                              Uniform f32_4* %353 = OpAccessChain %23 %346 %31 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 0 0 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %47 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %47 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %47 %363 
                              Uniform f32_4* %364 = OpAccessChain %23 %346 %39 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 2 2 2 
                                       f32_3 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %47 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %9 %374 
                              Uniform f32_4* %375 = OpAccessChain %23 %346 %49 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 3 3 3 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %380 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_4 %387 = OpLoad %65 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %9 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %391 = OpFAdd %388 %390 
                                                      OpStore vs_TEXCOORD3 %391 
                                                      OpStore vs_TEXCOORD5 %339 
                                 Output f32* %393 = OpAccessChain %97 %31 %93 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %97 %31 %93 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %46 %64 %82 %88 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD1 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 46 
                                                      OpDecorate vs_TEXCOORD3 Location 64 
                                                      OpDecorate vs_TEXCOORD4 Location 82 
                                                      OpDecorate %88 Location 88 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeStruct %13 %13 %13 %13 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Uniform %13 
                                              %24 = OpTypeInt 32 0 
                                          u32 %25 = OpConstant 0 
                                              %26 = OpTypePointer Private %6 
                                          f32 %30 = OpConstant 3.674022E-40 
                               Private f32_3* %33 = OpVariable Private 
                                              %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %35 = OpTypePointer UniformConstant %34 
         UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                              %38 = OpTypeSampler 
                                              %39 = OpTypePointer UniformConstant %38 
                     UniformConstant sampler* %40 = OpVariable UniformConstant 
                                              %42 = OpTypeSampledImage %34 
                                              %44 = OpTypeVector %6 2 
                                              %45 = OpTypePointer Input %44 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %51 = OpConstant 3 
                               Private f32_3* %56 = OpVariable Private 
                                          i32 %58 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          i32 %74 = OpConstant 1 
                                 Private f32* %80 = OpVariable Private 
                                              %81 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          f32 %85 = OpConstant 3.674022E-40 
                                              %87 = OpTypePointer Output %13 
                                Output f32_4* %88 = OpVariable Output 
                                          u32 %99 = OpConstant 3 
                                             %100 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                          f32 %23 = OpDot %12 %22 
                                 Private f32* %27 = OpAccessChain %9 %25 
                                                      OpStore %27 %23 
                                 Private f32* %28 = OpAccessChain %9 %25 
                                          f32 %29 = OpLoad %28 
                                          f32 %31 = OpExtInst %1 40 %29 %30 
                                 Private f32* %32 = OpAccessChain %9 %25 
                                                      OpStore %32 %31 
                          read_only Texture2D %37 = OpLoad %36 
                                      sampler %41 = OpLoad %40 
                   read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                        f32_2 %47 = OpLoad vs_TEXCOORD0 
                                        f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                                      OpStore %33 %49 
                                        f32_3 %50 = OpLoad %33 
                               Uniform f32_4* %52 = OpAccessChain %16 %51 
                                        f32_4 %53 = OpLoad %52 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                        f32_3 %55 = OpFMul %50 %54 
                                                      OpStore %33 %55 
                                        f32_3 %57 = OpLoad %33 
                               Uniform f32_4* %59 = OpAccessChain %16 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFMul %57 %61 
                                                      OpStore %56 %62 
                                        f32_3 %63 = OpLoad %33 
                                        f32_3 %65 = OpLoad vs_TEXCOORD3 
                                        f32_3 %66 = OpFMul %63 %65 
                                                      OpStore %33 %66 
                                        f32_3 %67 = OpLoad %56 
                                        f32_3 %68 = OpLoad %9 
                                        f32_3 %69 = OpVectorShuffle %68 %68 0 0 0 
                                        f32_3 %70 = OpFMul %67 %69 
                                        f32_3 %71 = OpLoad %33 
                                        f32_3 %72 = OpFAdd %70 %71 
                                                      OpStore %9 %72 
                                        f32_3 %73 = OpLoad %9 
                               Uniform f32_4* %75 = OpAccessChain %16 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %79 = OpFAdd %73 %78 
                                                      OpStore %9 %79 
                                          f32 %83 = OpLoad vs_TEXCOORD4 
                                                      OpStore %80 %83 
                                          f32 %84 = OpLoad %80 
                                          f32 %86 = OpExtInst %1 43 %84 %30 %85 
                                                      OpStore %80 %86 
                                          f32 %89 = OpLoad %80 
                                        f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                        f32_3 %91 = OpLoad %9 
                                        f32_3 %92 = OpFMul %90 %91 
                               Uniform f32_4* %93 = OpAccessChain %16 %74 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFAdd %92 %95 
                                        f32_4 %97 = OpLoad %88 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %88 %98 
                                 Output f32* %101 = OpAccessChain %88 %99 
                                                      OpStore %101 %85 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4 = inversesqrt(u_xlat4);
    vs_TEXCOORD1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat2 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 190
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %97 %102 %109 %110 %123 %151 %182 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 97 
                                                      OpDecorate vs_TEXCOORD5 Location 102 
                                                      OpDecorate vs_TEXCOORD0 Location 109 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %123 Location 123 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD6 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                             %108 = OpTypePointer Output %103 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %110 = OpVariable Input 
                                         i32 %113 = OpConstant 4 
                                             %122 = OpTypePointer Input %50 
                                Input f32_3* %123 = OpVariable Input 
                                         u32 %129 = OpConstant 0 
                                Private f32* %143 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %157 = OpVariable Private 
                                             %160 = OpTypePointer Uniform %6 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                                      OpStore vs_TEXCOORD4 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %107 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFMul %112 %116 
                              Uniform f32_4* %118 = OpAccessChain %21 %113 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
                                       f32_2 %121 = OpFAdd %117 %120 
                                                      OpStore vs_TEXCOORD0 %121 
                                       f32_3 %124 = OpLoad %123 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %28 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %44 %129 
                                                      OpStore %130 %128 
                                       f32_3 %131 = OpLoad %123 
                              Uniform f32_4* %132 = OpAccessChain %21 %36 %23 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                         f32 %135 = OpDot %131 %134 
                                Private f32* %136 = OpAccessChain %44 %88 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %123 
                              Uniform f32_4* %138 = OpAccessChain %21 %36 %36 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %44 %98 
                                                      OpStore %142 %141 
                                       f32_4 %144 = OpLoad %44 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %44 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %143 %148 
                                         f32 %149 = OpLoad %143 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %143 %150 
                                         f32 %152 = OpLoad %143 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_4 %154 = OpLoad %44 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %153 %155 
                                                      OpStore vs_TEXCOORD1 %156 
                                Private f32* %158 = OpAccessChain %9 %88 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %161 = OpAccessChain %21 %28 %129 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %159 %162 
                                                      OpStore %157 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %9 %170 
                                         f32 %171 = OpLoad %157 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %9 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %9 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %9 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD5 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %181 
                                                      OpStore vs_TEXCOORD6 %184 
                                 Output f32* %185 = OpAccessChain %92 %28 %88 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFNegate %186 
                                 Output f32* %188 = OpAccessChain %92 %28 %88 
                                                      OpStore %188 %187 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %164 %183 %208 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD4 Location 183 
                                                      OpDecorate %208 Location 208 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %176 = OpConstant 6 
                                             %182 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %198 = OpConstant 7 
                                             %207 = OpTypePointer Output %13 
                               Output f32_4* %208 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %166 = OpAccessChain %19 %58 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                                      OpStore %163 %169 
                                         f32 %170 = OpLoad %163 
                                         f32 %171 = OpExtInst %1 40 %170 %95 
                                                      OpStore %163 %171 
                                       f32_3 %172 = OpLoad %9 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFNegate %179 
                                       f32_3 %181 = OpFAdd %175 %180 
                                                      OpStore %9 %181 
                                         f32 %184 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %185 = OpAccessChain %19 %53 %56 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFDiv %184 %186 
                                                      OpStore %163 %187 
                                         f32 %188 = OpLoad %163 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %189 %96 
                                                      OpStore %163 %190 
                                         f32 %191 = OpLoad %163 
                                Uniform f32* %192 = OpAccessChain %19 %53 %48 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                                      OpStore %163 %194 
                                         f32 %195 = OpLoad %163 
                                         f32 %196 = OpExtInst %1 40 %195 %95 
                                                      OpStore %163 %196 
                                         f32 %197 = OpLoad %163 
                                Uniform f32* %199 = OpAccessChain %19 %198 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                Uniform f32* %202 = OpAccessChain %19 %198 %73 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                                      OpStore %163 %204 
                                         f32 %205 = OpLoad %163 
                                         f32 %206 = OpExtInst %1 43 %205 %95 %96 
                                                      OpStore %163 %206 
                                         f32 %209 = OpLoad %163 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                              Uniform f32_4* %213 = OpAccessChain %19 %176 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %208 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %208 %218 
                                 Output f32* %220 = OpAccessChain %208 %73 
                                                      OpStore %220 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 375
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %102 %107 %114 %115 %128 %165 %168 %337 %369 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 102 
                                                      OpDecorate vs_TEXCOORD5 Location 107 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate %115 Location 115 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 337 
                                                      OpDecorate vs_TEXCOORD6 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %103 = OpConstant 2 
                                             %104 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %108 = OpTypeVector %6 2 
                                             %113 = OpTypePointer Output %108 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %115 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                             %127 = OpTypePointer Input %53 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %130 = OpConstant 11 
                                         u32 %135 = OpConstant 0 
                                Private f32* %149 = OpVariable Private 
                                             %164 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                              Private f32_4* %171 = OpVariable Private 
                              Private f32_4* %178 = OpVariable Private 
                              Private f32_4* %191 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_4 %223 = OpConstantComposite %222 %222 %222 %222 
                                         i32 %228 = OpConstant 4 
                                         f32 %232 = OpConstant 3.674022E-40 
                                       f32_4 %233 = OpConstantComposite %232 %232 %232 %232 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_4 %242 = OpConstantComposite %241 %241 %241 %241 
                                         i32 %249 = OpConstant 5 
                                         i32 %307 = OpConstant 6 
                                         i32 %313 = OpConstant 7 
                                         i32 %319 = OpConstant 8 
                                         i32 %325 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %345 = OpTypePointer Uniform %6 
                                         f32 %352 = OpConstant 3.674022E-40 
                                       f32_2 %353 = OpConstantComposite %352 %352 
                                         u32 %360 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                Private f32* %105 = OpAccessChain %47 %103 
                                         f32 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD4 %106 
                                       f32_4 %109 = OpLoad %47 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_4 %111 = OpLoad vs_TEXCOORD5 
                                       f32_4 %112 = OpVectorShuffle %111 %110 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %112 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                       f32_2 %122 = OpFMul %117 %121 
                              Uniform f32_4* %123 = OpAccessChain %23 %118 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 2 3 
                                       f32_2 %126 = OpFAdd %122 %125 
                                                      OpStore vs_TEXCOORD0 %126 
                                       f32_3 %129 = OpLoad %128 
                              Uniform f32_4* %131 = OpAccessChain %23 %130 %31 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %129 %133 
                                Private f32* %136 = OpAccessChain %65 %135 
                                                      OpStore %136 %134 
                                       f32_3 %137 = OpLoad %128 
                              Uniform f32_4* %138 = OpAccessChain %23 %130 %26 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %65 %93 
                                                      OpStore %142 %141 
                                       f32_3 %143 = OpLoad %128 
                              Uniform f32_4* %144 = OpAccessChain %23 %130 %39 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %65 %103 
                                                      OpStore %148 %147 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_4 %152 = OpLoad %65 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %151 %153 
                                                      OpStore %149 %154 
                                         f32 %155 = OpLoad %149 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %149 %156 
                                         f32 %157 = OpLoad %149 
                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
                                       f32_4 %159 = OpLoad %65 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %65 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %65 %163 
                                       f32_4 %166 = OpLoad %65 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore vs_TEXCOORD1 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                                      OpStore vs_TEXCOORD2 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %172 0 0 0 0 
                                       f32_4 %174 = OpFNegate %173 
                              Uniform f32_4* %175 = OpAccessChain %23 %26 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                                                      OpStore %171 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 1 1 1 1 
                                       f32_4 %181 = OpFNegate %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %39 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFAdd %181 %183 
                                                      OpStore %178 %184 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %185 2 2 2 2 
                                       f32_4 %187 = OpFNegate %186 
                              Uniform f32_4* %188 = OpAccessChain %23 %49 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpFAdd %187 %189 
                                                      OpStore %9 %190 
                                       f32_4 %192 = OpLoad %65 
                                       f32_4 %193 = OpVectorShuffle %192 %192 1 1 1 1 
                                       f32_4 %194 = OpLoad %178 
                                       f32_4 %195 = OpFMul %193 %194 
                                                      OpStore %191 %195 
                                       f32_4 %196 = OpLoad %178 
                                       f32_4 %197 = OpLoad %178 
                                       f32_4 %198 = OpFMul %196 %197 
                                                      OpStore %178 %198 
                                       f32_4 %199 = OpLoad %171 
                                       f32_4 %200 = OpLoad %171 
                                       f32_4 %201 = OpFMul %199 %200 
                                       f32_4 %202 = OpLoad %178 
                                       f32_4 %203 = OpFAdd %201 %202 
                                                      OpStore %178 %203 
                                       f32_4 %204 = OpLoad %171 
                                       f32_4 %205 = OpLoad %65 
                                       f32_4 %206 = OpVectorShuffle %205 %205 0 0 0 0 
                                       f32_4 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %191 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %171 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpLoad %65 
                                       f32_4 %212 = OpVectorShuffle %211 %211 2 2 2 2 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %171 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %171 %215 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpFMul %216 %217 
                                       f32_4 %219 = OpLoad %178 
                                       f32_4 %220 = OpFAdd %218 %219 
                                                      OpStore %9 %220 
                                       f32_4 %221 = OpLoad %9 
                                       f32_4 %224 = OpExtInst %1 40 %221 %223 
                                                      OpStore %9 %224 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpExtInst %1 32 %225 
                                                      OpStore %178 %226 
                                       f32_4 %227 = OpLoad %9 
                              Uniform f32_4* %229 = OpAccessChain %23 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpFMul %227 %230 
                                       f32_4 %234 = OpFAdd %231 %233 
                                                      OpStore %9 %234 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpFDiv %233 %235 
                                                      OpStore %9 %236 
                                       f32_4 %237 = OpLoad %171 
                                       f32_4 %238 = OpLoad %178 
                                       f32_4 %239 = OpFMul %237 %238 
                                                      OpStore %171 %239 
                                       f32_4 %240 = OpLoad %171 
                                       f32_4 %243 = OpExtInst %1 40 %240 %242 
                                                      OpStore %171 %243 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpLoad %171 
                                       f32_4 %246 = OpFMul %244 %245 
                                                      OpStore %9 %246 
                                       f32_4 %247 = OpLoad %9 
                                       f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                              Uniform f32_4* %250 = OpAccessChain %23 %249 %26 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFMul %248 %252 
                                       f32_4 %254 = OpLoad %171 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %171 %255 
                              Uniform f32_4* %256 = OpAccessChain %23 %249 %31 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_4 %262 = OpLoad %171 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFAdd %261 %263 
                                       f32_4 %265 = OpLoad %171 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %171 %266 
                              Uniform f32_4* %267 = OpAccessChain %23 %249 %39 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %9 
                                       f32_3 %271 = OpVectorShuffle %270 %270 2 2 2 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %171 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %272 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                              Uniform f32_4* %278 = OpAccessChain %23 %249 %49 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 3 3 3 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFAdd %283 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %9 %288 
                                Private f32* %289 = OpAccessChain %65 %93 
                                         f32 %290 = OpLoad %289 
                                Private f32* %291 = OpAccessChain %65 %93 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                                      OpStore %149 %293 
                                Private f32* %294 = OpAccessChain %65 %135 
                                         f32 %295 = OpLoad %294 
                                Private f32* %296 = OpAccessChain %65 %135 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %295 %297 
                                         f32 %299 = OpLoad %149 
                                         f32 %300 = OpFNegate %299 
                                         f32 %301 = OpFAdd %298 %300 
                                                      OpStore %149 %301 
                                       f32_4 %302 = OpLoad %65 
                                       f32_4 %303 = OpVectorShuffle %302 %302 1 2 2 0 
                                       f32_4 %304 = OpLoad %65 
                                       f32_4 %305 = OpVectorShuffle %304 %304 0 1 2 2 
                                       f32_4 %306 = OpFMul %303 %305 
                                                      OpStore %65 %306 
                              Uniform f32_4* %308 = OpAccessChain %23 %307 
                                       f32_4 %309 = OpLoad %308 
                                       f32_4 %310 = OpLoad %65 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %171 %135 
                                                      OpStore %312 %311 
                              Uniform f32_4* %314 = OpAccessChain %23 %313 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpLoad %65 
                                         f32 %317 = OpDot %315 %316 
                                Private f32* %318 = OpAccessChain %171 %93 
                                                      OpStore %318 %317 
                              Uniform f32_4* %320 = OpAccessChain %23 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpLoad %65 
                                         f32 %323 = OpDot %321 %322 
                                Private f32* %324 = OpAccessChain %171 %103 
                                                      OpStore %324 %323 
                              Uniform f32_4* %326 = OpAccessChain %23 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                         f32 %329 = OpLoad %149 
                                       f32_3 %330 = OpCompositeConstruct %329 %329 %329 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_4 %332 = OpLoad %171 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFAdd %331 %333 
                                       f32_4 %335 = OpLoad %65 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %65 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_4 %340 = OpLoad %65 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFAdd %339 %341 
                                                      OpStore vs_TEXCOORD3 %342 
                                Private f32* %343 = OpAccessChain %47 %93 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %346 = OpAccessChain %23 %31 %135 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFMul %344 %347 
                                Private f32* %349 = OpAccessChain %9 %135 
                                                      OpStore %349 %348 
                                       f32_4 %350 = OpLoad %47 
                                       f32_2 %351 = OpVectorShuffle %350 %350 0 3 
                                       f32_2 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %47 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 1 5 3 
                                                      OpStore %47 %356 
                                Private f32* %357 = OpAccessChain %9 %135 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %358 %352 
                                Private f32* %361 = OpAccessChain %47 %360 
                                                      OpStore %361 %359 
                                       f32_4 %362 = OpLoad %47 
                                       f32_2 %363 = OpVectorShuffle %362 %362 2 2 
                                       f32_4 %364 = OpLoad %47 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 3 
                                       f32_2 %366 = OpFAdd %363 %365 
                                       f32_4 %367 = OpLoad vs_TEXCOORD5 
                                       f32_4 %368 = OpVectorShuffle %367 %366 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %368 
                                                      OpStore vs_TEXCOORD6 %242 
                                 Output f32* %370 = OpAccessChain %97 %31 %93 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFNegate %371 
                                 Output f32* %373 = OpAccessChain %97 %31 %93 
                                                      OpStore %373 %372 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 266
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %165 %190 %227 %252 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 190 
                                                      OpDecorate vs_TEXCOORD4 Location 227 
                                                      OpDecorate %252 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 7 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 8 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 6 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 11 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 12 
                                             %163 = OpTypePointer Private %13 
                              Private f32_4* %164 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %170 = OpVariable Private 
                                         i32 %171 = OpConstant 3 
                                         i32 %177 = OpConstant 4 
                                         i32 %183 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %197 = OpConstantComposite %95 %95 %95 
                                Private f32* %205 = OpVariable Private 
                                         i32 %220 = OpConstant 9 
                                             %226 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %242 = OpConstant 10 
                                             %251 = OpTypePointer Output %13 
                               Output f32_4* %252 = OpVariable Output 
                                             %263 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %166 = OpLoad vs_TEXCOORD1 
                                       f32_4 %167 = OpLoad %164 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %164 %168 
                                Private f32* %169 = OpAccessChain %164 %73 
                                                      OpStore %169 %96 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_4 %174 = OpLoad %164 
                                         f32 %175 = OpDot %173 %174 
                                Private f32* %176 = OpAccessChain %170 %31 
                                                      OpStore %176 %175 
                              Uniform f32_4* %178 = OpAccessChain %19 %177 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpLoad %164 
                                         f32 %181 = OpDot %179 %180 
                                Private f32* %182 = OpAccessChain %170 %56 
                                                      OpStore %182 %181 
                              Uniform f32_4* %184 = OpAccessChain %19 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %164 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %170 %48 
                                                      OpStore %188 %187 
                                       f32_3 %189 = OpLoad %170 
                                       f32_3 %191 = OpLoad vs_TEXCOORD3 
                                       f32_3 %192 = OpFAdd %189 %191 
                                       f32_4 %193 = OpLoad %164 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %164 %194 
                                       f32_4 %195 = OpLoad %164 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %198 = OpExtInst %1 40 %196 %197 
                                       f32_4 %199 = OpLoad %164 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %164 %200 
                                       f32_3 %201 = OpLoad %46 
                                       f32_4 %202 = OpLoad %164 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFMul %201 %203 
                                                      OpStore %46 %204 
                                       f32_3 %206 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %207 = OpAccessChain %19 %58 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                         f32 %210 = OpDot %206 %209 
                                                      OpStore %205 %210 
                                         f32 %211 = OpLoad %205 
                                         f32 %212 = OpExtInst %1 40 %211 %95 
                                                      OpStore %205 %212 
                                       f32_3 %213 = OpLoad %9 
                                         f32 %214 = OpLoad %205 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_3 %217 = OpLoad %46 
                                       f32_3 %218 = OpFAdd %216 %217 
                                                      OpStore %9 %218 
                                       f32_3 %219 = OpLoad %9 
                              Uniform f32_4* %221 = OpAccessChain %19 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFNegate %223 
                                       f32_3 %225 = OpFAdd %219 %224 
                                                      OpStore %9 %225 
                                         f32 %228 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %229 = OpAccessChain %19 %53 %56 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFDiv %228 %230 
                                                      OpStore %205 %231 
                                         f32 %232 = OpLoad %205 
                                         f32 %233 = OpFNegate %232 
                                         f32 %234 = OpFAdd %233 %96 
                                                      OpStore %205 %234 
                                         f32 %235 = OpLoad %205 
                                Uniform f32* %236 = OpAccessChain %19 %53 %48 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFMul %235 %237 
                                                      OpStore %205 %238 
                                         f32 %239 = OpLoad %205 
                                         f32 %240 = OpExtInst %1 40 %239 %95 
                                                      OpStore %205 %240 
                                         f32 %241 = OpLoad %205 
                                Uniform f32* %243 = OpAccessChain %19 %242 %48 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFMul %241 %244 
                                Uniform f32* %246 = OpAccessChain %19 %242 %73 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFAdd %245 %247 
                                                      OpStore %205 %248 
                                         f32 %249 = OpLoad %205 
                                         f32 %250 = OpExtInst %1 43 %249 %95 %96 
                                                      OpStore %205 %250 
                                         f32 %253 = OpLoad %205 
                                       f32_3 %254 = OpCompositeConstruct %253 %253 %253 
                                       f32_3 %255 = OpLoad %9 
                                       f32_3 %256 = OpFMul %254 %255 
                              Uniform f32_4* %257 = OpAccessChain %19 %220 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %256 %259 
                                       f32_4 %261 = OpLoad %252 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %252 %262 
                                 Output f32* %264 = OpAccessChain %252 %73 
                                                      OpStore %264 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 201
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %135 %136 %148 %182 %188 %191 %193 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD0 Location 135 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 182 
                                                      OpDecorate vs_TEXCOORD5 Location 188 
                                                      OpDecorate vs_TEXCOORD6 Location 191 
                                                      OpDecorate %193 Flat 
                                                      OpDecorate %193 Location 193 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                                             %133 = OpTypeVector %23 2 
                                             %134 = OpTypePointer Output %133 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %136 = OpVariable Input 
                                             %147 = OpTypePointer Input %75 
                                Input f32_3* %148 = OpVariable Input 
                                         u32 %156 = OpConstant 0 
                                Private f32* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_4 %190 = OpConstantComposite %189 %189 %189 %189 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %192 = OpTypePointer Output %31 
                                 Output u32* %193 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %15 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %139 = OpAccessChain %94 %44 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %138 %141 
                              Uniform f32_4* %143 = OpAccessChain %94 %44 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                                         i32 %150 = OpLoad %8 
                                         i32 %151 = OpSDiv %150 %42 
                              Uniform f32_4* %152 = OpAccessChain %40 %15 %151 %44 %15 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %149 %154 
                                Private f32* %157 = OpAccessChain %26 %156 
                                                      OpStore %157 %155 
                                       f32_3 %158 = OpLoad %148 
                                         i32 %159 = OpLoad %8 
                                         i32 %160 = OpSDiv %159 %42 
                              Uniform f32_4* %161 = OpAccessChain %40 %15 %160 %44 %44 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %165 = OpAccessChain %26 %119 
                                                      OpStore %165 %164 
                                       f32_3 %166 = OpLoad %148 
                                         i32 %167 = OpLoad %8 
                                         i32 %168 = OpSDiv %167 %42 
                              Uniform f32_4* %169 = OpAccessChain %40 %15 %168 %44 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %166 %171 
                                Private f32* %173 = OpAccessChain %26 %129 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %174 %179 
                                         f32 %180 = OpLoad %174 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %174 %181 
                                         f32 %183 = OpLoad %174 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_4 %185 = OpLoad %26 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore vs_TEXCOORD1 %187 
                                                      OpStore vs_TEXCOORD5 %190 
                                                      OpStore vs_TEXCOORD6 %190 
                                         i32 %194 = OpLoad %10 
                                         u32 %195 = OpBitcast %194 
                                                      OpStore %193 %195 
                                 Output f32* %196 = OpAccessChain %123 %15 %119 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                 Output f32* %199 = OpAccessChain %123 %15 %119 
                                                      OpStore %199 %198 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 114
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %47 %68 %100 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %100 Location 100 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 %24 %24 %24 %24 %24 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 5 
                                              %33 = OpTypePointer Uniform %24 
                                          i32 %39 = OpConstant 4 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 1 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 2 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          i32 %70 = OpConstant 0 
                                              %71 = OpTypeInt 32 0 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypePointer Uniform %6 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          u32 %82 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                          u32 %93 = OpConstant 3 
                                              %99 = OpTypePointer Output %24 
                               Output f32_4* %100 = OpVariable Output 
                                             %111 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %38 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %30 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %38 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %30 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %30 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                 Uniform f32* %74 = OpAccessChain %30 %70 %72 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %69 %75 
                                                      OpStore %45 %76 
                                          f32 %77 = OpLoad %45 
                                          f32 %78 = OpFNegate %77 
                                          f32 %80 = OpFAdd %78 %79 
                                                      OpStore %45 %80 
                                          f32 %81 = OpLoad %45 
                                 Uniform f32* %83 = OpAccessChain %30 %70 %82 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %81 %84 
                                                      OpStore %45 %85 
                                          f32 %86 = OpLoad %45 
                                          f32 %87 = OpExtInst %1 40 %86 %55 
                                                      OpStore %45 %87 
                                          f32 %88 = OpLoad %45 
                                 Uniform f32* %90 = OpAccessChain %30 %89 %82 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %94 = OpAccessChain %30 %89 %93 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %92 %95 
                                                      OpStore %45 %96 
                                          f32 %97 = OpLoad %45 
                                          f32 %98 = OpExtInst %1 43 %97 %55 %79 
                                                      OpStore %45 %98 
                                         f32 %101 = OpLoad %45 
                                       f32_3 %102 = OpCompositeConstruct %101 %101 %101 
                                       f32_3 %103 = OpLoad %9 
                                       f32_3 %104 = OpFMul %102 %103 
                              Uniform f32_4* %105 = OpAccessChain %30 %61 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %100 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %100 %110 
                                 Output f32* %112 = OpAccessChain %100 %93 
                                                      OpStore %112 %79 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat9 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 272
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %139 %140 %152 %195 %247 %259 %262 %264 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 132 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate vs_TEXCOORD1 Location 195 
                                                      OpMemberDecorate %219 0 Offset 219 
                                                      OpMemberDecorate %219 1 Offset 219 
                                                      OpMemberDecorate %219 2 Offset 219 
                                                      OpMemberDecorate %219 3 Offset 219 
                                                      OpMemberDecorate %219 4 Offset 219 
                                                      OpMemberDecorate %219 5 Offset 219 
                                                      OpMemberDecorate %219 6 Offset 219 
                                                      OpDecorate %220 ArrayStride 220 
                                                      OpMemberDecorate %221 0 Offset 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate vs_TEXCOORD3 Location 247 
                                                      OpDecorate vs_TEXCOORD5 Location 259 
                                                      OpDecorate vs_TEXCOORD6 Location 262 
                                                      OpDecorate %264 Flat 
                                                      OpDecorate %264 Location 264 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                                             %137 = OpTypeVector %27 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                             %151 = OpTypePointer Input %79 
                                Input f32_3* %152 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                             %178 = OpTypePointer Private %79 
                              Private f32_3* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                              Private f32_3* %218 = OpVariable Private 
                                             %219 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %220 = OpTypeArray %219 %40 
                                             %221 = OpTypeStruct %220 
                                             %222 = OpTypePointer Uniform %221 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %223 = OpVariable Uniform 
                                         i32 %233 = OpConstant 4 
                                         i32 %241 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %250 = OpConstant 6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %260 = OpConstant 3.674022E-40 
                                       f32_4 %261 = OpConstantComposite %260 %260 %260 %260 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %263 = OpTypePointer Output %35 
                                 Output u32* %264 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %15 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %143 = OpAccessChain %98 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %142 %145 
                              Uniform f32_4* %147 = OpAccessChain %98 %48 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                                      OpStore vs_TEXCOORD0 %150 
                                       f32_3 %153 = OpLoad %152 
                                         i32 %154 = OpLoad %20 
                                         i32 %155 = OpSDiv %154 %46 
                              Uniform f32_4* %156 = OpAccessChain %44 %15 %155 %48 %15 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %161 = OpAccessChain %30 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %152 
                                         i32 %163 = OpLoad %20 
                                         i32 %164 = OpSDiv %163 %46 
                              Uniform f32_4* %165 = OpAccessChain %44 %15 %164 %48 %48 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %162 %167 
                                Private f32* %169 = OpAccessChain %30 %123 
                                                      OpStore %169 %168 
                                       f32_3 %170 = OpLoad %152 
                                         i32 %171 = OpLoad %20 
                                         i32 %172 = OpSDiv %171 %46 
                              Uniform f32_4* %173 = OpAccessChain %44 %15 %172 %48 %64 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %170 %175 
                                Private f32* %177 = OpAccessChain %30 %133 
                                                      OpStore %177 %176 
                                       f32_4 %180 = OpLoad %30 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %30 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %160 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %160 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %160 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %30 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %196 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %196 
                                Private f32* %197 = OpAccessChain %179 %123 
                                         f32 %198 = OpLoad %197 
                                Private f32* %199 = OpAccessChain %179 %123 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %198 %200 
                                Private f32* %202 = OpAccessChain %30 %160 
                                                      OpStore %202 %201 
                                Private f32* %203 = OpAccessChain %179 %160 
                                         f32 %204 = OpLoad %203 
                                Private f32* %205 = OpAccessChain %179 %160 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %204 %206 
                                Private f32* %208 = OpAccessChain %30 %160 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %207 %210 
                                Private f32* %212 = OpAccessChain %30 %160 
                                                      OpStore %212 %211 
                                       f32_3 %213 = OpLoad %179 
                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
                                       f32_3 %215 = OpLoad %179 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
                                       f32_4 %217 = OpFMul %214 %216 
                                                      OpStore %72 %217 
                                         i32 %224 = OpLoad %8 
                                         i32 %225 = OpSDiv %224 %25 
                              Uniform f32_4* %226 = OpAccessChain %223 %15 %225 %22 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %72 
                                         f32 %229 = OpDot %227 %228 
                                Private f32* %230 = OpAccessChain %218 %160 
                                                      OpStore %230 %229 
                                         i32 %231 = OpLoad %8 
                                         i32 %232 = OpSDiv %231 %25 
                              Uniform f32_4* %234 = OpAccessChain %223 %15 %232 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpLoad %72 
                                         f32 %237 = OpDot %235 %236 
                                Private f32* %238 = OpAccessChain %218 %123 
                                                      OpStore %238 %237 
                                         i32 %239 = OpLoad %8 
                                         i32 %240 = OpSDiv %239 %25 
                              Uniform f32_4* %242 = OpAccessChain %223 %15 %240 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %72 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %218 %133 
                                                      OpStore %246 %245 
                                         i32 %248 = OpLoad %8 
                                         i32 %249 = OpSDiv %248 %25 
                              Uniform f32_4* %251 = OpAccessChain %223 %15 %249 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_4 %254 = OpLoad %30 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %218 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore vs_TEXCOORD3 %258 
                                                      OpStore vs_TEXCOORD5 %261 
                                                      OpStore vs_TEXCOORD6 %261 
                                         i32 %265 = OpLoad %10 
                                         u32 %266 = OpBitcast %265 
                                                      OpStore %264 %266 
                                 Output f32* %267 = OpAccessChain %127 %15 %123 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                 Output f32* %270 = OpAccessChain %127 %15 %123 
                                                      OpStore %270 %269 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %90 %114 %155 %181 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpMemberDecorate %75 3 Offset 75 
                                                      OpMemberDecorate %75 4 Offset 75 
                                                      OpMemberDecorate %75 5 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 90 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate vs_TEXCOORD4 Location 155 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %78 = OpConstant 4 
                                          i32 %84 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                                             %102 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %103 = OpTypePointer UniformConstant %102 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampler 
                                             %107 = OpTypePointer UniformConstant %106 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                             %110 = OpTypeSampledImage %102 
                                             %112 = OpTypeVector %25 2 
                                             %113 = OpTypePointer Input %112 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %119 = OpConstant 5 
                                Private f32* %133 = OpVariable Private 
                                             %154 = OpTypePointer Input %25 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %157 = OpTypePointer Uniform %25 
                                         i32 %171 = OpConstant 3 
                                             %180 = OpTypePointer Output %26 
                               Output f32_4* %181 = OpVariable Output 
                                             %192 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %79 = OpAccessChain %77 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                          i32 %82 = OpLoad %8 
                                          i32 %83 = OpSDiv %82 %23 
                               Uniform f32_4* %85 = OpAccessChain %46 %17 %83 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_3 %88 = OpFMul %81 %87 
                                                      OpStore %74 %88 
                                        f32_3 %89 = OpLoad %40 
                                        f32_3 %91 = OpLoad vs_TEXCOORD3 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %28 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %28 %94 
                                        f32_4 %95 = OpLoad %28 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %99 = OpExtInst %1 40 %96 %98 
                                       f32_4 %100 = OpLoad %28 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %28 %101 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %111 = OpSampledImage %105 %109 
                                       f32_2 %115 = OpLoad vs_TEXCOORD0 
                                       f32_4 %116 = OpImageSampleImplicitLod %111 %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                                      OpStore %40 %117 
                                       f32_3 %118 = OpLoad %40 
                              Uniform f32_4* %120 = OpAccessChain %77 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFMul %118 %122 
                                                      OpStore %40 %123 
                                       f32_4 %124 = OpLoad %28 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %40 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_4 %128 = OpLoad %28 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %28 %129 
                                       f32_3 %130 = OpLoad %74 
                                       f32_3 %131 = OpLoad %40 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %74 %132 
                                       f32_3 %134 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %135 = OpAccessChain %77 %58 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 40 %139 %97 
                                                      OpStore %133 %140 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %133 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                                      OpStore %74 %147 
                                       f32_3 %148 = OpLoad %74 
                              Uniform f32_4* %149 = OpAccessChain %77 %67 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %74 %153 
                                         f32 %156 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %158 = OpAccessChain %77 %17 %63 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFDiv %156 %159 
                                                      OpStore %133 %160 
                                         f32 %161 = OpLoad %133 
                                         f32 %162 = OpFNegate %161 
                                         f32 %163 = OpFAdd %162 %35 
                                                      OpStore %133 %163 
                                         f32 %164 = OpLoad %133 
                                Uniform f32* %165 = OpAccessChain %77 %17 %72 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                                      OpStore %133 %167 
                                         f32 %168 = OpLoad %133 
                                         f32 %169 = OpExtInst %1 40 %168 %97 
                                                      OpStore %133 %169 
                                         f32 %170 = OpLoad %133 
                                Uniform f32* %172 = OpAccessChain %77 %171 %72 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %170 %173 
                                Uniform f32* %175 = OpAccessChain %77 %171 %36 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                                      OpStore %133 %177 
                                         f32 %178 = OpLoad %133 
                                         f32 %179 = OpExtInst %1 43 %178 %97 %35 
                                                      OpStore %133 %179 
                                         f32 %182 = OpLoad %133 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_3 %184 = OpLoad %74 
                                       f32_3 %185 = OpFMul %183 %184 
                              Uniform f32_4* %186 = OpAccessChain %77 %67 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %181 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %181 %191 
                                 Output f32* %193 = OpAccessChain %181 %36 
                                                      OpStore %193 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 229
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %187 %217 %221 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD5 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 187 
                                                      OpDecorate vs_TEXCOORD6 Location 217 
                                                      OpDecorate %221 Flat 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                             %152 = OpTypePointer Input %75 
                                Input f32_3* %153 = OpVariable Input 
                                         u32 %161 = OpConstant 0 
                                Private f32* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %195 = OpTypePointer Uniform %23 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_2 %202 = OpConstantComposite %201 %201 
                                         u32 %208 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_4 %219 = OpConstantComposite %218 %218 %218 %218 
                                             %220 = OpTypePointer Output %31 
                                 Output u32* %221 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %144 = OpAccessChain %94 %60 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %143 %146 
                              Uniform f32_4* %148 = OpAccessChain %94 %60 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                                         i32 %155 = OpLoad %8 
                                         i32 %156 = OpSDiv %155 %42 
                              Uniform f32_4* %157 = OpAccessChain %40 %15 %156 %44 %15 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %154 %159 
                                Private f32* %162 = OpAccessChain %68 %161 
                                                      OpStore %162 %160 
                                       f32_3 %163 = OpLoad %153 
                                         i32 %164 = OpLoad %8 
                                         i32 %165 = OpSDiv %164 %42 
                              Uniform f32_4* %166 = OpAccessChain %40 %15 %165 %44 %44 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %163 %168 
                                Private f32* %170 = OpAccessChain %68 %119 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %153 
                                         i32 %172 = OpLoad %8 
                                         i32 %173 = OpSDiv %172 %42 
                              Uniform f32_4* %174 = OpAccessChain %40 %15 %173 %44 %60 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %68 %129 
                                                      OpStore %178 %177 
                                       f32_4 %180 = OpLoad %68 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %68 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                                      OpStore %179 %184 
                                         f32 %185 = OpLoad %179 
                                         f32 %186 = OpExtInst %1 32 %185 
                                                      OpStore %179 %186 
                                         f32 %188 = OpLoad %179 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %68 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                                      OpStore vs_TEXCOORD1 %192 
                                Private f32* %193 = OpAccessChain %26 %119 
                                         f32 %194 = OpLoad %193 
                                Uniform f32* %196 = OpAccessChain %94 %15 %161 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %179 %198 
                                       f32_4 %199 = OpLoad %26 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 3 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %26 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 1 5 3 
                                                      OpStore %26 %205 
                                         f32 %206 = OpLoad %179 
                                         f32 %207 = OpFMul %206 %201 
                                Private f32* %209 = OpAccessChain %26 %208 
                                                      OpStore %209 %207 
                                       f32_4 %210 = OpLoad %26 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 2 
                                       f32_4 %212 = OpLoad %26 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 3 
                                       f32_2 %214 = OpFAdd %211 %213 
                                       f32_4 %215 = OpLoad vs_TEXCOORD5 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %216 
                                                      OpStore vs_TEXCOORD6 %219 
                                         i32 %222 = OpLoad %10 
                                         u32 %223 = OpBitcast %222 
                                                      OpStore %221 %223 
                                 Output f32* %224 = OpAccessChain %123 %15 %119 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFNegate %225 
                                 Output f32* %227 = OpAccessChain %123 %15 %119 
                                                      OpStore %227 %226 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %164 %183 %208 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD4 Location 183 
                                                      OpDecorate %208 Location 208 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %176 = OpConstant 6 
                                             %182 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %198 = OpConstant 7 
                                             %207 = OpTypePointer Output %13 
                               Output f32_4* %208 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %166 = OpAccessChain %19 %58 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                                      OpStore %163 %169 
                                         f32 %170 = OpLoad %163 
                                         f32 %171 = OpExtInst %1 40 %170 %95 
                                                      OpStore %163 %171 
                                       f32_3 %172 = OpLoad %9 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFNegate %179 
                                       f32_3 %181 = OpFAdd %175 %180 
                                                      OpStore %9 %181 
                                         f32 %184 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %185 = OpAccessChain %19 %53 %56 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFDiv %184 %186 
                                                      OpStore %163 %187 
                                         f32 %188 = OpLoad %163 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %189 %96 
                                                      OpStore %163 %190 
                                         f32 %191 = OpLoad %163 
                                Uniform f32* %192 = OpAccessChain %19 %53 %48 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                                      OpStore %163 %194 
                                         f32 %195 = OpLoad %163 
                                         f32 %196 = OpExtInst %1 40 %195 %95 
                                                      OpStore %163 %196 
                                         f32 %197 = OpLoad %163 
                                Uniform f32* %199 = OpAccessChain %19 %198 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                Uniform f32* %202 = OpAccessChain %19 %198 %73 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                                      OpStore %163 %204 
                                         f32 %205 = OpLoad %163 
                                         f32 %206 = OpExtInst %1 43 %205 %95 %96 
                                                      OpStore %163 %206 
                                         f32 %209 = OpLoad %163 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                              Uniform f32_4* %213 = OpAccessChain %19 %176 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %208 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %208 %218 
                                 Output f32* %220 = OpAccessChain %208 %73 
                                                      OpStore %220 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    u_xlat9 = u_xlat4.y * u_xlat4.y;
    u_xlat9 = u_xlat4.x * u_xlat4.x + (-u_xlat9);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat9) + u_xlat3.xyz;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 299
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %157 %200 %250 %287 %291 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 132 
                                                      OpDecorate vs_TEXCOORD5 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD1 Location 200 
                                                      OpMemberDecorate %222 0 Offset 222 
                                                      OpMemberDecorate %222 1 Offset 222 
                                                      OpMemberDecorate %222 2 Offset 222 
                                                      OpMemberDecorate %222 3 Offset 222 
                                                      OpMemberDecorate %222 4 Offset 222 
                                                      OpMemberDecorate %222 5 Offset 222 
                                                      OpMemberDecorate %222 6 Offset 222 
                                                      OpDecorate %223 ArrayStride 223 
                                                      OpMemberDecorate %224 0 Offset 224 
                                                      OpDecorate %224 Block 
                                                      OpDecorate %226 DescriptorSet 226 
                                                      OpDecorate %226 Binding 226 
                                                      OpDecorate vs_TEXCOORD3 Location 250 
                                                      OpDecorate vs_TEXCOORD6 Location 287 
                                                      OpDecorate %291 Flat 
                                                      OpDecorate %291 Location 291 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                                             %156 = OpTypePointer Input %79 
                                Input f32_3* %157 = OpVariable Input 
                                         u32 %165 = OpConstant 0 
                                             %183 = OpTypePointer Private %79 
                              Private f32_3* %184 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                Private f32* %202 = OpVariable Private 
                              Private f32_3* %221 = OpVariable Private 
                                             %222 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %223 = OpTypeArray %222 %40 
                                             %224 = OpTypeStruct %223 
                                             %225 = OpTypePointer Uniform %224 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %226 = OpVariable Uniform 
                                         i32 %236 = OpConstant 4 
                                         i32 %244 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %253 = OpConstant 6 
                                Private f32* %262 = OpVariable Private 
                                             %265 = OpTypePointer Uniform %27 
                                         f32 %271 = OpConstant 3.674022E-40 
                                       f32_2 %272 = OpConstantComposite %271 %271 
                                         u32 %278 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %288 = OpConstant 3.674022E-40 
                                       f32_4 %289 = OpConstantComposite %288 %288 %288 %288 
                                             %290 = OpTypePointer Output %35 
                                 Output u32* %291 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD5 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_3 %158 = OpLoad %157 
                                         i32 %159 = OpLoad %20 
                                         i32 %160 = OpSDiv %159 %46 
                              Uniform f32_4* %161 = OpAccessChain %44 %15 %160 %48 %15 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %166 = OpAccessChain %72 %165 
                                                      OpStore %166 %164 
                                       f32_3 %167 = OpLoad %157 
                                         i32 %168 = OpLoad %20 
                                         i32 %169 = OpSDiv %168 %46 
                              Uniform f32_4* %170 = OpAccessChain %44 %15 %169 %48 %48 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %167 %172 
                                Private f32* %174 = OpAccessChain %72 %123 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %157 
                                         i32 %176 = OpLoad %20 
                                         i32 %177 = OpSDiv %176 %46 
                              Uniform f32_4* %178 = OpAccessChain %44 %15 %177 %48 %64 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %175 %180 
                                Private f32* %182 = OpAccessChain %72 %133 
                                                      OpStore %182 %181 
                                       f32_4 %185 = OpLoad %72 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %72 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %186 %188 
                                Private f32* %190 = OpAccessChain %184 %165 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %184 %165 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %184 %165 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %184 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_4 %197 = OpLoad %72 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %184 %199 
                                       f32_3 %201 = OpLoad %184 
                                                      OpStore vs_TEXCOORD1 %201 
                                Private f32* %203 = OpAccessChain %184 %123 
                                         f32 %204 = OpLoad %203 
                                Private f32* %205 = OpAccessChain %184 %123 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %204 %206 
                                                      OpStore %202 %207 
                                Private f32* %208 = OpAccessChain %184 %165 
                                         f32 %209 = OpLoad %208 
                                Private f32* %210 = OpAccessChain %184 %165 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFMul %209 %211 
                                         f32 %213 = OpLoad %202 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %212 %214 
                                                      OpStore %202 %215 
                                       f32_3 %216 = OpLoad %184 
                                       f32_4 %217 = OpVectorShuffle %216 %216 1 2 2 0 
                                       f32_3 %218 = OpLoad %184 
                                       f32_4 %219 = OpVectorShuffle %218 %218 0 1 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                                      OpStore %72 %220 
                                         i32 %227 = OpLoad %8 
                                         i32 %228 = OpSDiv %227 %25 
                              Uniform f32_4* %229 = OpAccessChain %226 %15 %228 %22 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %72 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %221 %165 
                                                      OpStore %233 %232 
                                         i32 %234 = OpLoad %8 
                                         i32 %235 = OpSDiv %234 %25 
                              Uniform f32_4* %237 = OpAccessChain %226 %15 %235 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %72 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %221 %123 
                                                      OpStore %241 %240 
                                         i32 %242 = OpLoad %8 
                                         i32 %243 = OpSDiv %242 %25 
                              Uniform f32_4* %245 = OpAccessChain %226 %15 %243 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %72 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %221 %133 
                                                      OpStore %249 %248 
                                         i32 %251 = OpLoad %8 
                                         i32 %252 = OpSDiv %251 %25 
                              Uniform f32_4* %254 = OpAccessChain %226 %15 %252 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %202 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %221 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore vs_TEXCOORD3 %261 
                                Private f32* %263 = OpAccessChain %30 %123 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %98 %15 %165 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFMul %264 %267 
                                                      OpStore %262 %268 
                                       f32_4 %269 = OpLoad %30 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 3 
                                       f32_2 %273 = OpFMul %270 %272 
                                       f32_4 %274 = OpLoad %30 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 1 5 3 
                                                      OpStore %30 %275 
                                         f32 %276 = OpLoad %262 
                                         f32 %277 = OpFMul %276 %271 
                                Private f32* %279 = OpAccessChain %30 %278 
                                                      OpStore %279 %277 
                                       f32_4 %280 = OpLoad %30 
                                       f32_2 %281 = OpVectorShuffle %280 %280 2 2 
                                       f32_4 %282 = OpLoad %30 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 3 
                                       f32_2 %284 = OpFAdd %281 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD5 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %286 
                                                      OpStore vs_TEXCOORD6 %289 
                                         i32 %292 = OpLoad %10 
                                         u32 %293 = OpBitcast %292 
                                                      OpStore %291 %293 
                                 Output f32* %294 = OpAccessChain %127 %15 %123 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFNegate %295 
                                 Output f32* %297 = OpAccessChain %127 %15 %123 
                                                      OpStore %297 %296 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %105 %132 %184 %201 %229 %271 %295 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 105 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %120 DescriptorSet 120 
                                                      OpDecorate %120 Binding 120 
                                                      OpDecorate %132 Flat 
                                                      OpDecorate %132 Location 132 
                                                      OpMemberDecorate %135 0 Offset 135 
                                                      OpMemberDecorate %135 1 Offset 135 
                                                      OpDecorate %135 Block 
                                                      OpDecorate %137 DescriptorSet 137 
                                                      OpDecorate %137 Binding 137 
                                                      OpMemberDecorate %149 0 Offset 149 
                                                      OpMemberDecorate %149 1 Offset 149 
                                                      OpMemberDecorate %149 2 Offset 149 
                                                      OpMemberDecorate %149 3 Offset 149 
                                                      OpMemberDecorate %149 4 Offset 149 
                                                      OpMemberDecorate %149 5 Offset 149 
                                                      OpMemberDecorate %149 6 Offset 149 
                                                      OpDecorate %150 SpecId 150 
                                                      OpDecorate %151 ArrayStride 151 
                                                      OpMemberDecorate %152 0 Offset 152 
                                                      OpDecorate %152 Block 
                                                      OpDecorate %154 DescriptorSet 154 
                                                      OpDecorate %154 Binding 154 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate vs_TEXCOORD0 Location 184 
                                                      OpDecorate vs_TEXCOORD1 Location 201 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate vs_TEXCOORD4 Location 271 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %7 %16 %7 %7 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          i32 %90 = OpConstant 3 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         f32 %101 = OpConstant 3.674022E-40 
                                             %104 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %106 = OpTypeVector %6 2 
                                             %114 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %115 = OpTypePointer UniformConstant %114 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                                             %118 = OpTypeSampler 
                                             %119 = OpTypePointer UniformConstant %118 
                    UniformConstant sampler* %120 = OpVariable UniformConstant 
                                             %122 = OpTypeSampledImage %114 
                                             %129 = OpTypePointer Private %20 
                                Private i32* %130 = OpVariable Private 
                                             %131 = OpTypePointer Input %14 
                                  Input u32* %132 = OpVariable Input 
                                             %135 = OpTypeStruct %20 %20 
                                             %136 = OpTypePointer Uniform %135 
                 Uniform struct {i32; i32;}* %137 = OpVariable Uniform 
                                             %138 = OpTypePointer Uniform %20 
                                         i32 %143 = OpConstant 7 
                                Private f32* %145 = OpVariable Private 
                                             %149 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %150 = OpSpecConstant 2 
                                             %151 = OpTypeArray %149 %150 
                                             %152 = OpTypeStruct %151 
                                             %153 = OpTypePointer Uniform %152 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %154 = OpVariable Uniform 
                                         i32 %157 = OpConstant 6 
                                         i32 %171 = OpConstant 8 
        UniformConstant read_only Texture2D* %178 = OpVariable UniformConstant 
                    UniformConstant sampler* %180 = OpVariable UniformConstant 
                                             %183 = OpTypePointer Input %106 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %189 = OpConstant 9 
                              Private f32_4* %200 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %206 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %236 = OpConstantComposite %100 %100 %100 
                                Private f32* %244 = OpVariable Private 
                                             %270 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %294 = OpTypePointer Output %7 
                               Output f32_4* %295 = OpVariable Output 
                                             %307 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %19 %90 %53 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %89 %92 
                                 Uniform f32* %94 = OpAccessChain %19 %90 %78 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %35 
                                          f32 %99 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 43 %99 %100 %101 
                                Private f32* %103 = OpAccessChain %9 %35 
                                                      OpStore %103 %102 
                                       f32_4 %107 = OpLoad vs_TEXCOORD5 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad vs_TEXCOORD5 
                                       f32_2 %110 = OpVectorShuffle %109 %109 3 3 
                                       f32_2 %111 = OpFDiv %108 %110 
                                       f32_3 %112 = OpLoad %43 
                                       f32_3 %113 = OpVectorShuffle %112 %111 3 4 2 
                                                      OpStore %43 %113 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %121 = OpLoad %120 
                  read_only Texture2DSampled %123 = OpSampledImage %117 %121 
                                       f32_3 %124 = OpLoad %43 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_4 %126 = OpImageSampleImplicitLod %123 %125 
                                         f32 %127 = OpCompositeExtract %126 0 
                                Private f32* %128 = OpAccessChain %43 %35 
                                                      OpStore %128 %127 
                                         u32 %133 = OpLoad %132 
                                         i32 %134 = OpBitcast %133 
                                Uniform i32* %139 = OpAccessChain %137 %46 
                                         i32 %140 = OpLoad %139 
                                         i32 %141 = OpIAdd %134 %140 
                                                      OpStore %130 %141 
                                         i32 %142 = OpLoad %130 
                                         i32 %144 = OpIMul %142 %143 
                                                      OpStore %130 %144 
                                Private f32* %146 = OpAccessChain %43 %35 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         i32 %155 = OpLoad %130 
                                         i32 %156 = OpSDiv %155 %143 
                                Uniform f32* %158 = OpAccessChain %154 %46 %156 %157 %78 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %148 %159 
                                                      OpStore %145 %160 
                                Private f32* %161 = OpAccessChain %9 %35 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpLoad %145 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %43 %35 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                Private f32* %168 = OpAccessChain %9 %35 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 0 0 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %170 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 6 
                                                      OpStore %9 %177 
                         read_only Texture2D %179 = OpLoad %178 
                                     sampler %181 = OpLoad %180 
                  read_only Texture2DSampled %182 = OpSampledImage %179 %181 
                                       f32_2 %185 = OpLoad vs_TEXCOORD0 
                                       f32_4 %186 = OpImageSampleImplicitLod %182 %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %51 %187 
                                       f32_3 %188 = OpLoad %51 
                              Uniform f32_4* %190 = OpAccessChain %19 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFMul %188 %192 
                                                      OpStore %51 %193 
                                       f32_4 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 3 
                                       f32_3 %196 = OpLoad %51 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 6 
                                                      OpStore %9 %199 
                                       f32_3 %202 = OpLoad vs_TEXCOORD1 
                                       f32_4 %203 = OpLoad %200 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %200 %204 
                                Private f32* %205 = OpAccessChain %200 %78 
                                                      OpStore %205 %101 
                                         i32 %207 = OpLoad %130 
                                         i32 %208 = OpSDiv %207 %143 
                              Uniform f32_4* %209 = OpAccessChain %154 %46 %208 %46 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %206 %35 
                                                      OpStore %213 %212 
                                         i32 %214 = OpLoad %130 
                                         i32 %215 = OpSDiv %214 %143 
                              Uniform f32_4* %216 = OpAccessChain %154 %46 %215 %58 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %200 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %206 %61 
                                                      OpStore %220 %219 
                                         i32 %221 = OpLoad %130 
                                         i32 %222 = OpSDiv %221 %143 
                              Uniform f32_4* %223 = OpAccessChain %154 %46 %222 %63 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %200 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %206 %53 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %206 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %200 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %200 %233 
                                       f32_4 %234 = OpLoad %200 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %237 = OpExtInst %1 40 %235 %236 
                                       f32_4 %238 = OpLoad %200 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %200 %239 
                                       f32_3 %240 = OpLoad %51 
                                       f32_4 %241 = OpLoad %200 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                                      OpStore %51 %243 
                                       f32_3 %245 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %246 = OpAccessChain %19 %63 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                                      OpStore %244 %249 
                                         f32 %250 = OpLoad %244 
                                         f32 %251 = OpExtInst %1 40 %250 %100 
                                                      OpStore %244 %251 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %244 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                              Uniform f32_4* %263 = OpAccessChain %19 %157 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFNegate %265 
                                       f32_3 %267 = OpFAdd %262 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %9 %269 
                                         f32 %272 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %273 = OpAccessChain %19 %58 %61 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFDiv %272 %274 
                                                      OpStore %145 %275 
                                         f32 %276 = OpLoad %145 
                                         f32 %277 = OpFNegate %276 
                                         f32 %278 = OpFAdd %277 %101 
                                                      OpStore %145 %278 
                                         f32 %279 = OpLoad %145 
                                Uniform f32* %280 = OpAccessChain %19 %58 %53 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFMul %279 %281 
                                                      OpStore %145 %282 
                                         f32 %283 = OpLoad %145 
                                         f32 %284 = OpExtInst %1 40 %283 %100 
                                                      OpStore %145 %284 
                                         f32 %285 = OpLoad %145 
                                Uniform f32* %286 = OpAccessChain %19 %143 %53 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                Uniform f32* %289 = OpAccessChain %19 %143 %78 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFAdd %288 %290 
                                                      OpStore %145 %291 
                                         f32 %292 = OpLoad %145 
                                         f32 %293 = OpExtInst %1 43 %292 %100 %101 
                                                      OpStore %145 %293 
                                         f32 %296 = OpLoad %145 
                                       f32_3 %297 = OpCompositeConstruct %296 %296 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %297 %299 
                              Uniform f32_4* %301 = OpAccessChain %19 %157 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %300 %303 
                                       f32_4 %305 = OpLoad %295 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %295 %306 
                                 Output f32* %308 = OpAccessChain %295 %78 
                                                      OpStore %308 %101 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 201
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %135 %136 %148 %182 %188 %191 %193 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD0 Location 135 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 182 
                                                      OpDecorate vs_TEXCOORD5 Location 188 
                                                      OpDecorate vs_TEXCOORD6 Location 191 
                                                      OpDecorate %193 Flat 
                                                      OpDecorate %193 Location 193 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                                             %133 = OpTypeVector %23 2 
                                             %134 = OpTypePointer Output %133 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %136 = OpVariable Input 
                                             %147 = OpTypePointer Input %75 
                                Input f32_3* %148 = OpVariable Input 
                                         u32 %156 = OpConstant 0 
                                Private f32* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %189 = OpConstant 3.674022E-40 
                                       f32_4 %190 = OpConstantComposite %189 %189 %189 %189 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %192 = OpTypePointer Output %31 
                                 Output u32* %193 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %15 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %139 = OpAccessChain %94 %44 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %138 %141 
                              Uniform f32_4* %143 = OpAccessChain %94 %44 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                                         i32 %150 = OpLoad %8 
                                         i32 %151 = OpSDiv %150 %42 
                              Uniform f32_4* %152 = OpAccessChain %40 %15 %151 %44 %15 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %149 %154 
                                Private f32* %157 = OpAccessChain %26 %156 
                                                      OpStore %157 %155 
                                       f32_3 %158 = OpLoad %148 
                                         i32 %159 = OpLoad %8 
                                         i32 %160 = OpSDiv %159 %42 
                              Uniform f32_4* %161 = OpAccessChain %40 %15 %160 %44 %44 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %165 = OpAccessChain %26 %119 
                                                      OpStore %165 %164 
                                       f32_3 %166 = OpLoad %148 
                                         i32 %167 = OpLoad %8 
                                         i32 %168 = OpSDiv %167 %42 
                              Uniform f32_4* %169 = OpAccessChain %40 %15 %168 %44 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %166 %171 
                                Private f32* %173 = OpAccessChain %26 %129 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %174 %179 
                                         f32 %180 = OpLoad %174 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %174 %181 
                                         f32 %183 = OpLoad %174 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_4 %185 = OpLoad %26 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore vs_TEXCOORD1 %187 
                                                      OpStore vs_TEXCOORD5 %190 
                                                      OpStore vs_TEXCOORD6 %190 
                                         i32 %194 = OpLoad %10 
                                         u32 %195 = OpBitcast %194 
                                                      OpStore %193 %195 
                                 Output f32* %196 = OpAccessChain %123 %15 %119 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                 Output f32* %199 = OpAccessChain %123 %15 %119 
                                                      OpStore %199 %198 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 114
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %47 %68 %100 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpMemberDecorate %28 1 Offset 28 
                                                      OpMemberDecorate %28 2 Offset 28 
                                                      OpMemberDecorate %28 3 Offset 28 
                                                      OpMemberDecorate %28 4 Offset 28 
                                                      OpMemberDecorate %28 5 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %100 Location 100 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 %24 %24 %24 %24 %24 
                                              %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 5 
                                              %33 = OpTypePointer Uniform %24 
                                          i32 %39 = OpConstant 4 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 1 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 2 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          i32 %70 = OpConstant 0 
                                              %71 = OpTypeInt 32 0 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypePointer Uniform %6 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          u32 %82 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                          u32 %93 = OpConstant 3 
                                              %99 = OpTypePointer Output %24 
                               Output f32_4* %100 = OpVariable Output 
                                             %111 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %38 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %30 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %38 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %30 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %30 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                 Uniform f32* %74 = OpAccessChain %30 %70 %72 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %69 %75 
                                                      OpStore %45 %76 
                                          f32 %77 = OpLoad %45 
                                          f32 %78 = OpFNegate %77 
                                          f32 %80 = OpFAdd %78 %79 
                                                      OpStore %45 %80 
                                          f32 %81 = OpLoad %45 
                                 Uniform f32* %83 = OpAccessChain %30 %70 %82 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %81 %84 
                                                      OpStore %45 %85 
                                          f32 %86 = OpLoad %45 
                                          f32 %87 = OpExtInst %1 40 %86 %55 
                                                      OpStore %45 %87 
                                          f32 %88 = OpLoad %45 
                                 Uniform f32* %90 = OpAccessChain %30 %89 %82 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %94 = OpAccessChain %30 %89 %93 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %92 %95 
                                                      OpStore %45 %96 
                                          f32 %97 = OpLoad %45 
                                          f32 %98 = OpExtInst %1 43 %97 %55 %79 
                                                      OpStore %45 %98 
                                         f32 %101 = OpLoad %45 
                                       f32_3 %102 = OpCompositeConstruct %101 %101 %101 
                                       f32_3 %103 = OpLoad %9 
                                       f32_3 %104 = OpFMul %102 %103 
                              Uniform f32_4* %105 = OpAccessChain %30 %61 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %100 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %100 %110 
                                 Output f32* %112 = OpAccessChain %100 %93 
                                                      OpStore %112 %79 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
int u_xlati6;
float u_xlat19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat19 = u_xlat6.y * u_xlat6.y;
    u_xlat19 = u_xlat6.x * u_xlat6.x + (-u_xlat19);
    u_xlat2 = u_xlat6.yzzx * u_xlat6.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat2.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat6.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat6.xxxx + u_xlat4;
    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat9 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 398
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %136 %143 %144 %157 %201 %203 %381 %387 %388 %390 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 136 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD1 Location 201 
                                                      OpDecorate vs_TEXCOORD2 Location 203 
                                                      OpMemberDecorate %225 0 Offset 225 
                                                      OpMemberDecorate %225 1 Offset 225 
                                                      OpMemberDecorate %225 2 Offset 225 
                                                      OpMemberDecorate %225 3 Offset 225 
                                                      OpMemberDecorate %225 4 Offset 225 
                                                      OpMemberDecorate %225 5 Offset 225 
                                                      OpMemberDecorate %225 6 Offset 225 
                                                      OpDecorate %226 ArrayStride 226 
                                                      OpMemberDecorate %227 0 Offset 227 
                                                      OpDecorate %227 Block 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate vs_TEXCOORD3 Location 381 
                                                      OpDecorate vs_TEXCOORD5 Location 387 
                                                      OpDecorate vs_TEXCOORD6 Location 388 
                                                      OpDecorate %390 Flat 
                                                      OpDecorate %390 Location 390 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 5 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %137 = OpConstant 2 
                                             %138 = OpTypePointer Private %27 
                                             %141 = OpTypeVector %27 2 
                                             %142 = OpTypePointer Output %141 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %144 = OpVariable Input 
                                         i32 %147 = OpConstant 6 
                                             %156 = OpTypePointer Input %81 
                                Input f32_3* %157 = OpVariable Input 
                                         u32 %165 = OpConstant 0 
                                             %183 = OpTypePointer Private %81 
                              Private f32_3* %184 = OpVariable Private 
                                             %200 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                Private f32* %206 = OpVariable Private 
                                             %225 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %226 = OpTypeArray %225 %40 
                                             %227 = OpTypeStruct %226 
                                             %228 = OpTypePointer Uniform %227 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %229 = OpVariable Uniform 
                                         i32 %239 = OpConstant 4 
                              Private f32_4* %271 = OpVariable Private 
                              Private f32_4* %279 = OpVariable Private 
                              Private f32_4* %298 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_4 %317 = OpConstantComposite %316 %316 %316 %316 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_4 %326 = OpConstantComposite %325 %325 %325 %325 
                                         f32 %334 = OpConstant 3.674022E-40 
                                       f32_4 %335 = OpConstantComposite %334 %334 %334 %334 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %389 = OpTypePointer Output %35 
                                 Output u32* %390 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                Private f32* %139 = OpAccessChain %72 %137 
                                         f32 %140 = OpLoad %139 
                                                      OpStore vs_TEXCOORD4 %140 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                              Uniform f32_4* %148 = OpAccessChain %101 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %146 %150 
                              Uniform f32_4* %152 = OpAccessChain %101 %147 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_3 %158 = OpLoad %157 
                                         i32 %159 = OpLoad %20 
                                         i32 %160 = OpSDiv %159 %46 
                              Uniform f32_4* %161 = OpAccessChain %44 %15 %160 %48 %15 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %166 = OpAccessChain %72 %165 
                                                      OpStore %166 %164 
                                       f32_3 %167 = OpLoad %157 
                                         i32 %168 = OpLoad %20 
                                         i32 %169 = OpSDiv %168 %46 
                              Uniform f32_4* %170 = OpAccessChain %44 %15 %169 %48 %48 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %167 %172 
                                Private f32* %174 = OpAccessChain %72 %127 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %157 
                                         i32 %176 = OpLoad %20 
                                         i32 %177 = OpSDiv %176 %46 
                              Uniform f32_4* %178 = OpAccessChain %44 %15 %177 %48 %64 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %175 %180 
                                Private f32* %182 = OpAccessChain %72 %137 
                                                      OpStore %182 %181 
                                       f32_4 %185 = OpLoad %72 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %72 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %186 %188 
                                Private f32* %190 = OpAccessChain %184 %165 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %184 %165 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %184 %165 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %184 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_4 %197 = OpLoad %72 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %184 %199 
                                       f32_3 %202 = OpLoad %184 
                                                      OpStore vs_TEXCOORD1 %202 
                                       f32_4 %204 = OpLoad %30 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore vs_TEXCOORD2 %205 
                                Private f32* %207 = OpAccessChain %184 %127 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %184 %127 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                                      OpStore %206 %211 
                                Private f32* %212 = OpAccessChain %184 %165 
                                         f32 %213 = OpLoad %212 
                                Private f32* %214 = OpAccessChain %184 %165 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpFMul %213 %215 
                                         f32 %217 = OpLoad %206 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %216 %218 
                                                      OpStore %206 %219 
                                       f32_3 %220 = OpLoad %184 
                                       f32_4 %221 = OpVectorShuffle %220 %220 1 2 2 0 
                                       f32_3 %222 = OpLoad %184 
                                       f32_4 %223 = OpVectorShuffle %222 %222 0 1 2 2 
                                       f32_4 %224 = OpFMul %221 %223 
                                                      OpStore %72 %224 
                                         i32 %230 = OpLoad %8 
                                         i32 %231 = OpSDiv %230 %25 
                              Uniform f32_4* %232 = OpAccessChain %229 %15 %231 %22 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %72 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %93 %165 
                                                      OpStore %236 %235 
                                         i32 %237 = OpLoad %8 
                                         i32 %238 = OpSDiv %237 %25 
                              Uniform f32_4* %240 = OpAccessChain %229 %15 %238 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %72 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %93 %127 
                                                      OpStore %244 %243 
                                         i32 %245 = OpLoad %8 
                                         i32 %246 = OpSDiv %245 %25 
                              Uniform f32_4* %247 = OpAccessChain %229 %15 %246 %102 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %72 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %93 %137 
                                                      OpStore %251 %250 
                                         i32 %252 = OpLoad %8 
                                         i32 %253 = OpSDiv %252 %25 
                              Uniform f32_4* %254 = OpAccessChain %229 %15 %253 %147 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %206 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %93 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %72 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %72 %264 
                                       f32_4 %265 = OpLoad %30 
                                       f32_4 %266 = OpVectorShuffle %265 %265 1 1 1 1 
                                       f32_4 %267 = OpFNegate %266 
                              Uniform f32_4* %268 = OpAccessChain %101 %48 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpFAdd %267 %269 
                                                      OpStore %93 %270 
                                       f32_3 %272 = OpLoad %184 
                                       f32_4 %273 = OpVectorShuffle %272 %272 1 1 1 1 
                                       f32_4 %274 = OpLoad %93 
                                       f32_4 %275 = OpFMul %273 %274 
                                                      OpStore %271 %275 
                                       f32_4 %276 = OpLoad %93 
                                       f32_4 %277 = OpLoad %93 
                                       f32_4 %278 = OpFMul %276 %277 
                                                      OpStore %93 %278 
                                       f32_4 %280 = OpLoad %30 
                                       f32_4 %281 = OpVectorShuffle %280 %280 0 0 0 0 
                                       f32_4 %282 = OpFNegate %281 
                              Uniform f32_4* %283 = OpAccessChain %101 %15 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpFAdd %282 %284 
                                                      OpStore %279 %285 
                                       f32_4 %286 = OpLoad %30 
                                       f32_4 %287 = OpVectorShuffle %286 %286 2 2 2 2 
                                       f32_4 %288 = OpFNegate %287 
                              Uniform f32_4* %289 = OpAccessChain %101 %64 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpFAdd %288 %290 
                                                      OpStore %30 %291 
                                       f32_4 %292 = OpLoad %279 
                                       f32_3 %293 = OpLoad %184 
                                       f32_4 %294 = OpVectorShuffle %293 %293 0 0 0 0 
                                       f32_4 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %271 
                                       f32_4 %297 = OpFAdd %295 %296 
                                                      OpStore %271 %297 
                                       f32_4 %299 = OpLoad %30 
                                       f32_3 %300 = OpLoad %184 
                                       f32_4 %301 = OpVectorShuffle %300 %300 2 2 2 2 
                                       f32_4 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %271 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %298 %304 
                                       f32_4 %305 = OpLoad %279 
                                       f32_4 %306 = OpLoad %279 
                                       f32_4 %307 = OpFMul %305 %306 
                                       f32_4 %308 = OpLoad %93 
                                       f32_4 %309 = OpFAdd %307 %308 
                                                      OpStore %93 %309 
                                       f32_4 %310 = OpLoad %30 
                                       f32_4 %311 = OpLoad %30 
                                       f32_4 %312 = OpFMul %310 %311 
                                       f32_4 %313 = OpLoad %93 
                                       f32_4 %314 = OpFAdd %312 %313 
                                                      OpStore %30 %314 
                                       f32_4 %315 = OpLoad %30 
                                       f32_4 %318 = OpExtInst %1 40 %315 %317 
                                                      OpStore %30 %318 
                                       f32_4 %319 = OpLoad %30 
                                       f32_4 %320 = OpExtInst %1 32 %319 
                                                      OpStore %93 %320 
                                       f32_4 %321 = OpLoad %30 
                              Uniform f32_4* %322 = OpAccessChain %101 %22 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpFMul %321 %323 
                                       f32_4 %327 = OpFAdd %324 %326 
                                                      OpStore %30 %327 
                                       f32_4 %328 = OpLoad %30 
                                       f32_4 %329 = OpFDiv %326 %328 
                                                      OpStore %30 %329 
                                       f32_4 %330 = OpLoad %298 
                                       f32_4 %331 = OpLoad %93 
                                       f32_4 %332 = OpFMul %330 %331 
                                                      OpStore %298 %332 
                                       f32_4 %333 = OpLoad %298 
                                       f32_4 %336 = OpExtInst %1 40 %333 %335 
                                                      OpStore %298 %336 
                                       f32_4 %337 = OpLoad %30 
                                       f32_4 %338 = OpLoad %298 
                                       f32_4 %339 = OpFMul %337 %338 
                                                      OpStore %298 %339 
                                       f32_4 %340 = OpLoad %298 
                                       f32_3 %341 = OpVectorShuffle %340 %340 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %101 %239 %48 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %341 %344 
                                       f32_4 %346 = OpLoad %30 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %30 %347 
                              Uniform f32_4* %348 = OpAccessChain %101 %239 %15 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %298 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 0 0 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %30 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %30 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %30 %358 
                              Uniform f32_4* %359 = OpAccessChain %101 %239 %64 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %298 
                                       f32_3 %363 = OpVectorShuffle %362 %362 2 2 2 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_4 %365 = OpLoad %30 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %298 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %298 %369 
                              Uniform f32_4* %370 = OpAccessChain %101 %239 %22 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %298 
                                       f32_3 %374 = OpVectorShuffle %373 %373 3 3 3 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %298 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %298 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %298 %380 
                                       f32_4 %382 = OpLoad %72 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %298 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFAdd %383 %385 
                                                      OpStore vs_TEXCOORD3 %386 
                                                      OpStore vs_TEXCOORD5 %335 
                                                      OpStore vs_TEXCOORD6 %335 
                                         i32 %391 = OpLoad %10 
                                         u32 %392 = OpBitcast %391 
                                                      OpStore %390 %392 
                                 Output f32* %393 = OpAccessChain %131 %15 %127 
                                         f32 %394 = OpLoad %393 
                                         f32 %395 = OpFNegate %394 
                                 Output f32* %396 = OpAccessChain %131 %15 %127 
                                                      OpStore %396 %395 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %90 %114 %155 %181 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpMemberDecorate %75 3 Offset 75 
                                                      OpMemberDecorate %75 4 Offset 75 
                                                      OpMemberDecorate %75 5 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 90 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate vs_TEXCOORD4 Location 155 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %78 = OpConstant 4 
                                          i32 %84 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                                             %102 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %103 = OpTypePointer UniformConstant %102 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampler 
                                             %107 = OpTypePointer UniformConstant %106 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                             %110 = OpTypeSampledImage %102 
                                             %112 = OpTypeVector %25 2 
                                             %113 = OpTypePointer Input %112 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %119 = OpConstant 5 
                                Private f32* %133 = OpVariable Private 
                                             %154 = OpTypePointer Input %25 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %157 = OpTypePointer Uniform %25 
                                         i32 %171 = OpConstant 3 
                                             %180 = OpTypePointer Output %26 
                               Output f32_4* %181 = OpVariable Output 
                                             %192 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %79 = OpAccessChain %77 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                          i32 %82 = OpLoad %8 
                                          i32 %83 = OpSDiv %82 %23 
                               Uniform f32_4* %85 = OpAccessChain %46 %17 %83 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_3 %88 = OpFMul %81 %87 
                                                      OpStore %74 %88 
                                        f32_3 %89 = OpLoad %40 
                                        f32_3 %91 = OpLoad vs_TEXCOORD3 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %28 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %28 %94 
                                        f32_4 %95 = OpLoad %28 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %99 = OpExtInst %1 40 %96 %98 
                                       f32_4 %100 = OpLoad %28 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %28 %101 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %111 = OpSampledImage %105 %109 
                                       f32_2 %115 = OpLoad vs_TEXCOORD0 
                                       f32_4 %116 = OpImageSampleImplicitLod %111 %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                                      OpStore %40 %117 
                                       f32_3 %118 = OpLoad %40 
                              Uniform f32_4* %120 = OpAccessChain %77 %119 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFMul %118 %122 
                                                      OpStore %40 %123 
                                       f32_4 %124 = OpLoad %28 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %40 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_4 %128 = OpLoad %28 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %28 %129 
                                       f32_3 %130 = OpLoad %74 
                                       f32_3 %131 = OpLoad %40 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %74 %132 
                                       f32_3 %134 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %135 = OpAccessChain %77 %58 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 40 %139 %97 
                                                      OpStore %133 %140 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %133 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                                      OpStore %74 %147 
                                       f32_3 %148 = OpLoad %74 
                              Uniform f32_4* %149 = OpAccessChain %77 %67 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %74 %153 
                                         f32 %156 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %158 = OpAccessChain %77 %17 %63 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFDiv %156 %159 
                                                      OpStore %133 %160 
                                         f32 %161 = OpLoad %133 
                                         f32 %162 = OpFNegate %161 
                                         f32 %163 = OpFAdd %162 %35 
                                                      OpStore %133 %163 
                                         f32 %164 = OpLoad %133 
                                Uniform f32* %165 = OpAccessChain %77 %17 %72 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                                      OpStore %133 %167 
                                         f32 %168 = OpLoad %133 
                                         f32 %169 = OpExtInst %1 40 %168 %97 
                                                      OpStore %133 %169 
                                         f32 %170 = OpLoad %133 
                                Uniform f32* %172 = OpAccessChain %77 %171 %72 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %170 %173 
                                Uniform f32* %175 = OpAccessChain %77 %171 %36 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                                      OpStore %133 %177 
                                         f32 %178 = OpLoad %133 
                                         f32 %179 = OpExtInst %1 43 %178 %97 %35 
                                                      OpStore %133 %179 
                                         f32 %182 = OpLoad %133 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_3 %184 = OpLoad %74 
                                       f32_3 %185 = OpFMul %183 %184 
                              Uniform f32_4* %186 = OpAccessChain %77 %67 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %181 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %181 %191 
                                 Output f32* %193 = OpAccessChain %181 %36 
                                                      OpStore %193 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 229
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %187 %217 %221 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD5 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 187 
                                                      OpDecorate vs_TEXCOORD6 Location 217 
                                                      OpDecorate %221 Flat 
                                                      OpDecorate %221 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                             %152 = OpTypePointer Input %75 
                                Input f32_3* %153 = OpVariable Input 
                                         u32 %161 = OpConstant 0 
                                Private f32* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %195 = OpTypePointer Uniform %23 
                                         f32 %201 = OpConstant 3.674022E-40 
                                       f32_2 %202 = OpConstantComposite %201 %201 
                                         u32 %208 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %218 = OpConstant 3.674022E-40 
                                       f32_4 %219 = OpConstantComposite %218 %218 %218 %218 
                                             %220 = OpTypePointer Output %31 
                                 Output u32* %221 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %144 = OpAccessChain %94 %60 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %143 %146 
                              Uniform f32_4* %148 = OpAccessChain %94 %60 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                                         i32 %155 = OpLoad %8 
                                         i32 %156 = OpSDiv %155 %42 
                              Uniform f32_4* %157 = OpAccessChain %40 %15 %156 %44 %15 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %154 %159 
                                Private f32* %162 = OpAccessChain %68 %161 
                                                      OpStore %162 %160 
                                       f32_3 %163 = OpLoad %153 
                                         i32 %164 = OpLoad %8 
                                         i32 %165 = OpSDiv %164 %42 
                              Uniform f32_4* %166 = OpAccessChain %40 %15 %165 %44 %44 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %163 %168 
                                Private f32* %170 = OpAccessChain %68 %119 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %153 
                                         i32 %172 = OpLoad %8 
                                         i32 %173 = OpSDiv %172 %42 
                              Uniform f32_4* %174 = OpAccessChain %40 %15 %173 %44 %60 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %68 %129 
                                                      OpStore %178 %177 
                                       f32_4 %180 = OpLoad %68 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %68 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                                      OpStore %179 %184 
                                         f32 %185 = OpLoad %179 
                                         f32 %186 = OpExtInst %1 32 %185 
                                                      OpStore %179 %186 
                                         f32 %188 = OpLoad %179 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %68 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                                      OpStore vs_TEXCOORD1 %192 
                                Private f32* %193 = OpAccessChain %26 %119 
                                         f32 %194 = OpLoad %193 
                                Uniform f32* %196 = OpAccessChain %94 %15 %161 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                                      OpStore %179 %198 
                                       f32_4 %199 = OpLoad %26 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 3 
                                       f32_2 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %26 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 1 5 3 
                                                      OpStore %26 %205 
                                         f32 %206 = OpLoad %179 
                                         f32 %207 = OpFMul %206 %201 
                                Private f32* %209 = OpAccessChain %26 %208 
                                                      OpStore %209 %207 
                                       f32_4 %210 = OpLoad %26 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 2 
                                       f32_4 %212 = OpLoad %26 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 3 
                                       f32_2 %214 = OpFAdd %211 %213 
                                       f32_4 %215 = OpLoad vs_TEXCOORD5 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %216 
                                                      OpStore vs_TEXCOORD6 %219 
                                         i32 %222 = OpLoad %10 
                                         u32 %223 = OpBitcast %222 
                                                      OpStore %221 %223 
                                 Output f32* %224 = OpAccessChain %123 %15 %119 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFNegate %225 
                                 Output f32* %227 = OpAccessChain %123 %15 %119 
                                                      OpStore %227 %226 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %164 %183 %208 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD4 Location 183 
                                                      OpDecorate %208 Location 208 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %176 = OpConstant 6 
                                             %182 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %198 = OpConstant 7 
                                             %207 = OpTypePointer Output %13 
                               Output f32_4* %208 = OpVariable Output 
                                             %219 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                              Uniform f32_4* %156 = OpAccessChain %19 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %154 %158 
                                                      OpStore %46 %159 
                                       f32_3 %160 = OpLoad %9 
                                       f32_3 %161 = OpLoad %46 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %9 %162 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %166 = OpAccessChain %19 %58 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                                      OpStore %163 %169 
                                         f32 %170 = OpLoad %163 
                                         f32 %171 = OpExtInst %1 40 %170 %95 
                                                      OpStore %163 %171 
                                       f32_3 %172 = OpLoad %9 
                                         f32 %173 = OpLoad %163 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFNegate %179 
                                       f32_3 %181 = OpFAdd %175 %180 
                                                      OpStore %9 %181 
                                         f32 %184 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %185 = OpAccessChain %19 %53 %56 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFDiv %184 %186 
                                                      OpStore %163 %187 
                                         f32 %188 = OpLoad %163 
                                         f32 %189 = OpFNegate %188 
                                         f32 %190 = OpFAdd %189 %96 
                                                      OpStore %163 %190 
                                         f32 %191 = OpLoad %163 
                                Uniform f32* %192 = OpAccessChain %19 %53 %48 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                                      OpStore %163 %194 
                                         f32 %195 = OpLoad %163 
                                         f32 %196 = OpExtInst %1 40 %195 %95 
                                                      OpStore %163 %196 
                                         f32 %197 = OpLoad %163 
                                Uniform f32* %199 = OpAccessChain %19 %198 %48 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                Uniform f32* %202 = OpAccessChain %19 %198 %73 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                                      OpStore %163 %204 
                                         f32 %205 = OpLoad %163 
                                         f32 %206 = OpExtInst %1 43 %205 %95 %96 
                                                      OpStore %163 %206 
                                         f32 %209 = OpLoad %163 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                              Uniform f32_4* %213 = OpAccessChain %19 %176 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %208 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %208 %218 
                                 Output f32* %220 = OpAccessChain %208 %73 
                                                      OpStore %220 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat22 = u_xlat7.y * u_xlat7.y;
    u_xlat22 = u_xlat7.x * u_xlat7.x + (-u_xlat22);
    u_xlat3 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    u_xlat3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat7.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat7.xxxx + u_xlat5;
    u_xlat0 = u_xlat1 * u_xlat7.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 429
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %136 %141 %148 %149 %161 %205 %207 %387 %419 %421 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpMemberDecorate %99 7 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 136 
                                                      OpDecorate vs_TEXCOORD5 Location 141 
                                                      OpDecorate vs_TEXCOORD0 Location 148 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD1 Location 205 
                                                      OpDecorate vs_TEXCOORD2 Location 207 
                                                      OpMemberDecorate %230 0 Offset 230 
                                                      OpMemberDecorate %230 1 Offset 230 
                                                      OpMemberDecorate %230 2 Offset 230 
                                                      OpMemberDecorate %230 3 Offset 230 
                                                      OpMemberDecorate %230 4 Offset 230 
                                                      OpMemberDecorate %230 5 Offset 230 
                                                      OpMemberDecorate %230 6 Offset 230 
                                                      OpDecorate %231 ArrayStride 231 
                                                      OpMemberDecorate %232 0 Offset 232 
                                                      OpDecorate %232 Block 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate vs_TEXCOORD3 Location 387 
                                                      OpDecorate vs_TEXCOORD6 Location 419 
                                                      OpDecorate %421 Flat 
                                                      OpDecorate %421 Location 421 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 6 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %137 = OpConstant 2 
                                             %138 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %142 = OpTypeVector %27 2 
                                             %147 = OpTypePointer Output %142 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %149 = OpVariable Input 
                                             %160 = OpTypePointer Input %81 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %169 = OpConstant 0 
                                             %187 = OpTypePointer Private %81 
                              Private f32_3* %188 = OpVariable Private 
                                             %204 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                Private f32* %210 = OpVariable Private 
                              Private f32_4* %229 = OpVariable Private 
                                             %230 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %231 = OpTypeArray %230 %40 
                                             %232 = OpTypeStruct %231 
                                             %233 = OpTypePointer Uniform %232 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %234 = OpVariable Uniform 
                                         i32 %244 = OpConstant 4 
                                         i32 %252 = OpConstant 5 
                              Private f32_4* %277 = OpVariable Private 
                              Private f32_4* %285 = OpVariable Private 
                              Private f32_4* %304 = OpVariable Private 
                                         f32 %322 = OpConstant 3.674022E-40 
                                       f32_4 %323 = OpConstantComposite %322 %322 %322 %322 
                                         f32 %331 = OpConstant 3.674022E-40 
                                       f32_4 %332 = OpConstantComposite %331 %331 %331 %331 
                                         f32 %340 = OpConstant 3.674022E-40 
                                       f32_4 %341 = OpConstantComposite %340 %340 %340 %340 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %395 = OpTypePointer Uniform %27 
                                         f32 %402 = OpConstant 3.674022E-40 
                                       f32_2 %403 = OpConstantComposite %402 %402 
                                         u32 %410 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %420 = OpTypePointer Output %35 
                                 Output u32* %421 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                Private f32* %139 = OpAccessChain %72 %137 
                                         f32 %140 = OpLoad %139 
                                                      OpStore vs_TEXCOORD4 %140 
                                       f32_4 %143 = OpLoad %72 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_4 %145 = OpLoad vs_TEXCOORD5 
                                       f32_4 %146 = OpVectorShuffle %145 %144 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %146 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                              Uniform f32_4* %152 = OpAccessChain %101 %25 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %151 %154 
                              Uniform f32_4* %156 = OpAccessChain %101 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                                      OpStore vs_TEXCOORD0 %159 
                                       f32_3 %162 = OpLoad %161 
                                         i32 %163 = OpLoad %20 
                                         i32 %164 = OpSDiv %163 %46 
                              Uniform f32_4* %165 = OpAccessChain %44 %15 %164 %48 %15 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %162 %167 
                                Private f32* %170 = OpAccessChain %93 %169 
                                                      OpStore %170 %168 
                                       f32_3 %171 = OpLoad %161 
                                         i32 %172 = OpLoad %20 
                                         i32 %173 = OpSDiv %172 %46 
                              Uniform f32_4* %174 = OpAccessChain %44 %15 %173 %48 %48 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %93 %127 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %161 
                                         i32 %180 = OpLoad %20 
                                         i32 %181 = OpSDiv %180 %46 
                              Uniform f32_4* %182 = OpAccessChain %44 %15 %181 %48 %64 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %179 %184 
                                Private f32* %186 = OpAccessChain %93 %137 
                                                      OpStore %186 %185 
                                       f32_4 %189 = OpLoad %93 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %93 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %188 %169 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %188 %169 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 32 %196 
                                Private f32* %198 = OpAccessChain %188 %169 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %188 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_4 %201 = OpLoad %93 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %188 %203 
                                       f32_3 %206 = OpLoad %188 
                                                      OpStore vs_TEXCOORD1 %206 
                                       f32_4 %208 = OpLoad %30 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore vs_TEXCOORD2 %209 
                                Private f32* %211 = OpAccessChain %188 %127 
                                         f32 %212 = OpLoad %211 
                                Private f32* %213 = OpAccessChain %188 %127 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                                      OpStore %210 %215 
                                Private f32* %216 = OpAccessChain %188 %169 
                                         f32 %217 = OpLoad %216 
                                Private f32* %218 = OpAccessChain %188 %169 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %217 %219 
                                         f32 %221 = OpLoad %210 
                                         f32 %222 = OpFNegate %221 
                                         f32 %223 = OpFAdd %220 %222 
                                                      OpStore %210 %223 
                                       f32_3 %224 = OpLoad %188 
                                       f32_4 %225 = OpVectorShuffle %224 %224 1 2 2 0 
                                       f32_3 %226 = OpLoad %188 
                                       f32_4 %227 = OpVectorShuffle %226 %226 0 1 2 2 
                                       f32_4 %228 = OpFMul %225 %227 
                                                      OpStore %93 %228 
                                         i32 %235 = OpLoad %8 
                                         i32 %236 = OpSDiv %235 %25 
                              Uniform f32_4* %237 = OpAccessChain %234 %15 %236 %22 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %93 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %229 %169 
                                                      OpStore %241 %240 
                                         i32 %242 = OpLoad %8 
                                         i32 %243 = OpSDiv %242 %25 
                              Uniform f32_4* %245 = OpAccessChain %234 %15 %243 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %93 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %229 %127 
                                                      OpStore %249 %248 
                                         i32 %250 = OpLoad %8 
                                         i32 %251 = OpSDiv %250 %25 
                              Uniform f32_4* %253 = OpAccessChain %234 %15 %251 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %93 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %229 %137 
                                                      OpStore %257 %256 
                                         i32 %258 = OpLoad %8 
                                         i32 %259 = OpSDiv %258 %25 
                              Uniform f32_4* %260 = OpAccessChain %234 %15 %259 %102 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                         f32 %263 = OpLoad %210 
                                       f32_3 %264 = OpCompositeConstruct %263 %263 %263 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %229 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %93 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %93 %270 
                                       f32_4 %271 = OpLoad %30 
                                       f32_4 %272 = OpVectorShuffle %271 %271 1 1 1 1 
                                       f32_4 %273 = OpFNegate %272 
                              Uniform f32_4* %274 = OpAccessChain %101 %64 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpFAdd %273 %275 
                                                      OpStore %229 %276 
                                       f32_3 %278 = OpLoad %188 
                                       f32_4 %279 = OpVectorShuffle %278 %278 1 1 1 1 
                                       f32_4 %280 = OpLoad %229 
                                       f32_4 %281 = OpFMul %279 %280 
                                                      OpStore %277 %281 
                                       f32_4 %282 = OpLoad %229 
                                       f32_4 %283 = OpLoad %229 
                                       f32_4 %284 = OpFMul %282 %283 
                                                      OpStore %229 %284 
                                       f32_4 %286 = OpLoad %30 
                                       f32_4 %287 = OpVectorShuffle %286 %286 0 0 0 0 
                                       f32_4 %288 = OpFNegate %287 
                              Uniform f32_4* %289 = OpAccessChain %101 %48 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpFAdd %288 %290 
                                                      OpStore %285 %291 
                                       f32_4 %292 = OpLoad %30 
                                       f32_4 %293 = OpVectorShuffle %292 %292 2 2 2 2 
                                       f32_4 %294 = OpFNegate %293 
                              Uniform f32_4* %295 = OpAccessChain %101 %22 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpFAdd %294 %296 
                                                      OpStore %30 %297 
                                       f32_4 %298 = OpLoad %285 
                                       f32_3 %299 = OpLoad %188 
                                       f32_4 %300 = OpVectorShuffle %299 %299 0 0 0 0 
                                       f32_4 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %277 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %277 %303 
                                       f32_4 %305 = OpLoad %30 
                                       f32_3 %306 = OpLoad %188 
                                       f32_4 %307 = OpVectorShuffle %306 %306 2 2 2 2 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %277 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %304 %310 
                                       f32_4 %311 = OpLoad %285 
                                       f32_4 %312 = OpLoad %285 
                                       f32_4 %313 = OpFMul %311 %312 
                                       f32_4 %314 = OpLoad %229 
                                       f32_4 %315 = OpFAdd %313 %314 
                                                      OpStore %229 %315 
                                       f32_4 %316 = OpLoad %30 
                                       f32_4 %317 = OpLoad %30 
                                       f32_4 %318 = OpFMul %316 %317 
                                       f32_4 %319 = OpLoad %229 
                                       f32_4 %320 = OpFAdd %318 %319 
                                                      OpStore %30 %320 
                                       f32_4 %321 = OpLoad %30 
                                       f32_4 %324 = OpExtInst %1 40 %321 %323 
                                                      OpStore %30 %324 
                                       f32_4 %325 = OpLoad %30 
                                       f32_4 %326 = OpExtInst %1 32 %325 
                                                      OpStore %229 %326 
                                       f32_4 %327 = OpLoad %30 
                              Uniform f32_4* %328 = OpAccessChain %101 %244 
                                       f32_4 %329 = OpLoad %328 
                                       f32_4 %330 = OpFMul %327 %329 
                                       f32_4 %333 = OpFAdd %330 %332 
                                                      OpStore %30 %333 
                                       f32_4 %334 = OpLoad %30 
                                       f32_4 %335 = OpFDiv %332 %334 
                                                      OpStore %30 %335 
                                       f32_4 %336 = OpLoad %304 
                                       f32_4 %337 = OpLoad %229 
                                       f32_4 %338 = OpFMul %336 %337 
                                                      OpStore %304 %338 
                                       f32_4 %339 = OpLoad %304 
                                       f32_4 %342 = OpExtInst %1 40 %339 %341 
                                                      OpStore %304 %342 
                                       f32_4 %343 = OpLoad %30 
                                       f32_4 %344 = OpLoad %304 
                                       f32_4 %345 = OpFMul %343 %344 
                                                      OpStore %304 %345 
                                       f32_4 %346 = OpLoad %304 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %348 = OpAccessChain %101 %252 %48 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFMul %347 %350 
                                       f32_4 %352 = OpLoad %30 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %30 %353 
                              Uniform f32_4* %354 = OpAccessChain %101 %252 %15 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %304 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 0 0 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %30 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_3 %362 = OpFAdd %359 %361 
                                       f32_4 %363 = OpLoad %30 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 5 6 3 
                                                      OpStore %30 %364 
                              Uniform f32_4* %365 = OpAccessChain %101 %252 %64 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %304 
                                       f32_3 %369 = OpVectorShuffle %368 %368 2 2 2 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %30 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %370 %372 
                                       f32_4 %374 = OpLoad %304 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %304 %375 
                              Uniform f32_4* %376 = OpAccessChain %101 %252 %22 
                                       f32_4 %377 = OpLoad %376 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_4 %379 = OpLoad %304 
                                       f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                       f32_3 %381 = OpFMul %378 %380 
                                       f32_4 %382 = OpLoad %304 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %304 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %304 %386 
                                       f32_4 %388 = OpLoad %93 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_4 %390 = OpLoad %304 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                                      OpStore vs_TEXCOORD3 %392 
                                Private f32* %393 = OpAccessChain %72 %127 
                                         f32 %394 = OpLoad %393 
                                Uniform f32* %396 = OpAccessChain %101 %15 %169 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %394 %397 
                                Private f32* %399 = OpAccessChain %304 %169 
                                                      OpStore %399 %398 
                                       f32_4 %400 = OpLoad %72 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 3 
                                       f32_2 %404 = OpFMul %401 %403 
                                       f32_4 %405 = OpLoad %30 
                                       f32_4 %406 = OpVectorShuffle %405 %404 4 1 5 3 
                                                      OpStore %30 %406 
                                Private f32* %407 = OpAccessChain %304 %169 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpFMul %408 %402 
                                Private f32* %411 = OpAccessChain %30 %410 
                                                      OpStore %411 %409 
                                       f32_4 %412 = OpLoad %30 
                                       f32_2 %413 = OpVectorShuffle %412 %412 2 2 
                                       f32_4 %414 = OpLoad %30 
                                       f32_2 %415 = OpVectorShuffle %414 %414 0 3 
                                       f32_2 %416 = OpFAdd %413 %415 
                                       f32_4 %417 = OpLoad vs_TEXCOORD5 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %418 
                                                      OpStore vs_TEXCOORD6 %341 
                                         i32 %422 = OpLoad %10 
                                         u32 %423 = OpBitcast %422 
                                                      OpStore %421 %423 
                                 Output f32* %424 = OpAccessChain %131 %15 %127 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFNegate %425 
                                 Output f32* %427 = OpAccessChain %131 %15 %127 
                                                      OpStore %427 %426 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %105 %132 %184 %201 %229 %271 %295 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 105 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %120 DescriptorSet 120 
                                                      OpDecorate %120 Binding 120 
                                                      OpDecorate %132 Flat 
                                                      OpDecorate %132 Location 132 
                                                      OpMemberDecorate %135 0 Offset 135 
                                                      OpMemberDecorate %135 1 Offset 135 
                                                      OpDecorate %135 Block 
                                                      OpDecorate %137 DescriptorSet 137 
                                                      OpDecorate %137 Binding 137 
                                                      OpMemberDecorate %149 0 Offset 149 
                                                      OpMemberDecorate %149 1 Offset 149 
                                                      OpMemberDecorate %149 2 Offset 149 
                                                      OpMemberDecorate %149 3 Offset 149 
                                                      OpMemberDecorate %149 4 Offset 149 
                                                      OpMemberDecorate %149 5 Offset 149 
                                                      OpMemberDecorate %149 6 Offset 149 
                                                      OpDecorate %150 SpecId 150 
                                                      OpDecorate %151 ArrayStride 151 
                                                      OpMemberDecorate %152 0 Offset 152 
                                                      OpDecorate %152 Block 
                                                      OpDecorate %154 DescriptorSet 154 
                                                      OpDecorate %154 Binding 154 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate vs_TEXCOORD0 Location 184 
                                                      OpDecorate vs_TEXCOORD1 Location 201 
                                                      OpDecorate vs_TEXCOORD3 Location 229 
                                                      OpDecorate vs_TEXCOORD4 Location 271 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %7 %16 %7 %7 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          i32 %90 = OpConstant 3 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         f32 %101 = OpConstant 3.674022E-40 
                                             %104 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %106 = OpTypeVector %6 2 
                                             %114 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %115 = OpTypePointer UniformConstant %114 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                                             %118 = OpTypeSampler 
                                             %119 = OpTypePointer UniformConstant %118 
                    UniformConstant sampler* %120 = OpVariable UniformConstant 
                                             %122 = OpTypeSampledImage %114 
                                             %129 = OpTypePointer Private %20 
                                Private i32* %130 = OpVariable Private 
                                             %131 = OpTypePointer Input %14 
                                  Input u32* %132 = OpVariable Input 
                                             %135 = OpTypeStruct %20 %20 
                                             %136 = OpTypePointer Uniform %135 
                 Uniform struct {i32; i32;}* %137 = OpVariable Uniform 
                                             %138 = OpTypePointer Uniform %20 
                                         i32 %143 = OpConstant 7 
                                Private f32* %145 = OpVariable Private 
                                             %149 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %150 = OpSpecConstant 2 
                                             %151 = OpTypeArray %149 %150 
                                             %152 = OpTypeStruct %151 
                                             %153 = OpTypePointer Uniform %152 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %154 = OpVariable Uniform 
                                         i32 %157 = OpConstant 6 
                                         i32 %171 = OpConstant 8 
        UniformConstant read_only Texture2D* %178 = OpVariable UniformConstant 
                    UniformConstant sampler* %180 = OpVariable UniformConstant 
                                             %183 = OpTypePointer Input %106 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         i32 %189 = OpConstant 9 
                              Private f32_4* %200 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %206 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %236 = OpConstantComposite %100 %100 %100 
                                Private f32* %244 = OpVariable Private 
                                             %270 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %294 = OpTypePointer Output %7 
                               Output f32_4* %295 = OpVariable Output 
                                             %307 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %19 %90 %53 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %89 %92 
                                 Uniform f32* %94 = OpAccessChain %19 %90 %78 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %35 
                                          f32 %99 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 43 %99 %100 %101 
                                Private f32* %103 = OpAccessChain %9 %35 
                                                      OpStore %103 %102 
                                       f32_4 %107 = OpLoad vs_TEXCOORD5 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad vs_TEXCOORD5 
                                       f32_2 %110 = OpVectorShuffle %109 %109 3 3 
                                       f32_2 %111 = OpFDiv %108 %110 
                                       f32_3 %112 = OpLoad %43 
                                       f32_3 %113 = OpVectorShuffle %112 %111 3 4 2 
                                                      OpStore %43 %113 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %121 = OpLoad %120 
                  read_only Texture2DSampled %123 = OpSampledImage %117 %121 
                                       f32_3 %124 = OpLoad %43 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_4 %126 = OpImageSampleImplicitLod %123 %125 
                                         f32 %127 = OpCompositeExtract %126 0 
                                Private f32* %128 = OpAccessChain %43 %35 
                                                      OpStore %128 %127 
                                         u32 %133 = OpLoad %132 
                                         i32 %134 = OpBitcast %133 
                                Uniform i32* %139 = OpAccessChain %137 %46 
                                         i32 %140 = OpLoad %139 
                                         i32 %141 = OpIAdd %134 %140 
                                                      OpStore %130 %141 
                                         i32 %142 = OpLoad %130 
                                         i32 %144 = OpIMul %142 %143 
                                                      OpStore %130 %144 
                                Private f32* %146 = OpAccessChain %43 %35 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         i32 %155 = OpLoad %130 
                                         i32 %156 = OpSDiv %155 %143 
                                Uniform f32* %158 = OpAccessChain %154 %46 %156 %157 %78 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %148 %159 
                                                      OpStore %145 %160 
                                Private f32* %161 = OpAccessChain %9 %35 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpLoad %145 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %43 %35 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                Private f32* %168 = OpAccessChain %9 %35 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 0 0 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %170 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 6 
                                                      OpStore %9 %177 
                         read_only Texture2D %179 = OpLoad %178 
                                     sampler %181 = OpLoad %180 
                  read_only Texture2DSampled %182 = OpSampledImage %179 %181 
                                       f32_2 %185 = OpLoad vs_TEXCOORD0 
                                       f32_4 %186 = OpImageSampleImplicitLod %182 %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %51 %187 
                                       f32_3 %188 = OpLoad %51 
                              Uniform f32_4* %190 = OpAccessChain %19 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFMul %188 %192 
                                                      OpStore %51 %193 
                                       f32_4 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 3 
                                       f32_3 %196 = OpLoad %51 
                                       f32_3 %197 = OpFMul %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 2 6 
                                                      OpStore %9 %199 
                                       f32_3 %202 = OpLoad vs_TEXCOORD1 
                                       f32_4 %203 = OpLoad %200 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %200 %204 
                                Private f32* %205 = OpAccessChain %200 %78 
                                                      OpStore %205 %101 
                                         i32 %207 = OpLoad %130 
                                         i32 %208 = OpSDiv %207 %143 
                              Uniform f32_4* %209 = OpAccessChain %154 %46 %208 %46 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %206 %35 
                                                      OpStore %213 %212 
                                         i32 %214 = OpLoad %130 
                                         i32 %215 = OpSDiv %214 %143 
                              Uniform f32_4* %216 = OpAccessChain %154 %46 %215 %58 
                                       f32_4 %217 = OpLoad %216 
                                       f32_4 %218 = OpLoad %200 
                                         f32 %219 = OpDot %217 %218 
                                Private f32* %220 = OpAccessChain %206 %61 
                                                      OpStore %220 %219 
                                         i32 %221 = OpLoad %130 
                                         i32 %222 = OpSDiv %221 %143 
                              Uniform f32_4* %223 = OpAccessChain %154 %46 %222 %63 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %200 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %206 %53 
                                                      OpStore %227 %226 
                                       f32_3 %228 = OpLoad %206 
                                       f32_3 %230 = OpLoad vs_TEXCOORD3 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %200 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %200 %233 
                                       f32_4 %234 = OpLoad %200 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %237 = OpExtInst %1 40 %235 %236 
                                       f32_4 %238 = OpLoad %200 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %200 %239 
                                       f32_3 %240 = OpLoad %51 
                                       f32_4 %241 = OpLoad %200 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                                      OpStore %51 %243 
                                       f32_3 %245 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %246 = OpAccessChain %19 %63 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                         f32 %249 = OpDot %245 %248 
                                                      OpStore %244 %249 
                                         f32 %250 = OpLoad %244 
                                         f32 %251 = OpExtInst %1 40 %250 %100 
                                                      OpStore %244 %251 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %244 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %9 %260 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                              Uniform f32_4* %263 = OpAccessChain %19 %157 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFNegate %265 
                                       f32_3 %267 = OpFAdd %262 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %9 %269 
                                         f32 %272 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %273 = OpAccessChain %19 %58 %61 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFDiv %272 %274 
                                                      OpStore %145 %275 
                                         f32 %276 = OpLoad %145 
                                         f32 %277 = OpFNegate %276 
                                         f32 %278 = OpFAdd %277 %101 
                                                      OpStore %145 %278 
                                         f32 %279 = OpLoad %145 
                                Uniform f32* %280 = OpAccessChain %19 %58 %53 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFMul %279 %281 
                                                      OpStore %145 %282 
                                         f32 %283 = OpLoad %145 
                                         f32 %284 = OpExtInst %1 40 %283 %100 
                                                      OpStore %145 %284 
                                         f32 %285 = OpLoad %145 
                                Uniform f32* %286 = OpAccessChain %19 %143 %53 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %285 %287 
                                Uniform f32* %289 = OpAccessChain %19 %143 %78 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFAdd %288 %290 
                                                      OpStore %145 %291 
                                         f32 %292 = OpLoad %145 
                                         f32 %293 = OpExtInst %1 43 %292 %100 %101 
                                                      OpStore %145 %293 
                                         f32 %296 = OpLoad %145 
                                       f32_3 %297 = OpCompositeConstruct %296 %296 %296 
                                       f32_4 %298 = OpLoad %9 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %297 %299 
                              Uniform f32_4* %301 = OpAccessChain %19 %157 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_3 %304 = OpFAdd %300 %303 
                                       f32_4 %305 = OpLoad %295 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                      OpStore %295 %306 
                                 Output f32* %308 = OpAccessChain %295 %78 
                                                      OpStore %308 %101 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 73537
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 205
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %186 %196 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate vs_TEXCOORD3 Location 186 
                                                      OpDecorate vs_TEXCOORD4 Location 196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_4 %198 = OpConstantComposite %197 %197 %197 %197 
                                             %199 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %22 %47 %25 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %45 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %45 %163 
                              Uniform f32_4* %164 = OpAccessChain %22 %47 %24 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 0 0 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_4 %170 = OpLoad %45 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %45 %174 
                              Uniform f32_4* %175 = OpAccessChain %22 %47 %37 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_4 %178 = OpLoad %9 
                                       f32_3 %179 = OpVectorShuffle %178 %178 2 2 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %45 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %9 %185 
                              Uniform f32_4* %187 = OpAccessChain %22 %47 %47 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore vs_TEXCOORD3 %195 
                                                      OpStore vs_TEXCOORD4 %198 
                                 Output f32* %200 = OpAccessChain %75 %24 %71 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                                      OpStore %203 %202 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 135
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %87 %115 %123 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate vs_TEXCOORD1 Location 115 
                                                      OpDecorate %123 Location 123 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %14 %14 %17 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %47 = OpConstant 3 
                                          u32 %55 = OpConstant 0 
                                              %56 = OpTypePointer Private %6 
                                              %58 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %59 = OpTypePointer UniformConstant %58 
         UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeSampler 
                                              %63 = OpTypePointer UniformConstant %62 
                     UniformConstant sampler* %64 = OpVariable UniformConstant 
                                              %66 = OpTypeSampledImage %58 
                                              %68 = OpTypeVector %6 2 
                               Private f32_3* %80 = OpVariable Private 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %86 = OpTypePointer Input %68 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %105 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %122 = OpTypePointer Output %14 
                               Output f32_4* %123 = OpVariable Output 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         u32 %131 = OpConstant 3 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %46 %50 
                                                      OpStore %9 %51 
                                        f32_3 %52 = OpLoad %9 
                                        f32_3 %53 = OpLoad %9 
                                          f32 %54 = OpDot %52 %53 
                                 Private f32* %57 = OpAccessChain %9 %55 
                                                      OpStore %57 %54 
                          read_only Texture2D %61 = OpLoad %60 
                                      sampler %65 = OpLoad %64 
                   read_only Texture2DSampled %67 = OpSampledImage %61 %65 
                                        f32_3 %69 = OpLoad %9 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 0 
                                        f32_4 %71 = OpImageSampleImplicitLod %67 %70 
                                          f32 %72 = OpCompositeExtract %71 0 
                                 Private f32* %73 = OpAccessChain %9 %55 
                                                      OpStore %73 %72 
                                        f32_3 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                               Uniform f32_4* %76 = OpAccessChain %20 %23 
                                        f32_4 %77 = OpLoad %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %75 %78 
                                                      OpStore %9 %79 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %85 = OpSampledImage %82 %84 
                                        f32_2 %88 = OpLoad vs_TEXCOORD0 
                                        f32_4 %89 = OpImageSampleImplicitLod %85 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %80 %90 
                                        f32_3 %91 = OpLoad %80 
                               Uniform f32_4* %92 = OpAccessChain %20 %47 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %91 %94 
                                                      OpStore %80 %95 
                                        f32_3 %96 = OpLoad %9 
                                        f32_3 %97 = OpLoad %80 
                                        f32_3 %98 = OpFMul %96 %97 
                                                      OpStore %9 %98 
                                        f32_3 %99 = OpLoad vs_TEXCOORD2 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_4* %101 = OpAccessChain %20 %29 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %100 %103 
                                                      OpStore %80 %104 
                                       f32_3 %106 = OpLoad %80 
                                       f32_3 %107 = OpLoad %80 
                                         f32 %108 = OpDot %106 %107 
                                                      OpStore %105 %108 
                                         f32 %109 = OpLoad %105 
                                         f32 %110 = OpExtInst %1 32 %109 
                                                      OpStore %105 %110 
                                         f32 %111 = OpLoad %105 
                                       f32_3 %112 = OpCompositeConstruct %111 %111 %111 
                                       f32_3 %113 = OpLoad %80 
                                       f32_3 %114 = OpFMul %112 %113 
                                                      OpStore %80 %114 
                                       f32_3 %116 = OpLoad vs_TEXCOORD1 
                                       f32_3 %117 = OpLoad %80 
                                         f32 %118 = OpDot %116 %117 
                                                      OpStore %105 %118 
                                         f32 %119 = OpLoad %105 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                                      OpStore %105 %121 
                                         f32 %124 = OpLoad %105 
                                       f32_3 %125 = OpCompositeConstruct %124 %124 %124 
                                       f32_3 %126 = OpLoad %9 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_4 %128 = OpLoad %123 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %123 %129 
                                 Output f32* %133 = OpAccessChain %123 %131 
                                                      OpStore %133 %130 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD4 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD4 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %58 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate %58 Location 58 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %57 = OpTypePointer Output %24 
                         Output f32_4* %58 = OpVariable Output 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %66 = OpTypeInt 32 0 
                                   u32 %67 = OpConstant 3 
                                       %68 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %59 = OpLoad %45 
                                 f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                                 f32_3 %61 = OpLoad %9 
                                 f32_3 %62 = OpFMul %60 %61 
                                 f32_4 %63 = OpLoad %58 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %58 %64 
                           Output f32* %69 = OpAccessChain %58 %67 
                                               OpStore %69 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %175 %183 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate vs_TEXCOORD3 Location 175 
                                                      OpDecorate vs_TEXCOORD4 Location 183 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %184 = OpConstant 3.674022E-40 
                                       f32_4 %185 = OpConstantComposite %184 %184 %184 %184 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_4 %157 = OpVectorShuffle %156 %156 1 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %22 %47 %25 
                                       f32_4 %159 = OpLoad %158 
                                       f32_4 %160 = OpFMul %157 %159 
                                                      OpStore %45 %160 
                              Uniform f32_4* %161 = OpAccessChain %22 %47 %24 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %45 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %45 %167 
                              Uniform f32_4* %168 = OpAccessChain %22 %47 %37 
                                       f32_4 %169 = OpLoad %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_4 %171 = OpVectorShuffle %170 %170 2 2 2 2 
                                       f32_4 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_4 %174 = OpFAdd %172 %173 
                                                      OpStore %45 %174 
                              Uniform f32_4* %176 = OpAccessChain %22 %47 %47 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 3 3 3 3 
                                       f32_4 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %45 
                                       f32_4 %182 = OpFAdd %180 %181 
                                                      OpStore vs_TEXCOORD3 %182 
                                                      OpStore vs_TEXCOORD4 %185 
                                 Output f32* %187 = OpAccessChain %75 %24 %71 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %75 %24 %71 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 181
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %133 %163 %170 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %127 DescriptorSet 127 
                                                      OpDecorate %127 Binding 127 
                                                      OpDecorate %129 DescriptorSet 129 
                                                      OpDecorate %129 Binding 129 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate %170 Location 170 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %7 %7 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %44 = OpConstant 3 
                                              %48 = OpTypePointer Private %10 
                               Private f32_3* %49 = OpVariable Private 
                                              %50 = OpTypeVector %6 2 
                                          f32 %60 = OpConstant 3.674022E-40 
                                        f32_2 %61 = OpConstantComposite %60 %60 
                                              %65 = OpTypePointer Private %6 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %68 = OpTypePointer UniformConstant %67 
         UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                              %71 = OpTypeSampler 
                                              %72 = OpTypePointer UniformConstant %71 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                              %75 = OpTypeSampledImage %67 
                                          u32 %80 = OpConstant 3 
                                              %82 = OpTypeBool 
                                              %83 = OpTypePointer Private %82 
                                Private bool* %84 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %86 = OpConstant 2 
                                          u32 %95 = OpConstant 0 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                     UniformConstant sampler* %99 = OpVariable UniformConstant 
                                Private f32* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %127 = OpVariable UniformConstant 
                    UniformConstant sampler* %129 = OpVariable UniformConstant 
                                             %132 = OpTypePointer Input %50 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %169 = OpTypePointer Output %7 
                               Output f32_4* %170 = OpVariable Output 
                                             %178 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %22 
                                        f32_4 %37 = OpLoad %36 
                                        f32_3 %38 = OpLoad vs_TEXCOORD2 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpLoad %9 
                                        f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                        f32_2 %55 = OpFDiv %52 %54 
                                        f32_3 %56 = OpLoad %49 
                                        f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                      OpStore %49 %57 
                                        f32_3 %58 = OpLoad %49 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_2 %62 = OpFAdd %59 %61 
                                        f32_3 %63 = OpLoad %49 
                                        f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                      OpStore %49 %64 
                          read_only Texture2D %70 = OpLoad %69 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                        f32_3 %77 = OpLoad %49 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                        f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                          f32 %81 = OpCompositeExtract %79 3 
                                                      OpStore %66 %81 
                                 Private f32* %87 = OpAccessChain %9 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %89 = OpFOrdLessThan %85 %88 
                                                      OpStore %84 %89 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                 Private f32* %96 = OpAccessChain %9 %95 
                                                      OpStore %96 %94 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %100 = OpLoad %99 
                  read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                       f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                         f32 %105 = OpCompositeExtract %104 0 
                                Private f32* %106 = OpAccessChain %9 %95 
                                                      OpStore %106 %105 
                                        bool %108 = OpLoad %84 
                                         f32 %110 = OpSelect %108 %109 %85 
                                                      OpStore %107 %110 
                                         f32 %111 = OpLoad %66 
                                         f32 %112 = OpLoad %107 
                                         f32 %113 = OpFMul %111 %112 
                                                      OpStore %107 %113 
                                Private f32* %114 = OpAccessChain %9 %95 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpLoad %107 
                                         f32 %117 = OpFMul %115 %116 
                                Private f32* %118 = OpAccessChain %9 %95 
                                                      OpStore %118 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                              Uniform f32_4* %121 = OpAccessChain %20 %23 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %120 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                         read_only Texture2D %128 = OpLoad %127 
                                     sampler %130 = OpLoad %129 
                  read_only Texture2DSampled %131 = OpSampledImage %128 %130 
                                       f32_2 %134 = OpLoad vs_TEXCOORD0 
                                       f32_4 %135 = OpImageSampleImplicitLod %131 %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %49 %136 
                                       f32_3 %137 = OpLoad %49 
                              Uniform f32_4* %138 = OpAccessChain %20 %44 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFMul %137 %140 
                                                      OpStore %49 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpLoad %49 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %9 %147 
                                       f32_3 %148 = OpLoad vs_TEXCOORD2 
                                       f32_3 %149 = OpFNegate %148 
                              Uniform f32_4* %150 = OpAccessChain %20 %28 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %149 %152 
                                                      OpStore %49 %153 
                                       f32_3 %154 = OpLoad %49 
                                       f32_3 %155 = OpLoad %49 
                                         f32 %156 = OpDot %154 %155 
                                                      OpStore %66 %156 
                                         f32 %157 = OpLoad %66 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %66 %158 
                                         f32 %159 = OpLoad %66 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_3 %161 = OpLoad %49 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %49 %162 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                                       f32_3 %165 = OpLoad %49 
                                         f32 %166 = OpDot %164 %165 
                                                      OpStore %66 %166 
                                         f32 %167 = OpLoad %66 
                                         f32 %168 = OpExtInst %1 40 %167 %85 
                                                      OpStore %66 %168 
                                         f32 %171 = OpLoad %66 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                       f32_4 %176 = OpLoad %170 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %170 %177 
                                 Output f32* %179 = OpAccessChain %170 %80 
                                                      OpStore %179 %109 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 205
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %186 %196 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate vs_TEXCOORD3 Location 186 
                                                      OpDecorate vs_TEXCOORD4 Location 196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_4 %198 = OpConstantComposite %197 %197 %197 %197 
                                             %199 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 1 1 1 
                              Uniform f32_4* %158 = OpAccessChain %22 %47 %25 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %45 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %45 %163 
                              Uniform f32_4* %164 = OpAccessChain %22 %47 %24 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 0 0 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_4 %170 = OpLoad %45 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_3 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %45 %174 
                              Uniform f32_4* %175 = OpAccessChain %22 %47 %37 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_4 %178 = OpLoad %9 
                                       f32_3 %179 = OpVectorShuffle %178 %178 2 2 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %45 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFAdd %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                      OpStore %9 %185 
                              Uniform f32_4* %187 = OpAccessChain %22 %47 %47 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFAdd %192 %194 
                                                      OpStore vs_TEXCOORD3 %195 
                                                      OpStore vs_TEXCOORD4 %198 
                                 Output f32* %200 = OpAccessChain %75 %24 %71 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                                      OpStore %203 %202 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 151
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %105 %132 %140 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %76 DescriptorSet 76 
                                                      OpDecorate %76 Binding 76 
                                                      OpDecorate %78 DescriptorSet 78 
                                                      OpDecorate %78 Binding 78 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate vs_TEXCOORD0 Location 105 
                                                      OpDecorate vs_TEXCOORD1 Location 132 
                                                      OpDecorate %140 Location 140 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %14 %14 %17 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %47 = OpConstant 3 
                                              %52 = OpTypePointer Private %6 
                                 Private f32* %53 = OpVariable Private 
                                              %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
       UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                          u32 %69 = OpConstant 3 
                                          u32 %71 = OpConstant 0 
                                 Private f32* %73 = OpVariable Private 
                                              %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %75 = OpTypePointer UniformConstant %74 
         UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                     UniformConstant sampler* %78 = OpVariable UniformConstant 
                                              %80 = OpTypeSampledImage %74 
                                              %83 = OpTypeVector %6 2 
                               Private f32_3* %98 = OpVariable Private 
         UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %104 = OpTypePointer Input %83 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                             %139 = OpTypePointer Output %14 
                               Output f32_4* %140 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %148 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %46 %50 
                                                      OpStore %9 %51 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpLoad %9 
                                          f32 %56 = OpDot %54 %55 
                                                      OpStore %53 %56 
                        read_only TextureCube %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                 read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                        f32_3 %67 = OpLoad %9 
                                        f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                          f32 %70 = OpCompositeExtract %68 3 
                                 Private f32* %72 = OpAccessChain %9 %71 
                                                      OpStore %72 %70 
                          read_only Texture2D %77 = OpLoad %76 
                                      sampler %79 = OpLoad %78 
                   read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                          f32 %82 = OpLoad %53 
                                        f32_2 %84 = OpCompositeConstruct %82 %82 
                                        f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                          f32 %86 = OpCompositeExtract %85 0 
                                                      OpStore %73 %86 
                                 Private f32* %87 = OpAccessChain %9 %71 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpLoad %73 
                                          f32 %90 = OpFMul %88 %89 
                                 Private f32* %91 = OpAccessChain %9 %71 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                               Uniform f32_4* %94 = OpAccessChain %20 %23 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFMul %93 %96 
                                                      OpStore %9 %97 
                         read_only Texture2D %100 = OpLoad %99 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                                       f32_2 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpImageSampleImplicitLod %103 %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                                      OpStore %98 %108 
                                       f32_3 %109 = OpLoad %98 
                              Uniform f32_4* %110 = OpAccessChain %20 %47 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFMul %109 %112 
                                                      OpStore %98 %113 
                                       f32_3 %114 = OpLoad %9 
                                       f32_3 %115 = OpLoad %98 
                                       f32_3 %116 = OpFMul %114 %115 
                                                      OpStore %9 %116 
                                       f32_3 %117 = OpLoad vs_TEXCOORD2 
                                       f32_3 %118 = OpFNegate %117 
                              Uniform f32_4* %119 = OpAccessChain %20 %29 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                                      OpStore %98 %122 
                                       f32_3 %123 = OpLoad %98 
                                       f32_3 %124 = OpLoad %98 
                                         f32 %125 = OpDot %123 %124 
                                                      OpStore %53 %125 
                                         f32 %126 = OpLoad %53 
                                         f32 %127 = OpExtInst %1 32 %126 
                                                      OpStore %53 %127 
                                         f32 %128 = OpLoad %53 
                                       f32_3 %129 = OpCompositeConstruct %128 %128 %128 
                                       f32_3 %130 = OpLoad %98 
                                       f32_3 %131 = OpFMul %129 %130 
                                                      OpStore %98 %131 
                                       f32_3 %133 = OpLoad vs_TEXCOORD1 
                                       f32_3 %134 = OpLoad %98 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %53 %135 
                                         f32 %136 = OpLoad %53 
                                         f32 %138 = OpExtInst %1 40 %136 %137 
                                                      OpStore %53 %138 
                                         f32 %141 = OpLoad %53 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_3 %143 = OpLoad %9 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_4 %145 = OpLoad %140 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %140 %146 
                                 Output f32* %149 = OpAccessChain %140 %69 
                                                      OpStore %149 %147 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 205
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %94 %136 %146 %147 %160 %190 %196 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 94 
                                                      OpDecorate vs_TEXCOORD3 Location 136 
                                                      OpDecorate vs_TEXCOORD0 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %160 Location 160 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate vs_TEXCOORD4 Location 196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %92 = OpTypeVector %6 3 
                                              %93 = OpTypePointer Output %92 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %104 = OpTypeVector %6 2 
                                             %135 = OpTypePointer Output %104 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 4 
                                             %159 = OpTypePointer Input %92 
                                Input f32_3* %160 = OpVariable Input 
                                         u32 %166 = OpConstant 0 
                                             %167 = OpTypePointer Private %6 
                                         u32 %180 = OpConstant 2 
                                Private f32* %182 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %197 = OpConstant 3.674022E-40 
                                       f32_4 %198 = OpConstantComposite %197 %197 %197 %197 
                                             %199 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                               Uniform f32_4* %85 = OpAccessChain %22 %24 %47 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpLoad %11 
                                        f32_4 %88 = OpVectorShuffle %87 %87 3 3 3 3 
                                        f32_4 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpFAdd %89 %90 
                                                      OpStore %45 %91 
                               Uniform f32_4* %95 = OpAccessChain %22 %24 %47 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %11 
                                        f32_3 %99 = OpVectorShuffle %98 %98 3 3 3 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                                      OpStore vs_TEXCOORD2 %103 
                                       f32_4 %105 = OpLoad %45 
                                       f32_2 %106 = OpVectorShuffle %105 %105 1 1 
                              Uniform f32_4* %107 = OpAccessChain %22 %47 %25 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 3 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %22 %47 %24 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_4 %116 = OpLoad %45 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 0 
                                       f32_2 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_2 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 3 
                                                      OpStore %9 %123 
                              Uniform f32_4* %124 = OpAccessChain %22 %47 %37 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                       f32_4 %127 = OpLoad %45 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 2 
                                       f32_2 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                                       f32_2 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 2 3 
                                                      OpStore %9 %134 
                              Uniform f32_4* %137 = OpAccessChain %22 %47 %47 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_4 %140 = OpLoad %45 
                                       f32_2 %141 = OpVectorShuffle %140 %140 3 3 
                                       f32_2 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFAdd %142 %144 
                                                      OpStore vs_TEXCOORD3 %145 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                              Uniform f32_4* %151 = OpAccessChain %22 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFMul %149 %153 
                              Uniform f32_4* %155 = OpAccessChain %22 %150 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                                       f32_2 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD0 %158 
                                       f32_3 %161 = OpLoad %160 
                              Uniform f32_4* %162 = OpAccessChain %22 %25 %24 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                         f32 %165 = OpDot %161 %164 
                                Private f32* %168 = OpAccessChain %9 %166 
                                                      OpStore %168 %165 
                                       f32_3 %169 = OpLoad %160 
                              Uniform f32_4* %170 = OpAccessChain %22 %25 %25 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %169 %172 
                                Private f32* %174 = OpAccessChain %9 %71 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %160 
                              Uniform f32_4* %176 = OpAccessChain %22 %25 %37 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %181 = OpAccessChain %9 %180 
                                                      OpStore %181 %179 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %184 %186 
                                                      OpStore %182 %187 
                                         f32 %188 = OpLoad %182 
                                         f32 %189 = OpExtInst %1 32 %188 
                                                      OpStore %182 %189 
                                         f32 %191 = OpLoad %182 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %192 %194 
                                                      OpStore vs_TEXCOORD1 %195 
                                                      OpStore vs_TEXCOORD4 %198 
                                 Output f32* %200 = OpAccessChain %75 %24 %71 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFNegate %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                                      OpStore %203 %202 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 129
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %95 %108 %118 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate vs_TEXCOORD0 Location 95 
                                                      OpDecorate vs_TEXCOORD1 Location 108 
                                                      OpDecorate %118 Location 118 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeStruct %15 %15 %18 %15 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %15 
                                          i32 %32 = OpConstant 0 
                                          i32 %57 = OpConstant 3 
                                              %64 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %65 = OpTypePointer UniformConstant %64 
         UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                                              %68 = OpTypeSampler 
                                              %69 = OpTypePointer UniformConstant %68 
                     UniformConstant sampler* %70 = OpVariable UniformConstant 
                                              %72 = OpTypeSampledImage %64 
                                          u32 %77 = OpConstant 3 
                                          u32 %79 = OpConstant 0 
                                              %80 = OpTypePointer Private %6 
                               Private f32_3* %88 = OpVariable Private 
         UniformConstant read_only Texture2D* %89 = OpVariable UniformConstant 
                     UniformConstant sampler* %91 = OpVariable UniformConstant 
                                              %94 = OpTypePointer Input %12 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %107 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %117 = OpTypePointer Output %15 
                               Output f32_4* %118 = OpVariable Output 
                                         f32 %125 = OpConstant 3.674022E-40 
                                             %126 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_2 %29 = OpFMul %14 %28 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_3 %36 = OpLoad vs_TEXCOORD2 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                        f32_2 %38 = OpFMul %35 %37 
                                        f32_3 %39 = OpLoad %9 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                        f32_2 %41 = OpFAdd %38 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                      OpStore %9 %43 
                               Uniform f32_4* %44 = OpAccessChain %21 %23 %23 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad vs_TEXCOORD2 
                                        f32_2 %48 = OpVectorShuffle %47 %47 2 2 
                                        f32_2 %49 = OpFMul %46 %48 
                                        f32_3 %50 = OpLoad %9 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_2 %52 = OpFAdd %49 %51 
                                        f32_3 %53 = OpLoad %9 
                                        f32_3 %54 = OpVectorShuffle %53 %52 3 4 2 
                                                      OpStore %9 %54 
                                        f32_3 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                               Uniform f32_4* %58 = OpAccessChain %21 %23 %57 
                                        f32_4 %59 = OpLoad %58 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %61 = OpFAdd %56 %60 
                                        f32_3 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %9 %63 
                          read_only Texture2D %67 = OpLoad %66 
                                      sampler %71 = OpLoad %70 
                   read_only Texture2DSampled %73 = OpSampledImage %67 %71 
                                        f32_3 %74 = OpLoad %9 
                                        f32_2 %75 = OpVectorShuffle %74 %74 0 1 
                                        f32_4 %76 = OpImageSampleImplicitLod %73 %75 
                                          f32 %78 = OpCompositeExtract %76 3 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                                      OpStore %81 %78 
                                        f32_3 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                               Uniform f32_4* %84 = OpAccessChain %21 %24 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %83 %86 
                                                      OpStore %9 %87 
                          read_only Texture2D %90 = OpLoad %89 
                                      sampler %92 = OpLoad %91 
                   read_only Texture2DSampled %93 = OpSampledImage %90 %92 
                                        f32_2 %96 = OpLoad vs_TEXCOORD0 
                                        f32_4 %97 = OpImageSampleImplicitLod %93 %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                                      OpStore %88 %98 
                                        f32_3 %99 = OpLoad %88 
                              Uniform f32_4* %100 = OpAccessChain %21 %57 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFMul %99 %102 
                                                      OpStore %88 %103 
                                       f32_3 %104 = OpLoad %9 
                                       f32_3 %105 = OpLoad %88 
                                       f32_3 %106 = OpFMul %104 %105 
                                                      OpStore %9 %106 
                                       f32_3 %109 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %110 = OpAccessChain %21 %32 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                                      OpStore %107 %113 
                                         f32 %114 = OpLoad %107 
                                         f32 %116 = OpExtInst %1 40 %114 %115 
                                                      OpStore %107 %116 
                                         f32 %119 = OpLoad %107 
                                       f32_3 %120 = OpCompositeConstruct %119 %119 %119 
                                       f32_3 %121 = OpLoad %9 
                                       f32_3 %122 = OpFMul %120 %121 
                                       f32_4 %123 = OpLoad %118 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %118 %124 
                                 Output f32* %127 = OpAccessChain %118 %77 
                                                      OpStore %127 %125 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 241
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %224 %234 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate vs_TEXCOORD3 Location 224 
                                                      OpDecorate vs_TEXCOORD4 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %195 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %235 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %22 %195 %24 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %194 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                              Uniform f32_4* %202 = OpAccessChain %22 %195 %29 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %45 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %45 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %45 %212 
                              Uniform f32_4* %213 = OpAccessChain %22 %195 %37 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 2 2 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %218 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %9 %223 
                              Uniform f32_4* %225 = OpAccessChain %22 %195 %47 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 3 3 3 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore vs_TEXCOORD3 %233 
                                                      OpStore vs_TEXCOORD4 %235 
                                 Output f32* %236 = OpAccessChain %82 %29 %78 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFNegate %237 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                                      OpStore %239 %238 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 144
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %87 %115 %127 %133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %83 DescriptorSet 83 
                                                      OpDecorate %83 Binding 83 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate vs_TEXCOORD1 Location 115 
                                                      OpDecorate vs_TEXCOORD5 Location 127 
                                                      OpDecorate %133 Location 133 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %14 %14 %17 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %47 = OpConstant 3 
                                          u32 %55 = OpConstant 0 
                                              %56 = OpTypePointer Private %6 
                                              %58 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %59 = OpTypePointer UniformConstant %58 
         UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeSampler 
                                              %63 = OpTypePointer UniformConstant %62 
                     UniformConstant sampler* %64 = OpVariable UniformConstant 
                                              %66 = OpTypeSampledImage %58 
                                              %68 = OpTypeVector %6 2 
                               Private f32_3* %80 = OpVariable Private 
         UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                     UniformConstant sampler* %83 = OpVariable UniformConstant 
                                              %86 = OpTypePointer Input %68 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %105 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %126 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         f32 %130 = OpConstant 3.674022E-40 
                                             %132 = OpTypePointer Output %14 
                               Output f32_4* %133 = OpVariable Output 
                                         u32 %140 = OpConstant 3 
                                             %141 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %46 %50 
                                                      OpStore %9 %51 
                                        f32_3 %52 = OpLoad %9 
                                        f32_3 %53 = OpLoad %9 
                                          f32 %54 = OpDot %52 %53 
                                 Private f32* %57 = OpAccessChain %9 %55 
                                                      OpStore %57 %54 
                          read_only Texture2D %61 = OpLoad %60 
                                      sampler %65 = OpLoad %64 
                   read_only Texture2DSampled %67 = OpSampledImage %61 %65 
                                        f32_3 %69 = OpLoad %9 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 0 
                                        f32_4 %71 = OpImageSampleImplicitLod %67 %70 
                                          f32 %72 = OpCompositeExtract %71 0 
                                 Private f32* %73 = OpAccessChain %9 %55 
                                                      OpStore %73 %72 
                                        f32_3 %74 = OpLoad %9 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                               Uniform f32_4* %76 = OpAccessChain %20 %23 
                                        f32_4 %77 = OpLoad %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %75 %78 
                                                      OpStore %9 %79 
                          read_only Texture2D %82 = OpLoad %81 
                                      sampler %84 = OpLoad %83 
                   read_only Texture2DSampled %85 = OpSampledImage %82 %84 
                                        f32_2 %88 = OpLoad vs_TEXCOORD0 
                                        f32_4 %89 = OpImageSampleImplicitLod %85 %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                      OpStore %80 %90 
                                        f32_3 %91 = OpLoad %80 
                               Uniform f32_4* %92 = OpAccessChain %20 %47 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %91 %94 
                                                      OpStore %80 %95 
                                        f32_3 %96 = OpLoad %9 
                                        f32_3 %97 = OpLoad %80 
                                        f32_3 %98 = OpFMul %96 %97 
                                                      OpStore %9 %98 
                                        f32_3 %99 = OpLoad vs_TEXCOORD2 
                                       f32_3 %100 = OpFNegate %99 
                              Uniform f32_4* %101 = OpAccessChain %20 %29 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                       f32_3 %104 = OpFAdd %100 %103 
                                                      OpStore %80 %104 
                                       f32_3 %106 = OpLoad %80 
                                       f32_3 %107 = OpLoad %80 
                                         f32 %108 = OpDot %106 %107 
                                                      OpStore %105 %108 
                                         f32 %109 = OpLoad %105 
                                         f32 %110 = OpExtInst %1 32 %109 
                                                      OpStore %105 %110 
                                         f32 %111 = OpLoad %105 
                                       f32_3 %112 = OpCompositeConstruct %111 %111 %111 
                                       f32_3 %113 = OpLoad %80 
                                       f32_3 %114 = OpFMul %112 %113 
                                                      OpStore %80 %114 
                                       f32_3 %116 = OpLoad vs_TEXCOORD1 
                                       f32_3 %117 = OpLoad %80 
                                         f32 %118 = OpDot %116 %117 
                                                      OpStore %105 %118 
                                         f32 %119 = OpLoad %105 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                                      OpStore %105 %121 
                                         f32 %122 = OpLoad %105 
                                       f32_3 %123 = OpCompositeConstruct %122 %122 %122 
                                       f32_3 %124 = OpLoad %9 
                                       f32_3 %125 = OpFMul %123 %124 
                                                      OpStore %9 %125 
                                         f32 %128 = OpLoad vs_TEXCOORD5 
                                                      OpStore %105 %128 
                                         f32 %129 = OpLoad %105 
                                         f32 %131 = OpExtInst %1 43 %129 %120 %130 
                                                      OpStore %105 %131 
                                       f32_3 %134 = OpLoad %9 
                                         f32 %135 = OpLoad %105 
                                       f32_3 %136 = OpCompositeConstruct %135 %135 %135 
                                       f32_3 %137 = OpFMul %134 %136 
                                       f32_4 %138 = OpLoad %133 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %133 %139 
                                 Output f32* %142 = OpAccessChain %133 %140 
                                                      OpStore %142 %130 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    u_xlat3 = vs_TEXCOORD5;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat3);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 191
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate vs_TEXCOORD4 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %185 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD5 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                                      OpStore vs_TEXCOORD4 %185 
                                 Output f32* %186 = OpAccessChain %92 %28 %88 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                                      OpStore %189 %188 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 80
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %47 %62 %68 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpMemberDecorate %28 0 Offset 28 
                                               OpMemberDecorate %28 1 Offset 28 
                                               OpMemberDecorate %28 2 Offset 28 
                                               OpDecorate %28 Block 
                                               OpDecorate %30 DescriptorSet 30 
                                               OpDecorate %30 Binding 30 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate vs_TEXCOORD5 Location 62 
                                               OpDecorate %68 Location 68 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypeStruct %24 %24 %24 
                                       %29 = OpTypePointer Uniform %28 
Uniform struct {f32_4; f32_4; f32_4;}* %30 = OpVariable Uniform 
                                       %31 = OpTypeInt 32 1 
                                   i32 %32 = OpConstant 2 
                                       %33 = OpTypePointer Uniform %24 
                                   i32 %39 = OpConstant 1 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                       %61 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD5 = OpVariable Input 
                                   f32 %65 = OpConstant 3.674022E-40 
                                       %67 = OpTypePointer Output %24 
                         Output f32_4* %68 = OpVariable Output 
                                       %75 = OpTypeInt 32 0 
                                   u32 %76 = OpConstant 3 
                                       %77 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                        Uniform f32_4* %34 = OpAccessChain %30 %32 
                                 f32_4 %35 = OpLoad %34 
                                 f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                 f32_3 %37 = OpFMul %27 %36 
                                               OpStore %9 %37 
                                 f32_3 %38 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %30 %39 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %38 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %30 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                   f32 %57 = OpLoad %45 
                                 f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                 f32_3 %59 = OpLoad %9 
                                 f32_3 %60 = OpFMul %58 %59 
                                               OpStore %9 %60 
                                   f32 %63 = OpLoad vs_TEXCOORD5 
                                               OpStore %45 %63 
                                   f32 %64 = OpLoad %45 
                                   f32 %66 = OpExtInst %1 43 %64 %55 %65 
                                               OpStore %45 %66 
                                 f32_3 %69 = OpLoad %9 
                                   f32 %70 = OpLoad %45 
                                 f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                                 f32_3 %72 = OpFMul %69 %71 
                                 f32_4 %73 = OpLoad %68 
                                 f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                               OpStore %68 %74 
                           Output f32* %78 = OpAccessChain %68 %76 
                                               OpStore %78 %65 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat9 = vs_TEXCOORD5;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 228
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %213 %221 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate vs_TEXCOORD3 Location 213 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %195 = OpConstant 5 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %222 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_4 %194 = OpVectorShuffle %193 %193 1 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %22 %195 %24 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpFMul %194 %197 
                                                      OpStore %45 %198 
                              Uniform f32_4* %199 = OpAccessChain %22 %195 %29 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 0 0 0 0 
                                       f32_4 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %45 
                                       f32_4 %205 = OpFAdd %203 %204 
                                                      OpStore %45 %205 
                              Uniform f32_4* %206 = OpAccessChain %22 %195 %37 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %9 
                                       f32_4 %209 = OpVectorShuffle %208 %208 2 2 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %45 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %45 %212 
                              Uniform f32_4* %214 = OpAccessChain %22 %195 %47 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %216 3 3 3 3 
                                       f32_4 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_4 %220 = OpFAdd %218 %219 
                                                      OpStore vs_TEXCOORD3 %220 
                                                      OpStore vs_TEXCOORD4 %222 
                                 Output f32* %223 = OpAccessChain %82 %29 %78 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                 Output f32* %226 = OpAccessChain %82 %29 %78 
                                                      OpStore %226 %225 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %133 %163 %177 %182 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %97 DescriptorSet 97 
                                                      OpDecorate %97 Binding 97 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %127 DescriptorSet 127 
                                                      OpDecorate %127 Binding 127 
                                                      OpDecorate %129 DescriptorSet 129 
                                                      OpDecorate %129 Binding 129 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate vs_TEXCOORD5 Location 177 
                                                      OpDecorate %182 Location 182 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeStruct %7 %7 %17 %7 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %44 = OpConstant 3 
                                              %48 = OpTypePointer Private %10 
                               Private f32_3* %49 = OpVariable Private 
                                              %50 = OpTypeVector %6 2 
                                          f32 %60 = OpConstant 3.674022E-40 
                                        f32_2 %61 = OpConstantComposite %60 %60 
                                              %65 = OpTypePointer Private %6 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %68 = OpTypePointer UniformConstant %67 
         UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                              %71 = OpTypeSampler 
                                              %72 = OpTypePointer UniformConstant %71 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                              %75 = OpTypeSampledImage %67 
                                          u32 %80 = OpConstant 3 
                                              %82 = OpTypeBool 
                                              %83 = OpTypePointer Private %82 
                                Private bool* %84 = OpVariable Private 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %86 = OpConstant 2 
                                          u32 %95 = OpConstant 0 
         UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                     UniformConstant sampler* %99 = OpVariable UniformConstant 
                                Private f32* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %127 = OpVariable UniformConstant 
                    UniformConstant sampler* %129 = OpVariable UniformConstant 
                                             %132 = OpTypePointer Input %50 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %176 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                             %181 = OpTypePointer Output %7 
                               Output f32_4* %182 = OpVariable Output 
                                             %190 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %14 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %36 = OpAccessChain %20 %22 %22 
                                        f32_4 %37 = OpLoad %36 
                                        f32_3 %38 = OpLoad vs_TEXCOORD2 
                                        f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                        f32_4 %40 = OpFMul %37 %39 
                                        f32_4 %41 = OpLoad %9 
                                        f32_4 %42 = OpFAdd %40 %41 
                                                      OpStore %9 %42 
                                        f32_4 %43 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                        f32_4 %46 = OpLoad %45 
                                        f32_4 %47 = OpFAdd %43 %46 
                                                      OpStore %9 %47 
                                        f32_4 %51 = OpLoad %9 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_4 %53 = OpLoad %9 
                                        f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                        f32_2 %55 = OpFDiv %52 %54 
                                        f32_3 %56 = OpLoad %49 
                                        f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                      OpStore %49 %57 
                                        f32_3 %58 = OpLoad %49 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_2 %62 = OpFAdd %59 %61 
                                        f32_3 %63 = OpLoad %49 
                                        f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                      OpStore %49 %64 
                          read_only Texture2D %70 = OpLoad %69 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                        f32_3 %77 = OpLoad %49 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                        f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                          f32 %81 = OpCompositeExtract %79 3 
                                                      OpStore %66 %81 
                                 Private f32* %87 = OpAccessChain %9 %86 
                                          f32 %88 = OpLoad %87 
                                         bool %89 = OpFOrdLessThan %85 %88 
                                                      OpStore %84 %89 
                                        f32_4 %90 = OpLoad %9 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                          f32 %94 = OpDot %91 %93 
                                 Private f32* %96 = OpAccessChain %9 %95 
                                                      OpStore %96 %94 
                          read_only Texture2D %98 = OpLoad %97 
                                     sampler %100 = OpLoad %99 
                  read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                       f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                         f32 %105 = OpCompositeExtract %104 0 
                                Private f32* %106 = OpAccessChain %9 %95 
                                                      OpStore %106 %105 
                                        bool %108 = OpLoad %84 
                                         f32 %110 = OpSelect %108 %109 %85 
                                                      OpStore %107 %110 
                                         f32 %111 = OpLoad %66 
                                         f32 %112 = OpLoad %107 
                                         f32 %113 = OpFMul %111 %112 
                                                      OpStore %107 %113 
                                Private f32* %114 = OpAccessChain %9 %95 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpLoad %107 
                                         f32 %117 = OpFMul %115 %116 
                                Private f32* %118 = OpAccessChain %9 %95 
                                                      OpStore %118 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                              Uniform f32_4* %121 = OpAccessChain %20 %23 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFMul %120 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                         read_only Texture2D %128 = OpLoad %127 
                                     sampler %130 = OpLoad %129 
                  read_only Texture2DSampled %131 = OpSampledImage %128 %130 
                                       f32_2 %134 = OpLoad vs_TEXCOORD0 
                                       f32_4 %135 = OpImageSampleImplicitLod %131 %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                      OpStore %49 %136 
                                       f32_3 %137 = OpLoad %49 
                              Uniform f32_4* %138 = OpAccessChain %20 %44 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFMul %137 %140 
                                                      OpStore %49 %141 
                                       f32_4 %142 = OpLoad %9 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpLoad %49 
                                       f32_3 %145 = OpFMul %143 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %9 %147 
                                       f32_3 %148 = OpLoad vs_TEXCOORD2 
                                       f32_3 %149 = OpFNegate %148 
                              Uniform f32_4* %150 = OpAccessChain %20 %28 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %149 %152 
                                                      OpStore %49 %153 
                                       f32_3 %154 = OpLoad %49 
                                       f32_3 %155 = OpLoad %49 
                                         f32 %156 = OpDot %154 %155 
                                                      OpStore %66 %156 
                                         f32 %157 = OpLoad %66 
                                         f32 %158 = OpExtInst %1 32 %157 
                                                      OpStore %66 %158 
                                         f32 %159 = OpLoad %66 
                                       f32_3 %160 = OpCompositeConstruct %159 %159 %159 
                                       f32_3 %161 = OpLoad %49 
                                       f32_3 %162 = OpFMul %160 %161 
                                                      OpStore %49 %162 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                                       f32_3 %165 = OpLoad %49 
                                         f32 %166 = OpDot %164 %165 
                                                      OpStore %66 %166 
                                         f32 %167 = OpLoad %66 
                                         f32 %168 = OpExtInst %1 40 %167 %85 
                                                      OpStore %66 %168 
                                         f32 %169 = OpLoad %66 
                                       f32_3 %170 = OpCompositeConstruct %169 %169 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %9 %175 
                                         f32 %178 = OpLoad vs_TEXCOORD5 
                                                      OpStore %66 %178 
                                         f32 %179 = OpLoad %66 
                                         f32 %180 = OpExtInst %1 43 %179 %85 %109 
                                                      OpStore %66 %180 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpLoad %66 
                                       f32_3 %186 = OpCompositeConstruct %185 %185 %185 
                                       f32_3 %187 = OpFMul %184 %186 
                                       f32_4 %188 = OpLoad %182 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %182 %189 
                                 Output f32* %191 = OpAccessChain %182 %80 
                                                      OpStore %191 %109 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 241
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %224 %234 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate vs_TEXCOORD3 Location 224 
                                                      OpDecorate vs_TEXCOORD4 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                         i32 %195 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %235 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 1 1 1 
                              Uniform f32_4* %196 = OpAccessChain %22 %195 %24 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %194 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %45 %201 
                              Uniform f32_4* %202 = OpAccessChain %22 %195 %29 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %9 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %45 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %45 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %45 %212 
                              Uniform f32_4* %213 = OpAccessChain %22 %195 %37 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 2 2 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %45 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %218 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %9 %223 
                              Uniform f32_4* %225 = OpAccessChain %22 %195 %47 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 3 3 3 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore vs_TEXCOORD3 %233 
                                                      OpStore vs_TEXCOORD4 %235 
                                 Output f32* %236 = OpAccessChain %82 %29 %78 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFNegate %237 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                                      OpStore %239 %238 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 160
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %105 %132 %144 %150 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpMemberDecorate %18 0 Offset 18 
                                                      OpMemberDecorate %18 1 Offset 18 
                                                      OpMemberDecorate %18 2 Offset 18 
                                                      OpMemberDecorate %18 3 Offset 18 
                                                      OpDecorate %18 Block 
                                                      OpDecorate %20 DescriptorSet 20 
                                                      OpDecorate %20 Binding 20 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %76 DescriptorSet 76 
                                                      OpDecorate %76 Binding 76 
                                                      OpDecorate %78 DescriptorSet 78 
                                                      OpDecorate %78 Binding 78 
                                                      OpDecorate %99 DescriptorSet 99 
                                                      OpDecorate %99 Binding 99 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpDecorate vs_TEXCOORD0 Location 105 
                                                      OpDecorate vs_TEXCOORD1 Location 132 
                                                      OpDecorate vs_TEXCOORD5 Location 144 
                                                      OpDecorate %150 Location 150 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %14 %16 
                                              %18 = OpTypeStruct %14 %14 %17 %14 
                                              %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %20 = OpVariable Uniform 
                                              %21 = OpTypeInt 32 1 
                                          i32 %22 = OpConstant 2 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %14 
                                          i32 %29 = OpConstant 0 
                                          i32 %47 = OpConstant 3 
                                              %52 = OpTypePointer Private %6 
                                 Private f32* %53 = OpVariable Private 
                                              %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
       UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                          u32 %69 = OpConstant 3 
                                          u32 %71 = OpConstant 0 
                                 Private f32* %73 = OpVariable Private 
                                              %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %75 = OpTypePointer UniformConstant %74 
         UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                     UniformConstant sampler* %78 = OpVariable UniformConstant 
                                              %80 = OpTypeSampledImage %74 
                                              %83 = OpTypeVector %6 2 
                               Private f32_3* %98 = OpVariable Private 
         UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
                    UniformConstant sampler* %101 = OpVariable UniformConstant 
                                             %104 = OpTypePointer Input %83 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %137 = OpConstant 3.674022E-40 
                                             %143 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         f32 %147 = OpConstant 3.674022E-40 
                                             %149 = OpTypePointer Output %14 
                               Output f32_4* %150 = OpVariable Output 
                                             %157 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                        f32_3 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                        f32_3 %33 = OpLoad vs_TEXCOORD2 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpFMul %32 %34 
                                        f32_3 %36 = OpLoad %9 
                                        f32_3 %37 = OpFAdd %35 %36 
                                                      OpStore %9 %37 
                               Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                        f32_4 %39 = OpLoad %38 
                                        f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                        f32_3 %41 = OpLoad vs_TEXCOORD2 
                                        f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                        f32_3 %43 = OpFMul %40 %42 
                                        f32_3 %44 = OpLoad %9 
                                        f32_3 %45 = OpFAdd %43 %44 
                                                      OpStore %9 %45 
                                        f32_3 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %46 %50 
                                                      OpStore %9 %51 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpLoad %9 
                                          f32 %56 = OpDot %54 %55 
                                                      OpStore %53 %56 
                        read_only TextureCube %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                 read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                        f32_3 %67 = OpLoad %9 
                                        f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                          f32 %70 = OpCompositeExtract %68 3 
                                 Private f32* %72 = OpAccessChain %9 %71 
                                                      OpStore %72 %70 
                          read_only Texture2D %77 = OpLoad %76 
                                      sampler %79 = OpLoad %78 
                   read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                          f32 %82 = OpLoad %53 
                                        f32_2 %84 = OpCompositeConstruct %82 %82 
                                        f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                          f32 %86 = OpCompositeExtract %85 0 
                                                      OpStore %73 %86 
                                 Private f32* %87 = OpAccessChain %9 %71 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpLoad %73 
                                          f32 %90 = OpFMul %88 %89 
                                 Private f32* %91 = OpAccessChain %9 %71 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                               Uniform f32_4* %94 = OpAccessChain %20 %23 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFMul %93 %96 
                                                      OpStore %9 %97 
                         read_only Texture2D %100 = OpLoad %99 
                                     sampler %102 = OpLoad %101 
                  read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                                       f32_2 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpImageSampleImplicitLod %103 %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                                      OpStore %98 %108 
                                       f32_3 %109 = OpLoad %98 
                              Uniform f32_4* %110 = OpAccessChain %20 %47 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_3 %113 = OpFMul %109 %112 
                                                      OpStore %98 %113 
                                       f32_3 %114 = OpLoad %9 
                                       f32_3 %115 = OpLoad %98 
                                       f32_3 %116 = OpFMul %114 %115 
                                                      OpStore %9 %116 
                                       f32_3 %117 = OpLoad vs_TEXCOORD2 
                                       f32_3 %118 = OpFNegate %117 
                              Uniform f32_4* %119 = OpAccessChain %20 %29 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                                      OpStore %98 %122 
                                       f32_3 %123 = OpLoad %98 
                                       f32_3 %124 = OpLoad %98 
                                         f32 %125 = OpDot %123 %124 
                                                      OpStore %53 %125 
                                         f32 %126 = OpLoad %53 
                                         f32 %127 = OpExtInst %1 32 %126 
                                                      OpStore %53 %127 
                                         f32 %128 = OpLoad %53 
                                       f32_3 %129 = OpCompositeConstruct %128 %128 %128 
                                       f32_3 %130 = OpLoad %98 
                                       f32_3 %131 = OpFMul %129 %130 
                                                      OpStore %98 %131 
                                       f32_3 %133 = OpLoad vs_TEXCOORD1 
                                       f32_3 %134 = OpLoad %98 
                                         f32 %135 = OpDot %133 %134 
                                                      OpStore %53 %135 
                                         f32 %136 = OpLoad %53 
                                         f32 %138 = OpExtInst %1 40 %136 %137 
                                                      OpStore %53 %138 
                                         f32 %139 = OpLoad %53 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_3 %141 = OpLoad %9 
                                       f32_3 %142 = OpFMul %140 %141 
                                                      OpStore %9 %142 
                                         f32 %145 = OpLoad vs_TEXCOORD5 
                                                      OpStore %53 %145 
                                         f32 %146 = OpLoad %53 
                                         f32 %148 = OpExtInst %1 43 %146 %137 %147 
                                                      OpStore %53 %148 
                                       f32_3 %151 = OpLoad %9 
                                         f32 %152 = OpLoad %53 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_3 %154 = OpFMul %151 %153 
                                       f32_4 %155 = OpLoad %150 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %150 %156 
                                 Output f32* %158 = OpAccessChain %150 %69 
                                                      OpStore %158 %147 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 241
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %134 %177 %187 %188 %201 %228 %234 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 134 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate vs_TEXCOORD0 Location 187 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate vs_TEXCOORD1 Location 228 
                                                      OpDecorate vs_TEXCOORD4 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %132 = OpTypeVector %6 3 
                                             %133 = OpTypePointer Output %132 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypeVector %6 2 
                                         i32 %147 = OpConstant 5 
                                             %176 = OpTypePointer Output %144 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %188 = OpVariable Input 
                                         i32 %191 = OpConstant 6 
                                             %200 = OpTypePointer Input %132 
                                Input f32_3* %201 = OpVariable Input 
                                Private f32* %220 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %235 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                              Uniform f32_4* %125 = OpAccessChain %22 %24 %47 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %11 
                                       f32_4 %128 = OpVectorShuffle %127 %127 3 3 3 3 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %45 %131 
                              Uniform f32_4* %135 = OpAccessChain %22 %24 %47 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %11 
                                       f32_3 %139 = OpVectorShuffle %138 %138 3 3 3 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %9 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %140 %142 
                                                      OpStore vs_TEXCOORD2 %143 
                                       f32_4 %145 = OpLoad %45 
                                       f32_2 %146 = OpVectorShuffle %145 %145 1 1 
                              Uniform f32_4* %148 = OpAccessChain %22 %147 %24 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %146 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                                      OpStore %9 %153 
                              Uniform f32_4* %154 = OpAccessChain %22 %147 %29 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_4 %157 = OpLoad %45 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 0 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 2 3 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %22 %147 %37 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpLoad %45 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 2 
                                       f32_2 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 2 3 
                                                      OpStore %9 %175 
                              Uniform f32_4* %178 = OpAccessChain %22 %147 %47 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                                       f32_4 %181 = OpLoad %45 
                                       f32_2 %182 = OpVectorShuffle %181 %181 3 3 
                                       f32_2 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_2 %185 = OpVectorShuffle %184 %184 0 1 
                                       f32_2 %186 = OpFAdd %183 %185 
                                                      OpStore vs_TEXCOORD3 %186 
                                       f32_4 %189 = OpLoad %188 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                              Uniform f32_4* %192 = OpAccessChain %22 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_2 %194 = OpVectorShuffle %193 %193 0 1 
                                       f32_2 %195 = OpFMul %190 %194 
                              Uniform f32_4* %196 = OpAccessChain %22 %191 
                                       f32_4 %197 = OpLoad %196 
                                       f32_2 %198 = OpVectorShuffle %197 %197 2 3 
                                       f32_2 %199 = OpFAdd %195 %198 
                                                      OpStore vs_TEXCOORD0 %199 
                                       f32_3 %202 = OpLoad %201 
                              Uniform f32_4* %203 = OpAccessChain %22 %37 %29 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                         f32 %206 = OpDot %202 %205 
                                Private f32* %207 = OpAccessChain %9 %94 
                                                      OpStore %207 %206 
                                       f32_3 %208 = OpLoad %201 
                              Uniform f32_4* %209 = OpAccessChain %22 %37 %24 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %208 %211 
                                Private f32* %213 = OpAccessChain %9 %78 
                                                      OpStore %213 %212 
                                       f32_3 %214 = OpLoad %201 
                              Uniform f32_4* %215 = OpAccessChain %22 %37 %37 
                                       f32_4 %216 = OpLoad %215 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                         f32 %218 = OpDot %214 %217 
                                Private f32* %219 = OpAccessChain %9 %86 
                                                      OpStore %219 %218 
                                       f32_4 %221 = OpLoad %9 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %220 %225 
                                         f32 %226 = OpLoad %220 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %220 %227 
                                         f32 %229 = OpLoad %220 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpFMul %230 %232 
                                                      OpStore vs_TEXCOORD1 %233 
                                                      OpStore vs_TEXCOORD4 %235 
                                 Output f32* %236 = OpAccessChain %82 %29 %78 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFNegate %237 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                                      OpStore %239 %238 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %95 %108 %122 %128 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate vs_TEXCOORD0 Location 95 
                                                      OpDecorate vs_TEXCOORD1 Location 108 
                                                      OpDecorate vs_TEXCOORD5 Location 122 
                                                      OpDecorate %128 Location 128 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeStruct %15 %15 %18 %15 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %15 
                                          i32 %32 = OpConstant 0 
                                          i32 %57 = OpConstant 3 
                                              %64 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %65 = OpTypePointer UniformConstant %64 
         UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                                              %68 = OpTypeSampler 
                                              %69 = OpTypePointer UniformConstant %68 
                     UniformConstant sampler* %70 = OpVariable UniformConstant 
                                              %72 = OpTypeSampledImage %64 
                                          u32 %77 = OpConstant 3 
                                          u32 %79 = OpConstant 0 
                                              %80 = OpTypePointer Private %6 
                               Private f32_3* %88 = OpVariable Private 
         UniformConstant read_only Texture2D* %89 = OpVariable UniformConstant 
                     UniformConstant sampler* %91 = OpVariable UniformConstant 
                                              %94 = OpTypePointer Input %12 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Private f32* %107 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         f32 %115 = OpConstant 3.674022E-40 
                                             %121 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         f32 %125 = OpConstant 3.674022E-40 
                                             %127 = OpTypePointer Output %15 
                               Output f32_4* %128 = OpVariable Output 
                                             %135 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_2 %29 = OpFMul %14 %28 
                                        f32_3 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                      OpStore %9 %31 
                               Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_3 %36 = OpLoad vs_TEXCOORD2 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                        f32_2 %38 = OpFMul %35 %37 
                                        f32_3 %39 = OpLoad %9 
                                        f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                        f32_2 %41 = OpFAdd %38 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                      OpStore %9 %43 
                               Uniform f32_4* %44 = OpAccessChain %21 %23 %23 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad vs_TEXCOORD2 
                                        f32_2 %48 = OpVectorShuffle %47 %47 2 2 
                                        f32_2 %49 = OpFMul %46 %48 
                                        f32_3 %50 = OpLoad %9 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_2 %52 = OpFAdd %49 %51 
                                        f32_3 %53 = OpLoad %9 
                                        f32_3 %54 = OpVectorShuffle %53 %52 3 4 2 
                                                      OpStore %9 %54 
                                        f32_3 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                               Uniform f32_4* %58 = OpAccessChain %21 %23 %57 
                                        f32_4 %59 = OpLoad %58 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %61 = OpFAdd %56 %60 
                                        f32_3 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                      OpStore %9 %63 
                          read_only Texture2D %67 = OpLoad %66 
                                      sampler %71 = OpLoad %70 
                   read_only Texture2DSampled %73 = OpSampledImage %67 %71 
                                        f32_3 %74 = OpLoad %9 
                                        f32_2 %75 = OpVectorShuffle %74 %74 0 1 
                                        f32_4 %76 = OpImageSampleImplicitLod %73 %75 
                                          f32 %78 = OpCompositeExtract %76 3 
                                 Private f32* %81 = OpAccessChain %9 %79 
                                                      OpStore %81 %78 
                                        f32_3 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                               Uniform f32_4* %84 = OpAccessChain %21 %24 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %83 %86 
                                                      OpStore %9 %87 
                          read_only Texture2D %90 = OpLoad %89 
                                      sampler %92 = OpLoad %91 
                   read_only Texture2DSampled %93 = OpSampledImage %90 %92 
                                        f32_2 %96 = OpLoad vs_TEXCOORD0 
                                        f32_4 %97 = OpImageSampleImplicitLod %93 %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                                      OpStore %88 %98 
                                        f32_3 %99 = OpLoad %88 
                              Uniform f32_4* %100 = OpAccessChain %21 %57 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFMul %99 %102 
                                                      OpStore %88 %103 
                                       f32_3 %104 = OpLoad %9 
                                       f32_3 %105 = OpLoad %88 
                                       f32_3 %106 = OpFMul %104 %105 
                                                      OpStore %9 %106 
                                       f32_3 %109 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %110 = OpAccessChain %21 %32 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                                      OpStore %107 %113 
                                         f32 %114 = OpLoad %107 
                                         f32 %116 = OpExtInst %1 40 %114 %115 
                                                      OpStore %107 %116 
                                         f32 %117 = OpLoad %107 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_3 %119 = OpLoad %9 
                                       f32_3 %120 = OpFMul %118 %119 
                                                      OpStore %9 %120 
                                         f32 %123 = OpLoad vs_TEXCOORD5 
                                                      OpStore %107 %123 
                                         f32 %124 = OpLoad %107 
                                         f32 %126 = OpExtInst %1 43 %124 %115 %125 
                                                      OpStore %107 %126 
                                       f32_3 %129 = OpLoad %9 
                                         f32 %130 = OpLoad %107 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %128 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %128 %134 
                                 Output f32* %136 = OpAccessChain %128 %77 
                                                      OpStore %136 %125 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
  GpuProgramID 137343
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD0 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD1 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore vs_TEXCOORD0 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 179
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %127 %163 %170 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %127 Location 127 
                                                      OpDecorate vs_TEXCOORD0 Location 163 
                                                      OpDecorate %170 Flat 
                                                      OpDecorate %170 Location 170 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 
                                              %93 = OpTypePointer Uniform %92 
                  Uniform struct {f32_4[4];}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypePointer Input %75 
                                Input f32_3* %127 = OpVariable Input 
                                         u32 %135 = OpConstant 0 
                                             %136 = OpTypePointer Private %23 
                                         u32 %153 = OpConstant 2 
                                Private f32* %155 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %169 = OpTypePointer Output %31 
                                 Output u32* %170 = OpVariable Output 
                                             %173 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_3 %128 = OpLoad %127 
                                         i32 %129 = OpLoad %8 
                                         i32 %130 = OpSDiv %129 %42 
                              Uniform f32_4* %131 = OpAccessChain %40 %15 %130 %44 %15 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %128 %133 
                                Private f32* %137 = OpAccessChain %26 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %127 
                                         i32 %139 = OpLoad %8 
                                         i32 %140 = OpSDiv %139 %42 
                              Uniform f32_4* %141 = OpAccessChain %40 %15 %140 %44 %44 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %138 %143 
                                Private f32* %145 = OpAccessChain %26 %112 
                                                      OpStore %145 %144 
                                       f32_3 %146 = OpLoad %127 
                                         i32 %147 = OpLoad %8 
                                         i32 %148 = OpSDiv %147 %42 
                              Uniform f32_4* %149 = OpAccessChain %40 %15 %148 %44 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %154 = OpAccessChain %26 %153 
                                                      OpStore %154 %152 
                                       f32_4 %156 = OpLoad %26 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %26 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %157 %159 
                                                      OpStore %155 %160 
                                         f32 %161 = OpLoad %155 
                                         f32 %162 = OpExtInst %1 32 %161 
                                                      OpStore %155 %162 
                                         f32 %164 = OpLoad %155 
                                       f32_3 %165 = OpCompositeConstruct %164 %164 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %165 %167 
                                                      OpStore vs_TEXCOORD0 %168 
                                         i32 %171 = OpLoad %10 
                                         u32 %172 = OpBitcast %171 
                                                      OpStore %170 %172 
                                 Output f32* %174 = OpAccessChain %116 %15 %112 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFNegate %175 
                                 Output f32* %177 = OpAccessChain %116 %15 %112 
                                                      OpStore %177 %176 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 202330
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %252 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD4 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                                             %203 = OpTypePointer Private %51 
                              Private f32_3* %204 = OpVariable Private 
                                         i32 %205 = OpConstant 4 
                                         i32 %211 = OpConstant 5 
                                         i32 %217 = OpConstant 6 
                                         i32 %223 = OpConstant 7 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %235 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %181 = OpAccessChain %9 %90 
                                         f32 %182 = OpLoad %181 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %182 %184 
                                Private f32* %186 = OpAccessChain %45 %116 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %116 
                                         f32 %188 = OpLoad %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %45 %116 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %191 %194 
                                Private f32* %196 = OpAccessChain %45 %116 
                                                      OpStore %196 %195 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 2 2 0 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 0 1 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                              Uniform f32_4* %206 = OpAccessChain %21 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %197 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %204 %116 
                                                      OpStore %210 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %197 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %204 %90 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %21 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %197 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %204 %164 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %204 
                                       f32_3 %231 = OpFAdd %229 %230 
                                       f32_4 %232 = OpLoad %45 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %45 %233 
                                Private f32* %236 = OpAccessChain %9 %235 
                                                      OpStore %236 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %24 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %9 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %197 %116 
                                                      OpStore %241 %240 
                              Uniform f32_4* %242 = OpAccessChain %21 %37 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %9 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %197 %90 
                                                      OpStore %246 %245 
                              Uniform f32_4* %247 = OpAccessChain %21 %47 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %9 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %197 %164 
                                                      OpStore %251 %250 
                                       f32_4 %253 = OpLoad %45 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %197 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore vs_TEXCOORD4 %257 
                                 Output f32* %259 = OpAccessChain %94 %29 %90 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                                      OpStore %262 %261 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 75
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 
                                     %53 = OpTypePointer Uniform %52 
            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 0 
                                     %57 = OpTypePointer Uniform %10 
                                     %62 = OpTypePointer Output %10 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %69 = OpConstant 3.674022E-40 
                                     %70 = OpTypeInt 32 0 
                                 u32 %71 = OpConstant 3 
                                     %72 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %64 = OpLoad %9 
                               f32_3 %65 = OpLoad %40 
                               f32_3 %66 = OpFMul %64 %65 
                               f32_4 %67 = OpLoad %63 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %63 %68 
                         Output f32* %73 = OpAccessChain %63 %71 
                                             OpStore %73 %69 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %252 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD4 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                                             %203 = OpTypePointer Private %51 
                              Private f32_3* %204 = OpVariable Private 
                                         i32 %205 = OpConstant 4 
                                         i32 %211 = OpConstant 5 
                                         i32 %217 = OpConstant 6 
                                         i32 %223 = OpConstant 7 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %235 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %181 = OpAccessChain %9 %90 
                                         f32 %182 = OpLoad %181 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %182 %184 
                                Private f32* %186 = OpAccessChain %45 %116 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %116 
                                         f32 %188 = OpLoad %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %45 %116 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %191 %194 
                                Private f32* %196 = OpAccessChain %45 %116 
                                                      OpStore %196 %195 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 2 2 0 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 0 1 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                              Uniform f32_4* %206 = OpAccessChain %21 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %197 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %204 %116 
                                                      OpStore %210 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %197 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %204 %90 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %21 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %197 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %204 %164 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %204 
                                       f32_3 %231 = OpFAdd %229 %230 
                                       f32_4 %232 = OpLoad %45 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %45 %233 
                                Private f32* %236 = OpAccessChain %9 %235 
                                                      OpStore %236 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %24 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %9 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %197 %116 
                                                      OpStore %241 %240 
                              Uniform f32_4* %242 = OpAccessChain %21 %37 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %9 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %197 %90 
                                                      OpStore %246 %245 
                              Uniform f32_4* %247 = OpAccessChain %21 %47 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %9 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %197 %164 
                                                      OpStore %251 %250 
                                       f32_4 %253 = OpLoad %45 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %197 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore vs_TEXCOORD4 %257 
                                 Output f32* %259 = OpAccessChain %94 %29 %90 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                                      OpStore %262 %261 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %66 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %66 Location 66 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 
                                     %56 = OpTypePointer Uniform %55 
            Uniform struct {f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 0 
                                     %60 = OpTypePointer Uniform %10 
                                     %65 = OpTypePointer Output %10 
                       Output f32_4* %66 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %67 = OpLoad %9 
                               f32_3 %68 = OpLoad %43 
                               f32_3 %69 = OpFMul %67 %68 
                               f32_4 %70 = OpLoad %66 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %66 %71 
                         Output f32* %76 = OpAccessChain %66 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %252 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD4 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                                             %203 = OpTypePointer Private %51 
                              Private f32_3* %204 = OpVariable Private 
                                         i32 %205 = OpConstant 4 
                                         i32 %211 = OpConstant 5 
                                         i32 %217 = OpConstant 6 
                                         i32 %223 = OpConstant 7 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %235 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %181 = OpAccessChain %9 %90 
                                         f32 %182 = OpLoad %181 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %182 %184 
                                Private f32* %186 = OpAccessChain %45 %116 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %116 
                                         f32 %188 = OpLoad %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %45 %116 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %191 %194 
                                Private f32* %196 = OpAccessChain %45 %116 
                                                      OpStore %196 %195 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 2 2 0 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 0 1 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                              Uniform f32_4* %206 = OpAccessChain %21 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %197 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %204 %116 
                                                      OpStore %210 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %197 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %204 %90 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %21 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %197 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %204 %164 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %204 
                                       f32_3 %231 = OpFAdd %229 %230 
                                       f32_4 %232 = OpLoad %45 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %45 %233 
                                Private f32* %236 = OpAccessChain %9 %235 
                                                      OpStore %236 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %24 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %9 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %197 %116 
                                                      OpStore %241 %240 
                              Uniform f32_4* %242 = OpAccessChain %21 %37 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %9 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %197 %90 
                                                      OpStore %246 %245 
                              Uniform f32_4* %247 = OpAccessChain %21 %47 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %9 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %197 %164 
                                                      OpStore %251 %250 
                                       f32_4 %253 = OpLoad %45 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %197 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore vs_TEXCOORD4 %257 
                                 Output f32* %259 = OpAccessChain %94 %29 %90 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                                      OpStore %262 %261 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 75
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 
                                     %53 = OpTypePointer Uniform %52 
            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 0 
                                     %57 = OpTypePointer Uniform %10 
                                     %62 = OpTypePointer Output %10 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %69 = OpConstant 3.674022E-40 
                                     %70 = OpTypeInt 32 0 
                                 u32 %71 = OpConstant 3 
                                     %72 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %64 = OpLoad %9 
                               f32_3 %65 = OpLoad %40 
                               f32_3 %66 = OpFMul %64 %65 
                               f32_4 %67 = OpLoad %63 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %63 %68 
                         Output f32* %73 = OpAccessChain %63 %71 
                                             OpStore %73 %69 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %129 %141 %145 %252 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate vs_TEXCOORD2 Location 129 
                                                      OpDecorate vs_TEXCOORD3 Location 141 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD4 Location 252 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                                             %113 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Uniform %6 
                                         f32 %124 = OpConstant 3.674022E-40 
                                       f32_3 %125 = OpConstantComposite %124 %124 %124 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %142 = OpConstant 3.674022E-40 
                                       f32_4 %143 = OpConstantComposite %142 %142 %142 %142 
                                             %144 = OpTypePointer Input %51 
                                Input f32_3* %145 = OpVariable Input 
                                         i32 %147 = OpConstant 9 
                                         u32 %164 = OpConstant 2 
                                Private f32* %166 = OpVariable Private 
                              Private f32_4* %197 = OpVariable Private 
                                             %203 = OpTypePointer Private %51 
                              Private f32_3* %204 = OpVariable Private 
                                         i32 %205 = OpConstant 4 
                                         i32 %211 = OpConstant 5 
                                         i32 %217 = OpConstant 6 
                                         i32 %223 = OpConstant 7 
                                         f32 %234 = OpConstant 3.674022E-40 
                                         u32 %235 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %258 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                Private f32* %114 = OpAccessChain %9 %90 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %118 = OpAccessChain %21 %29 %116 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %115 %119 
                                Private f32* %121 = OpAccessChain %9 %90 
                                                      OpStore %121 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 3 1 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %45 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 1 5 6 
                                                      OpStore %45 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 2 3 
                                       f32_4 %132 = OpLoad vs_TEXCOORD2 
                                       f32_4 %133 = OpVectorShuffle %132 %131 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %133 
                                       f32_4 %134 = OpLoad %45 
                                       f32_2 %135 = OpVectorShuffle %134 %134 2 2 
                                       f32_4 %136 = OpLoad %45 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 3 
                                       f32_2 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad vs_TEXCOORD2 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %140 
                                                      OpStore vs_TEXCOORD3 %143 
                                       f32_3 %146 = OpLoad %145 
                              Uniform f32_4* %148 = OpAccessChain %21 %147 %29 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %146 %150 
                                Private f32* %152 = OpAccessChain %9 %116 
                                                      OpStore %152 %151 
                                       f32_3 %153 = OpLoad %145 
                              Uniform f32_4* %154 = OpAccessChain %21 %147 %24 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %153 %156 
                                Private f32* %158 = OpAccessChain %9 %90 
                                                      OpStore %158 %157 
                                       f32_3 %159 = OpLoad %145 
                              Uniform f32_4* %160 = OpAccessChain %21 %147 %37 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %159 %162 
                                Private f32* %165 = OpAccessChain %9 %164 
                                                      OpStore %165 %163 
                                       f32_4 %167 = OpLoad %9 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %168 %170 
                                                      OpStore %166 %171 
                                         f32 %172 = OpLoad %166 
                                         f32 %173 = OpExtInst %1 32 %172 
                                                      OpStore %166 %173 
                                         f32 %174 = OpLoad %166 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %9 %180 
                                Private f32* %181 = OpAccessChain %9 %90 
                                         f32 %182 = OpLoad %181 
                                Private f32* %183 = OpAccessChain %9 %90 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFMul %182 %184 
                                Private f32* %186 = OpAccessChain %45 %116 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %9 %116 
                                         f32 %188 = OpLoad %187 
                                Private f32* %189 = OpAccessChain %9 %116 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFMul %188 %190 
                                Private f32* %192 = OpAccessChain %45 %116 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %191 %194 
                                Private f32* %196 = OpAccessChain %45 %116 
                                                      OpStore %196 %195 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %198 1 2 2 0 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 0 1 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                              Uniform f32_4* %206 = OpAccessChain %21 %205 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpLoad %197 
                                         f32 %209 = OpDot %207 %208 
                                Private f32* %210 = OpAccessChain %204 %116 
                                                      OpStore %210 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %197 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %204 %90 
                                                      OpStore %216 %215 
                              Uniform f32_4* %218 = OpAccessChain %21 %217 
                                       f32_4 %219 = OpLoad %218 
                                       f32_4 %220 = OpLoad %197 
                                         f32 %221 = OpDot %219 %220 
                                Private f32* %222 = OpAccessChain %204 %164 
                                                      OpStore %222 %221 
                              Uniform f32_4* %224 = OpAccessChain %21 %223 
                                       f32_4 %225 = OpLoad %224 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 0 0 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %230 = OpLoad %204 
                                       f32_3 %231 = OpFAdd %229 %230 
                                       f32_4 %232 = OpLoad %45 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %45 %233 
                                Private f32* %236 = OpAccessChain %9 %235 
                                                      OpStore %236 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %24 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %9 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %197 %116 
                                                      OpStore %241 %240 
                              Uniform f32_4* %242 = OpAccessChain %21 %37 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %9 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %197 %90 
                                                      OpStore %246 %245 
                              Uniform f32_4* %247 = OpAccessChain %21 %47 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %9 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %197 %164 
                                                      OpStore %251 %250 
                                       f32_4 %253 = OpLoad %45 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %197 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFAdd %254 %256 
                                                      OpStore vs_TEXCOORD4 %257 
                                 Output f32* %259 = OpAccessChain %94 %29 %90 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFNegate %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                                      OpStore %262 %261 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %66 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %66 Location 66 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 
                                     %56 = OpTypePointer Uniform %55 
            Uniform struct {f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 0 
                                     %60 = OpTypePointer Uniform %10 
                                     %65 = OpTypePointer Output %10 
                       Output f32_4* %66 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %67 = OpLoad %9 
                               f32_3 %68 = OpLoad %43 
                               f32_3 %69 = OpFMul %67 %68 
                               f32_4 %70 = OpLoad %66 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %66 %71 
                         Output f32* %76 = OpAccessChain %66 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat4 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 307
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %162 %174 %178 %291 %298 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate vs_TEXCOORD2 Location 162 
                                                      OpDecorate vs_TEXCOORD3 Location 174 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate vs_TEXCOORD4 Location 291 
                                                      OpDecorate %298 Flat 
                                                      OpDecorate %298 Location 298 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                         i32 %133 = OpConstant 9 
                                             %142 = OpTypePointer Private %23 
                                Private f32* %143 = OpVariable Private 
                                         u32 %146 = OpConstant 0 
                                             %147 = OpTypePointer Uniform %23 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 3 
                                       f32_2 %158 = OpConstantComposite %152 %152 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Input %75 
                                Input f32_3* %178 = OpVariable Input 
                                         u32 %202 = OpConstant 2 
                              Private f32_4* %204 = OpVariable Private 
                                             %243 = OpTypePointer Private %75 
                              Private f32_3* %244 = OpVariable Private 
                                         i32 %245 = OpConstant 4 
                                         i32 %251 = OpConstant 5 
                                         i32 %257 = OpConstant 6 
                                         i32 %263 = OpConstant 7 
                                         f32 %274 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %297 = OpTypePointer Output %31 
                                 Output u32* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %134 = OpAccessChain %94 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_2 %137 = OpFMul %132 %136 
                              Uniform f32_4* %138 = OpAccessChain %94 %133 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_2 %141 = OpFAdd %137 %140 
                                                      OpStore vs_TEXCOORD0 %141 
                                Private f32* %144 = OpAccessChain %26 %119 
                                         f32 %145 = OpLoad %144 
                                Uniform f32* %148 = OpAccessChain %94 %15 %146 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %145 %149 
                                                      OpStore %143 %150 
                                         f32 %151 = OpLoad %143 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %68 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %26 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 3 
                                       f32_2 %159 = OpFMul %157 %158 
                                       f32_4 %160 = OpLoad %68 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 3 
                                                      OpStore %68 %161 
                                       f32_4 %163 = OpLoad %26 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad vs_TEXCOORD2 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %166 
                                       f32_4 %167 = OpLoad %68 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %68 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad vs_TEXCOORD2 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %173 
                                                      OpStore vs_TEXCOORD3 %176 
                                       f32_3 %179 = OpLoad %178 
                                         i32 %180 = OpLoad %8 
                                         i32 %181 = OpSDiv %180 %42 
                              Uniform f32_4* %182 = OpAccessChain %40 %15 %181 %44 %15 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %179 %184 
                                Private f32* %186 = OpAccessChain %26 %146 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %178 
                                         i32 %188 = OpLoad %8 
                                         i32 %189 = OpSDiv %188 %42 
                              Uniform f32_4* %190 = OpAccessChain %40 %15 %189 %44 %44 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %26 %119 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %178 
                                         i32 %196 = OpLoad %8 
                                         i32 %197 = OpSDiv %196 %42 
                              Uniform f32_4* %198 = OpAccessChain %40 %15 %197 %44 %60 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %203 = OpAccessChain %26 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %26 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %26 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                Private f32* %210 = OpAccessChain %204 %146 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %204 %146 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 32 %212 
                                Private f32* %214 = OpAccessChain %204 %146 
                                                      OpStore %214 %213 
                                       f32_4 %215 = OpLoad %204 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_4 %217 = OpLoad %26 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %204 %221 
                                Private f32* %222 = OpAccessChain %204 %119 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %204 %119 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %26 %146 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %204 %146 
                                         f32 %229 = OpLoad %228 
                                Private f32* %230 = OpAccessChain %204 %146 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %229 %231 
                                Private f32* %233 = OpAccessChain %26 %146 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %232 %235 
                                Private f32* %237 = OpAccessChain %26 %146 
                                                      OpStore %237 %236 
                                       f32_4 %238 = OpLoad %204 
                                       f32_4 %239 = OpVectorShuffle %238 %238 1 2 2 0 
                                       f32_4 %240 = OpLoad %204 
                                       f32_4 %241 = OpVectorShuffle %240 %240 0 1 2 2 
                                       f32_4 %242 = OpFMul %239 %241 
                                                      OpStore %68 %242 
                              Uniform f32_4* %246 = OpAccessChain %94 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %68 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %244 %146 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %94 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %68 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %244 %119 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %94 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %68 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %244 %202 
                                                      OpStore %262 %261 
                              Uniform f32_4* %264 = OpAccessChain %94 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %26 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %244 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %26 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %26 %273 
                                Private f32* %275 = OpAccessChain %204 %154 
                                                      OpStore %275 %274 
                              Uniform f32_4* %276 = OpAccessChain %94 %44 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpLoad %204 
                                         f32 %279 = OpDot %277 %278 
                                Private f32* %280 = OpAccessChain %68 %146 
                                                      OpStore %280 %279 
                              Uniform f32_4* %281 = OpAccessChain %94 %60 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %204 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %285 = OpAccessChain %68 %119 
                                                      OpStore %285 %284 
                              Uniform f32_4* %286 = OpAccessChain %94 %21 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %204 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %68 %202 
                                                      OpStore %290 %289 
                                       f32_4 %292 = OpLoad %26 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_4 %294 = OpLoad %68 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpFAdd %293 %295 
                                                      OpStore vs_TEXCOORD4 %296 
                                         i32 %299 = OpLoad %10 
                                         u32 %300 = OpBitcast %299 
                                                      OpStore %298 %300 
                                 Output f32* %302 = OpAccessChain %123 %15 %119 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFNegate %303 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                                      OpStore %305 %304 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %66 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %66 Location 66 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 
                                     %56 = OpTypePointer Uniform %55 
            Uniform struct {f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 0 
                                     %60 = OpTypePointer Uniform %10 
                                     %65 = OpTypePointer Output %10 
                       Output f32_4* %66 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %67 = OpLoad %9 
                               f32_3 %68 = OpLoad %43 
                               f32_3 %69 = OpFMul %67 %68 
                               f32_4 %70 = OpLoad %66 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %66 %71 
                         Output f32* %76 = OpAccessChain %66 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 325
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %165 %177 %181 %310 %316 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %181 Location 181 
                                                      OpMemberDecorate %248 0 Offset 248 
                                                      OpMemberDecorate %248 1 Offset 248 
                                                      OpMemberDecorate %248 2 Offset 248 
                                                      OpMemberDecorate %248 3 Offset 248 
                                                      OpMemberDecorate %248 4 Offset 248 
                                                      OpMemberDecorate %248 5 Offset 248 
                                                      OpMemberDecorate %248 6 Offset 248 
                                                      OpDecorate %249 ArrayStride 249 
                                                      OpMemberDecorate %250 0 Offset 250 
                                                      OpDecorate %250 Block 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate vs_TEXCOORD4 Location 310 
                                                      OpDecorate %316 Flat 
                                                      OpDecorate %316 Location 316 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %145 = OpTypePointer Private %27 
                                Private f32* %146 = OpVariable Private 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Uniform %27 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         u32 %157 = OpConstant 3 
                                       f32_2 %161 = OpConstantComposite %155 %155 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Input %79 
                                Input f32_3* %181 = OpVariable Input 
                                         u32 %205 = OpConstant 2 
                                             %207 = OpTypePointer Private %79 
                              Private f32_3* %208 = OpVariable Private 
                              Private f32_3* %247 = OpVariable Private 
                                             %248 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %249 = OpTypeArray %248 %40 
                                             %250 = OpTypeStruct %249 
                                             %251 = OpTypePointer Uniform %250 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %252 = OpVariable Uniform 
                                         i32 %262 = OpConstant 4 
                                         i32 %270 = OpConstant 5 
                                         i32 %278 = OpConstant 6 
                                         f32 %287 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %315 = OpTypePointer Output %35 
                                 Output u32* %316 = OpVariable Output 
                                             %319 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                Private f32* %147 = OpAccessChain %30 %123 
                                         f32 %148 = OpLoad %147 
                                Uniform f32* %151 = OpAccessChain %98 %15 %149 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %148 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                         f32 %156 = OpFMul %154 %155 
                                Private f32* %158 = OpAccessChain %72 %157 
                                                      OpStore %158 %156 
                                       f32_4 %159 = OpLoad %30 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 3 
                                       f32_2 %162 = OpFMul %160 %161 
                                       f32_4 %163 = OpLoad %72 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 3 
                                                      OpStore %72 %164 
                                       f32_4 %166 = OpLoad %30 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %72 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %72 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %179 
                                       f32_3 %182 = OpLoad %181 
                                         i32 %183 = OpLoad %20 
                                         i32 %184 = OpSDiv %183 %46 
                              Uniform f32_4* %185 = OpAccessChain %44 %15 %184 %48 %15 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %182 %187 
                                Private f32* %189 = OpAccessChain %30 %149 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %181 
                                         i32 %191 = OpLoad %20 
                                         i32 %192 = OpSDiv %191 %46 
                              Uniform f32_4* %193 = OpAccessChain %44 %15 %192 %48 %48 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %30 %123 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %181 
                                         i32 %199 = OpLoad %20 
                                         i32 %200 = OpSDiv %199 %46 
                              Uniform f32_4* %201 = OpAccessChain %44 %15 %200 %48 %64 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %206 = OpAccessChain %30 %205 
                                                      OpStore %206 %204 
                                       f32_4 %209 = OpLoad %30 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %30 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                Private f32* %214 = OpAccessChain %208 %149 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %208 %149 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 32 %216 
                                Private f32* %218 = OpAccessChain %208 %149 
                                                      OpStore %218 %217 
                                       f32_3 %219 = OpLoad %208 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 0 0 
                                       f32_4 %221 = OpLoad %30 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %30 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %30 %225 
                                Private f32* %226 = OpAccessChain %30 %123 
                                         f32 %227 = OpLoad %226 
                                Private f32* %228 = OpAccessChain %30 %123 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %208 %149 
                                                      OpStore %231 %230 
                                Private f32* %232 = OpAccessChain %30 %149 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %30 %149 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %208 %149 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFNegate %238 
                                         f32 %240 = OpFAdd %236 %239 
                                Private f32* %241 = OpAccessChain %208 %149 
                                                      OpStore %241 %240 
                                       f32_4 %242 = OpLoad %30 
                                       f32_4 %243 = OpVectorShuffle %242 %242 1 2 2 0 
                                       f32_4 %244 = OpLoad %30 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 1 2 2 
                                       f32_4 %246 = OpFMul %243 %245 
                                                      OpStore %72 %246 
                                         i32 %253 = OpLoad %8 
                                         i32 %254 = OpSDiv %253 %25 
                              Uniform f32_4* %255 = OpAccessChain %252 %15 %254 %22 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %72 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %247 %149 
                                                      OpStore %259 %258 
                                         i32 %260 = OpLoad %8 
                                         i32 %261 = OpSDiv %260 %25 
                              Uniform f32_4* %263 = OpAccessChain %252 %15 %261 %262 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpLoad %72 
                                         f32 %266 = OpDot %264 %265 
                                Private f32* %267 = OpAccessChain %247 %123 
                                                      OpStore %267 %266 
                                         i32 %268 = OpLoad %8 
                                         i32 %269 = OpSDiv %268 %25 
                              Uniform f32_4* %271 = OpAccessChain %252 %15 %269 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpLoad %72 
                                         f32 %274 = OpDot %272 %273 
                                Private f32* %275 = OpAccessChain %247 %205 
                                                      OpStore %275 %274 
                                         i32 %276 = OpLoad %8 
                                         i32 %277 = OpSDiv %276 %25 
                              Uniform f32_4* %279 = OpAccessChain %252 %15 %277 %278 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %208 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %285 = OpLoad %247 
                                       f32_3 %286 = OpFAdd %284 %285 
                                                      OpStore %208 %286 
                                Private f32* %288 = OpAccessChain %30 %157 
                                                      OpStore %288 %287 
                                         i32 %289 = OpLoad %8 
                                         i32 %290 = OpSDiv %289 %25 
                              Uniform f32_4* %291 = OpAccessChain %252 %15 %290 %15 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpLoad %30 
                                         f32 %294 = OpDot %292 %293 
                                Private f32* %295 = OpAccessChain %72 %149 
                                                      OpStore %295 %294 
                                         i32 %296 = OpLoad %8 
                                         i32 %297 = OpSDiv %296 %25 
                              Uniform f32_4* %298 = OpAccessChain %252 %15 %297 %48 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %30 
                                         f32 %301 = OpDot %299 %300 
                                Private f32* %302 = OpAccessChain %72 %123 
                                                      OpStore %302 %301 
                                         i32 %303 = OpLoad %8 
                                         i32 %304 = OpSDiv %303 %25 
                              Uniform f32_4* %305 = OpAccessChain %252 %15 %304 %64 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpLoad %30 
                                         f32 %308 = OpDot %306 %307 
                                Private f32* %309 = OpAccessChain %72 %205 
                                                      OpStore %309 %308 
                                       f32_3 %311 = OpLoad %208 
                                       f32_4 %312 = OpLoad %72 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                                      OpStore vs_TEXCOORD4 %314 
                                         i32 %317 = OpLoad %10 
                                         u32 %318 = OpBitcast %317 
                                                      OpStore %316 %318 
                                 Output f32* %320 = OpAccessChain %127 %15 %123 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFNegate %321 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                                      OpStore %323 %322 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %66 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate %66 Location 66 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 
                                     %56 = OpTypePointer Uniform %55 
            Uniform struct {f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 0 
                                     %60 = OpTypePointer Uniform %10 
                                     %65 = OpTypePointer Output %10 
                       Output f32_4* %66 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %67 = OpLoad %9 
                               f32_3 %68 = OpLoad %43 
                               f32_3 %69 = OpFMul %67 %68 
                               f32_4 %70 = OpLoad %66 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %66 %71 
                         Output f32* %76 = OpAccessChain %66 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat4 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 307
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %162 %174 %178 %291 %298 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate vs_TEXCOORD2 Location 162 
                                                      OpDecorate vs_TEXCOORD3 Location 174 
                                                      OpDecorate %178 Location 178 
                                                      OpDecorate vs_TEXCOORD4 Location 291 
                                                      OpDecorate %298 Flat 
                                                      OpDecorate %298 Location 298 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                         i32 %133 = OpConstant 9 
                                             %142 = OpTypePointer Private %23 
                                Private f32* %143 = OpVariable Private 
                                         u32 %146 = OpConstant 0 
                                             %147 = OpTypePointer Uniform %23 
                                         f32 %152 = OpConstant 3.674022E-40 
                                         u32 %154 = OpConstant 3 
                                       f32_2 %158 = OpConstantComposite %152 %152 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %175 = OpConstant 3.674022E-40 
                                       f32_4 %176 = OpConstantComposite %175 %175 %175 %175 
                                             %177 = OpTypePointer Input %75 
                                Input f32_3* %178 = OpVariable Input 
                                         u32 %202 = OpConstant 2 
                              Private f32_4* %204 = OpVariable Private 
                                             %243 = OpTypePointer Private %75 
                              Private f32_3* %244 = OpVariable Private 
                                         i32 %245 = OpConstant 4 
                                         i32 %251 = OpConstant 5 
                                         i32 %257 = OpConstant 6 
                                         i32 %263 = OpConstant 7 
                                         f32 %274 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %297 = OpTypePointer Output %31 
                                 Output u32* %298 = OpVariable Output 
                                             %301 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %134 = OpAccessChain %94 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_2 %137 = OpFMul %132 %136 
                              Uniform f32_4* %138 = OpAccessChain %94 %133 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_2 %141 = OpFAdd %137 %140 
                                                      OpStore vs_TEXCOORD0 %141 
                                Private f32* %144 = OpAccessChain %26 %119 
                                         f32 %145 = OpLoad %144 
                                Uniform f32* %148 = OpAccessChain %94 %15 %146 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %145 %149 
                                                      OpStore %143 %150 
                                         f32 %151 = OpLoad %143 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %155 = OpAccessChain %68 %154 
                                                      OpStore %155 %153 
                                       f32_4 %156 = OpLoad %26 
                                       f32_2 %157 = OpVectorShuffle %156 %156 0 3 
                                       f32_2 %159 = OpFMul %157 %158 
                                       f32_4 %160 = OpLoad %68 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 1 5 3 
                                                      OpStore %68 %161 
                                       f32_4 %163 = OpLoad %26 
                                       f32_2 %164 = OpVectorShuffle %163 %163 2 3 
                                       f32_4 %165 = OpLoad vs_TEXCOORD2 
                                       f32_4 %166 = OpVectorShuffle %165 %164 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %166 
                                       f32_4 %167 = OpLoad %68 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 2 
                                       f32_4 %169 = OpLoad %68 
                                       f32_2 %170 = OpVectorShuffle %169 %169 0 3 
                                       f32_2 %171 = OpFAdd %168 %170 
                                       f32_4 %172 = OpLoad vs_TEXCOORD2 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %173 
                                                      OpStore vs_TEXCOORD3 %176 
                                       f32_3 %179 = OpLoad %178 
                                         i32 %180 = OpLoad %8 
                                         i32 %181 = OpSDiv %180 %42 
                              Uniform f32_4* %182 = OpAccessChain %40 %15 %181 %44 %15 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %179 %184 
                                Private f32* %186 = OpAccessChain %26 %146 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %178 
                                         i32 %188 = OpLoad %8 
                                         i32 %189 = OpSDiv %188 %42 
                              Uniform f32_4* %190 = OpAccessChain %40 %15 %189 %44 %44 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %26 %119 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %178 
                                         i32 %196 = OpLoad %8 
                                         i32 %197 = OpSDiv %196 %42 
                              Uniform f32_4* %198 = OpAccessChain %40 %15 %197 %44 %60 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %203 = OpAccessChain %26 %202 
                                                      OpStore %203 %201 
                                       f32_4 %205 = OpLoad %26 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_4 %207 = OpLoad %26 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                Private f32* %210 = OpAccessChain %204 %146 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %204 %146 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 32 %212 
                                Private f32* %214 = OpAccessChain %204 %146 
                                                      OpStore %214 %213 
                                       f32_4 %215 = OpLoad %204 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 0 0 
                                       f32_4 %217 = OpLoad %26 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_4 %220 = OpLoad %204 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %204 %221 
                                Private f32* %222 = OpAccessChain %204 %119 
                                         f32 %223 = OpLoad %222 
                                Private f32* %224 = OpAccessChain %204 %119 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFMul %223 %225 
                                Private f32* %227 = OpAccessChain %26 %146 
                                                      OpStore %227 %226 
                                Private f32* %228 = OpAccessChain %204 %146 
                                         f32 %229 = OpLoad %228 
                                Private f32* %230 = OpAccessChain %204 %146 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFMul %229 %231 
                                Private f32* %233 = OpAccessChain %26 %146 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %232 %235 
                                Private f32* %237 = OpAccessChain %26 %146 
                                                      OpStore %237 %236 
                                       f32_4 %238 = OpLoad %204 
                                       f32_4 %239 = OpVectorShuffle %238 %238 1 2 2 0 
                                       f32_4 %240 = OpLoad %204 
                                       f32_4 %241 = OpVectorShuffle %240 %240 0 1 2 2 
                                       f32_4 %242 = OpFMul %239 %241 
                                                      OpStore %68 %242 
                              Uniform f32_4* %246 = OpAccessChain %94 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %68 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %244 %146 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %94 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %68 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %244 %119 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %94 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %68 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %244 %202 
                                                      OpStore %262 %261 
                              Uniform f32_4* %264 = OpAccessChain %94 %263 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_4 %267 = OpLoad %26 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %244 
                                       f32_3 %271 = OpFAdd %269 %270 
                                       f32_4 %272 = OpLoad %26 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %26 %273 
                                Private f32* %275 = OpAccessChain %204 %154 
                                                      OpStore %275 %274 
                              Uniform f32_4* %276 = OpAccessChain %94 %44 
                                       f32_4 %277 = OpLoad %276 
                                       f32_4 %278 = OpLoad %204 
                                         f32 %279 = OpDot %277 %278 
                                Private f32* %280 = OpAccessChain %68 %146 
                                                      OpStore %280 %279 
                              Uniform f32_4* %281 = OpAccessChain %94 %60 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpLoad %204 
                                         f32 %284 = OpDot %282 %283 
                                Private f32* %285 = OpAccessChain %68 %119 
                                                      OpStore %285 %284 
                              Uniform f32_4* %286 = OpAccessChain %94 %21 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpLoad %204 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %68 %202 
                                                      OpStore %290 %289 
                                       f32_4 %292 = OpLoad %26 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_4 %294 = OpLoad %68 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpFAdd %293 %295 
                                                      OpStore vs_TEXCOORD4 %296 
                                         i32 %299 = OpLoad %10 
                                         u32 %300 = OpBitcast %299 
                                                      OpStore %298 %300 
                                 Output f32* %302 = OpAccessChain %123 %15 %119 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFNegate %303 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                                      OpStore %305 %304 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 75
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 
                                     %53 = OpTypePointer Uniform %52 
            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 0 
                                     %57 = OpTypePointer Uniform %10 
                                     %62 = OpTypePointer Output %10 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %69 = OpConstant 3.674022E-40 
                                     %70 = OpTypeInt 32 0 
                                 u32 %71 = OpConstant 3 
                                     %72 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %64 = OpLoad %9 
                               f32_3 %65 = OpLoad %40 
                               f32_3 %66 = OpFMul %64 %65 
                               f32_4 %67 = OpLoad %63 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %63 %68 
                         Output f32* %73 = OpAccessChain %63 %71 
                                             OpStore %73 %69 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 325
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %165 %177 %181 %310 %316 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %181 Location 181 
                                                      OpMemberDecorate %248 0 Offset 248 
                                                      OpMemberDecorate %248 1 Offset 248 
                                                      OpMemberDecorate %248 2 Offset 248 
                                                      OpMemberDecorate %248 3 Offset 248 
                                                      OpMemberDecorate %248 4 Offset 248 
                                                      OpMemberDecorate %248 5 Offset 248 
                                                      OpMemberDecorate %248 6 Offset 248 
                                                      OpDecorate %249 ArrayStride 249 
                                                      OpMemberDecorate %250 0 Offset 250 
                                                      OpDecorate %250 Block 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate vs_TEXCOORD4 Location 310 
                                                      OpDecorate %316 Flat 
                                                      OpDecorate %316 Location 316 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %145 = OpTypePointer Private %27 
                                Private f32* %146 = OpVariable Private 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Uniform %27 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         u32 %157 = OpConstant 3 
                                       f32_2 %161 = OpConstantComposite %155 %155 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Input %79 
                                Input f32_3* %181 = OpVariable Input 
                                         u32 %205 = OpConstant 2 
                                             %207 = OpTypePointer Private %79 
                              Private f32_3* %208 = OpVariable Private 
                              Private f32_3* %247 = OpVariable Private 
                                             %248 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %249 = OpTypeArray %248 %40 
                                             %250 = OpTypeStruct %249 
                                             %251 = OpTypePointer Uniform %250 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %252 = OpVariable Uniform 
                                         i32 %262 = OpConstant 4 
                                         i32 %270 = OpConstant 5 
                                         i32 %278 = OpConstant 6 
                                         f32 %287 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %315 = OpTypePointer Output %35 
                                 Output u32* %316 = OpVariable Output 
                                             %319 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                Private f32* %147 = OpAccessChain %30 %123 
                                         f32 %148 = OpLoad %147 
                                Uniform f32* %151 = OpAccessChain %98 %15 %149 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %148 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                         f32 %156 = OpFMul %154 %155 
                                Private f32* %158 = OpAccessChain %72 %157 
                                                      OpStore %158 %156 
                                       f32_4 %159 = OpLoad %30 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 3 
                                       f32_2 %162 = OpFMul %160 %161 
                                       f32_4 %163 = OpLoad %72 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 3 
                                                      OpStore %72 %164 
                                       f32_4 %166 = OpLoad %30 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %72 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %72 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %179 
                                       f32_3 %182 = OpLoad %181 
                                         i32 %183 = OpLoad %20 
                                         i32 %184 = OpSDiv %183 %46 
                              Uniform f32_4* %185 = OpAccessChain %44 %15 %184 %48 %15 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %182 %187 
                                Private f32* %189 = OpAccessChain %30 %149 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %181 
                                         i32 %191 = OpLoad %20 
                                         i32 %192 = OpSDiv %191 %46 
                              Uniform f32_4* %193 = OpAccessChain %44 %15 %192 %48 %48 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %30 %123 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %181 
                                         i32 %199 = OpLoad %20 
                                         i32 %200 = OpSDiv %199 %46 
                              Uniform f32_4* %201 = OpAccessChain %44 %15 %200 %48 %64 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %206 = OpAccessChain %30 %205 
                                                      OpStore %206 %204 
                                       f32_4 %209 = OpLoad %30 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %30 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                Private f32* %214 = OpAccessChain %208 %149 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %208 %149 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 32 %216 
                                Private f32* %218 = OpAccessChain %208 %149 
                                                      OpStore %218 %217 
                                       f32_3 %219 = OpLoad %208 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 0 0 
                                       f32_4 %221 = OpLoad %30 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %30 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %30 %225 
                                Private f32* %226 = OpAccessChain %30 %123 
                                         f32 %227 = OpLoad %226 
                                Private f32* %228 = OpAccessChain %30 %123 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %208 %149 
                                                      OpStore %231 %230 
                                Private f32* %232 = OpAccessChain %30 %149 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %30 %149 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %208 %149 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFNegate %238 
                                         f32 %240 = OpFAdd %236 %239 
                                Private f32* %241 = OpAccessChain %208 %149 
                                                      OpStore %241 %240 
                                       f32_4 %242 = OpLoad %30 
                                       f32_4 %243 = OpVectorShuffle %242 %242 1 2 2 0 
                                       f32_4 %244 = OpLoad %30 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 1 2 2 
                                       f32_4 %246 = OpFMul %243 %245 
                                                      OpStore %72 %246 
                                         i32 %253 = OpLoad %8 
                                         i32 %254 = OpSDiv %253 %25 
                              Uniform f32_4* %255 = OpAccessChain %252 %15 %254 %22 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %72 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %247 %149 
                                                      OpStore %259 %258 
                                         i32 %260 = OpLoad %8 
                                         i32 %261 = OpSDiv %260 %25 
                              Uniform f32_4* %263 = OpAccessChain %252 %15 %261 %262 
                                       f32_4 %264 = OpLoad %263 
                                       f32_4 %265 = OpLoad %72 
                                         f32 %266 = OpDot %264 %265 
                                Private f32* %267 = OpAccessChain %247 %123 
                                                      OpStore %267 %266 
                                         i32 %268 = OpLoad %8 
                                         i32 %269 = OpSDiv %268 %25 
                              Uniform f32_4* %271 = OpAccessChain %252 %15 %269 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpLoad %72 
                                         f32 %274 = OpDot %272 %273 
                                Private f32* %275 = OpAccessChain %247 %205 
                                                      OpStore %275 %274 
                                         i32 %276 = OpLoad %8 
                                         i32 %277 = OpSDiv %276 %25 
                              Uniform f32_4* %279 = OpAccessChain %252 %15 %277 %278 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_3 %282 = OpLoad %208 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %285 = OpLoad %247 
                                       f32_3 %286 = OpFAdd %284 %285 
                                                      OpStore %208 %286 
                                Private f32* %288 = OpAccessChain %30 %157 
                                                      OpStore %288 %287 
                                         i32 %289 = OpLoad %8 
                                         i32 %290 = OpSDiv %289 %25 
                              Uniform f32_4* %291 = OpAccessChain %252 %15 %290 %15 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpLoad %30 
                                         f32 %294 = OpDot %292 %293 
                                Private f32* %295 = OpAccessChain %72 %149 
                                                      OpStore %295 %294 
                                         i32 %296 = OpLoad %8 
                                         i32 %297 = OpSDiv %296 %25 
                              Uniform f32_4* %298 = OpAccessChain %252 %15 %297 %48 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %30 
                                         f32 %301 = OpDot %299 %300 
                                Private f32* %302 = OpAccessChain %72 %123 
                                                      OpStore %302 %301 
                                         i32 %303 = OpLoad %8 
                                         i32 %304 = OpSDiv %303 %25 
                              Uniform f32_4* %305 = OpAccessChain %252 %15 %304 %64 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpLoad %30 
                                         f32 %308 = OpDot %306 %307 
                                Private f32* %309 = OpAccessChain %72 %205 
                                                      OpStore %309 %308 
                                       f32_3 %311 = OpLoad %208 
                                       f32_4 %312 = OpLoad %72 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_3 %314 = OpFAdd %311 %313 
                                                      OpStore vs_TEXCOORD4 %314 
                                         i32 %317 = OpLoad %10 
                                         u32 %318 = OpBitcast %317 
                                                      OpStore %316 %318 
                                 Output f32* %320 = OpAccessChain %127 %15 %123 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFNegate %321 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                                      OpStore %323 %322 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 75
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 
                                     %53 = OpTypePointer Uniform %52 
            Uniform struct {f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 0 
                                     %57 = OpTypePointer Uniform %10 
                                     %62 = OpTypePointer Output %10 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %69 = OpConstant 3.674022E-40 
                                     %70 = OpTypeInt 32 0 
                                 u32 %71 = OpConstant 3 
                                     %72 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %64 = OpLoad %9 
                               f32_3 %65 = OpLoad %40 
                               f32_3 %66 = OpFMul %64 %65 
                               f32_4 %67 = OpLoad %63 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %63 %68 
                         Output f32* %73 = OpAccessChain %63 %71 
                                             OpStore %73 %69 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %165 %177 %180 %284 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate vs_TEXCOORD4 Location 284 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %178 = OpConstantComposite %122 %122 %122 %122 
                                             %179 = OpTypePointer Input %51 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 9 
                                Private f32* %200 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                             %237 = OpTypePointer Private %51 
                              Private f32_3* %238 = OpVariable Private 
                                         i32 %239 = OpConstant 4 
                                         i32 %245 = OpConstant 5 
                                         i32 %251 = OpConstant 6 
                                         i32 %257 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                Private f32* %152 = OpAccessChain %9 %90 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %154 = OpAccessChain %21 %29 %106 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                Private f32* %157 = OpAccessChain %9 %90 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %45 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %45 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %45 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %45 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 %29 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %187 = OpAccessChain %9 %106 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %180 
                              Uniform f32_4* %189 = OpAccessChain %21 %182 %24 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %9 %90 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %180 
                              Uniform f32_4* %195 = OpAccessChain %21 %182 %37 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %9 %98 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %9 %214 
                                Private f32* %215 = OpAccessChain %9 %90 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %9 %90 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %45 %106 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %9 %106 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %9 %106 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %45 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %45 %106 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %240 = OpAccessChain %21 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %231 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %238 %106 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %231 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %238 %90 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %231 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %238 %98 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %21 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %45 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %238 
                                       f32_3 %265 = OpFAdd %263 %264 
                                       f32_4 %266 = OpLoad %45 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %45 %267 
                                Private f32* %268 = OpAccessChain %9 %133 
                                                      OpStore %268 %111 
                              Uniform f32_4* %269 = OpAccessChain %21 %24 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %9 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %231 %106 
                                                      OpStore %273 %272 
                              Uniform f32_4* %274 = OpAccessChain %21 %37 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %9 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %231 %90 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %21 %47 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %231 %98 
                                                      OpStore %283 %282 
                                       f32_4 %285 = OpLoad %45 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %231 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore vs_TEXCOORD4 %289 
                                 Output f32* %290 = OpAccessChain %94 %29 %90 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                                      OpStore %293 %292 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 100
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %77 %84 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpMemberDecorate %55 1 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate vs_TEXCOORD5 Location 77 
                                             OpDecorate %84 Location 84 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 %10 
                                     %56 = OpTypePointer Uniform %55 
     Uniform struct {f32_4; f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 1 
                                     %60 = OpTypePointer Uniform %10 
                                 i32 %68 = OpConstant 0 
                                     %74 = OpTypePointer Private %6 
                        Private f32* %75 = OpVariable Private 
                                     %76 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %80 = OpConstant 3.674022E-40 
                                 f32 %81 = OpConstant 3.674022E-40 
                                     %83 = OpTypePointer Output %10 
                       Output f32_4* %84 = OpVariable Output 
                                     %95 = OpTypeInt 32 0 
                                 u32 %96 = OpConstant 3 
                                     %97 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %65 = OpLoad %43 
                               f32_3 %66 = OpLoad %9 
                               f32_3 %67 = OpFMul %65 %66 
                      Uniform f32_4* %69 = OpAccessChain %57 %68 
                               f32_4 %70 = OpLoad %69 
                               f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                               f32_3 %72 = OpFNegate %71 
                               f32_3 %73 = OpFAdd %67 %72 
                                             OpStore %9 %73 
                                 f32 %78 = OpLoad vs_TEXCOORD5 
                                             OpStore %75 %78 
                                 f32 %79 = OpLoad %75 
                                 f32 %82 = OpExtInst %1 43 %79 %80 %81 
                                             OpStore %75 %82 
                                 f32 %85 = OpLoad %75 
                               f32_3 %86 = OpCompositeConstruct %85 %85 %85 
                               f32_3 %87 = OpLoad %9 
                               f32_3 %88 = OpFMul %86 %87 
                      Uniform f32_4* %89 = OpAccessChain %57 %68 
                               f32_4 %90 = OpLoad %89 
                               f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                               f32_3 %92 = OpFAdd %88 %91 
                               f32_4 %93 = OpLoad %84 
                               f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                             OpStore %84 %94 
                         Output f32* %98 = OpAccessChain %84 %96 
                                             OpStore %98 %81 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %165 %177 %180 %284 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate vs_TEXCOORD4 Location 284 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %178 = OpConstantComposite %122 %122 %122 %122 
                                             %179 = OpTypePointer Input %51 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 9 
                                Private f32* %200 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                             %237 = OpTypePointer Private %51 
                              Private f32_3* %238 = OpVariable Private 
                                         i32 %239 = OpConstant 4 
                                         i32 %245 = OpConstant 5 
                                         i32 %251 = OpConstant 6 
                                         i32 %257 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                Private f32* %152 = OpAccessChain %9 %90 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %154 = OpAccessChain %21 %29 %106 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                Private f32* %157 = OpAccessChain %9 %90 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %45 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %45 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %45 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %45 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 %29 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %187 = OpAccessChain %9 %106 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %180 
                              Uniform f32_4* %189 = OpAccessChain %21 %182 %24 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %9 %90 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %180 
                              Uniform f32_4* %195 = OpAccessChain %21 %182 %37 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %9 %98 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %9 %214 
                                Private f32* %215 = OpAccessChain %9 %90 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %9 %90 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %45 %106 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %9 %106 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %9 %106 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %45 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %45 %106 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %240 = OpAccessChain %21 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %231 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %238 %106 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %231 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %238 %90 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %231 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %238 %98 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %21 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %45 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %238 
                                       f32_3 %265 = OpFAdd %263 %264 
                                       f32_4 %266 = OpLoad %45 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %45 %267 
                                Private f32* %268 = OpAccessChain %9 %133 
                                                      OpStore %268 %111 
                              Uniform f32_4* %269 = OpAccessChain %21 %24 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %9 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %231 %106 
                                                      OpStore %273 %272 
                              Uniform f32_4* %274 = OpAccessChain %21 %37 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %9 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %231 %90 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %21 %47 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %231 %98 
                                                      OpStore %283 %282 
                                       f32_4 %285 = OpLoad %45 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %231 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore vs_TEXCOORD4 %289 
                                 Output f32* %290 = OpAccessChain %94 %29 %90 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                                      OpStore %293 %292 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 100
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %77 %84 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpMemberDecorate %55 0 Offset 55 
                                             OpMemberDecorate %55 1 Offset 55 
                                             OpDecorate %55 Block 
                                             OpDecorate %57 DescriptorSet 57 
                                             OpDecorate %57 Binding 57 
                                             OpDecorate vs_TEXCOORD5 Location 77 
                                             OpDecorate %84 Location 84 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %55 = OpTypeStruct %10 %10 
                                     %56 = OpTypePointer Uniform %55 
     Uniform struct {f32_4; f32_4;}* %57 = OpVariable Uniform 
                                     %58 = OpTypeInt 32 1 
                                 i32 %59 = OpConstant 1 
                                     %60 = OpTypePointer Uniform %10 
                                 i32 %68 = OpConstant 0 
                                     %74 = OpTypePointer Private %6 
                        Private f32* %75 = OpVariable Private 
                                     %76 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %80 = OpConstant 3.674022E-40 
                                 f32 %81 = OpConstant 3.674022E-40 
                                     %83 = OpTypePointer Output %10 
                       Output f32_4* %84 = OpVariable Output 
                                     %95 = OpTypeInt 32 0 
                                 u32 %96 = OpConstant 3 
                                     %97 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                      Uniform f32_4* %61 = OpAccessChain %57 %59 
                               f32_4 %62 = OpLoad %61 
                               f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                               f32_3 %64 = OpFMul %54 %63 
                                             OpStore %43 %64 
                               f32_3 %65 = OpLoad %43 
                               f32_3 %66 = OpLoad %9 
                               f32_3 %67 = OpFMul %65 %66 
                      Uniform f32_4* %69 = OpAccessChain %57 %68 
                               f32_4 %70 = OpLoad %69 
                               f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                               f32_3 %72 = OpFNegate %71 
                               f32_3 %73 = OpFAdd %67 %72 
                                             OpStore %9 %73 
                                 f32 %78 = OpLoad vs_TEXCOORD5 
                                             OpStore %75 %78 
                                 f32 %79 = OpLoad %75 
                                 f32 %82 = OpExtInst %1 43 %79 %80 %81 
                                             OpStore %75 %82 
                                 f32 %85 = OpLoad %75 
                               f32_3 %86 = OpCompositeConstruct %85 %85 %85 
                               f32_3 %87 = OpLoad %9 
                               f32_3 %88 = OpFMul %86 %87 
                      Uniform f32_4* %89 = OpAccessChain %57 %68 
                               f32_4 %90 = OpLoad %89 
                               f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                               f32_3 %92 = OpFAdd %88 %91 
                               f32_4 %93 = OpLoad %84 
                               f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                             OpStore %84 %94 
                         Output f32* %98 = OpAccessChain %84 %96 
                                             OpStore %98 %81 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %165 %177 %180 %284 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate vs_TEXCOORD4 Location 284 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %178 = OpConstantComposite %122 %122 %122 %122 
                                             %179 = OpTypePointer Input %51 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 9 
                                Private f32* %200 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                             %237 = OpTypePointer Private %51 
                              Private f32_3* %238 = OpVariable Private 
                                         i32 %239 = OpConstant 4 
                                         i32 %245 = OpConstant 5 
                                         i32 %251 = OpConstant 6 
                                         i32 %257 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                Private f32* %152 = OpAccessChain %9 %90 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %154 = OpAccessChain %21 %29 %106 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                Private f32* %157 = OpAccessChain %9 %90 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %45 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %45 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %45 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %45 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 %29 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %187 = OpAccessChain %9 %106 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %180 
                              Uniform f32_4* %189 = OpAccessChain %21 %182 %24 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %9 %90 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %180 
                              Uniform f32_4* %195 = OpAccessChain %21 %182 %37 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %9 %98 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %9 %214 
                                Private f32* %215 = OpAccessChain %9 %90 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %9 %90 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %45 %106 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %9 %106 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %9 %106 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %45 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %45 %106 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %240 = OpAccessChain %21 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %231 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %238 %106 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %231 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %238 %90 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %231 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %238 %98 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %21 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %45 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %238 
                                       f32_3 %265 = OpFAdd %263 %264 
                                       f32_4 %266 = OpLoad %45 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %45 %267 
                                Private f32* %268 = OpAccessChain %9 %133 
                                                      OpStore %268 %111 
                              Uniform f32_4* %269 = OpAccessChain %21 %24 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %9 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %231 %106 
                                                      OpStore %273 %272 
                              Uniform f32_4* %274 = OpAccessChain %21 %37 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %9 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %231 %90 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %21 %47 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %231 %98 
                                                      OpStore %283 %282 
                                       f32_4 %285 = OpLoad %45 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %231 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore vs_TEXCOORD4 %289 
                                 Output f32* %290 = OpAccessChain %94 %29 %90 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                                      OpStore %293 %292 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 97
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %74 %81 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpMemberDecorate %52 1 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate vs_TEXCOORD5 Location 74 
                                             OpDecorate %81 Location 81 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 %10 
                                     %53 = OpTypePointer Uniform %52 
     Uniform struct {f32_4; f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 1 
                                     %57 = OpTypePointer Uniform %10 
                                 i32 %65 = OpConstant 0 
                                     %71 = OpTypePointer Private %6 
                        Private f32* %72 = OpVariable Private 
                                     %73 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %77 = OpConstant 3.674022E-40 
                                 f32 %78 = OpConstant 3.674022E-40 
                                     %80 = OpTypePointer Output %10 
                       Output f32_4* %81 = OpVariable Output 
                                     %92 = OpTypeInt 32 0 
                                 u32 %93 = OpConstant 3 
                                     %94 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %62 = OpLoad %40 
                               f32_3 %63 = OpLoad %9 
                               f32_3 %64 = OpFMul %62 %63 
                      Uniform f32_4* %66 = OpAccessChain %54 %65 
                               f32_4 %67 = OpLoad %66 
                               f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                               f32_3 %69 = OpFNegate %68 
                               f32_3 %70 = OpFAdd %64 %69 
                                             OpStore %9 %70 
                                 f32 %75 = OpLoad vs_TEXCOORD5 
                                             OpStore %72 %75 
                                 f32 %76 = OpLoad %72 
                                 f32 %79 = OpExtInst %1 43 %76 %77 %78 
                                             OpStore %72 %79 
                                 f32 %82 = OpLoad %72 
                               f32_3 %83 = OpCompositeConstruct %82 %82 %82 
                               f32_3 %84 = OpLoad %9 
                               f32_3 %85 = OpFMul %83 %84 
                      Uniform f32_4* %86 = OpAccessChain %54 %65 
                               f32_4 %87 = OpLoad %86 
                               f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                               f32_3 %89 = OpFAdd %85 %88 
                               f32_4 %90 = OpLoad %81 
                               f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                             OpStore %81 %91 
                         Output f32* %95 = OpAccessChain %81 %93 
                                             OpStore %95 %78 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 295
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %165 %177 %180 %284 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %180 Location 180 
                                                      OpDecorate vs_TEXCOORD4 Location 284 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %178 = OpConstantComposite %122 %122 %122 %122 
                                             %179 = OpTypePointer Input %51 
                                Input f32_3* %180 = OpVariable Input 
                                         i32 %182 = OpConstant 9 
                                Private f32* %200 = OpVariable Private 
                              Private f32_4* %231 = OpVariable Private 
                                             %237 = OpTypePointer Private %51 
                              Private f32_3* %238 = OpVariable Private 
                                         i32 %239 = OpConstant 4 
                                         i32 %245 = OpConstant 5 
                                         i32 %251 = OpConstant 6 
                                         i32 %257 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                Private f32* %152 = OpAccessChain %9 %90 
                                         f32 %153 = OpLoad %152 
                                Uniform f32* %154 = OpAccessChain %21 %29 %106 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %153 %155 
                                Private f32* %157 = OpAccessChain %9 %90 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %45 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %45 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %45 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %45 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %178 
                                       f32_3 %181 = OpLoad %180 
                              Uniform f32_4* %183 = OpAccessChain %21 %182 %29 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                         f32 %186 = OpDot %181 %185 
                                Private f32* %187 = OpAccessChain %9 %106 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %180 
                              Uniform f32_4* %189 = OpAccessChain %21 %182 %24 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                         f32 %192 = OpDot %188 %191 
                                Private f32* %193 = OpAccessChain %9 %90 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %180 
                              Uniform f32_4* %195 = OpAccessChain %21 %182 %37 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %194 %197 
                                Private f32* %199 = OpAccessChain %9 %98 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpDot %202 %204 
                                                      OpStore %200 %205 
                                         f32 %206 = OpLoad %200 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %200 %207 
                                         f32 %208 = OpLoad %200 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %9 %214 
                                Private f32* %215 = OpAccessChain %9 %90 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %9 %90 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                Private f32* %220 = OpAccessChain %45 %106 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %9 %106 
                                         f32 %222 = OpLoad %221 
                                Private f32* %223 = OpAccessChain %9 %106 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFMul %222 %224 
                                Private f32* %226 = OpAccessChain %45 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %225 %228 
                                Private f32* %230 = OpAccessChain %45 %106 
                                                      OpStore %230 %229 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %232 1 2 2 0 
                                       f32_4 %234 = OpLoad %9 
                                       f32_4 %235 = OpVectorShuffle %234 %234 0 1 2 2 
                                       f32_4 %236 = OpFMul %233 %235 
                                                      OpStore %231 %236 
                              Uniform f32_4* %240 = OpAccessChain %21 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %231 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %238 %106 
                                                      OpStore %244 %243 
                              Uniform f32_4* %246 = OpAccessChain %21 %245 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpLoad %231 
                                         f32 %249 = OpDot %247 %248 
                                Private f32* %250 = OpAccessChain %238 %90 
                                                      OpStore %250 %249 
                              Uniform f32_4* %252 = OpAccessChain %21 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_4 %254 = OpLoad %231 
                                         f32 %255 = OpDot %253 %254 
                                Private f32* %256 = OpAccessChain %238 %98 
                                                      OpStore %256 %255 
                              Uniform f32_4* %258 = OpAccessChain %21 %257 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_4 %261 = OpLoad %45 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 0 0 
                                       f32_3 %263 = OpFMul %260 %262 
                                       f32_3 %264 = OpLoad %238 
                                       f32_3 %265 = OpFAdd %263 %264 
                                       f32_4 %266 = OpLoad %45 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %45 %267 
                                Private f32* %268 = OpAccessChain %9 %133 
                                                      OpStore %268 %111 
                              Uniform f32_4* %269 = OpAccessChain %21 %24 
                                       f32_4 %270 = OpLoad %269 
                                       f32_4 %271 = OpLoad %9 
                                         f32 %272 = OpDot %270 %271 
                                Private f32* %273 = OpAccessChain %231 %106 
                                                      OpStore %273 %272 
                              Uniform f32_4* %274 = OpAccessChain %21 %37 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %9 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %231 %90 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %21 %47 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %9 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %231 %98 
                                                      OpStore %283 %282 
                                       f32_4 %285 = OpLoad %45 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %231 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore vs_TEXCOORD4 %289 
                                 Output f32* %290 = OpAccessChain %94 %29 %90 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFNegate %291 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                                      OpStore %293 %292 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 97
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %74 %81 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpMemberDecorate %52 0 Offset 52 
                                             OpMemberDecorate %52 1 Offset 52 
                                             OpDecorate %52 Block 
                                             OpDecorate %54 DescriptorSet 54 
                                             OpDecorate %54 Binding 54 
                                             OpDecorate vs_TEXCOORD5 Location 74 
                                             OpDecorate %81 Location 81 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %52 = OpTypeStruct %10 %10 
                                     %53 = OpTypePointer Uniform %52 
     Uniform struct {f32_4; f32_4;}* %54 = OpVariable Uniform 
                                     %55 = OpTypeInt 32 1 
                                 i32 %56 = OpConstant 1 
                                     %57 = OpTypePointer Uniform %10 
                                 i32 %65 = OpConstant 0 
                                     %71 = OpTypePointer Private %6 
                        Private f32* %72 = OpVariable Private 
                                     %73 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %77 = OpConstant 3.674022E-40 
                                 f32 %78 = OpConstant 3.674022E-40 
                                     %80 = OpTypePointer Output %10 
                       Output f32_4* %81 = OpVariable Output 
                                     %92 = OpTypeInt 32 0 
                                 u32 %93 = OpConstant 3 
                                     %94 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                      Uniform f32_4* %58 = OpAccessChain %54 %56 
                               f32_4 %59 = OpLoad %58 
                               f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               f32_3 %61 = OpFMul %51 %60 
                                             OpStore %40 %61 
                               f32_3 %62 = OpLoad %40 
                               f32_3 %63 = OpLoad %9 
                               f32_3 %64 = OpFMul %62 %63 
                      Uniform f32_4* %66 = OpAccessChain %54 %65 
                               f32_4 %67 = OpLoad %66 
                               f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                               f32_3 %69 = OpFNegate %68 
                               f32_3 %70 = OpFAdd %64 %69 
                                             OpStore %9 %70 
                                 f32 %75 = OpLoad vs_TEXCOORD5 
                                             OpStore %72 %75 
                                 f32 %76 = OpLoad %72 
                                 f32 %79 = OpExtInst %1 43 %76 %77 %78 
                                             OpStore %72 %79 
                                 f32 %82 = OpLoad %72 
                               f32_3 %83 = OpCompositeConstruct %82 %82 %82 
                               f32_3 %84 = OpLoad %9 
                               f32_3 %85 = OpFMul %83 %84 
                      Uniform f32_4* %86 = OpAccessChain %54 %65 
                               f32_4 %87 = OpLoad %86 
                               f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                               f32_3 %89 = OpFAdd %85 %88 
                               f32_4 %90 = OpLoad %81 
                               f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                             OpStore %81 %91 
                         Output f32* %95 = OpAccessChain %81 %93 
                                             OpStore %95 %78 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %179 %183 %295 %302 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate vs_TEXCOORD2 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD3 Location 179 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 295 
                                                      OpDecorate %302 Flat 
                                                      OpDecorate %302 Location 302 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                         i32 %144 = OpConstant 9 
                                Private f32* %153 = OpVariable Private 
                                         u32 %156 = OpConstant 0 
                                             %157 = OpTypePointer Uniform %23 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_2 %164 = OpConstantComposite %163 %163 
                                         u32 %170 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %180 %180 %180 %180 
                                             %182 = OpTypePointer Input %75 
                                Input f32_3* %183 = OpVariable Input 
                              Private f32_4* %208 = OpVariable Private 
                                             %247 = OpTypePointer Private %75 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %249 = OpConstant 4 
                                         i32 %255 = OpConstant 5 
                                         i32 %261 = OpConstant 6 
                                         i32 %267 = OpConstant 7 
                                         f32 %278 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %301 = OpTypePointer Output %31 
                                 Output u32* %302 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD5 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD2 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %145 = OpAccessChain %94 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %148 = OpFMul %143 %147 
                              Uniform f32_4* %149 = OpAccessChain %94 %144 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 2 3 
                                       f32_2 %152 = OpFAdd %148 %151 
                                                      OpStore vs_TEXCOORD0 %152 
                                Private f32* %154 = OpAccessChain %26 %119 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %158 = OpAccessChain %94 %15 %156 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %155 %159 
                                                      OpStore %153 %160 
                                       f32_4 %161 = OpLoad %26 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 3 
                                       f32_2 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 3 
                                                      OpStore %26 %167 
                                         f32 %168 = OpLoad %153 
                                         f32 %169 = OpFMul %168 %163 
                                Private f32* %171 = OpAccessChain %26 %170 
                                                      OpStore %171 %169 
                                       f32_4 %172 = OpLoad %26 
                                       f32_2 %173 = OpVectorShuffle %172 %172 2 2 
                                       f32_4 %174 = OpLoad %26 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %176 = OpFAdd %173 %175 
                                       f32_4 %177 = OpLoad vs_TEXCOORD2 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %178 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                                         i32 %185 = OpLoad %8 
                                         i32 %186 = OpSDiv %185 %42 
                              Uniform f32_4* %187 = OpAccessChain %40 %15 %186 %44 %15 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %184 %189 
                                Private f32* %191 = OpAccessChain %26 %156 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %183 
                                         i32 %193 = OpLoad %8 
                                         i32 %194 = OpSDiv %193 %42 
                              Uniform f32_4* %195 = OpAccessChain %40 %15 %194 %44 %44 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %192 %197 
                                Private f32* %199 = OpAccessChain %26 %119 
                                                      OpStore %199 %198 
                                       f32_3 %200 = OpLoad %183 
                                         i32 %201 = OpLoad %8 
                                         i32 %202 = OpSDiv %201 %42 
                              Uniform f32_4* %203 = OpAccessChain %40 %15 %202 %44 %60 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                         f32 %206 = OpDot %200 %205 
                                Private f32* %207 = OpAccessChain %26 %129 
                                                      OpStore %207 %206 
                                       f32_4 %209 = OpLoad %26 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %26 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                Private f32* %214 = OpAccessChain %208 %156 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %208 %156 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 32 %216 
                                Private f32* %218 = OpAccessChain %208 %156 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %208 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 0 0 
                                       f32_4 %221 = OpLoad %26 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %208 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %208 %225 
                                Private f32* %226 = OpAccessChain %208 %119 
                                         f32 %227 = OpLoad %226 
                                Private f32* %228 = OpAccessChain %208 %119 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %26 %156 
                                                      OpStore %231 %230 
                                Private f32* %232 = OpAccessChain %208 %156 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %208 %156 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %26 %156 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFNegate %238 
                                         f32 %240 = OpFAdd %236 %239 
                                Private f32* %241 = OpAccessChain %26 %156 
                                                      OpStore %241 %240 
                                       f32_4 %242 = OpLoad %208 
                                       f32_4 %243 = OpVectorShuffle %242 %242 1 2 2 0 
                                       f32_4 %244 = OpLoad %208 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 1 2 2 
                                       f32_4 %246 = OpFMul %243 %245 
                                                      OpStore %68 %246 
                              Uniform f32_4* %250 = OpAccessChain %94 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %68 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %248 %156 
                                                      OpStore %254 %253 
                              Uniform f32_4* %256 = OpAccessChain %94 %255 
                                       f32_4 %257 = OpLoad %256 
                                       f32_4 %258 = OpLoad %68 
                                         f32 %259 = OpDot %257 %258 
                                Private f32* %260 = OpAccessChain %248 %119 
                                                      OpStore %260 %259 
                              Uniform f32_4* %262 = OpAccessChain %94 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_4 %264 = OpLoad %68 
                                         f32 %265 = OpDot %263 %264 
                                Private f32* %266 = OpAccessChain %248 %129 
                                                      OpStore %266 %265 
                              Uniform f32_4* %268 = OpAccessChain %94 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %26 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %248 
                                       f32_3 %275 = OpFAdd %273 %274 
                                       f32_4 %276 = OpLoad %26 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %26 %277 
                                Private f32* %279 = OpAccessChain %208 %170 
                                                      OpStore %279 %278 
                              Uniform f32_4* %280 = OpAccessChain %94 %44 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpLoad %208 
                                         f32 %283 = OpDot %281 %282 
                                Private f32* %284 = OpAccessChain %68 %156 
                                                      OpStore %284 %283 
                              Uniform f32_4* %285 = OpAccessChain %94 %60 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpLoad %208 
                                         f32 %288 = OpDot %286 %287 
                                Private f32* %289 = OpAccessChain %68 %119 
                                                      OpStore %289 %288 
                              Uniform f32_4* %290 = OpAccessChain %94 %21 
                                       f32_4 %291 = OpLoad %290 
                                       f32_4 %292 = OpLoad %208 
                                         f32 %293 = OpDot %291 %292 
                                Private f32* %294 = OpAccessChain %68 %129 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %26 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %68 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                                      OpStore vs_TEXCOORD4 %300 
                                         i32 %303 = OpLoad %10 
                                         u32 %304 = OpBitcast %303 
                                                      OpStore %302 %304 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                                      OpStore %308 %307 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 124
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %40 %50 %77 %110 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate vs_TEXCOORD4 Location 40 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate vs_TEXCOORD0 Location 50 
                                                      OpMemberDecorate %55 0 Offset 55 
                                                      OpMemberDecorate %55 1 Offset 55 
                                                      OpMemberDecorate %55 2 Offset 55 
                                                      OpMemberDecorate %55 3 Offset 55 
                                                      OpDecorate %55 Block 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate vs_TEXCOORD5 Location 77 
                                                      OpDecorate %110 Location 110 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %22 = OpTypePointer UniformConstant %21 
         UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                              %25 = OpTypeSampler 
                                              %26 = OpTypePointer UniformConstant %25 
                     UniformConstant sampler* %27 = OpVariable UniformConstant 
                                              %29 = OpTypeSampledImage %21 
                                              %39 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
         UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                     UniformConstant sampler* %46 = OpVariable UniformConstant 
                                              %49 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %55 = OpTypeStruct %10 %10 %10 %10 
                                              %56 = OpTypePointer Uniform %55 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %57 = OpVariable Uniform 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 3 
                                              %60 = OpTypePointer Uniform %10 
                                          i32 %68 = OpConstant 1 
                                              %74 = OpTypePointer Private %6 
                                 Private f32* %75 = OpVariable Private 
                                              %76 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                          i32 %79 = OpConstant 0 
                                              %80 = OpTypeInt 32 0 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypePointer Uniform %6 
                                          f32 %88 = OpConstant 3.674022E-40 
                                          u32 %91 = OpConstant 2 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          i32 %99 = OpConstant 2 
                                         u32 %103 = OpConstant 3 
                                             %109 = OpTypePointer Output %10 
                               Output f32_4* %110 = OpVariable Output 
                                             %121 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %14 = OpLoad vs_TEXCOORD2 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                        f32_4 %16 = OpLoad vs_TEXCOORD2 
                                        f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                        f32_2 %18 = OpFDiv %15 %17 
                                        f32_3 %19 = OpLoad %9 
                                        f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                      OpStore %9 %20 
                          read_only Texture2D %24 = OpLoad %23 
                                      sampler %28 = OpLoad %27 
                   read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                        f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                                      OpStore %9 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %36 = OpExtInst %1 30 %35 
                                                      OpStore %9 %36 
                                        f32_3 %37 = OpLoad %9 
                                        f32_3 %38 = OpFNegate %37 
                                        f32_3 %41 = OpLoad vs_TEXCOORD4 
                                        f32_3 %42 = OpFAdd %38 %41 
                                                      OpStore %9 %42 
                          read_only Texture2D %45 = OpLoad %44 
                                      sampler %47 = OpLoad %46 
                   read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                        f32_2 %51 = OpLoad vs_TEXCOORD0 
                                        f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                                      OpStore %43 %53 
                                        f32_3 %54 = OpLoad %43 
                               Uniform f32_4* %61 = OpAccessChain %57 %59 
                                        f32_4 %62 = OpLoad %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFMul %54 %63 
                                                      OpStore %43 %64 
                                        f32_3 %65 = OpLoad %43 
                                        f32_3 %66 = OpLoad %9 
                                        f32_3 %67 = OpFMul %65 %66 
                               Uniform f32_4* %69 = OpAccessChain %57 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_3 %72 = OpFNegate %71 
                                        f32_3 %73 = OpFAdd %67 %72 
                                                      OpStore %9 %73 
                                          f32 %78 = OpLoad vs_TEXCOORD5 
                                 Uniform f32* %83 = OpAccessChain %57 %79 %81 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFDiv %78 %84 
                                                      OpStore %75 %85 
                                          f32 %86 = OpLoad %75 
                                          f32 %87 = OpFNegate %86 
                                          f32 %89 = OpFAdd %87 %88 
                                                      OpStore %75 %89 
                                          f32 %90 = OpLoad %75 
                                 Uniform f32* %92 = OpAccessChain %57 %79 %91 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %90 %93 
                                                      OpStore %75 %94 
                                          f32 %95 = OpLoad %75 
                                          f32 %97 = OpExtInst %1 40 %95 %96 
                                                      OpStore %75 %97 
                                          f32 %98 = OpLoad %75 
                                Uniform f32* %100 = OpAccessChain %57 %99 %91 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                Uniform f32* %104 = OpAccessChain %57 %99 %103 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %102 %105 
                                                      OpStore %75 %106 
                                         f32 %107 = OpLoad %75 
                                         f32 %108 = OpExtInst %1 43 %107 %96 %88 
                                                      OpStore %75 %108 
                                         f32 %111 = OpLoad %75 
                                       f32_3 %112 = OpCompositeConstruct %111 %111 %111 
                                       f32_3 %113 = OpLoad %9 
                                       f32_3 %114 = OpFMul %112 %113 
                              Uniform f32_4* %115 = OpAccessChain %57 %68 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %110 %120 
                                 Output f32* %122 = OpAccessChain %110 %103 
                                                      OpStore %122 %88 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat8 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %182 %186 %314 %320 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 132 
                                                      OpDecorate vs_TEXCOORD2 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD3 Location 182 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %252 0 Offset 252 
                                                      OpMemberDecorate %252 1 Offset 252 
                                                      OpMemberDecorate %252 2 Offset 252 
                                                      OpMemberDecorate %252 3 Offset 252 
                                                      OpMemberDecorate %252 4 Offset 252 
                                                      OpMemberDecorate %252 5 Offset 252 
                                                      OpMemberDecorate %252 6 Offset 252 
                                                      OpDecorate %253 ArrayStride 253 
                                                      OpMemberDecorate %254 0 Offset 254 
                                                      OpDecorate %254 Block 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate vs_TEXCOORD4 Location 314 
                                                      OpDecorate %320 Flat 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                                Private f32* %156 = OpVariable Private 
                                         u32 %159 = OpConstant 0 
                                             %160 = OpTypePointer Uniform %27 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                             %185 = OpTypePointer Input %79 
                                Input f32_3* %186 = OpVariable Input 
                                             %211 = OpTypePointer Private %79 
                              Private f32_3* %212 = OpVariable Private 
                              Private f32_3* %251 = OpVariable Private 
                                             %252 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %253 = OpTypeArray %252 %40 
                                             %254 = OpTypeStruct %253 
                                             %255 = OpTypePointer Uniform %254 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %256 = OpVariable Uniform 
                                         i32 %266 = OpConstant 4 
                                         i32 %274 = OpConstant 5 
                                         i32 %282 = OpConstant 6 
                                         f32 %291 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %319 = OpTypePointer Output %35 
                                 Output u32* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD2 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                Private f32* %157 = OpAccessChain %30 %123 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %161 = OpAccessChain %98 %15 %159 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %158 %162 
                                                      OpStore %156 %163 
                                       f32_4 %164 = OpLoad %30 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %30 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %30 %170 
                                         f32 %171 = OpLoad %156 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %30 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %30 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD2 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %181 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_3 %187 = OpLoad %186 
                                         i32 %188 = OpLoad %20 
                                         i32 %189 = OpSDiv %188 %46 
                              Uniform f32_4* %190 = OpAccessChain %44 %15 %189 %48 %15 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %30 %159 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %186 
                                         i32 %196 = OpLoad %20 
                                         i32 %197 = OpSDiv %196 %46 
                              Uniform f32_4* %198 = OpAccessChain %44 %15 %197 %48 %48 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %202 = OpAccessChain %30 %123 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %186 
                                         i32 %204 = OpLoad %20 
                                         i32 %205 = OpSDiv %204 %46 
                              Uniform f32_4* %206 = OpAccessChain %44 %15 %205 %48 %64 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %203 %208 
                                Private f32* %210 = OpAccessChain %30 %133 
                                                      OpStore %210 %209 
                                       f32_4 %213 = OpLoad %30 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %30 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                         f32 %217 = OpDot %214 %216 
                                Private f32* %218 = OpAccessChain %212 %159 
                                                      OpStore %218 %217 
                                Private f32* %219 = OpAccessChain %212 %159 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 32 %220 
                                Private f32* %222 = OpAccessChain %212 %159 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %212 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 0 0 
                                       f32_4 %225 = OpLoad %30 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %30 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %30 %229 
                                Private f32* %230 = OpAccessChain %30 %123 
                                         f32 %231 = OpLoad %230 
                                Private f32* %232 = OpAccessChain %30 %123 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %231 %233 
                                Private f32* %235 = OpAccessChain %212 %159 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %159 
                                         f32 %237 = OpLoad %236 
                                Private f32* %238 = OpAccessChain %30 %159 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFMul %237 %239 
                                Private f32* %241 = OpAccessChain %212 %159 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %240 %243 
                                Private f32* %245 = OpAccessChain %212 %159 
                                                      OpStore %245 %244 
                                       f32_4 %246 = OpLoad %30 
                                       f32_4 %247 = OpVectorShuffle %246 %246 1 2 2 0 
                                       f32_4 %248 = OpLoad %30 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                                      OpStore %72 %250 
                                         i32 %257 = OpLoad %8 
                                         i32 %258 = OpSDiv %257 %25 
                              Uniform f32_4* %259 = OpAccessChain %256 %15 %258 %22 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %72 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %159 
                                                      OpStore %263 %262 
                                         i32 %264 = OpLoad %8 
                                         i32 %265 = OpSDiv %264 %25 
                              Uniform f32_4* %267 = OpAccessChain %256 %15 %265 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %72 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %251 %123 
                                                      OpStore %271 %270 
                                         i32 %272 = OpLoad %8 
                                         i32 %273 = OpSDiv %272 %25 
                              Uniform f32_4* %275 = OpAccessChain %256 %15 %273 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpLoad %72 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %251 %133 
                                                      OpStore %279 %278 
                                         i32 %280 = OpLoad %8 
                                         i32 %281 = OpSDiv %280 %25 
                              Uniform f32_4* %283 = OpAccessChain %256 %15 %281 %282 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpLoad %212 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_3 %289 = OpLoad %251 
                                       f32_3 %290 = OpFAdd %288 %289 
                                                      OpStore %212 %290 
                                Private f32* %292 = OpAccessChain %30 %173 
                                                      OpStore %292 %291 
                                         i32 %293 = OpLoad %8 
                                         i32 %294 = OpSDiv %293 %25 
                              Uniform f32_4* %295 = OpAccessChain %256 %15 %294 %15 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpLoad %30 
                                         f32 %298 = OpDot %296 %297 
                                Private f32* %299 = OpAccessChain %72 %159 
                                                      OpStore %299 %298 
                                         i32 %300 = OpLoad %8 
                                         i32 %301 = OpSDiv %300 %25 
                              Uniform f32_4* %302 = OpAccessChain %256 %15 %301 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_4 %304 = OpLoad %30 
                                         f32 %305 = OpDot %303 %304 
                                Private f32* %306 = OpAccessChain %72 %123 
                                                      OpStore %306 %305 
                                         i32 %307 = OpLoad %8 
                                         i32 %308 = OpSDiv %307 %25 
                              Uniform f32_4* %309 = OpAccessChain %256 %15 %308 %64 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %30 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %72 %133 
                                                      OpStore %313 %312 
                                       f32_3 %315 = OpLoad %212 
                                       f32_4 %316 = OpLoad %72 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFAdd %315 %317 
                                                      OpStore vs_TEXCOORD4 %318 
                                         i32 %321 = OpLoad %10 
                                         u32 %322 = OpBitcast %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 124
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %40 %50 %77 %110 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate vs_TEXCOORD4 Location 40 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate vs_TEXCOORD0 Location 50 
                                                      OpMemberDecorate %55 0 Offset 55 
                                                      OpMemberDecorate %55 1 Offset 55 
                                                      OpMemberDecorate %55 2 Offset 55 
                                                      OpMemberDecorate %55 3 Offset 55 
                                                      OpDecorate %55 Block 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate vs_TEXCOORD5 Location 77 
                                                      OpDecorate %110 Location 110 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %22 = OpTypePointer UniformConstant %21 
         UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                              %25 = OpTypeSampler 
                                              %26 = OpTypePointer UniformConstant %25 
                     UniformConstant sampler* %27 = OpVariable UniformConstant 
                                              %29 = OpTypeSampledImage %21 
                                              %39 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                               Private f32_3* %43 = OpVariable Private 
         UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                     UniformConstant sampler* %46 = OpVariable UniformConstant 
                                              %49 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %55 = OpTypeStruct %10 %10 %10 %10 
                                              %56 = OpTypePointer Uniform %55 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %57 = OpVariable Uniform 
                                              %58 = OpTypeInt 32 1 
                                          i32 %59 = OpConstant 3 
                                              %60 = OpTypePointer Uniform %10 
                                          i32 %68 = OpConstant 1 
                                              %74 = OpTypePointer Private %6 
                                 Private f32* %75 = OpVariable Private 
                                              %76 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                          i32 %79 = OpConstant 0 
                                              %80 = OpTypeInt 32 0 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypePointer Uniform %6 
                                          f32 %88 = OpConstant 3.674022E-40 
                                          u32 %91 = OpConstant 2 
                                          f32 %96 = OpConstant 3.674022E-40 
                                          i32 %99 = OpConstant 2 
                                         u32 %103 = OpConstant 3 
                                             %109 = OpTypePointer Output %10 
                               Output f32_4* %110 = OpVariable Output 
                                             %121 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %14 = OpLoad vs_TEXCOORD2 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                        f32_4 %16 = OpLoad vs_TEXCOORD2 
                                        f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                        f32_2 %18 = OpFDiv %15 %17 
                                        f32_3 %19 = OpLoad %9 
                                        f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                      OpStore %9 %20 
                          read_only Texture2D %24 = OpLoad %23 
                                      sampler %28 = OpLoad %27 
                   read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                        f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                                      OpStore %9 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %36 = OpExtInst %1 30 %35 
                                                      OpStore %9 %36 
                                        f32_3 %37 = OpLoad %9 
                                        f32_3 %38 = OpFNegate %37 
                                        f32_3 %41 = OpLoad vs_TEXCOORD4 
                                        f32_3 %42 = OpFAdd %38 %41 
                                                      OpStore %9 %42 
                          read_only Texture2D %45 = OpLoad %44 
                                      sampler %47 = OpLoad %46 
                   read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                        f32_2 %51 = OpLoad vs_TEXCOORD0 
                                        f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                                      OpStore %43 %53 
                                        f32_3 %54 = OpLoad %43 
                               Uniform f32_4* %61 = OpAccessChain %57 %59 
                                        f32_4 %62 = OpLoad %61 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFMul %54 %63 
                                                      OpStore %43 %64 
                                        f32_3 %65 = OpLoad %43 
                                        f32_3 %66 = OpLoad %9 
                                        f32_3 %67 = OpFMul %65 %66 
                               Uniform f32_4* %69 = OpAccessChain %57 %68 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_3 %72 = OpFNegate %71 
                                        f32_3 %73 = OpFAdd %67 %72 
                                                      OpStore %9 %73 
                                          f32 %78 = OpLoad vs_TEXCOORD5 
                                 Uniform f32* %83 = OpAccessChain %57 %79 %81 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFDiv %78 %84 
                                                      OpStore %75 %85 
                                          f32 %86 = OpLoad %75 
                                          f32 %87 = OpFNegate %86 
                                          f32 %89 = OpFAdd %87 %88 
                                                      OpStore %75 %89 
                                          f32 %90 = OpLoad %75 
                                 Uniform f32* %92 = OpAccessChain %57 %79 %91 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %90 %93 
                                                      OpStore %75 %94 
                                          f32 %95 = OpLoad %75 
                                          f32 %97 = OpExtInst %1 40 %95 %96 
                                                      OpStore %75 %97 
                                          f32 %98 = OpLoad %75 
                                Uniform f32* %100 = OpAccessChain %57 %99 %91 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %98 %101 
                                Uniform f32* %104 = OpAccessChain %57 %99 %103 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFAdd %102 %105 
                                                      OpStore %75 %106 
                                         f32 %107 = OpLoad %75 
                                         f32 %108 = OpExtInst %1 43 %107 %96 %88 
                                                      OpStore %75 %108 
                                         f32 %111 = OpLoad %75 
                                       f32_3 %112 = OpCompositeConstruct %111 %111 %111 
                                       f32_3 %113 = OpLoad %9 
                                       f32_3 %114 = OpFMul %112 %113 
                              Uniform f32_4* %115 = OpAccessChain %57 %68 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %110 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 6 3 
                                                      OpStore %110 %120 
                                 Output f32* %122 = OpAccessChain %110 %103 
                                                      OpStore %122 %88 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %179 %183 %295 %302 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate vs_TEXCOORD2 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD3 Location 179 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 295 
                                                      OpDecorate %302 Flat 
                                                      OpDecorate %302 Location 302 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                         i32 %144 = OpConstant 9 
                                Private f32* %153 = OpVariable Private 
                                         u32 %156 = OpConstant 0 
                                             %157 = OpTypePointer Uniform %23 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_2 %164 = OpConstantComposite %163 %163 
                                         u32 %170 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %180 = OpConstant 3.674022E-40 
                                       f32_4 %181 = OpConstantComposite %180 %180 %180 %180 
                                             %182 = OpTypePointer Input %75 
                                Input f32_3* %183 = OpVariable Input 
                              Private f32_4* %208 = OpVariable Private 
                                             %247 = OpTypePointer Private %75 
                              Private f32_3* %248 = OpVariable Private 
                                         i32 %249 = OpConstant 4 
                                         i32 %255 = OpConstant 5 
                                         i32 %261 = OpConstant 6 
                                         i32 %267 = OpConstant 7 
                                         f32 %278 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %301 = OpTypePointer Output %31 
                                 Output u32* %302 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD5 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD2 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %145 = OpAccessChain %94 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %148 = OpFMul %143 %147 
                              Uniform f32_4* %149 = OpAccessChain %94 %144 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 2 3 
                                       f32_2 %152 = OpFAdd %148 %151 
                                                      OpStore vs_TEXCOORD0 %152 
                                Private f32* %154 = OpAccessChain %26 %119 
                                         f32 %155 = OpLoad %154 
                                Uniform f32* %158 = OpAccessChain %94 %15 %156 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %155 %159 
                                                      OpStore %153 %160 
                                       f32_4 %161 = OpLoad %26 
                                       f32_2 %162 = OpVectorShuffle %161 %161 0 3 
                                       f32_2 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 3 
                                                      OpStore %26 %167 
                                         f32 %168 = OpLoad %153 
                                         f32 %169 = OpFMul %168 %163 
                                Private f32* %171 = OpAccessChain %26 %170 
                                                      OpStore %171 %169 
                                       f32_4 %172 = OpLoad %26 
                                       f32_2 %173 = OpVectorShuffle %172 %172 2 2 
                                       f32_4 %174 = OpLoad %26 
                                       f32_2 %175 = OpVectorShuffle %174 %174 0 3 
                                       f32_2 %176 = OpFAdd %173 %175 
                                       f32_4 %177 = OpLoad vs_TEXCOORD2 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %178 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                                         i32 %185 = OpLoad %8 
                                         i32 %186 = OpSDiv %185 %42 
                              Uniform f32_4* %187 = OpAccessChain %40 %15 %186 %44 %15 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %184 %189 
                                Private f32* %191 = OpAccessChain %26 %156 
                                                      OpStore %191 %190 
                                       f32_3 %192 = OpLoad %183 
                                         i32 %193 = OpLoad %8 
                                         i32 %194 = OpSDiv %193 %42 
                              Uniform f32_4* %195 = OpAccessChain %40 %15 %194 %44 %44 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                         f32 %198 = OpDot %192 %197 
                                Private f32* %199 = OpAccessChain %26 %119 
                                                      OpStore %199 %198 
                                       f32_3 %200 = OpLoad %183 
                                         i32 %201 = OpLoad %8 
                                         i32 %202 = OpSDiv %201 %42 
                              Uniform f32_4* %203 = OpAccessChain %40 %15 %202 %44 %60 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                         f32 %206 = OpDot %200 %205 
                                Private f32* %207 = OpAccessChain %26 %129 
                                                      OpStore %207 %206 
                                       f32_4 %209 = OpLoad %26 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %26 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                Private f32* %214 = OpAccessChain %208 %156 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %208 %156 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 32 %216 
                                Private f32* %218 = OpAccessChain %208 %156 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %208 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 0 0 
                                       f32_4 %221 = OpLoad %26 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %208 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %208 %225 
                                Private f32* %226 = OpAccessChain %208 %119 
                                         f32 %227 = OpLoad %226 
                                Private f32* %228 = OpAccessChain %208 %119 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFMul %227 %229 
                                Private f32* %231 = OpAccessChain %26 %156 
                                                      OpStore %231 %230 
                                Private f32* %232 = OpAccessChain %208 %156 
                                         f32 %233 = OpLoad %232 
                                Private f32* %234 = OpAccessChain %208 %156 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                Private f32* %237 = OpAccessChain %26 %156 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFNegate %238 
                                         f32 %240 = OpFAdd %236 %239 
                                Private f32* %241 = OpAccessChain %26 %156 
                                                      OpStore %241 %240 
                                       f32_4 %242 = OpLoad %208 
                                       f32_4 %243 = OpVectorShuffle %242 %242 1 2 2 0 
                                       f32_4 %244 = OpLoad %208 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 1 2 2 
                                       f32_4 %246 = OpFMul %243 %245 
                                                      OpStore %68 %246 
                              Uniform f32_4* %250 = OpAccessChain %94 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %68 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %248 %156 
                                                      OpStore %254 %253 
                              Uniform f32_4* %256 = OpAccessChain %94 %255 
                                       f32_4 %257 = OpLoad %256 
                                       f32_4 %258 = OpLoad %68 
                                         f32 %259 = OpDot %257 %258 
                                Private f32* %260 = OpAccessChain %248 %119 
                                                      OpStore %260 %259 
                              Uniform f32_4* %262 = OpAccessChain %94 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_4 %264 = OpLoad %68 
                                         f32 %265 = OpDot %263 %264 
                                Private f32* %266 = OpAccessChain %248 %129 
                                                      OpStore %266 %265 
                              Uniform f32_4* %268 = OpAccessChain %94 %267 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %26 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %248 
                                       f32_3 %275 = OpFAdd %273 %274 
                                       f32_4 %276 = OpLoad %26 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %26 %277 
                                Private f32* %279 = OpAccessChain %208 %170 
                                                      OpStore %279 %278 
                              Uniform f32_4* %280 = OpAccessChain %94 %44 
                                       f32_4 %281 = OpLoad %280 
                                       f32_4 %282 = OpLoad %208 
                                         f32 %283 = OpDot %281 %282 
                                Private f32* %284 = OpAccessChain %68 %156 
                                                      OpStore %284 %283 
                              Uniform f32_4* %285 = OpAccessChain %94 %60 
                                       f32_4 %286 = OpLoad %285 
                                       f32_4 %287 = OpLoad %208 
                                         f32 %288 = OpDot %286 %287 
                                Private f32* %289 = OpAccessChain %68 %119 
                                                      OpStore %289 %288 
                              Uniform f32_4* %290 = OpAccessChain %94 %21 
                                       f32_4 %291 = OpLoad %290 
                                       f32_4 %292 = OpLoad %208 
                                         f32 %293 = OpDot %291 %292 
                                Private f32* %294 = OpAccessChain %68 %129 
                                                      OpStore %294 %293 
                                       f32_4 %296 = OpLoad %26 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %68 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                                      OpStore vs_TEXCOORD4 %300 
                                         i32 %303 = OpLoad %10 
                                         u32 %304 = OpBitcast %303 
                                                      OpStore %302 %304 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                                      OpStore %308 %307 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %37 %47 %74 %107 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate vs_TEXCOORD4 Location 37 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate vs_TEXCOORD0 Location 47 
                                                      OpMemberDecorate %52 0 Offset 52 
                                                      OpMemberDecorate %52 1 Offset 52 
                                                      OpMemberDecorate %52 2 Offset 52 
                                                      OpMemberDecorate %52 3 Offset 52 
                                                      OpDecorate %52 Block 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD5 Location 74 
                                                      OpDecorate %107 Location 107 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %22 = OpTypePointer UniformConstant %21 
         UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                              %25 = OpTypeSampler 
                                              %26 = OpTypePointer UniformConstant %25 
                     UniformConstant sampler* %27 = OpVariable UniformConstant 
                                              %29 = OpTypeSampledImage %21 
                                              %36 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                               Private f32_3* %40 = OpVariable Private 
         UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
                     UniformConstant sampler* %43 = OpVariable UniformConstant 
                                              %46 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %52 = OpTypeStruct %10 %10 %10 %10 
                                              %53 = OpTypePointer Uniform %52 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %54 = OpVariable Uniform 
                                              %55 = OpTypeInt 32 1 
                                          i32 %56 = OpConstant 3 
                                              %57 = OpTypePointer Uniform %10 
                                          i32 %65 = OpConstant 1 
                                              %71 = OpTypePointer Private %6 
                                 Private f32* %72 = OpVariable Private 
                                              %73 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                          i32 %76 = OpConstant 0 
                                              %77 = OpTypeInt 32 0 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypePointer Uniform %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %88 = OpConstant 2 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          i32 %96 = OpConstant 2 
                                         u32 %100 = OpConstant 3 
                                             %106 = OpTypePointer Output %10 
                               Output f32_4* %107 = OpVariable Output 
                                             %118 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %14 = OpLoad vs_TEXCOORD2 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                        f32_4 %16 = OpLoad vs_TEXCOORD2 
                                        f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                        f32_2 %18 = OpFDiv %15 %17 
                                        f32_3 %19 = OpLoad %9 
                                        f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                      OpStore %9 %20 
                          read_only Texture2D %24 = OpLoad %23 
                                      sampler %28 = OpLoad %27 
                   read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                        f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                                      OpStore %9 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %38 = OpLoad vs_TEXCOORD4 
                                        f32_3 %39 = OpFAdd %35 %38 
                                                      OpStore %9 %39 
                          read_only Texture2D %42 = OpLoad %41 
                                      sampler %44 = OpLoad %43 
                   read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                                        f32_2 %48 = OpLoad vs_TEXCOORD0 
                                        f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                                      OpStore %40 %50 
                                        f32_3 %51 = OpLoad %40 
                               Uniform f32_4* %58 = OpAccessChain %54 %56 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFMul %51 %60 
                                                      OpStore %40 %61 
                                        f32_3 %62 = OpLoad %40 
                                        f32_3 %63 = OpLoad %9 
                                        f32_3 %64 = OpFMul %62 %63 
                               Uniform f32_4* %66 = OpAccessChain %54 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFNegate %68 
                                        f32_3 %70 = OpFAdd %64 %69 
                                                      OpStore %9 %70 
                                          f32 %75 = OpLoad vs_TEXCOORD5 
                                 Uniform f32* %80 = OpAccessChain %54 %76 %78 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %75 %81 
                                                      OpStore %72 %82 
                                          f32 %83 = OpLoad %72 
                                          f32 %84 = OpFNegate %83 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %72 %86 
                                          f32 %87 = OpLoad %72 
                                 Uniform f32* %89 = OpAccessChain %54 %76 %88 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %87 %90 
                                                      OpStore %72 %91 
                                          f32 %92 = OpLoad %72 
                                          f32 %94 = OpExtInst %1 40 %92 %93 
                                                      OpStore %72 %94 
                                          f32 %95 = OpLoad %72 
                                 Uniform f32* %97 = OpAccessChain %54 %96 %88 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %95 %98 
                                Uniform f32* %101 = OpAccessChain %54 %96 %100 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %99 %102 
                                                      OpStore %72 %103 
                                         f32 %104 = OpLoad %72 
                                         f32 %105 = OpExtInst %1 43 %104 %93 %85 
                                                      OpStore %72 %105 
                                         f32 %108 = OpLoad %72 
                                       f32_3 %109 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %110 = OpLoad %9 
                                       f32_3 %111 = OpFMul %109 %110 
                              Uniform f32_4* %112 = OpAccessChain %54 %65 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFAdd %111 %114 
                                       f32_4 %116 = OpLoad %107 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %107 %117 
                                 Output f32* %119 = OpAccessChain %107 %100 
                                                      OpStore %119 %85 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat8 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %182 %186 %314 %320 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 132 
                                                      OpDecorate vs_TEXCOORD2 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD3 Location 182 
                                                      OpDecorate %186 Location 186 
                                                      OpMemberDecorate %252 0 Offset 252 
                                                      OpMemberDecorate %252 1 Offset 252 
                                                      OpMemberDecorate %252 2 Offset 252 
                                                      OpMemberDecorate %252 3 Offset 252 
                                                      OpMemberDecorate %252 4 Offset 252 
                                                      OpMemberDecorate %252 5 Offset 252 
                                                      OpMemberDecorate %252 6 Offset 252 
                                                      OpDecorate %253 ArrayStride 253 
                                                      OpMemberDecorate %254 0 Offset 254 
                                                      OpDecorate %254 Block 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate vs_TEXCOORD4 Location 314 
                                                      OpDecorate %320 Flat 
                                                      OpDecorate %320 Location 320 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                                Private f32* %156 = OpVariable Private 
                                         u32 %159 = OpConstant 0 
                                             %160 = OpTypePointer Uniform %27 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                             %185 = OpTypePointer Input %79 
                                Input f32_3* %186 = OpVariable Input 
                                             %211 = OpTypePointer Private %79 
                              Private f32_3* %212 = OpVariable Private 
                              Private f32_3* %251 = OpVariable Private 
                                             %252 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %253 = OpTypeArray %252 %40 
                                             %254 = OpTypeStruct %253 
                                             %255 = OpTypePointer Uniform %254 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %256 = OpVariable Uniform 
                                         i32 %266 = OpConstant 4 
                                         i32 %274 = OpConstant 5 
                                         i32 %282 = OpConstant 6 
                                         f32 %291 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %319 = OpTypePointer Output %35 
                                 Output u32* %320 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD2 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                Private f32* %157 = OpAccessChain %30 %123 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %161 = OpAccessChain %98 %15 %159 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %158 %162 
                                                      OpStore %156 %163 
                                       f32_4 %164 = OpLoad %30 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %30 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %30 %170 
                                         f32 %171 = OpLoad %156 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %30 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %30 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD2 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %181 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_3 %187 = OpLoad %186 
                                         i32 %188 = OpLoad %20 
                                         i32 %189 = OpSDiv %188 %46 
                              Uniform f32_4* %190 = OpAccessChain %44 %15 %189 %48 %15 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %30 %159 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %186 
                                         i32 %196 = OpLoad %20 
                                         i32 %197 = OpSDiv %196 %46 
                              Uniform f32_4* %198 = OpAccessChain %44 %15 %197 %48 %48 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %202 = OpAccessChain %30 %123 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %186 
                                         i32 %204 = OpLoad %20 
                                         i32 %205 = OpSDiv %204 %46 
                              Uniform f32_4* %206 = OpAccessChain %44 %15 %205 %48 %64 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %203 %208 
                                Private f32* %210 = OpAccessChain %30 %133 
                                                      OpStore %210 %209 
                                       f32_4 %213 = OpLoad %30 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_4 %215 = OpLoad %30 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                         f32 %217 = OpDot %214 %216 
                                Private f32* %218 = OpAccessChain %212 %159 
                                                      OpStore %218 %217 
                                Private f32* %219 = OpAccessChain %212 %159 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 32 %220 
                                Private f32* %222 = OpAccessChain %212 %159 
                                                      OpStore %222 %221 
                                       f32_3 %223 = OpLoad %212 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 0 0 
                                       f32_4 %225 = OpLoad %30 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFMul %224 %226 
                                       f32_4 %228 = OpLoad %30 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %30 %229 
                                Private f32* %230 = OpAccessChain %30 %123 
                                         f32 %231 = OpLoad %230 
                                Private f32* %232 = OpAccessChain %30 %123 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFMul %231 %233 
                                Private f32* %235 = OpAccessChain %212 %159 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %30 %159 
                                         f32 %237 = OpLoad %236 
                                Private f32* %238 = OpAccessChain %30 %159 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFMul %237 %239 
                                Private f32* %241 = OpAccessChain %212 %159 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %240 %243 
                                Private f32* %245 = OpAccessChain %212 %159 
                                                      OpStore %245 %244 
                                       f32_4 %246 = OpLoad %30 
                                       f32_4 %247 = OpVectorShuffle %246 %246 1 2 2 0 
                                       f32_4 %248 = OpLoad %30 
                                       f32_4 %249 = OpVectorShuffle %248 %248 0 1 2 2 
                                       f32_4 %250 = OpFMul %247 %249 
                                                      OpStore %72 %250 
                                         i32 %257 = OpLoad %8 
                                         i32 %258 = OpSDiv %257 %25 
                              Uniform f32_4* %259 = OpAccessChain %256 %15 %258 %22 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %72 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %159 
                                                      OpStore %263 %262 
                                         i32 %264 = OpLoad %8 
                                         i32 %265 = OpSDiv %264 %25 
                              Uniform f32_4* %267 = OpAccessChain %256 %15 %265 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_4 %269 = OpLoad %72 
                                         f32 %270 = OpDot %268 %269 
                                Private f32* %271 = OpAccessChain %251 %123 
                                                      OpStore %271 %270 
                                         i32 %272 = OpLoad %8 
                                         i32 %273 = OpSDiv %272 %25 
                              Uniform f32_4* %275 = OpAccessChain %256 %15 %273 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_4 %277 = OpLoad %72 
                                         f32 %278 = OpDot %276 %277 
                                Private f32* %279 = OpAccessChain %251 %133 
                                                      OpStore %279 %278 
                                         i32 %280 = OpLoad %8 
                                         i32 %281 = OpSDiv %280 %25 
                              Uniform f32_4* %283 = OpAccessChain %256 %15 %281 %282 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpLoad %212 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_3 %289 = OpLoad %251 
                                       f32_3 %290 = OpFAdd %288 %289 
                                                      OpStore %212 %290 
                                Private f32* %292 = OpAccessChain %30 %173 
                                                      OpStore %292 %291 
                                         i32 %293 = OpLoad %8 
                                         i32 %294 = OpSDiv %293 %25 
                              Uniform f32_4* %295 = OpAccessChain %256 %15 %294 %15 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpLoad %30 
                                         f32 %298 = OpDot %296 %297 
                                Private f32* %299 = OpAccessChain %72 %159 
                                                      OpStore %299 %298 
                                         i32 %300 = OpLoad %8 
                                         i32 %301 = OpSDiv %300 %25 
                              Uniform f32_4* %302 = OpAccessChain %256 %15 %301 %48 
                                       f32_4 %303 = OpLoad %302 
                                       f32_4 %304 = OpLoad %30 
                                         f32 %305 = OpDot %303 %304 
                                Private f32* %306 = OpAccessChain %72 %123 
                                                      OpStore %306 %305 
                                         i32 %307 = OpLoad %8 
                                         i32 %308 = OpSDiv %307 %25 
                              Uniform f32_4* %309 = OpAccessChain %256 %15 %308 %64 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpLoad %30 
                                         f32 %312 = OpDot %310 %311 
                                Private f32* %313 = OpAccessChain %72 %133 
                                                      OpStore %313 %312 
                                       f32_3 %315 = OpLoad %212 
                                       f32_4 %316 = OpLoad %72 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFAdd %315 %317 
                                                      OpStore vs_TEXCOORD4 %318 
                                         i32 %321 = OpLoad %10 
                                         u32 %322 = OpBitcast %321 
                                                      OpStore %320 %322 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %37 %47 %74 %107 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate vs_TEXCOORD4 Location 37 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate vs_TEXCOORD0 Location 47 
                                                      OpMemberDecorate %52 0 Offset 52 
                                                      OpMemberDecorate %52 1 Offset 52 
                                                      OpMemberDecorate %52 2 Offset 52 
                                                      OpMemberDecorate %52 3 Offset 52 
                                                      OpDecorate %52 Block 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate vs_TEXCOORD5 Location 74 
                                                      OpDecorate %107 Location 107 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %22 = OpTypePointer UniformConstant %21 
         UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                              %25 = OpTypeSampler 
                                              %26 = OpTypePointer UniformConstant %25 
                     UniformConstant sampler* %27 = OpVariable UniformConstant 
                                              %29 = OpTypeSampledImage %21 
                                              %36 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                               Private f32_3* %40 = OpVariable Private 
         UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
                     UniformConstant sampler* %43 = OpVariable UniformConstant 
                                              %46 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %52 = OpTypeStruct %10 %10 %10 %10 
                                              %53 = OpTypePointer Uniform %52 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %54 = OpVariable Uniform 
                                              %55 = OpTypeInt 32 1 
                                          i32 %56 = OpConstant 3 
                                              %57 = OpTypePointer Uniform %10 
                                          i32 %65 = OpConstant 1 
                                              %71 = OpTypePointer Private %6 
                                 Private f32* %72 = OpVariable Private 
                                              %73 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD5 = OpVariable Input 
                                          i32 %76 = OpConstant 0 
                                              %77 = OpTypeInt 32 0 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypePointer Uniform %6 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %88 = OpConstant 2 
                                          f32 %93 = OpConstant 3.674022E-40 
                                          i32 %96 = OpConstant 2 
                                         u32 %100 = OpConstant 3 
                                             %106 = OpTypePointer Output %10 
                               Output f32_4* %107 = OpVariable Output 
                                             %118 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %14 = OpLoad vs_TEXCOORD2 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                        f32_4 %16 = OpLoad vs_TEXCOORD2 
                                        f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                        f32_2 %18 = OpFDiv %15 %17 
                                        f32_3 %19 = OpLoad %9 
                                        f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                                      OpStore %9 %20 
                          read_only Texture2D %24 = OpLoad %23 
                                      sampler %28 = OpLoad %27 
                   read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                        f32_3 %31 = OpLoad %9 
                                        f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                        f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                                      OpStore %9 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %38 = OpLoad vs_TEXCOORD4 
                                        f32_3 %39 = OpFAdd %35 %38 
                                                      OpStore %9 %39 
                          read_only Texture2D %42 = OpLoad %41 
                                      sampler %44 = OpLoad %43 
                   read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                                        f32_2 %48 = OpLoad vs_TEXCOORD0 
                                        f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                                      OpStore %40 %50 
                                        f32_3 %51 = OpLoad %40 
                               Uniform f32_4* %58 = OpAccessChain %54 %56 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFMul %51 %60 
                                                      OpStore %40 %61 
                                        f32_3 %62 = OpLoad %40 
                                        f32_3 %63 = OpLoad %9 
                                        f32_3 %64 = OpFMul %62 %63 
                               Uniform f32_4* %66 = OpAccessChain %54 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_3 %69 = OpFNegate %68 
                                        f32_3 %70 = OpFAdd %64 %69 
                                                      OpStore %9 %70 
                                          f32 %75 = OpLoad vs_TEXCOORD5 
                                 Uniform f32* %80 = OpAccessChain %54 %76 %78 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %75 %81 
                                                      OpStore %72 %82 
                                          f32 %83 = OpLoad %72 
                                          f32 %84 = OpFNegate %83 
                                          f32 %86 = OpFAdd %84 %85 
                                                      OpStore %72 %86 
                                          f32 %87 = OpLoad %72 
                                 Uniform f32* %89 = OpAccessChain %54 %76 %88 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %87 %90 
                                                      OpStore %72 %91 
                                          f32 %92 = OpLoad %72 
                                          f32 %94 = OpExtInst %1 40 %92 %93 
                                                      OpStore %72 %94 
                                          f32 %95 = OpLoad %72 
                                 Uniform f32* %97 = OpAccessChain %54 %96 %88 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFMul %95 %98 
                                Uniform f32* %101 = OpAccessChain %54 %96 %100 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFAdd %99 %102 
                                                      OpStore %72 %103 
                                         f32 %104 = OpLoad %72 
                                         f32 %105 = OpExtInst %1 43 %104 %93 %85 
                                                      OpStore %72 %105 
                                         f32 %108 = OpLoad %72 
                                       f32_3 %109 = OpCompositeConstruct %108 %108 %108 
                                       f32_3 %110 = OpLoad %9 
                                       f32_3 %111 = OpFMul %109 %110 
                              Uniform f32_4* %112 = OpAccessChain %54 %65 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFAdd %111 %114 
                                       f32_4 %116 = OpLoad %107 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %107 %117 
                                 Output f32* %119 = OpAccessChain %107 %100 
                                                      OpStore %119 %85 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 284977
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 196
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %187 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 183 
                                                      OpDecorate %187 Flat 
                                                      OpDecorate %187 Location 187 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %184 = OpConstant 3.674022E-40 
                                       f32_4 %185 = OpConstantComposite %184 %184 %184 %184 
                                             %186 = OpTypePointer Output %31 
                                 Output u32* %187 = OpVariable Output 
                                             %190 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                                      OpStore vs_TEXCOORD3 %185 
                                         i32 %188 = OpLoad %10 
                                         u32 %189 = OpBitcast %188 
                                                      OpStore %187 %189 
                                 Output f32* %191 = OpAccessChain %116 %15 %112 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFNegate %192 
                                 Output f32* %194 = OpAccessChain %116 %15 %112 
                                                      OpStore %194 %193 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %47 %50 %52 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %47 Location 47 
                                             OpDecorate %50 Location 50 
                                             OpDecorate vs_TEXCOORD1 Location 52 
                                             OpDecorate %61 Location 61 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypeStruct %24 
                                     %31 = OpTypePointer Uniform %30 
            Uniform struct {f32_4;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %24 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 3 
                                     %45 = OpTypePointer Output %6 
                       Output f32_4* %47 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                               f32_4 %49 = OpConstantComposite %48 %48 %48 %48 
                       Output f32_4* %50 = OpVariable Output 
                                     %51 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %54 = OpConstant 3.674022E-40 
                               f32_3 %55 = OpConstantComposite %54 %54 %54 
                       Output f32_4* %61 = OpVariable Output 
                               f32_4 %62 = OpConstantComposite %42 %42 %42 %42 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                      Uniform f32_4* %36 = OpAccessChain %32 %34 
                               f32_4 %37 = OpLoad %36 
                               f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                               f32_3 %39 = OpFMul %29 %38 
                               f32_4 %40 = OpLoad %28 
                               f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                             OpStore %28 %41 
                         Output f32* %46 = OpAccessChain %28 %44 
                                             OpStore %46 %42 
                                             OpStore %47 %49 
                               f32_3 %53 = OpLoad vs_TEXCOORD1 
                               f32_3 %56 = OpFMul %53 %55 
                               f32_3 %57 = OpFAdd %56 %55 
                               f32_4 %58 = OpLoad %50 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %50 %59 
                         Output f32* %60 = OpAccessChain %50 %44 
                                             OpStore %60 %42 
                                             OpStore %61 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %47 %50 %52 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %47 Location 47 
                                             OpDecorate %50 Location 50 
                                             OpDecorate vs_TEXCOORD1 Location 52 
                                             OpDecorate %61 Location 61 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypeStruct %24 
                                     %31 = OpTypePointer Uniform %30 
            Uniform struct {f32_4;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %24 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 3 
                                     %45 = OpTypePointer Output %6 
                       Output f32_4* %47 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                               f32_4 %49 = OpConstantComposite %48 %48 %48 %48 
                       Output f32_4* %50 = OpVariable Output 
                                     %51 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %54 = OpConstant 3.674022E-40 
                               f32_3 %55 = OpConstantComposite %54 %54 %54 
                       Output f32_4* %61 = OpVariable Output 
                               f32_4 %62 = OpConstantComposite %42 %42 %42 %42 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                      Uniform f32_4* %36 = OpAccessChain %32 %34 
                               f32_4 %37 = OpLoad %36 
                               f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                               f32_3 %39 = OpFMul %29 %38 
                               f32_4 %40 = OpLoad %28 
                               f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                             OpStore %28 %41 
                         Output f32* %46 = OpAccessChain %28 %44 
                                             OpStore %46 %42 
                                             OpStore %47 %49 
                               f32_3 %53 = OpLoad vs_TEXCOORD1 
                               f32_3 %56 = OpFMul %53 %55 
                               f32_3 %57 = OpFAdd %56 %55 
                               f32_4 %58 = OpLoad %50 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %50 %59 
                         Output f32* %60 = OpAccessChain %50 %44 
                                             OpStore %60 %42 
                                             OpStore %61 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
int u_xlati9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlati9 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAbArray, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD4.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %192 %245 %258 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate vs_TEXCOORD3 Location 192 
                                                      OpMemberDecorate %217 0 Offset 217 
                                                      OpMemberDecorate %217 1 Offset 217 
                                                      OpMemberDecorate %217 2 Offset 217 
                                                      OpMemberDecorate %217 3 Offset 217 
                                                      OpMemberDecorate %217 4 Offset 217 
                                                      OpMemberDecorate %217 5 Offset 217 
                                                      OpMemberDecorate %217 6 Offset 217 
                                                      OpDecorate %218 ArrayStride 218 
                                                      OpMemberDecorate %219 0 Offset 219 
                                                      OpDecorate %219 Block 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate vs_TEXCOORD4 Location 245 
                                                      OpDecorate %258 Flat 
                                                      OpDecorate %258 Location 258 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %193 = OpConstant 3.674022E-40 
                                       f32_4 %194 = OpConstantComposite %193 %193 %193 %193 
                              Private f32_3* %216 = OpVariable Private 
                                             %217 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %218 = OpTypeArray %217 %40 
                                             %219 = OpTypeStruct %218 
                                             %220 = OpTypePointer Uniform %219 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %221 = OpVariable Uniform 
                                         i32 %231 = OpConstant 4 
                                         i32 %239 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %248 = OpConstant 6 
                                             %257 = OpTypePointer Output %35 
                                 Output u32* %258 = OpVariable Output 
                                             %261 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                                      OpStore vs_TEXCOORD3 %194 
                                Private f32* %195 = OpAccessChain %174 %116 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %174 %116 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFMul %196 %198 
                                Private f32* %200 = OpAccessChain %30 %153 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %174 %153 
                                         f32 %202 = OpLoad %201 
                                Private f32* %203 = OpAccessChain %174 %153 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %202 %204 
                                Private f32* %206 = OpAccessChain %30 %153 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %205 %208 
                                Private f32* %210 = OpAccessChain %30 %153 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %174 
                                       f32_4 %212 = OpVectorShuffle %211 %211 1 2 2 0 
                                       f32_3 %213 = OpLoad %174 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                                      OpStore %72 %215 
                                         i32 %222 = OpLoad %8 
                                         i32 %223 = OpSDiv %222 %25 
                              Uniform f32_4* %224 = OpAccessChain %221 %15 %223 %22 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %72 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %216 %153 
                                                      OpStore %228 %227 
                                         i32 %229 = OpLoad %8 
                                         i32 %230 = OpSDiv %229 %25 
                              Uniform f32_4* %232 = OpAccessChain %221 %15 %230 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %72 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %216 %116 
                                                      OpStore %236 %235 
                                         i32 %237 = OpLoad %8 
                                         i32 %238 = OpSDiv %237 %25 
                              Uniform f32_4* %240 = OpAccessChain %221 %15 %238 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %72 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %216 %171 
                                                      OpStore %244 %243 
                                         i32 %246 = OpLoad %8 
                                         i32 %247 = OpSDiv %246 %25 
                              Uniform f32_4* %249 = OpAccessChain %221 %15 %247 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %30 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 0 0 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %216 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore vs_TEXCOORD4 %256 
                                         i32 %259 = OpLoad %10 
                                         u32 %260 = OpBitcast %259 
                                                      OpStore %258 %260 
                                 Output f32* %262 = OpAccessChain %120 %15 %116 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %120 %15 %116 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 142
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %39 %48 %51 %53 %65 %119 %134 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %48 Location 48 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpDecorate %65 Flat 
                                                      OpDecorate %65 Location 65 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpMemberDecorate %86 0 Offset 86 
                                                      OpMemberDecorate %86 1 Offset 86 
                                                      OpMemberDecorate %86 2 Offset 86 
                                                      OpMemberDecorate %86 3 Offset 86 
                                                      OpMemberDecorate %86 4 Offset 86 
                                                      OpMemberDecorate %86 5 Offset 86 
                                                      OpMemberDecorate %86 6 Offset 86 
                                                      OpDecorate %87 SpecId 87 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate vs_TEXCOORD4 Location 119 
                                                      OpDecorate %134 Location 134 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 
                                              %29 = OpTypePointer Uniform %28 
                     Uniform struct {f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Uniform %24 
                                              %38 = OpTypePointer Output %24 
                                Output f32_4* %39 = OpVariable Output 
                                          f32 %43 = OpConstant 3.674022E-40 
                                              %44 = OpTypeInt 32 0 
                                          u32 %45 = OpConstant 3 
                                              %46 = OpTypePointer Output %6 
                                Output f32_4* %48 = OpVariable Output 
                                          f32 %49 = OpConstant 3.674022E-40 
                                        f32_4 %50 = OpConstantComposite %49 %49 %49 %49 
                                Output f32_4* %51 = OpVariable Output 
                                              %52 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %55 = OpConstant 3.674022E-40 
                                        f32_3 %56 = OpConstantComposite %55 %55 %55 
                                              %62 = OpTypePointer Private %31 
                                 Private i32* %63 = OpVariable Private 
                                              %64 = OpTypePointer Input %44 
                                   Input u32* %65 = OpVariable Input 
                                              %68 = OpTypeStruct %31 %31 
                                              %69 = OpTypePointer Uniform %68 
                  Uniform struct {i32; i32;}* %70 = OpVariable Uniform 
                                              %71 = OpTypePointer Uniform %31 
                                          i32 %76 = OpConstant 7 
                                              %78 = OpTypePointer Private %24 
                               Private f32_4* %79 = OpVariable Private 
                                              %83 = OpTypePointer Private %6 
                               Private f32_3* %85 = OpVariable Private 
                                              %86 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 
                                          i32 %87 = OpSpecConstant 2 
                                              %88 = OpTypeArray %86 %87 
                                              %89 = OpTypeStruct %88 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %91 = OpVariable Uniform 
                                          u32 %98 = OpConstant 0 
                                         i32 %102 = OpConstant 1 
                                         u32 %107 = OpConstant 1 
                                         i32 %111 = OpConstant 2 
                                         u32 %116 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                       f32_3 %126 = OpConstantComposite %49 %49 %49 
                               Output f32_4* %134 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpLoad %39 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %39 %42 
                                  Output f32* %47 = OpAccessChain %39 %45 
                                                      OpStore %47 %43 
                                                      OpStore %48 %50 
                                        f32_3 %54 = OpLoad vs_TEXCOORD1 
                                        f32_3 %57 = OpFMul %54 %56 
                                        f32_3 %58 = OpFAdd %57 %56 
                                        f32_4 %59 = OpLoad %51 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %51 %60 
                                  Output f32* %61 = OpAccessChain %51 %45 
                                                      OpStore %61 %43 
                                          u32 %66 = OpLoad %65 
                                          i32 %67 = OpBitcast %66 
                                 Uniform i32* %72 = OpAccessChain %70 %32 
                                          i32 %73 = OpLoad %72 
                                          i32 %74 = OpIAdd %67 %73 
                                                      OpStore %63 %74 
                                          i32 %75 = OpLoad %63 
                                          i32 %77 = OpIMul %75 %76 
                                                      OpStore %63 %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD1 
                                        f32_4 %81 = OpLoad %79 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %79 %82 
                                 Private f32* %84 = OpAccessChain %79 %45 
                                                      OpStore %84 %43 
                                          i32 %92 = OpLoad %63 
                                          i32 %93 = OpSDiv %92 %76 
                               Uniform f32_4* %94 = OpAccessChain %91 %32 %93 %32 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %79 
                                          f32 %97 = OpDot %95 %96 
                                 Private f32* %99 = OpAccessChain %85 %98 
                                                      OpStore %99 %97 
                                         i32 %100 = OpLoad %63 
                                         i32 %101 = OpSDiv %100 %76 
                              Uniform f32_4* %103 = OpAccessChain %91 %32 %101 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %79 
                                         f32 %106 = OpDot %104 %105 
                                Private f32* %108 = OpAccessChain %85 %107 
                                                      OpStore %108 %106 
                                         i32 %109 = OpLoad %63 
                                         i32 %110 = OpSDiv %109 %76 
                              Uniform f32_4* %112 = OpAccessChain %91 %32 %110 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %79 
                                         f32 %115 = OpDot %113 %114 
                                Private f32* %117 = OpAccessChain %85 %116 
                                                      OpStore %117 %115 
                                       f32_3 %118 = OpLoad %85 
                                       f32_3 %120 = OpLoad vs_TEXCOORD4 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %79 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %79 %123 
                                       f32_4 %124 = OpLoad %79 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %127 = OpExtInst %1 40 %125 %126 
                                       f32_4 %128 = OpLoad %79 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %79 %129 
                                       f32_3 %130 = OpLoad %9 
                                       f32_4 %131 = OpLoad %79 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                                      OpStore %9 %133 
                                       f32_3 %135 = OpLoad %9 
                                       f32_3 %136 = OpFNegate %135 
                                       f32_3 %137 = OpExtInst %1 29 %136 
                                       f32_4 %138 = OpLoad %134 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 6 3 
                                                      OpStore %134 %139 
                                 Output f32* %140 = OpAccessChain %134 %45 
                                                      OpStore %140 %43 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 245
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %234 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate vs_TEXCOORD4 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                              Private f32_4* %173 = OpVariable Private 
                                             %179 = OpTypePointer Private %51 
                              Private f32_3* %180 = OpVariable Private 
                                         i32 %186 = OpConstant 4 
                                         i32 %192 = OpConstant 5 
                                         i32 %198 = OpConstant 6 
                                         f32 %209 = OpConstant 3.674022E-40 
                                         u32 %210 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                       f32_3 %237 = OpConstantComposite %155 %155 %155 
                                             %239 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %45 %120 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %9 %120 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                Private f32* %168 = OpAccessChain %45 %120 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %167 %170 
                                Private f32* %172 = OpAccessChain %45 %120 
                                                      OpStore %172 %171 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 1 2 2 0 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 2 2 
                                       f32_4 %178 = OpFMul %175 %177 
                                                      OpStore %173 %178 
                              Uniform f32_4* %181 = OpAccessChain %21 %47 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %173 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %180 %120 
                                                      OpStore %185 %184 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %173 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %180 %83 
                                                      OpStore %191 %190 
                              Uniform f32_4* %193 = OpAccessChain %21 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpLoad %173 
                                         f32 %196 = OpDot %194 %195 
                                Private f32* %197 = OpAccessChain %180 %134 
                                                      OpStore %197 %196 
                              Uniform f32_4* %199 = OpAccessChain %21 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 0 0 
                                       f32_3 %204 = OpFMul %201 %203 
                                       f32_3 %205 = OpLoad %180 
                                       f32_3 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                Private f32* %211 = OpAccessChain %9 %210 
                                                      OpStore %211 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %29 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %9 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %173 %120 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %24 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %9 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %173 %83 
                                                      OpStore %221 %220 
                              Uniform f32_4* %222 = OpAccessChain %21 %37 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %9 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %173 %134 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_4 %229 = OpLoad %173 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %238 = OpExtInst %1 40 %236 %237 
                                                      OpStore vs_TEXCOORD4 %238 
                                 Output f32* %240 = OpAccessChain %87 %29 %83 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                                      OpStore %243 %242 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 74
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %39 %45 %48 %59 %62 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpMemberDecorate %28 0 Offset 28 
                                             OpDecorate %28 Block 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %39 Location 39 
                                             OpDecorate vs_TEXCOORD4 Location 45 
                                             OpDecorate %48 Location 48 
                                             OpDecorate %59 Location 59 
                                             OpDecorate %62 Location 62 
                                             OpDecorate vs_TEXCOORD1 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypeStruct %24 
                                     %29 = OpTypePointer Uniform %28 
            Uniform struct {f32_4;}* %30 = OpVariable Uniform 
                                     %31 = OpTypeInt 32 1 
                                 i32 %32 = OpConstant 0 
                                     %33 = OpTypePointer Uniform %24 
                                     %38 = OpTypePointer Output %24 
                       Output f32_4* %39 = OpVariable Output 
                                     %44 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %48 = OpVariable Output 
                                 f32 %54 = OpConstant 3.674022E-40 
                                     %55 = OpTypeInt 32 0 
                                 u32 %56 = OpConstant 3 
                                     %57 = OpTypePointer Output %6 
                       Output f32_4* %59 = OpVariable Output 
                                 f32 %60 = OpConstant 3.674022E-40 
                               f32_4 %61 = OpConstantComposite %60 %60 %60 %60 
                       Output f32_4* %62 = OpVariable Output 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %65 = OpConstant 3.674022E-40 
                               f32_3 %66 = OpConstantComposite %65 %65 %65 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                      Uniform f32_4* %34 = OpAccessChain %30 %32 
                               f32_4 %35 = OpLoad %34 
                               f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                               f32_3 %37 = OpFMul %27 %36 
                                             OpStore %9 %37 
                               f32_3 %40 = OpLoad %9 
                               f32_4 %41 = OpLoad %39 
                               f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                             OpStore %39 %42 
                               f32_3 %43 = OpLoad %9 
                               f32_3 %46 = OpLoad vs_TEXCOORD4 
                               f32_3 %47 = OpFMul %43 %46 
                                             OpStore %9 %47 
                               f32_3 %49 = OpLoad %9 
                               f32_3 %50 = OpFNegate %49 
                               f32_3 %51 = OpExtInst %1 29 %50 
                               f32_4 %52 = OpLoad %48 
                               f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                             OpStore %48 %53 
                         Output f32* %58 = OpAccessChain %39 %56 
                                             OpStore %58 %54 
                                             OpStore %59 %61 
                               f32_3 %64 = OpLoad vs_TEXCOORD1 
                               f32_3 %67 = OpFMul %64 %66 
                               f32_3 %68 = OpFAdd %67 %66 
                               f32_4 %69 = OpLoad %62 
                               f32_4 %70 = OpVectorShuffle %69 %68 4 5 6 3 
                                             OpStore %62 %70 
                         Output f32* %71 = OpAccessChain %62 %56 
                                             OpStore %71 %54 
                         Output f32* %72 = OpAccessChain %48 %56 
                                             OpStore %72 %54 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 196
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %187 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 183 
                                                      OpDecorate %187 Flat 
                                                      OpDecorate %187 Location 187 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %184 = OpConstant 3.674022E-40 
                                       f32_4 %185 = OpConstantComposite %184 %184 %184 %184 
                                             %186 = OpTypePointer Output %31 
                                 Output u32* %187 = OpVariable Output 
                                             %190 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                                      OpStore vs_TEXCOORD3 %185 
                                         i32 %188 = OpLoad %10 
                                         u32 %189 = OpBitcast %188 
                                                      OpStore %187 %189 
                                 Output f32* %191 = OpAccessChain %116 %15 %112 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFNegate %192 
                                 Output f32* %194 = OpAccessChain %116 %15 %112 
                                                      OpStore %194 %193 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %47 %50 %52 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %47 Location 47 
                                             OpDecorate %50 Location 50 
                                             OpDecorate vs_TEXCOORD1 Location 52 
                                             OpDecorate %61 Location 61 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypeStruct %24 
                                     %31 = OpTypePointer Uniform %30 
            Uniform struct {f32_4;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %24 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 3 
                                     %45 = OpTypePointer Output %6 
                       Output f32_4* %47 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                               f32_4 %49 = OpConstantComposite %48 %48 %48 %48 
                       Output f32_4* %50 = OpVariable Output 
                                     %51 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %54 = OpConstant 3.674022E-40 
                               f32_3 %55 = OpConstantComposite %54 %54 %54 
                       Output f32_4* %61 = OpVariable Output 
                               f32_4 %62 = OpConstantComposite %48 %48 %48 %42 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                      Uniform f32_4* %36 = OpAccessChain %32 %34 
                               f32_4 %37 = OpLoad %36 
                               f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                               f32_3 %39 = OpFMul %29 %38 
                               f32_4 %40 = OpLoad %28 
                               f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                             OpStore %28 %41 
                         Output f32* %46 = OpAccessChain %28 %44 
                                             OpStore %46 %42 
                                             OpStore %47 %49 
                               f32_3 %53 = OpLoad vs_TEXCOORD1 
                               f32_3 %56 = OpFMul %53 %55 
                               f32_3 %57 = OpFAdd %56 %55 
                               f32_4 %58 = OpLoad %50 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %50 %59 
                         Output f32* %60 = OpAccessChain %50 %44 
                                             OpStore %60 %42 
                                             OpStore %61 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 155
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate vs_TEXCOORD3 Location 146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %147 = OpConstant 3.674022E-40 
                                       f32_4 %148 = OpConstantComposite %147 %147 %147 %147 
                                             %149 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                                      OpStore vs_TEXCOORD3 %148 
                                 Output f32* %150 = OpAccessChain %85 %23 %81 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFNegate %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                                      OpStore %153 %152 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 64
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %47 %50 %52 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %47 Location 47 
                                             OpDecorate %50 Location 50 
                                             OpDecorate vs_TEXCOORD1 Location 52 
                                             OpDecorate %61 Location 61 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypeStruct %24 
                                     %31 = OpTypePointer Uniform %30 
            Uniform struct {f32_4;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %24 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 3 
                                     %45 = OpTypePointer Output %6 
                       Output f32_4* %47 = OpVariable Output 
                                 f32 %48 = OpConstant 3.674022E-40 
                               f32_4 %49 = OpConstantComposite %48 %48 %48 %48 
                       Output f32_4* %50 = OpVariable Output 
                                     %51 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %54 = OpConstant 3.674022E-40 
                               f32_3 %55 = OpConstantComposite %54 %54 %54 
                       Output f32_4* %61 = OpVariable Output 
                               f32_4 %62 = OpConstantComposite %48 %48 %48 %42 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                      Uniform f32_4* %36 = OpAccessChain %32 %34 
                               f32_4 %37 = OpLoad %36 
                               f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                               f32_3 %39 = OpFMul %29 %38 
                               f32_4 %40 = OpLoad %28 
                               f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                             OpStore %28 %41 
                         Output f32* %46 = OpAccessChain %28 %44 
                                             OpStore %46 %42 
                                             OpStore %47 %49 
                               f32_3 %53 = OpLoad vs_TEXCOORD1 
                               f32_3 %56 = OpFMul %53 %55 
                               f32_3 %57 = OpFAdd %56 %55 
                               f32_4 %58 = OpLoad %50 
                               f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                             OpStore %50 %59 
                         Output f32* %60 = OpAccessChain %50 %44 
                                             OpStore %60 %42 
                                             OpStore %61 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _Color;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
int u_xlati9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlati9 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAbArray, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD4.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %192 %245 %258 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate vs_TEXCOORD3 Location 192 
                                                      OpMemberDecorate %217 0 Offset 217 
                                                      OpMemberDecorate %217 1 Offset 217 
                                                      OpMemberDecorate %217 2 Offset 217 
                                                      OpMemberDecorate %217 3 Offset 217 
                                                      OpMemberDecorate %217 4 Offset 217 
                                                      OpMemberDecorate %217 5 Offset 217 
                                                      OpMemberDecorate %217 6 Offset 217 
                                                      OpDecorate %218 ArrayStride 218 
                                                      OpMemberDecorate %219 0 Offset 219 
                                                      OpDecorate %219 Block 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate vs_TEXCOORD4 Location 245 
                                                      OpDecorate %258 Flat 
                                                      OpDecorate %258 Location 258 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %193 = OpConstant 3.674022E-40 
                                       f32_4 %194 = OpConstantComposite %193 %193 %193 %193 
                              Private f32_3* %216 = OpVariable Private 
                                             %217 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %218 = OpTypeArray %217 %40 
                                             %219 = OpTypeStruct %218 
                                             %220 = OpTypePointer Uniform %219 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %221 = OpVariable Uniform 
                                         i32 %231 = OpConstant 4 
                                         i32 %239 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %248 = OpConstant 6 
                                             %257 = OpTypePointer Output %35 
                                 Output u32* %258 = OpVariable Output 
                                             %261 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                                      OpStore vs_TEXCOORD3 %194 
                                Private f32* %195 = OpAccessChain %174 %116 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %174 %116 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFMul %196 %198 
                                Private f32* %200 = OpAccessChain %30 %153 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %174 %153 
                                         f32 %202 = OpLoad %201 
                                Private f32* %203 = OpAccessChain %174 %153 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %202 %204 
                                Private f32* %206 = OpAccessChain %30 %153 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %205 %208 
                                Private f32* %210 = OpAccessChain %30 %153 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %174 
                                       f32_4 %212 = OpVectorShuffle %211 %211 1 2 2 0 
                                       f32_3 %213 = OpLoad %174 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                                      OpStore %72 %215 
                                         i32 %222 = OpLoad %8 
                                         i32 %223 = OpSDiv %222 %25 
                              Uniform f32_4* %224 = OpAccessChain %221 %15 %223 %22 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %72 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %216 %153 
                                                      OpStore %228 %227 
                                         i32 %229 = OpLoad %8 
                                         i32 %230 = OpSDiv %229 %25 
                              Uniform f32_4* %232 = OpAccessChain %221 %15 %230 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %72 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %216 %116 
                                                      OpStore %236 %235 
                                         i32 %237 = OpLoad %8 
                                         i32 %238 = OpSDiv %237 %25 
                              Uniform f32_4* %240 = OpAccessChain %221 %15 %238 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %72 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %216 %171 
                                                      OpStore %244 %243 
                                         i32 %246 = OpLoad %8 
                                         i32 %247 = OpSDiv %246 %25 
                              Uniform f32_4* %249 = OpAccessChain %221 %15 %247 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %30 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 0 0 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %216 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore vs_TEXCOORD4 %256 
                                         i32 %259 = OpLoad %10 
                                         u32 %260 = OpBitcast %259 
                                                      OpStore %258 %260 
                                 Output f32* %262 = OpAccessChain %120 %15 %116 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %120 %15 %116 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 139
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %39 %48 %51 %53 %65 %119 %130 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpMemberDecorate %28 0 Offset 28 
                                                      OpDecorate %28 Block 
                                                      OpDecorate %30 DescriptorSet 30 
                                                      OpDecorate %30 Binding 30 
                                                      OpDecorate %39 Location 39 
                                                      OpDecorate %48 Location 48 
                                                      OpDecorate %51 Location 51 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpDecorate %65 Flat 
                                                      OpDecorate %65 Location 65 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpMemberDecorate %86 0 Offset 86 
                                                      OpMemberDecorate %86 1 Offset 86 
                                                      OpMemberDecorate %86 2 Offset 86 
                                                      OpMemberDecorate %86 3 Offset 86 
                                                      OpMemberDecorate %86 4 Offset 86 
                                                      OpMemberDecorate %86 5 Offset 86 
                                                      OpMemberDecorate %86 6 Offset 86 
                                                      OpDecorate %87 SpecId 87 
                                                      OpDecorate %88 ArrayStride 88 
                                                      OpMemberDecorate %89 0 Offset 89 
                                                      OpDecorate %89 Block 
                                                      OpDecorate %91 DescriptorSet 91 
                                                      OpDecorate %91 Binding 91 
                                                      OpDecorate vs_TEXCOORD4 Location 119 
                                                      OpDecorate %130 Location 130 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypeStruct %24 
                                              %29 = OpTypePointer Uniform %28 
                     Uniform struct {f32_4;}* %30 = OpVariable Uniform 
                                              %31 = OpTypeInt 32 1 
                                          i32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Uniform %24 
                                              %38 = OpTypePointer Output %24 
                                Output f32_4* %39 = OpVariable Output 
                                          f32 %43 = OpConstant 3.674022E-40 
                                              %44 = OpTypeInt 32 0 
                                          u32 %45 = OpConstant 3 
                                              %46 = OpTypePointer Output %6 
                                Output f32_4* %48 = OpVariable Output 
                                          f32 %49 = OpConstant 3.674022E-40 
                                        f32_4 %50 = OpConstantComposite %49 %49 %49 %49 
                                Output f32_4* %51 = OpVariable Output 
                                              %52 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %55 = OpConstant 3.674022E-40 
                                        f32_3 %56 = OpConstantComposite %55 %55 %55 
                                              %62 = OpTypePointer Private %31 
                                 Private i32* %63 = OpVariable Private 
                                              %64 = OpTypePointer Input %44 
                                   Input u32* %65 = OpVariable Input 
                                              %68 = OpTypeStruct %31 %31 
                                              %69 = OpTypePointer Uniform %68 
                  Uniform struct {i32; i32;}* %70 = OpVariable Uniform 
                                              %71 = OpTypePointer Uniform %31 
                                          i32 %76 = OpConstant 7 
                                              %78 = OpTypePointer Private %24 
                               Private f32_4* %79 = OpVariable Private 
                                              %83 = OpTypePointer Private %6 
                               Private f32_3* %85 = OpVariable Private 
                                              %86 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 
                                          i32 %87 = OpSpecConstant 2 
                                              %88 = OpTypeArray %86 %87 
                                              %89 = OpTypeStruct %88 
                                              %90 = OpTypePointer Uniform %89 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %91 = OpVariable Uniform 
                                          u32 %98 = OpConstant 0 
                                         i32 %102 = OpConstant 1 
                                         u32 %107 = OpConstant 1 
                                         i32 %111 = OpConstant 2 
                                         u32 %116 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                       f32_3 %126 = OpConstantComposite %49 %49 %49 
                               Output f32_4* %130 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                               Uniform f32_4* %34 = OpAccessChain %30 %32 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %27 %36 
                                                      OpStore %9 %37 
                                        f32_3 %40 = OpLoad %9 
                                        f32_4 %41 = OpLoad %39 
                                        f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                                      OpStore %39 %42 
                                  Output f32* %47 = OpAccessChain %39 %45 
                                                      OpStore %47 %43 
                                                      OpStore %48 %50 
                                        f32_3 %54 = OpLoad vs_TEXCOORD1 
                                        f32_3 %57 = OpFMul %54 %56 
                                        f32_3 %58 = OpFAdd %57 %56 
                                        f32_4 %59 = OpLoad %51 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %51 %60 
                                  Output f32* %61 = OpAccessChain %51 %45 
                                                      OpStore %61 %43 
                                          u32 %66 = OpLoad %65 
                                          i32 %67 = OpBitcast %66 
                                 Uniform i32* %72 = OpAccessChain %70 %32 
                                          i32 %73 = OpLoad %72 
                                          i32 %74 = OpIAdd %67 %73 
                                                      OpStore %63 %74 
                                          i32 %75 = OpLoad %63 
                                          i32 %77 = OpIMul %75 %76 
                                                      OpStore %63 %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD1 
                                        f32_4 %81 = OpLoad %79 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %79 %82 
                                 Private f32* %84 = OpAccessChain %79 %45 
                                                      OpStore %84 %43 
                                          i32 %92 = OpLoad %63 
                                          i32 %93 = OpSDiv %92 %76 
                               Uniform f32_4* %94 = OpAccessChain %91 %32 %93 %32 
                                        f32_4 %95 = OpLoad %94 
                                        f32_4 %96 = OpLoad %79 
                                          f32 %97 = OpDot %95 %96 
                                 Private f32* %99 = OpAccessChain %85 %98 
                                                      OpStore %99 %97 
                                         i32 %100 = OpLoad %63 
                                         i32 %101 = OpSDiv %100 %76 
                              Uniform f32_4* %103 = OpAccessChain %91 %32 %101 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %79 
                                         f32 %106 = OpDot %104 %105 
                                Private f32* %108 = OpAccessChain %85 %107 
                                                      OpStore %108 %106 
                                         i32 %109 = OpLoad %63 
                                         i32 %110 = OpSDiv %109 %76 
                              Uniform f32_4* %112 = OpAccessChain %91 %32 %110 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %79 
                                         f32 %115 = OpDot %113 %114 
                                Private f32* %117 = OpAccessChain %85 %116 
                                                      OpStore %117 %115 
                                       f32_3 %118 = OpLoad %85 
                                       f32_3 %120 = OpLoad vs_TEXCOORD4 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %79 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %79 %123 
                                       f32_4 %124 = OpLoad %79 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %127 = OpExtInst %1 40 %125 %126 
                                       f32_4 %128 = OpLoad %79 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %79 %129 
                                       f32_3 %131 = OpLoad %9 
                                       f32_4 %132 = OpLoad %79 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %130 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %130 %136 
                                 Output f32* %137 = OpAccessChain %130 %45 
                                                      OpStore %137 %43 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Color;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 245
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %234 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate vs_TEXCOORD3 Location 154 
                                                      OpDecorate vs_TEXCOORD4 Location 234 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_4 %156 = OpConstantComposite %155 %155 %155 %155 
                              Private f32_4* %173 = OpVariable Private 
                                             %179 = OpTypePointer Private %51 
                              Private f32_3* %180 = OpVariable Private 
                                         i32 %186 = OpConstant 4 
                                         i32 %192 = OpConstant 5 
                                         i32 %198 = OpConstant 6 
                                         f32 %209 = OpConstant 3.674022E-40 
                                         u32 %210 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                       f32_3 %237 = OpConstantComposite %155 %155 %155 
                                             %239 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                                      OpStore vs_TEXCOORD3 %156 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %45 %120 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %9 %120 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                Private f32* %168 = OpAccessChain %45 %120 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %167 %170 
                                Private f32* %172 = OpAccessChain %45 %120 
                                                      OpStore %172 %171 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 1 2 2 0 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 2 2 
                                       f32_4 %178 = OpFMul %175 %177 
                                                      OpStore %173 %178 
                              Uniform f32_4* %181 = OpAccessChain %21 %47 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %173 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %180 %120 
                                                      OpStore %185 %184 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %173 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %180 %83 
                                                      OpStore %191 %190 
                              Uniform f32_4* %193 = OpAccessChain %21 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpLoad %173 
                                         f32 %196 = OpDot %194 %195 
                                Private f32* %197 = OpAccessChain %180 %134 
                                                      OpStore %197 %196 
                              Uniform f32_4* %199 = OpAccessChain %21 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 0 0 
                                       f32_3 %204 = OpFMul %201 %203 
                                       f32_3 %205 = OpLoad %180 
                                       f32_3 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                Private f32* %211 = OpAccessChain %9 %210 
                                                      OpStore %211 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %29 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %9 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %173 %120 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %24 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %9 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %173 %83 
                                                      OpStore %221 %220 
                              Uniform f32_4* %222 = OpAccessChain %21 %37 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %9 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %173 %134 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_4 %229 = OpLoad %173 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %238 = OpExtInst %1 40 %236 %237 
                                                      OpStore vs_TEXCOORD4 %238 
                                 Output f32* %240 = OpAccessChain %87 %29 %83 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                                      OpStore %243 %242 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %39 %43 %46 %56 %59 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpMemberDecorate %28 0 Offset 28 
                                             OpDecorate %28 Block 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %39 Location 39 
                                             OpDecorate %43 Location 43 
                                             OpDecorate vs_TEXCOORD4 Location 46 
                                             OpDecorate %56 Location 56 
                                             OpDecorate %59 Location 59 
                                             OpDecorate vs_TEXCOORD1 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypeStruct %24 
                                     %29 = OpTypePointer Uniform %28 
            Uniform struct {f32_4;}* %30 = OpVariable Uniform 
                                     %31 = OpTypeInt 32 1 
                                 i32 %32 = OpConstant 0 
                                     %33 = OpTypePointer Uniform %24 
                                     %38 = OpTypePointer Output %24 
                       Output f32_4* %39 = OpVariable Output 
                       Output f32_4* %43 = OpVariable Output 
                                     %45 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                     %52 = OpTypeInt 32 0 
                                 u32 %53 = OpConstant 3 
                                     %54 = OpTypePointer Output %6 
                       Output f32_4* %56 = OpVariable Output 
                                 f32 %57 = OpConstant 3.674022E-40 
                               f32_4 %58 = OpConstantComposite %57 %57 %57 %57 
                       Output f32_4* %59 = OpVariable Output 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %62 = OpConstant 3.674022E-40 
                               f32_3 %63 = OpConstantComposite %62 %62 %62 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                      Uniform f32_4* %34 = OpAccessChain %30 %32 
                               f32_4 %35 = OpLoad %34 
                               f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                               f32_3 %37 = OpFMul %27 %36 
                                             OpStore %9 %37 
                               f32_3 %40 = OpLoad %9 
                               f32_4 %41 = OpLoad %39 
                               f32_4 %42 = OpVectorShuffle %41 %40 4 5 6 3 
                                             OpStore %39 %42 
                               f32_3 %44 = OpLoad %9 
                               f32_3 %47 = OpLoad vs_TEXCOORD4 
                               f32_3 %48 = OpFMul %44 %47 
                               f32_4 %49 = OpLoad %43 
                               f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                             OpStore %43 %50 
                         Output f32* %55 = OpAccessChain %39 %53 
                                             OpStore %55 %51 
                                             OpStore %56 %58 
                               f32_3 %61 = OpLoad vs_TEXCOORD1 
                               f32_3 %64 = OpFMul %61 %63 
                               f32_3 %65 = OpFAdd %64 %63 
                               f32_4 %66 = OpLoad %59 
                               f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
                                             OpStore %59 %67 
                         Output f32* %68 = OpAccessChain %59 %53 
                                             OpStore %68 %51 
                         Output f32* %69 = OpAccessChain %43 %53 
                                             OpStore %69 %51 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
}
Fallback "Legacy Shaders/VertexLit"
}