//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/TerrainEngine/Details/Vertexlit" {
Properties {
_MainTex ("Main Texture", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 11048
Program "vp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %147 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate vs_TEXCOORD5 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_4 %151 = OpConstantComposite %150 %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                       f32_4 %148 = OpLoad %147 
                                                      OpStore %146 %148 
                                                      OpStore vs_TEXCOORD5 %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %85 %23 %81 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %58 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %57 = OpTypePointer Output %24 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %66 = OpTypeInt 32 0 
                                 u32 %67 = OpConstant 3 
                                     %68 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %59 = OpLoad %45 
                               f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpFMul %60 %61 
                               f32_4 %63 = OpLoad %58 
                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                             OpStore %58 %64 
                         Output f32* %69 = OpAccessChain %58 %67 
                                             OpStore %69 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 248
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %155 %234 %240 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD3 Location 234 
                                                      OpDecorate vs_TEXCOORD5 Location 240 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                Input f32_4* %155 = OpVariable Input 
                              Private f32_4* %173 = OpVariable Private 
                                             %179 = OpTypePointer Private %51 
                              Private f32_3* %180 = OpVariable Private 
                                         i32 %186 = OpConstant 4 
                                         i32 %192 = OpConstant 5 
                                         i32 %198 = OpConstant 6 
                                         f32 %209 = OpConstant 3.674022E-40 
                                         u32 %210 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_3 %238 = OpConstantComposite %237 %237 %237 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %241 = OpConstantComposite %237 %237 %237 %237 
                                             %242 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                       f32_4 %156 = OpLoad %155 
                                                      OpStore %154 %156 
                                Private f32* %157 = OpAccessChain %9 %83 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %83 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %45 %120 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %9 %120 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %9 %120 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                Private f32* %168 = OpAccessChain %45 %120 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFNegate %169 
                                         f32 %171 = OpFAdd %167 %170 
                                Private f32* %172 = OpAccessChain %45 %120 
                                                      OpStore %172 %171 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %174 1 2 2 0 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 2 2 
                                       f32_4 %178 = OpFMul %175 %177 
                                                      OpStore %173 %178 
                              Uniform f32_4* %181 = OpAccessChain %21 %47 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpLoad %173 
                                         f32 %184 = OpDot %182 %183 
                                Private f32* %185 = OpAccessChain %180 %120 
                                                      OpStore %185 %184 
                              Uniform f32_4* %187 = OpAccessChain %21 %186 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %173 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %180 %83 
                                                      OpStore %191 %190 
                              Uniform f32_4* %193 = OpAccessChain %21 %192 
                                       f32_4 %194 = OpLoad %193 
                                       f32_4 %195 = OpLoad %173 
                                         f32 %196 = OpDot %194 %195 
                                Private f32* %197 = OpAccessChain %180 %134 
                                                      OpStore %197 %196 
                              Uniform f32_4* %199 = OpAccessChain %21 %198 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_4 %202 = OpLoad %45 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 0 0 
                                       f32_3 %204 = OpFMul %201 %203 
                                       f32_3 %205 = OpLoad %180 
                                       f32_3 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %45 %208 
                                Private f32* %211 = OpAccessChain %9 %210 
                                                      OpStore %211 %209 
                              Uniform f32_4* %212 = OpAccessChain %21 %29 
                                       f32_4 %213 = OpLoad %212 
                                       f32_4 %214 = OpLoad %9 
                                         f32 %215 = OpDot %213 %214 
                                Private f32* %216 = OpAccessChain %173 %120 
                                                      OpStore %216 %215 
                              Uniform f32_4* %217 = OpAccessChain %21 %24 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %9 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %173 %83 
                                                      OpStore %221 %220 
                              Uniform f32_4* %222 = OpAccessChain %21 %37 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %9 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %173 %134 
                                                      OpStore %226 %225 
                                       f32_4 %227 = OpLoad %45 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_4 %229 = OpLoad %173 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %239 = OpExtInst %1 40 %236 %238 
                                                      OpStore vs_TEXCOORD3 %239 
                                                      OpStore vs_TEXCOORD5 %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFNegate %244 
                                 Output f32* %246 = OpAccessChain %87 %29 %83 
                                                      OpStore %246 %245 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %47 %59 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %47 Location 47 
                                             OpDecorate vs_TEXCOORD3 Location 59 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %46 = OpTypePointer Input %13 
                        Input f32_4* %47 = OpVariable Input 
                      Private f32_3* %51 = OpVariable Private 
                                 i32 %53 = OpConstant 1 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %62 = OpTypePointer Output %13 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %45 = OpLoad %28 
                               f32_4 %48 = OpLoad %47 
                               f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                               f32_3 %50 = OpFMul %45 %49 
                                             OpStore %28 %50 
                               f32_3 %52 = OpLoad %28 
                      Uniform f32_4* %54 = OpAccessChain %16 %53 
                               f32_4 %55 = OpLoad %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                               f32_3 %57 = OpFMul %52 %56 
                                             OpStore %51 %57 
                               f32_3 %58 = OpLoad %28 
                               f32_3 %60 = OpLoad vs_TEXCOORD3 
                               f32_3 %61 = OpFMul %58 %60 
                                             OpStore %28 %61 
                               f32_3 %64 = OpLoad %51 
                                 f32 %65 = OpLoad %8 
                               f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                               f32_3 %67 = OpFMul %64 %66 
                               f32_3 %68 = OpLoad %28 
                               f32_3 %69 = OpFAdd %67 %68 
                               f32_4 %70 = OpLoad %63 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %63 %71 
                         Output f32* %76 = OpAccessChain %63 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 186
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %148 %149 %165 %177 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate vs_TEXCOORD1 Location 142 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate vs_TEXCOORD5 Location 165 
                                                      OpDecorate vs_TEXCOORD6 Location 177 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %148 = OpVariable Output 
                                Input f32_4* %149 = OpVariable Input 
                                             %153 = OpTypePointer Uniform %6 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore vs_TEXCOORD0 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                       f32_4 %150 = OpLoad %149 
                                                      OpStore %148 %150 
                                Private f32* %151 = OpAccessChain %9 %88 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %21 %28 %118 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %152 %155 
                                Private f32* %157 = OpAccessChain %9 %88 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %44 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD5 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %169 
                                       f32_4 %170 = OpLoad %44 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %44 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD5 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %176 
                                                      OpStore vs_TEXCOORD6 %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFNegate %182 
                                 Output f32* %184 = OpAccessChain %92 %28 %88 
                                                      OpStore %184 %183 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 181
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %154 %162 %171 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD1 Location 162 
                                                      OpDecorate %171 Location 171 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %170 = OpTypePointer Output %13 
                               Output f32_4* %171 = OpVariable Output 
                                             %178 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFMul %153 %156 
                                                      OpStore %46 %157 
                                       f32_3 %158 = OpLoad %9 
                                       f32_3 %159 = OpLoad %46 
                                       f32_3 %160 = OpFMul %158 %159 
                                                      OpStore %9 %160 
                                       f32_3 %163 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %164 = OpAccessChain %19 %53 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                                      OpStore %161 %167 
                                         f32 %168 = OpLoad %161 
                                         f32 %169 = OpExtInst %1 40 %168 %94 
                                                      OpStore %161 %169 
                                         f32 %172 = OpLoad %161 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpLoad %9 
                                       f32_3 %175 = OpFMul %173 %174 
                                       f32_4 %176 = OpLoad %171 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %171 %177 
                                 Output f32* %179 = OpAccessChain %171 %73 
                                                      OpStore %179 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 238
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %114 %152 %155 %156 %192 %217 %229 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD1 Location 152 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORD3 Location 192 
                                                      OpDecorate vs_TEXCOORD5 Location 217 
                                                      OpDecorate vs_TEXCOORD6 Location 229 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 8 
                                             %113 = OpTypePointer Input %51 
                                Input f32_3* %114 = OpVariable Input 
                                         i32 %116 = OpConstant 6 
                                         u32 %121 = OpConstant 0 
                                             %122 = OpTypePointer Private %6 
                                         u32 %135 = OpConstant 2 
                                Private f32* %137 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %155 = OpVariable Output 
                                Input f32_4* %156 = OpVariable Input 
                              Private f32_4* %171 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %193 = OpConstant 4 
                                             %205 = OpTypePointer Uniform %6 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_4 %231 = OpConstantComposite %230 %230 %230 %230 
                                             %232 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_3 %115 = OpLoad %114 
                              Uniform f32_4* %117 = OpAccessChain %21 %116 %29 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                         f32 %120 = OpDot %115 %119 
                                Private f32* %123 = OpAccessChain %45 %121 
                                                      OpStore %123 %120 
                                       f32_3 %124 = OpLoad %114 
                              Uniform f32_4* %125 = OpAccessChain %21 %116 %24 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %129 = OpAccessChain %45 %90 
                                                      OpStore %129 %128 
                                       f32_3 %130 = OpLoad %114 
                              Uniform f32_4* %131 = OpAccessChain %21 %116 %37 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %130 %133 
                                Private f32* %136 = OpAccessChain %45 %135 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %45 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_4 %140 = OpLoad %45 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                         f32 %142 = OpDot %139 %141 
                                                      OpStore %137 %142 
                                         f32 %143 = OpLoad %137 
                                         f32 %144 = OpExtInst %1 32 %143 
                                                      OpStore %137 %144 
                                         f32 %145 = OpLoad %137 
                                       f32_3 %146 = OpCompositeConstruct %145 %145 %145 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFMul %146 %148 
                                       f32_4 %150 = OpLoad %45 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %45 %151 
                                       f32_4 %153 = OpLoad %45 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                                      OpStore vs_TEXCOORD1 %154 
                                       f32_4 %157 = OpLoad %156 
                                                      OpStore %155 %157 
                                Private f32* %158 = OpAccessChain %45 %90 
                                         f32 %159 = OpLoad %158 
                                Private f32* %160 = OpAccessChain %45 %90 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                                      OpStore %137 %162 
                                Private f32* %163 = OpAccessChain %45 %121 
                                         f32 %164 = OpLoad %163 
                                Private f32* %165 = OpAccessChain %45 %121 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                         f32 %168 = OpLoad %137 
                                         f32 %169 = OpFNegate %168 
                                         f32 %170 = OpFAdd %167 %169 
                                                      OpStore %137 %170 
                                       f32_4 %172 = OpLoad %45 
                                       f32_4 %173 = OpVectorShuffle %172 %172 1 2 2 0 
                                       f32_4 %174 = OpLoad %45 
                                       f32_4 %175 = OpVectorShuffle %174 %174 0 1 2 2 
                                       f32_4 %176 = OpFMul %173 %175 
                                                      OpStore %171 %176 
                              Uniform f32_4* %177 = OpAccessChain %21 %24 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %171 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %45 %121 
                                                      OpStore %181 %180 
                              Uniform f32_4* %182 = OpAccessChain %21 %37 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %171 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %45 %90 
                                                      OpStore %186 %185 
                              Uniform f32_4* %187 = OpAccessChain %21 %47 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %171 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %45 %135 
                                                      OpStore %191 %190 
                              Uniform f32_4* %194 = OpAccessChain %21 %193 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                         f32 %197 = OpLoad %137 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_4 %200 = OpLoad %45 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore vs_TEXCOORD3 %202 
                                Private f32* %203 = OpAccessChain %9 %90 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %21 %29 %121 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %204 %207 
                                Private f32* %209 = OpAccessChain %9 %90 
                                                      OpStore %209 %208 
                                       f32_4 %210 = OpLoad %9 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 3 1 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %45 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 1 5 6 
                                                      OpStore %45 %216 
                                       f32_4 %218 = OpLoad %9 
                                       f32_2 %219 = OpVectorShuffle %218 %218 2 3 
                                       f32_4 %220 = OpLoad vs_TEXCOORD5 
                                       f32_4 %221 = OpVectorShuffle %220 %219 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %221 
                                       f32_4 %222 = OpLoad %45 
                                       f32_2 %223 = OpVectorShuffle %222 %222 2 2 
                                       f32_4 %224 = OpLoad %45 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 3 
                                       f32_2 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad vs_TEXCOORD5 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %228 
                                                      OpStore vs_TEXCOORD6 %231 
                                 Output f32* %233 = OpAccessChain %94 %29 %90 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                 Output f32* %236 = OpAccessChain %94 %29 %90 
                                                      OpStore %236 %235 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %164 %188 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD3 Location 188 
                                                      OpDecorate %212 Location 212 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 6 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 7 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 5 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                             %162 = OpTypePointer Private %13 
                              Private f32_4* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %175 = OpConstant 3 
                                         i32 %181 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %195 = OpConstantComposite %95 %95 %95 
                                Private f32* %203 = OpVariable Private 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %221 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                                       f32_4 %166 = OpLoad %163 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %163 %167 
                                Private f32* %168 = OpAccessChain %163 %73 
                                                      OpStore %168 %96 
                              Uniform f32_4* %170 = OpAccessChain %19 %58 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %163 
                                         f32 %173 = OpDot %171 %172 
                                Private f32* %174 = OpAccessChain %169 %31 
                                                      OpStore %174 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %163 
                                         f32 %179 = OpDot %177 %178 
                                Private f32* %180 = OpAccessChain %169 %56 
                                                      OpStore %180 %179 
                              Uniform f32_4* %182 = OpAccessChain %19 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %163 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %169 %48 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %169 
                                       f32_3 %189 = OpLoad vs_TEXCOORD3 
                                       f32_3 %190 = OpFAdd %187 %189 
                                       f32_4 %191 = OpLoad %163 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %163 %192 
                                       f32_4 %193 = OpLoad %163 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %196 = OpExtInst %1 40 %194 %195 
                                       f32_4 %197 = OpLoad %163 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %163 %198 
                                       f32_3 %199 = OpLoad %46 
                                       f32_4 %200 = OpLoad %163 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %46 %202 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %19 %53 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 40 %209 %95 
                                                      OpStore %203 %210 
                                       f32_3 %213 = OpLoad %9 
                                         f32 %214 = OpLoad %203 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_3 %217 = OpLoad %46 
                                       f32_3 %218 = OpFAdd %216 %217 
                                       f32_4 %219 = OpLoad %212 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %212 %220 
                                 Output f32* %222 = OpAccessChain %212 %73 
                                                      OpStore %222 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %147 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate vs_TEXCOORD5 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_4 %151 = OpConstantComposite %150 %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                       f32_4 %148 = OpLoad %147 
                                                      OpStore %146 %148 
                                                      OpStore vs_TEXCOORD5 %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %85 %23 %81 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %58 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %57 = OpTypePointer Output %24 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %66 = OpTypeInt 32 0 
                                 u32 %67 = OpConstant 3 
                                     %68 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %59 = OpLoad %45 
                               f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpFMul %60 %61 
                               f32_4 %63 = OpLoad %58 
                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                             OpStore %58 %64 
                         Output f32* %69 = OpAccessChain %58 %67 
                                             OpStore %69 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 375
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %90 %102 %103 %116 %155 %158 %161 %162 %362 %368 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %88 0 BuiltIn 88 
                                                      OpMemberDecorate %88 1 BuiltIn 88 
                                                      OpMemberDecorate %88 2 BuiltIn 88 
                                                      OpDecorate %88 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %103 Location 103 
                                                      OpDecorate %116 Location 116 
                                                      OpDecorate vs_TEXCOORD1 Location 155 
                                                      OpDecorate vs_TEXCOORD2 Location 158 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate vs_TEXCOORD3 Location 362 
                                                      OpDecorate vs_TEXCOORD5 Location 368 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 12 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 14 
                                          u32 %86 = OpConstant 1 
                                              %87 = OpTypeArray %6 %86 
                                              %88 = OpTypeStruct %7 %6 %87 
                                              %89 = OpTypePointer Output %88 
         Output struct {f32_4; f32; f32[1];}* %90 = OpVariable Output 
                                              %98 = OpTypePointer Output %7 
                                             %100 = OpTypeVector %6 2 
                                             %101 = OpTypePointer Output %100 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %103 = OpVariable Input 
                                         i32 %106 = OpConstant 15 
                                             %115 = OpTypePointer Input %53 
                                Input f32_3* %116 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                         u32 %123 = OpConstant 0 
                                             %124 = OpTypePointer Private %6 
                                         u32 %137 = OpConstant 2 
                                Private f32* %139 = OpVariable Private 
                                             %154 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %161 = OpVariable Output 
                                Input f32_4* %162 = OpVariable Input 
                              Private f32_4* %182 = OpVariable Private 
                                         i32 %183 = OpConstant 8 
                                         i32 %189 = OpConstant 9 
                                         i32 %195 = OpConstant 10 
                                         i32 %201 = OpConstant 11 
                                         f32 %213 = OpConstant 3.674022E-40 
                                         u32 %214 = OpConstant 3 
                                         i32 %216 = OpConstant 5 
                                         i32 %222 = OpConstant 6 
                                         i32 %228 = OpConstant 7 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %244 = OpConstantComposite %243 %243 %243 
                              Private f32_4* %254 = OpVariable Private 
                              Private f32_4* %262 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                       f32_4 %299 = OpConstantComposite %298 %298 %298 %298 
                                       f32_4 %307 = OpConstantComposite %213 %213 %213 %213 
                                       f32_4 %315 = OpConstantComposite %243 %243 %243 %243 
                                         i32 %322 = OpConstant 4 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %369 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %91 = OpAccessChain %23 %68 %49 
                                        f32_4 %92 = OpLoad %91 
                                        f32_4 %93 = OpLoad %47 
                                        f32_4 %94 = OpVectorShuffle %93 %93 3 3 3 3 
                                        f32_4 %95 = OpFMul %92 %94 
                                        f32_4 %96 = OpLoad %65 
                                        f32_4 %97 = OpFAdd %95 %96 
                                Output f32_4* %99 = OpAccessChain %90 %31 
                                                      OpStore %99 %97 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              Uniform f32_4* %107 = OpAccessChain %23 %106 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %105 %109 
                              Uniform f32_4* %111 = OpAccessChain %23 %106 
                                       f32_4 %112 = OpLoad %111 
                                       f32_2 %113 = OpVectorShuffle %112 %112 2 3 
                                       f32_2 %114 = OpFAdd %110 %113 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_3 %117 = OpLoad %116 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 %31 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                         f32 %122 = OpDot %117 %121 
                                Private f32* %125 = OpAccessChain %47 %123 
                                                      OpStore %125 %122 
                                       f32_3 %126 = OpLoad %116 
                              Uniform f32_4* %127 = OpAccessChain %23 %118 %26 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                         f32 %130 = OpDot %126 %129 
                                Private f32* %131 = OpAccessChain %47 %86 
                                                      OpStore %131 %130 
                                       f32_3 %132 = OpLoad %116 
                              Uniform f32_4* %133 = OpAccessChain %23 %118 %39 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %132 %135 
                                Private f32* %138 = OpAccessChain %47 %137 
                                                      OpStore %138 %136 
                                       f32_4 %140 = OpLoad %47 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_4 %142 = OpLoad %47 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %141 %143 
                                                      OpStore %139 %144 
                                         f32 %145 = OpLoad %139 
                                         f32 %146 = OpExtInst %1 32 %145 
                                                      OpStore %139 %146 
                                         f32 %147 = OpLoad %139 
                                       f32_3 %148 = OpCompositeConstruct %147 %147 %147 
                                       f32_4 %149 = OpLoad %47 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFMul %148 %150 
                                       f32_4 %152 = OpLoad %47 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                      OpStore %47 %153 
                                       f32_4 %156 = OpLoad %47 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                                      OpStore vs_TEXCOORD1 %157 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                                      OpStore vs_TEXCOORD2 %160 
                                       f32_4 %163 = OpLoad %162 
                                                      OpStore %161 %163 
                                Private f32* %164 = OpAccessChain %47 %86 
                                         f32 %165 = OpLoad %164 
                                Private f32* %166 = OpAccessChain %47 %86 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                                      OpStore %139 %168 
                                Private f32* %169 = OpAccessChain %47 %123 
                                         f32 %170 = OpLoad %169 
                                Private f32* %171 = OpAccessChain %47 %123 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFMul %170 %172 
                                         f32 %174 = OpLoad %139 
                                         f32 %175 = OpFNegate %174 
                                         f32 %176 = OpFAdd %173 %175 
                                                      OpStore %139 %176 
                                       f32_4 %177 = OpLoad %47 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %47 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %65 %181 
                              Uniform f32_4* %184 = OpAccessChain %23 %183 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %65 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %182 %123 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %23 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %65 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %182 %86 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %23 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %65 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %182 %137 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %23 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                         f32 %205 = OpLoad %139 
                                       f32_3 %206 = OpCompositeConstruct %205 %205 %205 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %182 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %65 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %65 %212 
                                Private f32* %215 = OpAccessChain %47 %214 
                                                      OpStore %215 %213 
                              Uniform f32_4* %217 = OpAccessChain %23 %216 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %47 
                                         f32 %220 = OpDot %218 %219 
                                Private f32* %221 = OpAccessChain %182 %123 
                                                      OpStore %221 %220 
                              Uniform f32_4* %223 = OpAccessChain %23 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpLoad %47 
                                         f32 %226 = OpDot %224 %225 
                                Private f32* %227 = OpAccessChain %182 %86 
                                                      OpStore %227 %226 
                              Uniform f32_4* %229 = OpAccessChain %23 %228 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %47 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %182 %137 
                                                      OpStore %233 %232 
                                       f32_4 %234 = OpLoad %65 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_4 %236 = OpLoad %182 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %65 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %65 %240 
                                       f32_4 %241 = OpLoad %65 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %245 = OpExtInst %1 40 %242 %244 
                                       f32_4 %246 = OpLoad %65 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %65 %247 
                                       f32_4 %248 = OpLoad %9 
                                       f32_4 %249 = OpVectorShuffle %248 %248 1 1 1 1 
                                       f32_4 %250 = OpFNegate %249 
                              Uniform f32_4* %251 = OpAccessChain %23 %26 
                                       f32_4 %252 = OpLoad %251 
                                       f32_4 %253 = OpFAdd %250 %252 
                                                      OpStore %182 %253 
                                       f32_4 %255 = OpLoad %47 
                                       f32_4 %256 = OpVectorShuffle %255 %255 1 1 1 1 
                                       f32_4 %257 = OpLoad %182 
                                       f32_4 %258 = OpFMul %256 %257 
                                                      OpStore %254 %258 
                                       f32_4 %259 = OpLoad %182 
                                       f32_4 %260 = OpLoad %182 
                                       f32_4 %261 = OpFMul %259 %260 
                                                      OpStore %182 %261 
                                       f32_4 %263 = OpLoad %9 
                                       f32_4 %264 = OpVectorShuffle %263 %263 0 0 0 0 
                                       f32_4 %265 = OpFNegate %264 
                              Uniform f32_4* %266 = OpAccessChain %23 %31 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpFAdd %265 %267 
                                                      OpStore %262 %268 
                                       f32_4 %269 = OpLoad %9 
                                       f32_4 %270 = OpVectorShuffle %269 %269 2 2 2 2 
                                       f32_4 %271 = OpFNegate %270 
                              Uniform f32_4* %272 = OpAccessChain %23 %39 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpFAdd %271 %273 
                                                      OpStore %9 %274 
                                       f32_4 %275 = OpLoad %262 
                                       f32_4 %276 = OpLoad %47 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 0 0 
                                       f32_4 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %254 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %254 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpLoad %47 
                                       f32_4 %283 = OpVectorShuffle %282 %282 2 2 2 2 
                                       f32_4 %284 = OpFMul %281 %283 
                                       f32_4 %285 = OpLoad %254 
                                       f32_4 %286 = OpFAdd %284 %285 
                                                      OpStore %47 %286 
                                       f32_4 %287 = OpLoad %262 
                                       f32_4 %288 = OpLoad %262 
                                       f32_4 %289 = OpFMul %287 %288 
                                       f32_4 %290 = OpLoad %182 
                                       f32_4 %291 = OpFAdd %289 %290 
                                                      OpStore %182 %291 
                                       f32_4 %292 = OpLoad %9 
                                       f32_4 %293 = OpLoad %9 
                                       f32_4 %294 = OpFMul %292 %293 
                                       f32_4 %295 = OpLoad %182 
                                       f32_4 %296 = OpFAdd %294 %295 
                                                      OpStore %9 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_4 %300 = OpExtInst %1 40 %297 %299 
                                                      OpStore %9 %300 
                                       f32_4 %301 = OpLoad %9 
                                       f32_4 %302 = OpExtInst %1 32 %301 
                                                      OpStore %182 %302 
                                       f32_4 %303 = OpLoad %9 
                              Uniform f32_4* %304 = OpAccessChain %23 %49 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpFMul %303 %305 
                                       f32_4 %308 = OpFAdd %306 %307 
                                                      OpStore %9 %308 
                                       f32_4 %309 = OpLoad %9 
                                       f32_4 %310 = OpFDiv %307 %309 
                                                      OpStore %9 %310 
                                       f32_4 %311 = OpLoad %47 
                                       f32_4 %312 = OpLoad %182 
                                       f32_4 %313 = OpFMul %311 %312 
                                                      OpStore %47 %313 
                                       f32_4 %314 = OpLoad %47 
                                       f32_4 %316 = OpExtInst %1 40 %314 %315 
                                                      OpStore %47 %316 
                                       f32_4 %317 = OpLoad %9 
                                       f32_4 %318 = OpLoad %47 
                                       f32_4 %319 = OpFMul %317 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 1 1 1 
                              Uniform f32_4* %323 = OpAccessChain %23 %322 %26 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFMul %321 %325 
                                       f32_4 %327 = OpLoad %47 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %47 %328 
                              Uniform f32_4* %329 = OpAccessChain %23 %322 %31 
                                       f32_4 %330 = OpLoad %329 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                       f32_4 %332 = OpLoad %9 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 0 0 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %47 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %334 %336 
                                       f32_4 %338 = OpLoad %47 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %47 %339 
                              Uniform f32_4* %340 = OpAccessChain %23 %322 %39 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 2 2 2 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %47 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFAdd %345 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %9 %350 
                              Uniform f32_4* %351 = OpAccessChain %23 %322 %49 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 3 3 3 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %356 %358 
                                       f32_4 %360 = OpLoad %9 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %9 %361 
                                       f32_4 %363 = OpLoad %65 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %364 %366 
                                                      OpStore vs_TEXCOORD3 %367 
                                                      OpStore vs_TEXCOORD5 %315 
                                 Output f32* %370 = OpAccessChain %90 %31 %86 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFNegate %371 
                                 Output f32* %373 = OpAccessChain %90 %31 %86 
                                                      OpStore %373 %372 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %41 %47 %59 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpDecorate vs_TEXCOORD1 Location 11 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate vs_TEXCOORD0 Location 41 
                                             OpDecorate %47 Location 47 
                                             OpDecorate vs_TEXCOORD3 Location 59 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeVector %6 3 
                                     %10 = OpTypePointer Input %9 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     %13 = OpTypeVector %6 4 
                                     %14 = OpTypeStruct %13 %13 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %13 
                                 f32 %25 = OpConstant 3.674022E-40 
                                     %27 = OpTypePointer Private %9 
                      Private f32_3* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
                                     %39 = OpTypeVector %6 2 
                                     %40 = OpTypePointer Input %39 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %46 = OpTypePointer Input %13 
                        Input f32_4* %47 = OpVariable Input 
                      Private f32_3* %51 = OpVariable Private 
                                 i32 %53 = OpConstant 1 
               Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                     %62 = OpTypePointer Output %13 
                       Output f32_4* %63 = OpVariable Output 
                                 f32 %72 = OpConstant 3.674022E-40 
                                     %73 = OpTypeInt 32 0 
                                 u32 %74 = OpConstant 3 
                                     %75 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_3 %12 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                 f32 %23 = OpDot %12 %22 
                                             OpStore %8 %23 
                                 f32 %24 = OpLoad %8 
                                 f32 %26 = OpExtInst %1 40 %24 %25 
                                             OpStore %8 %26 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_2 %42 = OpLoad vs_TEXCOORD0 
                               f32_4 %43 = OpImageSampleImplicitLod %38 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %28 %44 
                               f32_3 %45 = OpLoad %28 
                               f32_4 %48 = OpLoad %47 
                               f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                               f32_3 %50 = OpFMul %45 %49 
                                             OpStore %28 %50 
                               f32_3 %52 = OpLoad %28 
                      Uniform f32_4* %54 = OpAccessChain %16 %53 
                               f32_4 %55 = OpLoad %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                               f32_3 %57 = OpFMul %52 %56 
                                             OpStore %51 %57 
                               f32_3 %58 = OpLoad %28 
                               f32_3 %60 = OpLoad vs_TEXCOORD3 
                               f32_3 %61 = OpFMul %58 %60 
                                             OpStore %28 %61 
                               f32_3 %64 = OpLoad %51 
                                 f32 %65 = OpLoad %8 
                               f32_3 %66 = OpCompositeConstruct %65 %65 %65 
                               f32_3 %67 = OpFMul %64 %66 
                               f32_3 %68 = OpLoad %28 
                               f32_3 %69 = OpFAdd %67 %68 
                               f32_4 %70 = OpLoad %63 
                               f32_4 %71 = OpVectorShuffle %70 %69 4 5 6 3 
                                             OpStore %63 %71 
                         Output f32* %76 = OpAccessChain %63 %74 
                                             OpStore %76 %72 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 186
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %98 %99 %112 %142 %148 %149 %165 %177 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 98 
                                                      OpDecorate %99 Location 99 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate vs_TEXCOORD1 Location 142 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate vs_TEXCOORD5 Location 165 
                                                      OpDecorate vs_TEXCOORD6 Location 177 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypeVector %6 2 
                                              %97 = OpTypePointer Output %96 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %99 = OpVariable Input 
                                         i32 %102 = OpConstant 4 
                                             %111 = OpTypePointer Input %50 
                                Input f32_3* %112 = OpVariable Input 
                                         u32 %118 = OpConstant 0 
                                             %119 = OpTypePointer Private %6 
                                         u32 %132 = OpConstant 2 
                                Private f32* %134 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %148 = OpVariable Output 
                                Input f32_4* %149 = OpVariable Input 
                                             %153 = OpTypePointer Uniform %6 
                                         f32 %160 = OpConstant 3.674022E-40 
                                       f32_3 %161 = OpConstantComposite %160 %160 %160 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                              Uniform f32_4* %103 = OpAccessChain %21 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                                       f32_2 %106 = OpFMul %101 %105 
                              Uniform f32_4* %107 = OpAccessChain %21 %102 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 3 
                                       f32_2 %110 = OpFAdd %106 %109 
                                                      OpStore vs_TEXCOORD0 %110 
                                       f32_3 %113 = OpLoad %112 
                              Uniform f32_4* %114 = OpAccessChain %21 %36 %28 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %120 = OpAccessChain %44 %118 
                                                      OpStore %120 %117 
                                       f32_3 %121 = OpLoad %112 
                              Uniform f32_4* %122 = OpAccessChain %21 %36 %23 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                         f32 %125 = OpDot %121 %124 
                                Private f32* %126 = OpAccessChain %44 %88 
                                                      OpStore %126 %125 
                                       f32_3 %127 = OpLoad %112 
                              Uniform f32_4* %128 = OpAccessChain %21 %36 %36 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %133 = OpAccessChain %44 %132 
                                                      OpStore %133 %131 
                                       f32_4 %135 = OpLoad %44 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %44 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                                      OpStore %134 %139 
                                         f32 %140 = OpLoad %134 
                                         f32 %141 = OpExtInst %1 32 %140 
                                                      OpStore %134 %141 
                                         f32 %143 = OpLoad %134 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_4 %145 = OpLoad %44 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFMul %144 %146 
                                                      OpStore vs_TEXCOORD1 %147 
                                       f32_4 %150 = OpLoad %149 
                                                      OpStore %148 %150 
                                Private f32* %151 = OpAccessChain %9 %88 
                                         f32 %152 = OpLoad %151 
                                Uniform f32* %154 = OpAccessChain %21 %28 %118 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %152 %155 
                                Private f32* %157 = OpAccessChain %9 %88 
                                                      OpStore %157 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 3 1 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %44 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 6 
                                                      OpStore %44 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD5 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %169 
                                       f32_4 %170 = OpLoad %44 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %44 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD5 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %176 
                                                      OpStore vs_TEXCOORD6 %179 
                                 Output f32* %181 = OpAccessChain %92 %28 %88 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFNegate %182 
                                 Output f32* %184 = OpAccessChain %92 %28 %88 
                                                      OpStore %184 %183 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 181
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %154 %162 %171 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD1 Location 162 
                                                      OpDecorate %171 Location 171 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %170 = OpTypePointer Output %13 
                               Output f32_4* %171 = OpVariable Output 
                                             %178 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFMul %153 %156 
                                                      OpStore %46 %157 
                                       f32_3 %158 = OpLoad %9 
                                       f32_3 %159 = OpLoad %46 
                                       f32_3 %160 = OpFMul %158 %159 
                                                      OpStore %9 %160 
                                       f32_3 %163 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %164 = OpAccessChain %19 %53 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                                      OpStore %161 %167 
                                         f32 %168 = OpLoad %161 
                                         f32 %169 = OpExtInst %1 40 %168 %94 
                                                      OpStore %161 %169 
                                         f32 %172 = OpLoad %161 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpLoad %9 
                                       f32_3 %175 = OpFMul %173 %174 
                                       f32_4 %176 = OpLoad %171 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %171 %177 
                                 Output f32* %179 = OpAccessChain %171 %73 
                                                      OpStore %179 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 375
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %103 %104 %117 %156 %159 %162 %163 %331 %356 %368 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %104 Location 104 
                                                      OpDecorate %117 Location 117 
                                                      OpDecorate vs_TEXCOORD1 Location 156 
                                                      OpDecorate vs_TEXCOORD2 Location 159 
                                                      OpDecorate %162 Location 162 
                                                      OpDecorate %163 Location 163 
                                                      OpDecorate vs_TEXCOORD3 Location 331 
                                                      OpDecorate vs_TEXCOORD5 Location 356 
                                                      OpDecorate vs_TEXCOORD6 Location 368 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %104 = OpVariable Input 
                                         i32 %107 = OpConstant 13 
                                             %116 = OpTypePointer Input %53 
                                Input f32_3* %117 = OpVariable Input 
                                         i32 %119 = OpConstant 11 
                                         u32 %124 = OpConstant 0 
                                             %125 = OpTypePointer Private %6 
                                         u32 %138 = OpConstant 2 
                                Private f32* %140 = OpVariable Private 
                                             %155 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %162 = OpVariable Output 
                                Input f32_4* %163 = OpVariable Input 
                              Private f32_4* %165 = OpVariable Private 
                              Private f32_4* %172 = OpVariable Private 
                              Private f32_4* %185 = OpVariable Private 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_4 %217 = OpConstantComposite %216 %216 %216 %216 
                                         i32 %222 = OpConstant 4 
                                         f32 %226 = OpConstant 3.674022E-40 
                                       f32_4 %227 = OpConstantComposite %226 %226 %226 %226 
                                         f32 %235 = OpConstant 3.674022E-40 
                                       f32_4 %236 = OpConstantComposite %235 %235 %235 %235 
                                         i32 %243 = OpConstant 5 
                                         i32 %301 = OpConstant 6 
                                         i32 %307 = OpConstant 7 
                                         i32 %313 = OpConstant 8 
                                         i32 %319 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %339 = OpTypePointer Uniform %6 
                                         f32 %346 = OpConstant 3.674022E-40 
                                         u32 %348 = OpConstant 3 
                                       f32_2 %352 = OpConstantComposite %346 %346 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %369 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                              Uniform f32_4* %108 = OpAccessChain %23 %107 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_2 %111 = OpFMul %106 %110 
                              Uniform f32_4* %112 = OpAccessChain %23 %107 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_2 %115 = OpFAdd %111 %114 
                                                      OpStore vs_TEXCOORD0 %115 
                                       f32_3 %118 = OpLoad %117 
                              Uniform f32_4* %120 = OpAccessChain %23 %119 %31 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %118 %122 
                                Private f32* %126 = OpAccessChain %65 %124 
                                                      OpStore %126 %123 
                                       f32_3 %127 = OpLoad %117 
                              Uniform f32_4* %128 = OpAccessChain %23 %119 %26 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %127 %130 
                                Private f32* %132 = OpAccessChain %65 %93 
                                                      OpStore %132 %131 
                                       f32_3 %133 = OpLoad %117 
                              Uniform f32_4* %134 = OpAccessChain %23 %119 %39 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                Private f32* %139 = OpAccessChain %65 %138 
                                                      OpStore %139 %137 
                                       f32_4 %141 = OpLoad %65 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %65 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                         f32 %145 = OpDot %142 %144 
                                                      OpStore %140 %145 
                                         f32 %146 = OpLoad %140 
                                         f32 %147 = OpExtInst %1 32 %146 
                                                      OpStore %140 %147 
                                         f32 %148 = OpLoad %140 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %149 %151 
                                       f32_4 %153 = OpLoad %65 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %65 %154 
                                       f32_4 %157 = OpLoad %65 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                                      OpStore vs_TEXCOORD1 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                                      OpStore vs_TEXCOORD2 %161 
                                       f32_4 %164 = OpLoad %163 
                                                      OpStore %162 %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_4 %167 = OpVectorShuffle %166 %166 0 0 0 0 
                                       f32_4 %168 = OpFNegate %167 
                              Uniform f32_4* %169 = OpAccessChain %23 %26 
                                       f32_4 %170 = OpLoad %169 
                                       f32_4 %171 = OpFAdd %168 %170 
                                                      OpStore %165 %171 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 1 1 1 1 
                                       f32_4 %175 = OpFNegate %174 
                              Uniform f32_4* %176 = OpAccessChain %23 %39 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpFAdd %175 %177 
                                                      OpStore %172 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 2 2 2 2 
                                       f32_4 %181 = OpFNegate %180 
                              Uniform f32_4* %182 = OpAccessChain %23 %49 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpFAdd %181 %183 
                                                      OpStore %9 %184 
                                       f32_4 %186 = OpLoad %65 
                                       f32_4 %187 = OpVectorShuffle %186 %186 1 1 1 1 
                                       f32_4 %188 = OpLoad %172 
                                       f32_4 %189 = OpFMul %187 %188 
                                                      OpStore %185 %189 
                                       f32_4 %190 = OpLoad %172 
                                       f32_4 %191 = OpLoad %172 
                                       f32_4 %192 = OpFMul %190 %191 
                                                      OpStore %172 %192 
                                       f32_4 %193 = OpLoad %165 
                                       f32_4 %194 = OpLoad %165 
                                       f32_4 %195 = OpFMul %193 %194 
                                       f32_4 %196 = OpLoad %172 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %172 %197 
                                       f32_4 %198 = OpLoad %165 
                                       f32_4 %199 = OpLoad %65 
                                       f32_4 %200 = OpVectorShuffle %199 %199 0 0 0 0 
                                       f32_4 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %185 
                                       f32_4 %203 = OpFAdd %201 %202 
                                                      OpStore %165 %203 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpLoad %65 
                                       f32_4 %206 = OpVectorShuffle %205 %205 2 2 2 2 
                                       f32_4 %207 = OpFMul %204 %206 
                                       f32_4 %208 = OpLoad %165 
                                       f32_4 %209 = OpFAdd %207 %208 
                                                      OpStore %165 %209 
                                       f32_4 %210 = OpLoad %9 
                                       f32_4 %211 = OpLoad %9 
                                       f32_4 %212 = OpFMul %210 %211 
                                       f32_4 %213 = OpLoad %172 
                                       f32_4 %214 = OpFAdd %212 %213 
                                                      OpStore %9 %214 
                                       f32_4 %215 = OpLoad %9 
                                       f32_4 %218 = OpExtInst %1 40 %215 %217 
                                                      OpStore %9 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpExtInst %1 32 %219 
                                                      OpStore %172 %220 
                                       f32_4 %221 = OpLoad %9 
                              Uniform f32_4* %223 = OpAccessChain %23 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_4 %225 = OpFMul %221 %224 
                                       f32_4 %228 = OpFAdd %225 %227 
                                                      OpStore %9 %228 
                                       f32_4 %229 = OpLoad %9 
                                       f32_4 %230 = OpFDiv %227 %229 
                                                      OpStore %9 %230 
                                       f32_4 %231 = OpLoad %165 
                                       f32_4 %232 = OpLoad %172 
                                       f32_4 %233 = OpFMul %231 %232 
                                                      OpStore %165 %233 
                                       f32_4 %234 = OpLoad %165 
                                       f32_4 %237 = OpExtInst %1 40 %234 %236 
                                                      OpStore %165 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_4 %239 = OpLoad %165 
                                       f32_4 %240 = OpFMul %238 %239 
                                                      OpStore %9 %240 
                                       f32_4 %241 = OpLoad %9 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 1 1 
                              Uniform f32_4* %244 = OpAccessChain %23 %243 %26 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %242 %246 
                                       f32_4 %248 = OpLoad %165 
                                       f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                      OpStore %165 %249 
                              Uniform f32_4* %250 = OpAccessChain %23 %243 %31 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_4 %253 = OpLoad %9 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_4 %256 = OpLoad %165 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFAdd %255 %257 
                                       f32_4 %259 = OpLoad %165 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %165 %260 
                              Uniform f32_4* %261 = OpAccessChain %23 %243 %39 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 2 2 2 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %165 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %9 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %9 %271 
                              Uniform f32_4* %272 = OpAccessChain %23 %243 %49 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %9 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %9 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %9 %282 
                                Private f32* %283 = OpAccessChain %65 %93 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %65 %93 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                                      OpStore %140 %287 
                                Private f32* %288 = OpAccessChain %65 %124 
                                         f32 %289 = OpLoad %288 
                                Private f32* %290 = OpAccessChain %65 %124 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                         f32 %293 = OpLoad %140 
                                         f32 %294 = OpFNegate %293 
                                         f32 %295 = OpFAdd %292 %294 
                                                      OpStore %140 %295 
                                       f32_4 %296 = OpLoad %65 
                                       f32_4 %297 = OpVectorShuffle %296 %296 1 2 2 0 
                                       f32_4 %298 = OpLoad %65 
                                       f32_4 %299 = OpVectorShuffle %298 %298 0 1 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                                      OpStore %65 %300 
                              Uniform f32_4* %302 = OpAccessChain %23 %301 
                                       f32_4 %303 = OpLoad %302 
                                       f32_4 %304 = OpLoad %65 
                                         f32 %305 = OpDot %303 %304 
                                Private f32* %306 = OpAccessChain %165 %124 
                                                      OpStore %306 %305 
                              Uniform f32_4* %308 = OpAccessChain %23 %307 
                                       f32_4 %309 = OpLoad %308 
                                       f32_4 %310 = OpLoad %65 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %165 %93 
                                                      OpStore %312 %311 
                              Uniform f32_4* %314 = OpAccessChain %23 %313 
                                       f32_4 %315 = OpLoad %314 
                                       f32_4 %316 = OpLoad %65 
                                         f32 %317 = OpDot %315 %316 
                                Private f32* %318 = OpAccessChain %165 %138 
                                                      OpStore %318 %317 
                              Uniform f32_4* %320 = OpAccessChain %23 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                         f32 %323 = OpLoad %140 
                                       f32_3 %324 = OpCompositeConstruct %323 %323 %323 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_4 %326 = OpLoad %165 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFAdd %325 %327 
                                       f32_4 %329 = OpLoad %65 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %65 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %65 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                                      OpStore vs_TEXCOORD3 %336 
                                Private f32* %337 = OpAccessChain %47 %93 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %23 %31 %124 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                Private f32* %343 = OpAccessChain %9 %124 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %9 %124 
                                         f32 %345 = OpLoad %344 
                                         f32 %347 = OpFMul %345 %346 
                                Private f32* %349 = OpAccessChain %9 %348 
                                                      OpStore %349 %347 
                                       f32_4 %350 = OpLoad %47 
                                       f32_2 %351 = OpVectorShuffle %350 %350 0 3 
                                       f32_2 %353 = OpFMul %351 %352 
                                       f32_4 %354 = OpLoad %9 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 1 5 3 
                                                      OpStore %9 %355 
                                       f32_4 %357 = OpLoad %47 
                                       f32_2 %358 = OpVectorShuffle %357 %357 2 3 
                                       f32_4 %359 = OpLoad vs_TEXCOORD5 
                                       f32_4 %360 = OpVectorShuffle %359 %358 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %360 
                                       f32_4 %361 = OpLoad %9 
                                       f32_2 %362 = OpVectorShuffle %361 %361 2 2 
                                       f32_4 %363 = OpLoad %9 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_2 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad vs_TEXCOORD5 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %367 
                                                      OpStore vs_TEXCOORD6 %236 
                                 Output f32* %370 = OpAccessChain %97 %31 %93 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFNegate %371 
                                 Output f32* %373 = OpAccessChain %97 %31 %93 
                                                      OpStore %373 %372 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 224
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %164 %188 %212 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD3 Location 188 
                                                      OpDecorate %212 Location 212 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 6 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 7 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 5 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                             %162 = OpTypePointer Private %13 
                              Private f32_4* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %175 = OpConstant 3 
                                         i32 %181 = OpConstant 4 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %195 = OpConstantComposite %95 %95 %95 
                                Private f32* %203 = OpVariable Private 
                                             %211 = OpTypePointer Output %13 
                               Output f32_4* %212 = OpVariable Output 
                                             %221 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                                       f32_4 %166 = OpLoad %163 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %163 %167 
                                Private f32* %168 = OpAccessChain %163 %73 
                                                      OpStore %168 %96 
                              Uniform f32_4* %170 = OpAccessChain %19 %58 
                                       f32_4 %171 = OpLoad %170 
                                       f32_4 %172 = OpLoad %163 
                                         f32 %173 = OpDot %171 %172 
                                Private f32* %174 = OpAccessChain %169 %31 
                                                      OpStore %174 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpLoad %163 
                                         f32 %179 = OpDot %177 %178 
                                Private f32* %180 = OpAccessChain %169 %56 
                                                      OpStore %180 %179 
                              Uniform f32_4* %182 = OpAccessChain %19 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpLoad %163 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %169 %48 
                                                      OpStore %186 %185 
                                       f32_3 %187 = OpLoad %169 
                                       f32_3 %189 = OpLoad vs_TEXCOORD3 
                                       f32_3 %190 = OpFAdd %187 %189 
                                       f32_4 %191 = OpLoad %163 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %163 %192 
                                       f32_4 %193 = OpLoad %163 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %196 = OpExtInst %1 40 %194 %195 
                                       f32_4 %197 = OpLoad %163 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %163 %198 
                                       f32_3 %199 = OpLoad %46 
                                       f32_4 %200 = OpLoad %163 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %46 %202 
                                       f32_3 %204 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %205 = OpAccessChain %19 %53 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 40 %209 %95 
                                                      OpStore %203 %210 
                                       f32_3 %213 = OpLoad %9 
                                         f32 %214 = OpLoad %203 
                                       f32_3 %215 = OpCompositeConstruct %214 %214 %214 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_3 %217 = OpLoad %46 
                                       f32_3 %218 = OpFAdd %216 %217 
                                       f32_4 %219 = OpLoad %212 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %212 %220 
                                 Output f32* %222 = OpAccessChain %212 %73 
                                                      OpStore %222 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 200
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %184 %186 %189 %191 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate vs_TEXCOORD5 Location 186 
                                                      OpDecorate vs_TEXCOORD6 Location 189 
                                                      OpDecorate %191 Flat 
                                                      OpDecorate %191 Location 191 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_4 %188 = OpConstantComposite %187 %187 %187 %187 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %190 = OpTypePointer Output %31 
                                 Output u32* %191 = OpVariable Output 
                                             %194 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                                      OpStore vs_TEXCOORD5 %188 
                                                      OpStore vs_TEXCOORD6 %188 
                                         i32 %192 = OpLoad %10 
                                         u32 %193 = OpBitcast %192 
                                                      OpStore %191 %193 
                                 Output f32* %195 = OpAccessChain %116 %15 %112 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                 Output f32* %198 = OpAccessChain %116 %15 %112 
                                                      OpStore %198 %197 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %58 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %57 = OpTypePointer Output %24 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %66 = OpTypeInt 32 0 
                                 u32 %67 = OpConstant 3 
                                     %68 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %59 = OpLoad %45 
                               f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpFMul %60 %61 
                               f32_4 %63 = OpLoad %58 
                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                             OpStore %58 %64 
                         Output f32* %69 = OpAccessChain %58 %67 
                                             OpStore %69 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 271
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %192 %193 %245 %257 %260 %262 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 Location 193 
                                                      OpMemberDecorate %217 0 Offset 217 
                                                      OpMemberDecorate %217 1 Offset 217 
                                                      OpMemberDecorate %217 2 Offset 217 
                                                      OpMemberDecorate %217 3 Offset 217 
                                                      OpMemberDecorate %217 4 Offset 217 
                                                      OpMemberDecorate %217 5 Offset 217 
                                                      OpMemberDecorate %217 6 Offset 217 
                                                      OpDecorate %218 ArrayStride 218 
                                                      OpMemberDecorate %219 0 Offset 219 
                                                      OpDecorate %219 Block 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate vs_TEXCOORD3 Location 245 
                                                      OpDecorate vs_TEXCOORD5 Location 257 
                                                      OpDecorate vs_TEXCOORD6 Location 260 
                                                      OpDecorate %262 Flat 
                                                      OpDecorate %262 Location 262 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                              Private f32_3* %216 = OpVariable Private 
                                             %217 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %218 = OpTypeArray %217 %40 
                                             %219 = OpTypeStruct %218 
                                             %220 = OpTypePointer Uniform %219 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %221 = OpVariable Uniform 
                                         i32 %231 = OpConstant 4 
                                         i32 %239 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %248 = OpConstant 6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_4 %259 = OpConstantComposite %258 %258 %258 %258 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %261 = OpTypePointer Output %35 
                                 Output u32* %262 = OpVariable Output 
                                             %265 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                Private f32* %195 = OpAccessChain %174 %116 
                                         f32 %196 = OpLoad %195 
                                Private f32* %197 = OpAccessChain %174 %116 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFMul %196 %198 
                                Private f32* %200 = OpAccessChain %30 %153 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %174 %153 
                                         f32 %202 = OpLoad %201 
                                Private f32* %203 = OpAccessChain %174 %153 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %202 %204 
                                Private f32* %206 = OpAccessChain %30 %153 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFNegate %207 
                                         f32 %209 = OpFAdd %205 %208 
                                Private f32* %210 = OpAccessChain %30 %153 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %174 
                                       f32_4 %212 = OpVectorShuffle %211 %211 1 2 2 0 
                                       f32_3 %213 = OpLoad %174 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                                      OpStore %72 %215 
                                         i32 %222 = OpLoad %8 
                                         i32 %223 = OpSDiv %222 %25 
                              Uniform f32_4* %224 = OpAccessChain %221 %15 %223 %22 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpLoad %72 
                                         f32 %227 = OpDot %225 %226 
                                Private f32* %228 = OpAccessChain %216 %153 
                                                      OpStore %228 %227 
                                         i32 %229 = OpLoad %8 
                                         i32 %230 = OpSDiv %229 %25 
                              Uniform f32_4* %232 = OpAccessChain %221 %15 %230 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %72 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %216 %116 
                                                      OpStore %236 %235 
                                         i32 %237 = OpLoad %8 
                                         i32 %238 = OpSDiv %237 %25 
                              Uniform f32_4* %240 = OpAccessChain %221 %15 %238 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %72 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %216 %171 
                                                      OpStore %244 %243 
                                         i32 %246 = OpLoad %8 
                                         i32 %247 = OpSDiv %246 %25 
                              Uniform f32_4* %249 = OpAccessChain %221 %15 %247 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %30 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 0 0 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %216 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore vs_TEXCOORD3 %256 
                                                      OpStore vs_TEXCOORD5 %259 
                                                      OpStore vs_TEXCOORD6 %259 
                                         i32 %263 = OpLoad %10 
                                         u32 %264 = OpBitcast %263 
                                                      OpStore %262 %264 
                                 Output f32* %266 = OpAccessChain %120 %15 %116 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpFNegate %267 
                                 Output f32* %269 = OpAccessChain %120 %15 %116 
                                                      OpStore %269 %268 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 154
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %89 %113 %119 %141 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 89 
                                                      OpDecorate %103 DescriptorSet 103 
                                                      OpDecorate %103 Binding 103 
                                                      OpDecorate %107 DescriptorSet 107 
                                                      OpDecorate %107 Binding 107 
                                                      OpDecorate vs_TEXCOORD0 Location 113 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %141 Location 141 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 
                                              %76 = OpTypePointer Uniform %75 
              Uniform struct {f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %83 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %102 = OpTypePointer UniformConstant %101 
        UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                             %105 = OpTypeSampler 
                                             %106 = OpTypePointer UniformConstant %105 
                    UniformConstant sampler* %107 = OpVariable UniformConstant 
                                             %109 = OpTypeSampledImage %101 
                                             %111 = OpTypeVector %25 2 
                                             %112 = OpTypePointer Input %111 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %118 = OpTypePointer Input %26 
                                Input f32_4* %119 = OpVariable Input 
                                Private f32* %132 = OpVariable Private 
                                             %140 = OpTypePointer Output %26 
                               Output f32_4* %141 = OpVariable Output 
                                             %151 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %78 = OpAccessChain %77 %58 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                          i32 %81 = OpLoad %8 
                                          i32 %82 = OpSDiv %81 %23 
                               Uniform f32_4* %84 = OpAccessChain %46 %17 %82 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %80 %86 
                                                      OpStore %74 %87 
                                        f32_3 %88 = OpLoad %40 
                                        f32_3 %90 = OpLoad vs_TEXCOORD3 
                                        f32_3 %91 = OpFAdd %88 %90 
                                        f32_4 %92 = OpLoad %28 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %28 %93 
                                        f32_4 %94 = OpLoad %28 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                        f32_4 %99 = OpLoad %28 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %28 %100 
                         read_only Texture2D %104 = OpLoad %103 
                                     sampler %108 = OpLoad %107 
                  read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                                       f32_2 %114 = OpLoad vs_TEXCOORD0 
                                       f32_4 %115 = OpImageSampleImplicitLod %110 %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                                      OpStore %40 %116 
                                       f32_3 %117 = OpLoad %40 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %117 %121 
                                                      OpStore %40 %122 
                                       f32_4 %123 = OpLoad %28 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpLoad %40 
                                       f32_3 %126 = OpFMul %124 %125 
                                       f32_4 %127 = OpLoad %28 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %28 %128 
                                       f32_3 %129 = OpLoad %74 
                                       f32_3 %130 = OpLoad %40 
                                       f32_3 %131 = OpFMul %129 %130 
                                                      OpStore %74 %131 
                                       f32_3 %133 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %134 = OpAccessChain %77 %17 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 40 %138 %96 
                                                      OpStore %132 %139 
                                       f32_3 %142 = OpLoad %74 
                                         f32 %143 = OpLoad %132 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %28 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                 Output f32* %152 = OpAccessChain %141 %36 
                                                      OpStore %152 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 234
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %181 %187 %188 %209 %221 %225 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 181 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate vs_TEXCOORD5 Location 209 
                                                      OpDecorate vs_TEXCOORD6 Location 221 
                                                      OpDecorate %225 Flat 
                                                      OpDecorate %225 Location 225 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                             %141 = OpTypePointer Input %75 
                                Input f32_3* %142 = OpVariable Input 
                                         u32 %150 = OpConstant 0 
                                             %151 = OpTypePointer Private %23 
                                         u32 %168 = OpConstant 2 
                              Private f32_4* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %187 = OpVariable Output 
                                Input f32_4* %188 = OpVariable Input 
                                             %192 = OpTypePointer Uniform %23 
                                         f32 %199 = OpConstant 3.674022E-40 
                                         u32 %201 = OpConstant 3 
                                       f32_2 %205 = OpConstantComposite %199 %199 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_4 %223 = OpConstantComposite %222 %222 %222 %222 
                                             %224 = OpTypePointer Output %31 
                                 Output u32* %225 = OpVariable Output 
                                             %228 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %133 = OpAccessChain %94 %60 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %132 %135 
                              Uniform f32_4* %137 = OpAccessChain %94 %60 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD0 %140 
                                       f32_3 %143 = OpLoad %142 
                                         i32 %144 = OpLoad %8 
                                         i32 %145 = OpSDiv %144 %42 
                              Uniform f32_4* %146 = OpAccessChain %40 %15 %145 %44 %15 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                         f32 %149 = OpDot %143 %148 
                                Private f32* %152 = OpAccessChain %68 %150 
                                                      OpStore %152 %149 
                                       f32_3 %153 = OpLoad %142 
                                         i32 %154 = OpLoad %8 
                                         i32 %155 = OpSDiv %154 %42 
                              Uniform f32_4* %156 = OpAccessChain %40 %15 %155 %44 %44 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %160 = OpAccessChain %68 %119 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %142 
                                         i32 %162 = OpLoad %8 
                                         i32 %163 = OpSDiv %162 %42 
                              Uniform f32_4* %164 = OpAccessChain %40 %15 %163 %44 %60 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %169 = OpAccessChain %68 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %68 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %68 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                Private f32* %176 = OpAccessChain %170 %150 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %170 %150 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 32 %178 
                                Private f32* %180 = OpAccessChain %170 %150 
                                                      OpStore %180 %179 
                                       f32_4 %182 = OpLoad %170 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 0 0 
                                       f32_4 %184 = OpLoad %68 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                                      OpStore vs_TEXCOORD1 %186 
                                       f32_4 %189 = OpLoad %188 
                                                      OpStore %187 %189 
                                Private f32* %190 = OpAccessChain %26 %119 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %94 %15 %150 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Private f32* %196 = OpAccessChain %170 %150 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %170 %150 
                                         f32 %198 = OpLoad %197 
                                         f32 %200 = OpFMul %198 %199 
                                Private f32* %202 = OpAccessChain %170 %201 
                                                      OpStore %202 %200 
                                       f32_4 %203 = OpLoad %26 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 3 
                                       f32_2 %206 = OpFMul %204 %205 
                                       f32_4 %207 = OpLoad %170 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 1 5 3 
                                                      OpStore %170 %208 
                                       f32_4 %210 = OpLoad %26 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 3 
                                       f32_4 %212 = OpLoad vs_TEXCOORD5 
                                       f32_4 %213 = OpVectorShuffle %212 %211 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %213 
                                       f32_4 %214 = OpLoad %170 
                                       f32_2 %215 = OpVectorShuffle %214 %214 2 2 
                                       f32_4 %216 = OpLoad %170 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 3 
                                       f32_2 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad vs_TEXCOORD5 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %220 
                                                      OpStore vs_TEXCOORD6 %223 
                                         i32 %226 = OpLoad %10 
                                         u32 %227 = OpBitcast %226 
                                                      OpStore %225 %227 
                                 Output f32* %229 = OpAccessChain %123 %15 %119 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                 Output f32* %232 = OpAccessChain %123 %15 %119 
                                                      OpStore %232 %231 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 181
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %154 %162 %171 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD1 Location 162 
                                                      OpDecorate %171 Location 171 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %170 = OpTypePointer Output %13 
                               Output f32_4* %171 = OpVariable Output 
                                             %178 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFMul %153 %156 
                                                      OpStore %46 %157 
                                       f32_3 %158 = OpLoad %9 
                                       f32_3 %159 = OpLoad %46 
                                       f32_3 %160 = OpFMul %158 %159 
                                                      OpStore %9 %160 
                                       f32_3 %163 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %164 = OpAccessChain %19 %53 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                                      OpStore %161 %167 
                                         f32 %168 = OpLoad %161 
                                         f32 %169 = OpExtInst %1 40 %168 %94 
                                                      OpStore %161 %169 
                                         f32 %172 = OpLoad %161 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpLoad %9 
                                       f32_3 %175 = OpFMul %173 %174 
                                       f32_4 %176 = OpLoad %171 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %171 %177 
                                 Output f32* %179 = OpAccessChain %171 %73 
                                                      OpStore %179 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
int u_xlati5;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati5 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat5.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2.x = u_xlat5.y * u_xlat5.y;
    u_xlat2.x = u_xlat5.x * u_xlat5.x + (-u_xlat2.x);
    u_xlat3 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    SV_Target0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 304
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %146 %191 %193 %194 %247 %279 %291 %295 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate vs_TEXCOORD1 Location 191 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpMemberDecorate %219 0 Offset 219 
                                                      OpMemberDecorate %219 1 Offset 219 
                                                      OpMemberDecorate %219 2 Offset 219 
                                                      OpMemberDecorate %219 3 Offset 219 
                                                      OpMemberDecorate %219 4 Offset 219 
                                                      OpMemberDecorate %219 5 Offset 219 
                                                      OpMemberDecorate %219 6 Offset 219 
                                                      OpDecorate %220 ArrayStride 220 
                                                      OpMemberDecorate %221 0 Offset 221 
                                                      OpDecorate %221 Block 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate vs_TEXCOORD3 Location 247 
                                                      OpDecorate vs_TEXCOORD5 Location 279 
                                                      OpDecorate vs_TEXCOORD6 Location 291 
                                                      OpDecorate %295 Flat 
                                                      OpDecorate %295 Location 295 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                                             %145 = OpTypePointer Input %79 
                                Input f32_3* %146 = OpVariable Input 
                                         u32 %154 = OpConstant 0 
                                             %155 = OpTypePointer Private %27 
                                         u32 %172 = OpConstant 2 
                                             %174 = OpTypePointer Private %79 
                              Private f32_3* %175 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                              Private f32_4* %212 = OpVariable Private 
                              Private f32_3* %218 = OpVariable Private 
                                             %219 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %220 = OpTypeArray %219 %40 
                                             %221 = OpTypeStruct %220 
                                             %222 = OpTypePointer Uniform %221 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %223 = OpVariable Uniform 
                                         i32 %233 = OpConstant 4 
                                         i32 %241 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %250 = OpConstant 6 
                              Private f32_4* %259 = OpVariable Private 
                                             %262 = OpTypePointer Uniform %27 
                                         f32 %269 = OpConstant 3.674022E-40 
                                         u32 %271 = OpConstant 3 
                                       f32_2 %275 = OpConstantComposite %269 %269 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_4 %293 = OpConstantComposite %292 %292 %292 %292 
                                             %294 = OpTypePointer Output %35 
                                 Output u32* %295 = OpVariable Output 
                                             %298 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                       f32_3 %147 = OpLoad %146 
                                         i32 %148 = OpLoad %20 
                                         i32 %149 = OpSDiv %148 %46 
                              Uniform f32_4* %150 = OpAccessChain %44 %15 %149 %48 %15 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %147 %152 
                                Private f32* %156 = OpAccessChain %72 %154 
                                                      OpStore %156 %153 
                                       f32_3 %157 = OpLoad %146 
                                         i32 %158 = OpLoad %20 
                                         i32 %159 = OpSDiv %158 %46 
                              Uniform f32_4* %160 = OpAccessChain %44 %15 %159 %48 %48 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                         f32 %163 = OpDot %157 %162 
                                Private f32* %164 = OpAccessChain %72 %123 
                                                      OpStore %164 %163 
                                       f32_3 %165 = OpLoad %146 
                                         i32 %166 = OpLoad %20 
                                         i32 %167 = OpSDiv %166 %46 
                              Uniform f32_4* %168 = OpAccessChain %44 %15 %167 %48 %64 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %165 %170 
                                Private f32* %173 = OpAccessChain %72 %172 
                                                      OpStore %173 %171 
                                       f32_4 %176 = OpLoad %72 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_4 %178 = OpLoad %72 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                         f32 %180 = OpDot %177 %179 
                                Private f32* %181 = OpAccessChain %175 %154 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %175 %154 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpExtInst %1 32 %183 
                                Private f32* %185 = OpAccessChain %175 %154 
                                                      OpStore %185 %184 
                                       f32_3 %186 = OpLoad %175 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 0 0 
                                       f32_4 %188 = OpLoad %72 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFMul %187 %189 
                                                      OpStore %175 %190 
                                       f32_3 %192 = OpLoad %175 
                                                      OpStore vs_TEXCOORD1 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                Private f32* %196 = OpAccessChain %175 %123 
                                         f32 %197 = OpLoad %196 
                                Private f32* %198 = OpAccessChain %175 %123 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %197 %199 
                                Private f32* %201 = OpAccessChain %72 %154 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %175 %154 
                                         f32 %203 = OpLoad %202 
                                Private f32* %204 = OpAccessChain %175 %154 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                Private f32* %207 = OpAccessChain %72 %154 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %206 %209 
                                Private f32* %211 = OpAccessChain %72 %154 
                                                      OpStore %211 %210 
                                       f32_3 %213 = OpLoad %175 
                                       f32_4 %214 = OpVectorShuffle %213 %213 1 2 2 0 
                                       f32_3 %215 = OpLoad %175 
                                       f32_4 %216 = OpVectorShuffle %215 %215 0 1 2 2 
                                       f32_4 %217 = OpFMul %214 %216 
                                                      OpStore %212 %217 
                                         i32 %224 = OpLoad %8 
                                         i32 %225 = OpSDiv %224 %25 
                              Uniform f32_4* %226 = OpAccessChain %223 %15 %225 %22 
                                       f32_4 %227 = OpLoad %226 
                                       f32_4 %228 = OpLoad %212 
                                         f32 %229 = OpDot %227 %228 
                                Private f32* %230 = OpAccessChain %218 %154 
                                                      OpStore %230 %229 
                                         i32 %231 = OpLoad %8 
                                         i32 %232 = OpSDiv %231 %25 
                              Uniform f32_4* %234 = OpAccessChain %223 %15 %232 %233 
                                       f32_4 %235 = OpLoad %234 
                                       f32_4 %236 = OpLoad %212 
                                         f32 %237 = OpDot %235 %236 
                                Private f32* %238 = OpAccessChain %218 %123 
                                                      OpStore %238 %237 
                                         i32 %239 = OpLoad %8 
                                         i32 %240 = OpSDiv %239 %25 
                              Uniform f32_4* %242 = OpAccessChain %223 %15 %240 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpLoad %212 
                                         f32 %245 = OpDot %243 %244 
                                Private f32* %246 = OpAccessChain %218 %172 
                                                      OpStore %246 %245 
                                         i32 %248 = OpLoad %8 
                                         i32 %249 = OpSDiv %248 %25 
                              Uniform f32_4* %251 = OpAccessChain %223 %15 %249 %250 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_4 %254 = OpLoad %72 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 0 0 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %218 
                                       f32_3 %258 = OpFAdd %256 %257 
                                                      OpStore vs_TEXCOORD3 %258 
                                Private f32* %260 = OpAccessChain %30 %123 
                                         f32 %261 = OpLoad %260 
                                Uniform f32* %263 = OpAccessChain %98 %15 %154 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFMul %261 %264 
                                Private f32* %266 = OpAccessChain %259 %154 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %259 %154 
                                         f32 %268 = OpLoad %267 
                                         f32 %270 = OpFMul %268 %269 
                                Private f32* %272 = OpAccessChain %259 %271 
                                                      OpStore %272 %270 
                                       f32_4 %273 = OpLoad %30 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 3 
                                       f32_2 %276 = OpFMul %274 %275 
                                       f32_4 %277 = OpLoad %259 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 1 5 3 
                                                      OpStore %259 %278 
                                       f32_4 %280 = OpLoad %30 
                                       f32_2 %281 = OpVectorShuffle %280 %280 2 3 
                                       f32_4 %282 = OpLoad vs_TEXCOORD5 
                                       f32_4 %283 = OpVectorShuffle %282 %281 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %283 
                                       f32_4 %284 = OpLoad %259 
                                       f32_2 %285 = OpVectorShuffle %284 %284 2 2 
                                       f32_4 %286 = OpLoad %259 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 3 
                                       f32_2 %288 = OpFAdd %285 %287 
                                       f32_4 %289 = OpLoad vs_TEXCOORD5 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %290 
                                                      OpStore vs_TEXCOORD6 %293 
                                         i32 %296 = OpLoad %10 
                                         u32 %297 = OpBitcast %296 
                                                      OpStore %295 %297 
                                 Output f32* %299 = OpAccessChain %127 %15 %123 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFNegate %300 
                                 Output f32* %302 = OpAccessChain %127 %15 %123 
                                                      OpStore %302 %301 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %104 %131 %183 %188 %199 %227 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %131 Flat 
                                                      OpDecorate %131 Location 131 
                                                      OpMemberDecorate %134 0 Offset 134 
                                                      OpMemberDecorate %134 1 Offset 134 
                                                      OpDecorate %134 Block 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpMemberDecorate %148 0 Offset 148 
                                                      OpMemberDecorate %148 1 Offset 148 
                                                      OpMemberDecorate %148 2 Offset 148 
                                                      OpMemberDecorate %148 3 Offset 148 
                                                      OpMemberDecorate %148 4 Offset 148 
                                                      OpMemberDecorate %148 5 Offset 148 
                                                      OpMemberDecorate %148 6 Offset 148 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %150 ArrayStride 150 
                                                      OpMemberDecorate %151 0 Offset 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate vs_TEXCOORD0 Location 183 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate vs_TEXCOORD1 Location 199 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 4 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                             %103 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %105 = OpTypeVector %6 2 
                                             %113 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %114 = OpTypePointer UniformConstant %113 
        UniformConstant read_only Texture2D* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampler 
                                             %118 = OpTypePointer UniformConstant %117 
                    UniformConstant sampler* %119 = OpVariable UniformConstant 
                                             %121 = OpTypeSampledImage %113 
                                             %128 = OpTypePointer Private %20 
                                Private i32* %129 = OpVariable Private 
                                             %130 = OpTypePointer Input %14 
                                  Input u32* %131 = OpVariable Input 
                                             %134 = OpTypeStruct %20 %20 
                                             %135 = OpTypePointer Uniform %134 
                 Uniform struct {i32; i32;}* %136 = OpVariable Uniform 
                                             %137 = OpTypePointer Uniform %20 
                                         i32 %142 = OpConstant 7 
                                Private f32* %144 = OpVariable Private 
                                             %148 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %149 = OpSpecConstant 2 
                                             %150 = OpTypeArray %148 %149 
                                             %151 = OpTypeStruct %150 
                                             %152 = OpTypePointer Uniform %151 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %153 = OpVariable Uniform 
                                         i32 %156 = OpConstant 6 
                                         i32 %170 = OpConstant 5 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                             %182 = OpTypePointer Input %105 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %188 = OpVariable Input 
                              Private f32_4* %198 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %204 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %234 = OpConstantComposite %99 %99 %99 
                                Private f32* %242 = OpVariable Private 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %19 %63 %53 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Uniform f32* %93 = OpAccessChain %19 %63 %78 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %35 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %35 
                                                      OpStore %102 %101 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_2 %109 = OpVectorShuffle %108 %108 3 3 
                                       f32_2 %110 = OpFDiv %107 %109 
                                       f32_3 %111 = OpLoad %43 
                                       f32_3 %112 = OpVectorShuffle %111 %110 3 4 2 
                                                      OpStore %43 %112 
                         read_only Texture2D %116 = OpLoad %115 
                                     sampler %120 = OpLoad %119 
                  read_only Texture2DSampled %122 = OpSampledImage %116 %120 
                                       f32_3 %123 = OpLoad %43 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                                         f32 %126 = OpCompositeExtract %125 0 
                                Private f32* %127 = OpAccessChain %43 %35 
                                                      OpStore %127 %126 
                                         u32 %132 = OpLoad %131 
                                         i32 %133 = OpBitcast %132 
                                Uniform i32* %138 = OpAccessChain %136 %46 
                                         i32 %139 = OpLoad %138 
                                         i32 %140 = OpIAdd %133 %139 
                                                      OpStore %129 %140 
                                         i32 %141 = OpLoad %129 
                                         i32 %143 = OpIMul %141 %142 
                                                      OpStore %129 %143 
                                Private f32* %145 = OpAccessChain %43 %35 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFNegate %146 
                                         i32 %154 = OpLoad %129 
                                         i32 %155 = OpSDiv %154 %142 
                                Uniform f32* %157 = OpAccessChain %153 %46 %155 %156 %78 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFAdd %147 %158 
                                                      OpStore %144 %159 
                                Private f32* %160 = OpAccessChain %9 %35 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpLoad %144 
                                         f32 %163 = OpFMul %161 %162 
                                Private f32* %164 = OpAccessChain %43 %35 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %35 
                                                      OpStore %167 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %169 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 6 
                                                      OpStore %9 %176 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_2 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpImageSampleImplicitLod %181 %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore %51 %186 
                                       f32_3 %187 = OpLoad %51 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %187 %190 
                                                      OpStore %51 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 3 
                                       f32_3 %194 = OpLoad %51 
                                       f32_3 %195 = OpFMul %193 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 2 6 
                                                      OpStore %9 %197 
                                       f32_3 %200 = OpLoad vs_TEXCOORD1 
                                       f32_4 %201 = OpLoad %198 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %198 %202 
                                Private f32* %203 = OpAccessChain %198 %78 
                                                      OpStore %203 %100 
                                         i32 %205 = OpLoad %129 
                                         i32 %206 = OpSDiv %205 %142 
                              Uniform f32_4* %207 = OpAccessChain %153 %46 %206 %46 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %198 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %204 %35 
                                                      OpStore %211 %210 
                                         i32 %212 = OpLoad %129 
                                         i32 %213 = OpSDiv %212 %142 
                              Uniform f32_4* %214 = OpAccessChain %153 %46 %213 %58 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %198 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %204 %61 
                                                      OpStore %218 %217 
                                         i32 %219 = OpLoad %129 
                                         i32 %220 = OpSDiv %219 %142 
                              Uniform f32_4* %221 = OpAccessChain %153 %46 %220 %63 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %198 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %204 %53 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %204 
                                       f32_3 %228 = OpLoad vs_TEXCOORD3 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %198 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %198 %231 
                                       f32_4 %232 = OpLoad %198 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %235 = OpExtInst %1 40 %233 %234 
                                       f32_4 %236 = OpLoad %198 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %198 %237 
                                       f32_3 %238 = OpLoad %51 
                                       f32_4 %239 = OpLoad %198 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %51 %241 
                                       f32_3 %243 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %244 = OpAccessChain %19 %58 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 40 %248 %99 
                                                      OpStore %242 %249 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %242 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                                 Output f32* %262 = OpAccessChain %251 %78 
                                                      OpStore %262 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 200
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %184 %186 %189 %191 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate vs_TEXCOORD5 Location 186 
                                                      OpDecorate vs_TEXCOORD6 Location 189 
                                                      OpDecorate %191 Flat 
                                                      OpDecorate %191 Location 191 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_4 %188 = OpConstantComposite %187 %187 %187 %187 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %190 = OpTypePointer Output %31 
                                 Output u32* %191 = OpVariable Output 
                                             %194 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                                      OpStore vs_TEXCOORD5 %188 
                                                      OpStore vs_TEXCOORD6 %188 
                                         i32 %192 = OpLoad %10 
                                         u32 %193 = OpBitcast %192 
                                                      OpStore %191 %193 
                                 Output f32* %195 = OpAccessChain %116 %15 %112 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                 Output f32* %198 = OpAccessChain %116 %15 %112 
                                                      OpStore %198 %197 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %58 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %57 = OpTypePointer Output %24 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %66 = OpTypeInt 32 0 
                                 u32 %67 = OpConstant 3 
                                     %68 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %59 = OpLoad %45 
                               f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpFMul %60 %61 
                               f32_4 %63 = OpLoad %58 
                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                             OpStore %58 %64 
                         Output f32* %69 = OpAccessChain %58 %67 
                                             OpStore %69 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
int u_xlati6;
float u_xlat19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat19 = u_xlat6.y * u_xlat6.y;
    u_xlat19 = u_xlat6.x * u_xlat6.x + (-u_xlat19);
    u_xlat2 = u_xlat6.yzzx * u_xlat6.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat2.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat6.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat6.xxxx + u_xlat4;
    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 397
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %124 %136 %137 %150 %196 %198 %201 %202 %379 %385 %386 %388 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %122 0 BuiltIn 122 
                                                      OpMemberDecorate %122 1 BuiltIn 122 
                                                      OpMemberDecorate %122 2 BuiltIn 122 
                                                      OpDecorate %122 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 136 
                                                      OpDecorate %137 Location 137 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 198 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %202 Location 202 
                                                      OpMemberDecorate %223 0 Offset 223 
                                                      OpMemberDecorate %223 1 Offset 223 
                                                      OpMemberDecorate %223 2 Offset 223 
                                                      OpMemberDecorate %223 3 Offset 223 
                                                      OpMemberDecorate %223 4 Offset 223 
                                                      OpMemberDecorate %223 5 Offset 223 
                                                      OpMemberDecorate %223 6 Offset 223 
                                                      OpDecorate %224 ArrayStride 224 
                                                      OpMemberDecorate %225 0 Offset 225 
                                                      OpDecorate %225 Block 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate vs_TEXCOORD3 Location 379 
                                                      OpDecorate vs_TEXCOORD5 Location 385 
                                                      OpDecorate vs_TEXCOORD6 Location 386 
                                                      OpDecorate %388 Flat 
                                                      OpDecorate %388 Location 388 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 5 
                                         u32 %120 = OpConstant 1 
                                             %121 = OpTypeArray %27 %120 
                                             %122 = OpTypeStruct %28 %27 %121 
                                             %123 = OpTypePointer Output %122 
        Output struct {f32_4; f32; f32[1];}* %124 = OpVariable Output 
                                             %132 = OpTypePointer Output %28 
                                             %134 = OpTypeVector %27 2 
                                             %135 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %137 = OpVariable Input 
                                         i32 %140 = OpConstant 6 
                                             %149 = OpTypePointer Input %81 
                                Input f32_3* %150 = OpVariable Input 
                                         u32 %158 = OpConstant 0 
                                             %159 = OpTypePointer Private %27 
                                         u32 %176 = OpConstant 2 
                                             %178 = OpTypePointer Private %81 
                              Private f32_3* %179 = OpVariable Private 
                                             %195 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %201 = OpVariable Output 
                                Input f32_4* %202 = OpVariable Input 
                                Private f32* %204 = OpVariable Private 
                                             %223 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %224 = OpTypeArray %223 %40 
                                             %225 = OpTypeStruct %224 
                                             %226 = OpTypePointer Uniform %225 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %227 = OpVariable Uniform 
                                         i32 %237 = OpConstant 4 
                              Private f32_4* %269 = OpVariable Private 
                              Private f32_4* %277 = OpVariable Private 
                              Private f32_4* %296 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                       f32_4 %315 = OpConstantComposite %314 %314 %314 %314 
                                         f32 %323 = OpConstant 3.674022E-40 
                                       f32_4 %324 = OpConstantComposite %323 %323 %323 %323 
                                         f32 %332 = OpConstant 3.674022E-40 
                                       f32_4 %333 = OpConstantComposite %332 %332 %332 %332 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %387 = OpTypePointer Output %35 
                                 Output u32* %388 = OpVariable Output 
                                             %391 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %125 = OpAccessChain %101 %102 %22 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %72 
                                       f32_4 %128 = OpVectorShuffle %127 %127 3 3 3 3 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %93 
                                       f32_4 %131 = OpFAdd %129 %130 
                               Output f32_4* %133 = OpAccessChain %124 %15 
                                                      OpStore %133 %131 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                              Uniform f32_4* %141 = OpAccessChain %101 %140 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %139 %143 
                              Uniform f32_4* %145 = OpAccessChain %101 %140 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 2 3 
                                       f32_2 %148 = OpFAdd %144 %147 
                                                      OpStore vs_TEXCOORD0 %148 
                                       f32_3 %151 = OpLoad %150 
                                         i32 %152 = OpLoad %20 
                                         i32 %153 = OpSDiv %152 %46 
                              Uniform f32_4* %154 = OpAccessChain %44 %15 %153 %48 %15 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %151 %156 
                                Private f32* %160 = OpAccessChain %72 %158 
                                                      OpStore %160 %157 
                                       f32_3 %161 = OpLoad %150 
                                         i32 %162 = OpLoad %20 
                                         i32 %163 = OpSDiv %162 %46 
                              Uniform f32_4* %164 = OpAccessChain %44 %15 %163 %48 %48 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %168 = OpAccessChain %72 %120 
                                                      OpStore %168 %167 
                                       f32_3 %169 = OpLoad %150 
                                         i32 %170 = OpLoad %20 
                                         i32 %171 = OpSDiv %170 %46 
                              Uniform f32_4* %172 = OpAccessChain %44 %15 %171 %48 %64 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %169 %174 
                                Private f32* %177 = OpAccessChain %72 %176 
                                                      OpStore %177 %175 
                                       f32_4 %180 = OpLoad %72 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %72 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %158 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %158 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %158 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %72 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %197 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %197 
                                       f32_4 %199 = OpLoad %30 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                                      OpStore vs_TEXCOORD2 %200 
                                       f32_4 %203 = OpLoad %202 
                                                      OpStore %201 %203 
                                Private f32* %205 = OpAccessChain %179 %120 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %179 %120 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                Private f32* %210 = OpAccessChain %179 %158 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %179 %158 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                         f32 %215 = OpLoad %204 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpFAdd %214 %216 
                                                      OpStore %204 %217 
                                       f32_3 %218 = OpLoad %179 
                                       f32_4 %219 = OpVectorShuffle %218 %218 1 2 2 0 
                                       f32_3 %220 = OpLoad %179 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 1 2 2 
                                       f32_4 %222 = OpFMul %219 %221 
                                                      OpStore %72 %222 
                                         i32 %228 = OpLoad %8 
                                         i32 %229 = OpSDiv %228 %25 
                              Uniform f32_4* %230 = OpAccessChain %227 %15 %229 %22 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpLoad %72 
                                         f32 %233 = OpDot %231 %232 
                                Private f32* %234 = OpAccessChain %93 %158 
                                                      OpStore %234 %233 
                                         i32 %235 = OpLoad %8 
                                         i32 %236 = OpSDiv %235 %25 
                              Uniform f32_4* %238 = OpAccessChain %227 %15 %236 %237 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpLoad %72 
                                         f32 %241 = OpDot %239 %240 
                                Private f32* %242 = OpAccessChain %93 %120 
                                                      OpStore %242 %241 
                                         i32 %243 = OpLoad %8 
                                         i32 %244 = OpSDiv %243 %25 
                              Uniform f32_4* %245 = OpAccessChain %227 %15 %244 %102 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %72 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %93 %176 
                                                      OpStore %249 %248 
                                         i32 %250 = OpLoad %8 
                                         i32 %251 = OpSDiv %250 %25 
                              Uniform f32_4* %252 = OpAccessChain %227 %15 %251 %140 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpLoad %204 
                                       f32_3 %256 = OpCompositeConstruct %255 %255 %255 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %93 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                       f32_4 %261 = OpLoad %72 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %72 %262 
                                       f32_4 %263 = OpLoad %30 
                                       f32_4 %264 = OpVectorShuffle %263 %263 1 1 1 1 
                                       f32_4 %265 = OpFNegate %264 
                              Uniform f32_4* %266 = OpAccessChain %101 %48 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpFAdd %265 %267 
                                                      OpStore %93 %268 
                                       f32_3 %270 = OpLoad %179 
                                       f32_4 %271 = OpVectorShuffle %270 %270 1 1 1 1 
                                       f32_4 %272 = OpLoad %93 
                                       f32_4 %273 = OpFMul %271 %272 
                                                      OpStore %269 %273 
                                       f32_4 %274 = OpLoad %93 
                                       f32_4 %275 = OpLoad %93 
                                       f32_4 %276 = OpFMul %274 %275 
                                                      OpStore %93 %276 
                                       f32_4 %278 = OpLoad %30 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 0 0 
                                       f32_4 %280 = OpFNegate %279 
                              Uniform f32_4* %281 = OpAccessChain %101 %15 
                                       f32_4 %282 = OpLoad %281 
                                       f32_4 %283 = OpFAdd %280 %282 
                                                      OpStore %277 %283 
                                       f32_4 %284 = OpLoad %30 
                                       f32_4 %285 = OpVectorShuffle %284 %284 2 2 2 2 
                                       f32_4 %286 = OpFNegate %285 
                              Uniform f32_4* %287 = OpAccessChain %101 %64 
                                       f32_4 %288 = OpLoad %287 
                                       f32_4 %289 = OpFAdd %286 %288 
                                                      OpStore %30 %289 
                                       f32_4 %290 = OpLoad %277 
                                       f32_3 %291 = OpLoad %179 
                                       f32_4 %292 = OpVectorShuffle %291 %291 0 0 0 0 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %269 
                                       f32_4 %295 = OpFAdd %293 %294 
                                                      OpStore %269 %295 
                                       f32_4 %297 = OpLoad %30 
                                       f32_3 %298 = OpLoad %179 
                                       f32_4 %299 = OpVectorShuffle %298 %298 2 2 2 2 
                                       f32_4 %300 = OpFMul %297 %299 
                                       f32_4 %301 = OpLoad %269 
                                       f32_4 %302 = OpFAdd %300 %301 
                                                      OpStore %296 %302 
                                       f32_4 %303 = OpLoad %277 
                                       f32_4 %304 = OpLoad %277 
                                       f32_4 %305 = OpFMul %303 %304 
                                       f32_4 %306 = OpLoad %93 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %93 %307 
                                       f32_4 %308 = OpLoad %30 
                                       f32_4 %309 = OpLoad %30 
                                       f32_4 %310 = OpFMul %308 %309 
                                       f32_4 %311 = OpLoad %93 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %30 %312 
                                       f32_4 %313 = OpLoad %30 
                                       f32_4 %316 = OpExtInst %1 40 %313 %315 
                                                      OpStore %30 %316 
                                       f32_4 %317 = OpLoad %30 
                                       f32_4 %318 = OpExtInst %1 32 %317 
                                                      OpStore %93 %318 
                                       f32_4 %319 = OpLoad %30 
                              Uniform f32_4* %320 = OpAccessChain %101 %22 
                                       f32_4 %321 = OpLoad %320 
                                       f32_4 %322 = OpFMul %319 %321 
                                       f32_4 %325 = OpFAdd %322 %324 
                                                      OpStore %30 %325 
                                       f32_4 %326 = OpLoad %30 
                                       f32_4 %327 = OpFDiv %324 %326 
                                                      OpStore %30 %327 
                                       f32_4 %328 = OpLoad %296 
                                       f32_4 %329 = OpLoad %93 
                                       f32_4 %330 = OpFMul %328 %329 
                                                      OpStore %296 %330 
                                       f32_4 %331 = OpLoad %296 
                                       f32_4 %334 = OpExtInst %1 40 %331 %333 
                                                      OpStore %296 %334 
                                       f32_4 %335 = OpLoad %30 
                                       f32_4 %336 = OpLoad %296 
                                       f32_4 %337 = OpFMul %335 %336 
                                                      OpStore %296 %337 
                                       f32_4 %338 = OpLoad %296 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %340 = OpAccessChain %101 %237 %48 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %339 %342 
                                       f32_4 %344 = OpLoad %30 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
                                                      OpStore %30 %345 
                              Uniform f32_4* %346 = OpAccessChain %101 %237 %15 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %296 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 0 0 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_4 %352 = OpLoad %30 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFAdd %351 %353 
                                       f32_4 %355 = OpLoad %30 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %30 %356 
                              Uniform f32_4* %357 = OpAccessChain %101 %237 %64 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %296 
                                       f32_3 %361 = OpVectorShuffle %360 %360 2 2 2 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %30 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %296 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %296 %367 
                              Uniform f32_4* %368 = OpAccessChain %101 %237 %22 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %296 
                                       f32_3 %372 = OpVectorShuffle %371 %371 3 3 3 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %296 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %296 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %296 %378 
                                       f32_4 %380 = OpLoad %72 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_4 %382 = OpLoad %296 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                                      OpStore vs_TEXCOORD3 %384 
                                                      OpStore vs_TEXCOORD5 %333 
                                                      OpStore vs_TEXCOORD6 %333 
                                         i32 %389 = OpLoad %10 
                                         u32 %390 = OpBitcast %389 
                                                      OpStore %388 %390 
                                 Output f32* %392 = OpAccessChain %124 %15 %120 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFNegate %393 
                                 Output f32* %395 = OpAccessChain %124 %15 %120 
                                                      OpStore %395 %394 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 154
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %89 %113 %119 %141 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 89 
                                                      OpDecorate %103 DescriptorSet 103 
                                                      OpDecorate %103 Binding 103 
                                                      OpDecorate %107 DescriptorSet 107 
                                                      OpDecorate %107 Binding 107 
                                                      OpDecorate vs_TEXCOORD0 Location 113 
                                                      OpDecorate %119 Location 119 
                                                      OpDecorate %141 Location 141 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 
                                              %76 = OpTypePointer Uniform %75 
              Uniform struct {f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %83 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %102 = OpTypePointer UniformConstant %101 
        UniformConstant read_only Texture2D* %103 = OpVariable UniformConstant 
                                             %105 = OpTypeSampler 
                                             %106 = OpTypePointer UniformConstant %105 
                    UniformConstant sampler* %107 = OpVariable UniformConstant 
                                             %109 = OpTypeSampledImage %101 
                                             %111 = OpTypeVector %25 2 
                                             %112 = OpTypePointer Input %111 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %118 = OpTypePointer Input %26 
                                Input f32_4* %119 = OpVariable Input 
                                Private f32* %132 = OpVariable Private 
                                             %140 = OpTypePointer Output %26 
                               Output f32_4* %141 = OpVariable Output 
                                             %151 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %78 = OpAccessChain %77 %58 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                          i32 %81 = OpLoad %8 
                                          i32 %82 = OpSDiv %81 %23 
                               Uniform f32_4* %84 = OpAccessChain %46 %17 %82 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %80 %86 
                                                      OpStore %74 %87 
                                        f32_3 %88 = OpLoad %40 
                                        f32_3 %90 = OpLoad vs_TEXCOORD3 
                                        f32_3 %91 = OpFAdd %88 %90 
                                        f32_4 %92 = OpLoad %28 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %28 %93 
                                        f32_4 %94 = OpLoad %28 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %98 = OpExtInst %1 40 %95 %97 
                                        f32_4 %99 = OpLoad %28 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 5 6 3 
                                                      OpStore %28 %100 
                         read_only Texture2D %104 = OpLoad %103 
                                     sampler %108 = OpLoad %107 
                  read_only Texture2DSampled %110 = OpSampledImage %104 %108 
                                       f32_2 %114 = OpLoad vs_TEXCOORD0 
                                       f32_4 %115 = OpImageSampleImplicitLod %110 %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                                      OpStore %40 %116 
                                       f32_3 %117 = OpLoad %40 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %117 %121 
                                                      OpStore %40 %122 
                                       f32_4 %123 = OpLoad %28 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_3 %125 = OpLoad %40 
                                       f32_3 %126 = OpFMul %124 %125 
                                       f32_4 %127 = OpLoad %28 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %28 %128 
                                       f32_3 %129 = OpLoad %74 
                                       f32_3 %130 = OpLoad %40 
                                       f32_3 %131 = OpFMul %129 %130 
                                                      OpStore %74 %131 
                                       f32_3 %133 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %134 = OpAccessChain %77 %17 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %133 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 40 %138 %96 
                                                      OpStore %132 %139 
                                       f32_3 %142 = OpLoad %74 
                                         f32 %143 = OpLoad %132 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %28 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %141 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %141 %150 
                                 Output f32* %152 = OpAccessChain %141 %36 
                                                      OpStore %152 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD1.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 234
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %181 %187 %188 %209 %221 %225 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 181 
                                                      OpDecorate %187 Location 187 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate vs_TEXCOORD5 Location 209 
                                                      OpDecorate vs_TEXCOORD6 Location 221 
                                                      OpDecorate %225 Flat 
                                                      OpDecorate %225 Location 225 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                             %141 = OpTypePointer Input %75 
                                Input f32_3* %142 = OpVariable Input 
                                         u32 %150 = OpConstant 0 
                                             %151 = OpTypePointer Private %23 
                                         u32 %168 = OpConstant 2 
                              Private f32_4* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %187 = OpVariable Output 
                                Input f32_4* %188 = OpVariable Input 
                                             %192 = OpTypePointer Uniform %23 
                                         f32 %199 = OpConstant 3.674022E-40 
                                         u32 %201 = OpConstant 3 
                                       f32_2 %205 = OpConstantComposite %199 %199 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_4 %223 = OpConstantComposite %222 %222 %222 %222 
                                             %224 = OpTypePointer Output %31 
                                 Output u32* %225 = OpVariable Output 
                                             %228 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %133 = OpAccessChain %94 %60 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                       f32_2 %136 = OpFMul %132 %135 
                              Uniform f32_4* %137 = OpAccessChain %94 %60 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 2 3 
                                       f32_2 %140 = OpFAdd %136 %139 
                                                      OpStore vs_TEXCOORD0 %140 
                                       f32_3 %143 = OpLoad %142 
                                         i32 %144 = OpLoad %8 
                                         i32 %145 = OpSDiv %144 %42 
                              Uniform f32_4* %146 = OpAccessChain %40 %15 %145 %44 %15 
                                       f32_4 %147 = OpLoad %146 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                         f32 %149 = OpDot %143 %148 
                                Private f32* %152 = OpAccessChain %68 %150 
                                                      OpStore %152 %149 
                                       f32_3 %153 = OpLoad %142 
                                         i32 %154 = OpLoad %8 
                                         i32 %155 = OpSDiv %154 %42 
                              Uniform f32_4* %156 = OpAccessChain %40 %15 %155 %44 %44 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %160 = OpAccessChain %68 %119 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %142 
                                         i32 %162 = OpLoad %8 
                                         i32 %163 = OpSDiv %162 %42 
                              Uniform f32_4* %164 = OpAccessChain %40 %15 %163 %44 %60 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %169 = OpAccessChain %68 %168 
                                                      OpStore %169 %167 
                                       f32_4 %171 = OpLoad %68 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %68 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                Private f32* %176 = OpAccessChain %170 %150 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %170 %150 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpExtInst %1 32 %178 
                                Private f32* %180 = OpAccessChain %170 %150 
                                                      OpStore %180 %179 
                                       f32_4 %182 = OpLoad %170 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 0 0 
                                       f32_4 %184 = OpLoad %68 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                                      OpStore vs_TEXCOORD1 %186 
                                       f32_4 %189 = OpLoad %188 
                                                      OpStore %187 %189 
                                Private f32* %190 = OpAccessChain %26 %119 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %94 %15 %150 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Private f32* %196 = OpAccessChain %170 %150 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %170 %150 
                                         f32 %198 = OpLoad %197 
                                         f32 %200 = OpFMul %198 %199 
                                Private f32* %202 = OpAccessChain %170 %201 
                                                      OpStore %202 %200 
                                       f32_4 %203 = OpLoad %26 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 3 
                                       f32_2 %206 = OpFMul %204 %205 
                                       f32_4 %207 = OpLoad %170 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 1 5 3 
                                                      OpStore %170 %208 
                                       f32_4 %210 = OpLoad %26 
                                       f32_2 %211 = OpVectorShuffle %210 %210 2 3 
                                       f32_4 %212 = OpLoad vs_TEXCOORD5 
                                       f32_4 %213 = OpVectorShuffle %212 %211 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %213 
                                       f32_4 %214 = OpLoad %170 
                                       f32_2 %215 = OpVectorShuffle %214 %214 2 2 
                                       f32_4 %216 = OpLoad %170 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 3 
                                       f32_2 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad vs_TEXCOORD5 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %220 
                                                      OpStore vs_TEXCOORD6 %223 
                                         i32 %226 = OpLoad %10 
                                         u32 %227 = OpBitcast %226 
                                                      OpStore %225 %227 
                                 Output f32* %229 = OpAccessChain %123 %15 %119 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                 Output f32* %232 = OpAccessChain %123 %15 %119 
                                                      OpStore %232 %231 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 181
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %99 %149 %154 %162 %171 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 99 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate vs_TEXCOORD0 Location 149 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD1 Location 162 
                                                      OpDecorate %171 Location 171 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %16 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 4 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          f32 %94 = OpConstant 3.674022E-40 
                                          f32 %95 = OpConstant 3.674022E-40 
                                              %98 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %100 = OpTypeVector %6 2 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                Private f32* %123 = OpVariable Private 
                                         i32 %138 = OpConstant 5 
        UniformConstant read_only Texture2D* %143 = OpVariable UniformConstant 
                    UniformConstant sampler* %145 = OpVariable UniformConstant 
                                             %148 = OpTypePointer Input %100 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %170 = OpTypePointer Output %13 
                               Output f32_4* %171 = OpVariable Output 
                                             %178 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %85 = OpAccessChain %19 %58 %48 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpFMul %84 %86 
                                 Uniform f32* %88 = OpAccessChain %19 %58 %73 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFAdd %87 %89 
                                 Private f32* %91 = OpAccessChain %9 %31 
                                                      OpStore %91 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                          f32 %93 = OpLoad %92 
                                          f32 %96 = OpExtInst %1 43 %93 %94 %95 
                                 Private f32* %97 = OpAccessChain %9 %31 
                                                      OpStore %97 %96 
                                       f32_4 %101 = OpLoad vs_TEXCOORD5 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpLoad vs_TEXCOORD5 
                                       f32_2 %104 = OpVectorShuffle %103 %103 3 3 
                                       f32_2 %105 = OpFDiv %102 %104 
                                       f32_3 %106 = OpLoad %38 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %38 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %38 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %121 = OpCompositeExtract %120 0 
                                Private f32* %122 = OpAccessChain %38 %31 
                                                      OpStore %122 %121 
                                Private f32* %124 = OpAccessChain %38 %31 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFNegate %125 
                                         f32 %127 = OpFAdd %126 %95 
                                                      OpStore %123 %127 
                                Private f32* %128 = OpAccessChain %9 %31 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpLoad %123 
                                         f32 %131 = OpFMul %129 %130 
                                Private f32* %132 = OpAccessChain %38 %31 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %131 %133 
                                Private f32* %135 = OpAccessChain %9 %31 
                                                      OpStore %135 %134 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                              Uniform f32_4* %139 = OpAccessChain %19 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFMul %137 %141 
                                                      OpStore %9 %142 
                         read_only Texture2D %144 = OpLoad %143 
                                     sampler %146 = OpLoad %145 
                  read_only Texture2DSampled %147 = OpSampledImage %144 %146 
                                       f32_2 %150 = OpLoad vs_TEXCOORD0 
                                       f32_4 %151 = OpImageSampleImplicitLod %147 %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                                      OpStore %46 %152 
                                       f32_3 %153 = OpLoad %46 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFMul %153 %156 
                                                      OpStore %46 %157 
                                       f32_3 %158 = OpLoad %9 
                                       f32_3 %159 = OpLoad %46 
                                       f32_3 %160 = OpFMul %158 %159 
                                                      OpStore %9 %160 
                                       f32_3 %163 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %164 = OpAccessChain %19 %53 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                                      OpStore %161 %167 
                                         f32 %168 = OpLoad %161 
                                         f32 %169 = OpExtInst %1 40 %168 %94 
                                                      OpStore %161 %169 
                                         f32 %172 = OpLoad %161 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpLoad %9 
                                       f32_3 %175 = OpFMul %173 %174 
                                       f32_4 %176 = OpLoad %171 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %171 %177 
                                 Output f32* %179 = OpAccessChain %171 %73 
                                                      OpStore %179 %95 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat22 = u_xlat7.y * u_xlat7.y;
    u_xlat22 = u_xlat7.x * u_xlat7.x + (-u_xlat22);
    u_xlat3 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    u_xlat3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat7.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat7.xxxx + u_xlat5;
    u_xlat0 = u_xlat1 * u_xlat7.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    SV_Target0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 429
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %137 %138 %150 %196 %198 %201 %202 %381 %406 %418 %420 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpMemberDecorate %99 7 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD1 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 198 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate %202 Location 202 
                                                      OpMemberDecorate %224 0 Offset 224 
                                                      OpMemberDecorate %224 1 Offset 224 
                                                      OpMemberDecorate %224 2 Offset 224 
                                                      OpMemberDecorate %224 3 Offset 224 
                                                      OpMemberDecorate %224 4 Offset 224 
                                                      OpMemberDecorate %224 5 Offset 224 
                                                      OpMemberDecorate %224 6 Offset 224 
                                                      OpDecorate %225 ArrayStride 225 
                                                      OpMemberDecorate %226 0 Offset 226 
                                                      OpDecorate %226 Block 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate vs_TEXCOORD3 Location 381 
                                                      OpDecorate vs_TEXCOORD5 Location 406 
                                                      OpDecorate vs_TEXCOORD6 Location 418 
                                                      OpDecorate %420 Flat 
                                                      OpDecorate %420 Location 420 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 6 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypeVector %27 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                             %149 = OpTypePointer Input %81 
                                Input f32_3* %150 = OpVariable Input 
                                         u32 %158 = OpConstant 0 
                                             %159 = OpTypePointer Private %27 
                                         u32 %176 = OpConstant 2 
                                             %178 = OpTypePointer Private %81 
                              Private f32_3* %179 = OpVariable Private 
                                             %195 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %201 = OpVariable Output 
                                Input f32_4* %202 = OpVariable Input 
                                Private f32* %204 = OpVariable Private 
                              Private f32_4* %223 = OpVariable Private 
                                             %224 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %225 = OpTypeArray %224 %40 
                                             %226 = OpTypeStruct %225 
                                             %227 = OpTypePointer Uniform %226 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %228 = OpVariable Uniform 
                                         i32 %238 = OpConstant 4 
                                         i32 %246 = OpConstant 5 
                              Private f32_4* %271 = OpVariable Private 
                              Private f32_4* %279 = OpVariable Private 
                              Private f32_4* %298 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_4 %317 = OpConstantComposite %316 %316 %316 %316 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_4 %326 = OpConstantComposite %325 %325 %325 %325 
                                         f32 %334 = OpConstant 3.674022E-40 
                                       f32_4 %335 = OpConstantComposite %334 %334 %334 %334 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %389 = OpTypePointer Uniform %27 
                                         f32 %396 = OpConstant 3.674022E-40 
                                         u32 %398 = OpConstant 3 
                                       f32_2 %402 = OpConstantComposite %396 %396 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %419 = OpTypePointer Output %35 
                                 Output u32* %420 = OpVariable Output 
                                             %423 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %141 = OpAccessChain %101 %25 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFMul %140 %143 
                              Uniform f32_4* %145 = OpAccessChain %101 %25 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 2 3 
                                       f32_2 %148 = OpFAdd %144 %147 
                                                      OpStore vs_TEXCOORD0 %148 
                                       f32_3 %151 = OpLoad %150 
                                         i32 %152 = OpLoad %20 
                                         i32 %153 = OpSDiv %152 %46 
                              Uniform f32_4* %154 = OpAccessChain %44 %15 %153 %48 %15 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                         f32 %157 = OpDot %151 %156 
                                Private f32* %160 = OpAccessChain %93 %158 
                                                      OpStore %160 %157 
                                       f32_3 %161 = OpLoad %150 
                                         i32 %162 = OpLoad %20 
                                         i32 %163 = OpSDiv %162 %46 
                              Uniform f32_4* %164 = OpAccessChain %44 %15 %163 %48 %48 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %161 %166 
                                Private f32* %168 = OpAccessChain %93 %127 
                                                      OpStore %168 %167 
                                       f32_3 %169 = OpLoad %150 
                                         i32 %170 = OpLoad %20 
                                         i32 %171 = OpSDiv %170 %46 
                              Uniform f32_4* %172 = OpAccessChain %44 %15 %171 %48 %64 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %169 %174 
                                Private f32* %177 = OpAccessChain %93 %176 
                                                      OpStore %177 %175 
                                       f32_4 %180 = OpLoad %93 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %93 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %158 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %158 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %158 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %93 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %197 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %197 
                                       f32_4 %199 = OpLoad %30 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                                      OpStore vs_TEXCOORD2 %200 
                                       f32_4 %203 = OpLoad %202 
                                                      OpStore %201 %203 
                                Private f32* %205 = OpAccessChain %179 %127 
                                         f32 %206 = OpLoad %205 
                                Private f32* %207 = OpAccessChain %179 %127 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                                      OpStore %204 %209 
                                Private f32* %210 = OpAccessChain %179 %158 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %179 %158 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                         f32 %215 = OpLoad %204 
                                         f32 %216 = OpFNegate %215 
                                         f32 %217 = OpFAdd %214 %216 
                                                      OpStore %204 %217 
                                       f32_3 %218 = OpLoad %179 
                                       f32_4 %219 = OpVectorShuffle %218 %218 1 2 2 0 
                                       f32_3 %220 = OpLoad %179 
                                       f32_4 %221 = OpVectorShuffle %220 %220 0 1 2 2 
                                       f32_4 %222 = OpFMul %219 %221 
                                                      OpStore %93 %222 
                                         i32 %229 = OpLoad %8 
                                         i32 %230 = OpSDiv %229 %25 
                              Uniform f32_4* %231 = OpAccessChain %228 %15 %230 %22 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %93 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %223 %158 
                                                      OpStore %235 %234 
                                         i32 %236 = OpLoad %8 
                                         i32 %237 = OpSDiv %236 %25 
                              Uniform f32_4* %239 = OpAccessChain %228 %15 %237 %238 
                                       f32_4 %240 = OpLoad %239 
                                       f32_4 %241 = OpLoad %93 
                                         f32 %242 = OpDot %240 %241 
                                Private f32* %243 = OpAccessChain %223 %127 
                                                      OpStore %243 %242 
                                         i32 %244 = OpLoad %8 
                                         i32 %245 = OpSDiv %244 %25 
                              Uniform f32_4* %247 = OpAccessChain %228 %15 %245 %246 
                                       f32_4 %248 = OpLoad %247 
                                       f32_4 %249 = OpLoad %93 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %223 %176 
                                                      OpStore %251 %250 
                                         i32 %252 = OpLoad %8 
                                         i32 %253 = OpSDiv %252 %25 
                              Uniform f32_4* %254 = OpAccessChain %228 %15 %253 %102 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpLoad %204 
                                       f32_3 %258 = OpCompositeConstruct %257 %257 %257 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_4 %260 = OpLoad %223 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %93 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %93 %264 
                                       f32_4 %265 = OpLoad %30 
                                       f32_4 %266 = OpVectorShuffle %265 %265 1 1 1 1 
                                       f32_4 %267 = OpFNegate %266 
                              Uniform f32_4* %268 = OpAccessChain %101 %64 
                                       f32_4 %269 = OpLoad %268 
                                       f32_4 %270 = OpFAdd %267 %269 
                                                      OpStore %223 %270 
                                       f32_3 %272 = OpLoad %179 
                                       f32_4 %273 = OpVectorShuffle %272 %272 1 1 1 1 
                                       f32_4 %274 = OpLoad %223 
                                       f32_4 %275 = OpFMul %273 %274 
                                                      OpStore %271 %275 
                                       f32_4 %276 = OpLoad %223 
                                       f32_4 %277 = OpLoad %223 
                                       f32_4 %278 = OpFMul %276 %277 
                                                      OpStore %223 %278 
                                       f32_4 %280 = OpLoad %30 
                                       f32_4 %281 = OpVectorShuffle %280 %280 0 0 0 0 
                                       f32_4 %282 = OpFNegate %281 
                              Uniform f32_4* %283 = OpAccessChain %101 %48 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpFAdd %282 %284 
                                                      OpStore %279 %285 
                                       f32_4 %286 = OpLoad %30 
                                       f32_4 %287 = OpVectorShuffle %286 %286 2 2 2 2 
                                       f32_4 %288 = OpFNegate %287 
                              Uniform f32_4* %289 = OpAccessChain %101 %22 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpFAdd %288 %290 
                                                      OpStore %30 %291 
                                       f32_4 %292 = OpLoad %279 
                                       f32_3 %293 = OpLoad %179 
                                       f32_4 %294 = OpVectorShuffle %293 %293 0 0 0 0 
                                       f32_4 %295 = OpFMul %292 %294 
                                       f32_4 %296 = OpLoad %271 
                                       f32_4 %297 = OpFAdd %295 %296 
                                                      OpStore %271 %297 
                                       f32_4 %299 = OpLoad %30 
                                       f32_3 %300 = OpLoad %179 
                                       f32_4 %301 = OpVectorShuffle %300 %300 2 2 2 2 
                                       f32_4 %302 = OpFMul %299 %301 
                                       f32_4 %303 = OpLoad %271 
                                       f32_4 %304 = OpFAdd %302 %303 
                                                      OpStore %298 %304 
                                       f32_4 %305 = OpLoad %279 
                                       f32_4 %306 = OpLoad %279 
                                       f32_4 %307 = OpFMul %305 %306 
                                       f32_4 %308 = OpLoad %223 
                                       f32_4 %309 = OpFAdd %307 %308 
                                                      OpStore %223 %309 
                                       f32_4 %310 = OpLoad %30 
                                       f32_4 %311 = OpLoad %30 
                                       f32_4 %312 = OpFMul %310 %311 
                                       f32_4 %313 = OpLoad %223 
                                       f32_4 %314 = OpFAdd %312 %313 
                                                      OpStore %30 %314 
                                       f32_4 %315 = OpLoad %30 
                                       f32_4 %318 = OpExtInst %1 40 %315 %317 
                                                      OpStore %30 %318 
                                       f32_4 %319 = OpLoad %30 
                                       f32_4 %320 = OpExtInst %1 32 %319 
                                                      OpStore %223 %320 
                                       f32_4 %321 = OpLoad %30 
                              Uniform f32_4* %322 = OpAccessChain %101 %238 
                                       f32_4 %323 = OpLoad %322 
                                       f32_4 %324 = OpFMul %321 %323 
                                       f32_4 %327 = OpFAdd %324 %326 
                                                      OpStore %30 %327 
                                       f32_4 %328 = OpLoad %30 
                                       f32_4 %329 = OpFDiv %326 %328 
                                                      OpStore %30 %329 
                                       f32_4 %330 = OpLoad %298 
                                       f32_4 %331 = OpLoad %223 
                                       f32_4 %332 = OpFMul %330 %331 
                                                      OpStore %298 %332 
                                       f32_4 %333 = OpLoad %298 
                                       f32_4 %336 = OpExtInst %1 40 %333 %335 
                                                      OpStore %298 %336 
                                       f32_4 %337 = OpLoad %30 
                                       f32_4 %338 = OpLoad %298 
                                       f32_4 %339 = OpFMul %337 %338 
                                                      OpStore %298 %339 
                                       f32_4 %340 = OpLoad %298 
                                       f32_3 %341 = OpVectorShuffle %340 %340 1 1 1 
                              Uniform f32_4* %342 = OpAccessChain %101 %246 %48 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %341 %344 
                                       f32_4 %346 = OpLoad %30 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %30 %347 
                              Uniform f32_4* %348 = OpAccessChain %101 %246 %15 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %298 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 0 0 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %30 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %30 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %30 %358 
                              Uniform f32_4* %359 = OpAccessChain %101 %246 %64 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %298 
                                       f32_3 %363 = OpVectorShuffle %362 %362 2 2 2 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_4 %365 = OpLoad %30 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %364 %366 
                                       f32_4 %368 = OpLoad %298 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %298 %369 
                              Uniform f32_4* %370 = OpAccessChain %101 %246 %22 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %298 
                                       f32_3 %374 = OpVectorShuffle %373 %373 3 3 3 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %298 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %298 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %298 %380 
                                       f32_4 %382 = OpLoad %93 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %298 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFAdd %383 %385 
                                                      OpStore vs_TEXCOORD3 %386 
                                Private f32* %387 = OpAccessChain %72 %127 
                                         f32 %388 = OpLoad %387 
                                Uniform f32* %390 = OpAccessChain %101 %15 %158 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %388 %391 
                                Private f32* %393 = OpAccessChain %298 %158 
                                                      OpStore %393 %392 
                                Private f32* %394 = OpAccessChain %298 %158 
                                         f32 %395 = OpLoad %394 
                                         f32 %397 = OpFMul %395 %396 
                                Private f32* %399 = OpAccessChain %298 %398 
                                                      OpStore %399 %397 
                                       f32_4 %400 = OpLoad %72 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 3 
                                       f32_2 %403 = OpFMul %401 %402 
                                       f32_4 %404 = OpLoad %298 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 1 5 3 
                                                      OpStore %298 %405 
                                       f32_4 %407 = OpLoad %72 
                                       f32_2 %408 = OpVectorShuffle %407 %407 2 3 
                                       f32_4 %409 = OpLoad vs_TEXCOORD5 
                                       f32_4 %410 = OpVectorShuffle %409 %408 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %410 
                                       f32_4 %411 = OpLoad %298 
                                       f32_2 %412 = OpVectorShuffle %411 %411 2 2 
                                       f32_4 %413 = OpLoad %298 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 3 
                                       f32_2 %415 = OpFAdd %412 %414 
                                       f32_4 %416 = OpLoad vs_TEXCOORD5 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %417 
                                                      OpStore vs_TEXCOORD6 %335 
                                         i32 %421 = OpLoad %10 
                                         u32 %422 = OpBitcast %421 
                                                      OpStore %420 %422 
                                 Output f32* %424 = OpAccessChain %131 %15 %127 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFNegate %425 
                                 Output f32* %427 = OpAccessChain %131 %15 %127 
                                                      OpStore %427 %426 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %104 %131 %183 %188 %199 %227 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %119 DescriptorSet 119 
                                                      OpDecorate %119 Binding 119 
                                                      OpDecorate %131 Flat 
                                                      OpDecorate %131 Location 131 
                                                      OpMemberDecorate %134 0 Offset 134 
                                                      OpMemberDecorate %134 1 Offset 134 
                                                      OpDecorate %134 Block 
                                                      OpDecorate %136 DescriptorSet 136 
                                                      OpDecorate %136 Binding 136 
                                                      OpMemberDecorate %148 0 Offset 148 
                                                      OpMemberDecorate %148 1 Offset 148 
                                                      OpMemberDecorate %148 2 Offset 148 
                                                      OpMemberDecorate %148 3 Offset 148 
                                                      OpMemberDecorate %148 4 Offset 148 
                                                      OpMemberDecorate %148 5 Offset 148 
                                                      OpMemberDecorate %148 6 Offset 148 
                                                      OpDecorate %149 SpecId 149 
                                                      OpDecorate %150 ArrayStride 150 
                                                      OpMemberDecorate %151 0 Offset 151 
                                                      OpDecorate %151 Block 
                                                      OpDecorate %153 DescriptorSet 153 
                                                      OpDecorate %153 Binding 153 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate vs_TEXCOORD0 Location 183 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate vs_TEXCOORD1 Location 199 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 3 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 4 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %100 = OpConstant 3.674022E-40 
                                             %103 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %105 = OpTypeVector %6 2 
                                             %113 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %114 = OpTypePointer UniformConstant %113 
        UniformConstant read_only Texture2D* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampler 
                                             %118 = OpTypePointer UniformConstant %117 
                    UniformConstant sampler* %119 = OpVariable UniformConstant 
                                             %121 = OpTypeSampledImage %113 
                                             %128 = OpTypePointer Private %20 
                                Private i32* %129 = OpVariable Private 
                                             %130 = OpTypePointer Input %14 
                                  Input u32* %131 = OpVariable Input 
                                             %134 = OpTypeStruct %20 %20 
                                             %135 = OpTypePointer Uniform %134 
                 Uniform struct {i32; i32;}* %136 = OpVariable Uniform 
                                             %137 = OpTypePointer Uniform %20 
                                         i32 %142 = OpConstant 7 
                                Private f32* %144 = OpVariable Private 
                                             %148 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %149 = OpSpecConstant 2 
                                             %150 = OpTypeArray %148 %149 
                                             %151 = OpTypeStruct %150 
                                             %152 = OpTypePointer Uniform %151 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %153 = OpVariable Uniform 
                                         i32 %156 = OpConstant 6 
                                         i32 %170 = OpConstant 5 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                             %182 = OpTypePointer Input %105 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %188 = OpVariable Input 
                              Private f32_4* %198 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %204 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %234 = OpConstantComposite %99 %99 %99 
                                Private f32* %242 = OpVariable Private 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %90 = OpAccessChain %19 %63 %53 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %89 %91 
                                 Uniform f32* %93 = OpAccessChain %19 %63 %78 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFAdd %92 %94 
                                 Private f32* %96 = OpAccessChain %9 %35 
                                                      OpStore %96 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                          f32 %98 = OpLoad %97 
                                         f32 %101 = OpExtInst %1 43 %98 %99 %100 
                                Private f32* %102 = OpAccessChain %9 %35 
                                                      OpStore %102 %101 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_2 %109 = OpVectorShuffle %108 %108 3 3 
                                       f32_2 %110 = OpFDiv %107 %109 
                                       f32_3 %111 = OpLoad %43 
                                       f32_3 %112 = OpVectorShuffle %111 %110 3 4 2 
                                                      OpStore %43 %112 
                         read_only Texture2D %116 = OpLoad %115 
                                     sampler %120 = OpLoad %119 
                  read_only Texture2DSampled %122 = OpSampledImage %116 %120 
                                       f32_3 %123 = OpLoad %43 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                       f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                                         f32 %126 = OpCompositeExtract %125 0 
                                Private f32* %127 = OpAccessChain %43 %35 
                                                      OpStore %127 %126 
                                         u32 %132 = OpLoad %131 
                                         i32 %133 = OpBitcast %132 
                                Uniform i32* %138 = OpAccessChain %136 %46 
                                         i32 %139 = OpLoad %138 
                                         i32 %140 = OpIAdd %133 %139 
                                                      OpStore %129 %140 
                                         i32 %141 = OpLoad %129 
                                         i32 %143 = OpIMul %141 %142 
                                                      OpStore %129 %143 
                                Private f32* %145 = OpAccessChain %43 %35 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFNegate %146 
                                         i32 %154 = OpLoad %129 
                                         i32 %155 = OpSDiv %154 %142 
                                Uniform f32* %157 = OpAccessChain %153 %46 %155 %156 %78 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFAdd %147 %158 
                                                      OpStore %144 %159 
                                Private f32* %160 = OpAccessChain %9 %35 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpLoad %144 
                                         f32 %163 = OpFMul %161 %162 
                                Private f32* %164 = OpAccessChain %43 %35 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %35 
                                                      OpStore %167 %166 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 0 0 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFMul %169 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 6 
                                                      OpStore %9 %176 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_2 %184 = OpLoad vs_TEXCOORD0 
                                       f32_4 %185 = OpImageSampleImplicitLod %181 %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore %51 %186 
                                       f32_3 %187 = OpLoad %51 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %187 %190 
                                                      OpStore %51 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 3 
                                       f32_3 %194 = OpLoad %51 
                                       f32_3 %195 = OpFMul %193 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 2 6 
                                                      OpStore %9 %197 
                                       f32_3 %200 = OpLoad vs_TEXCOORD1 
                                       f32_4 %201 = OpLoad %198 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %198 %202 
                                Private f32* %203 = OpAccessChain %198 %78 
                                                      OpStore %203 %100 
                                         i32 %205 = OpLoad %129 
                                         i32 %206 = OpSDiv %205 %142 
                              Uniform f32_4* %207 = OpAccessChain %153 %46 %206 %46 
                                       f32_4 %208 = OpLoad %207 
                                       f32_4 %209 = OpLoad %198 
                                         f32 %210 = OpDot %208 %209 
                                Private f32* %211 = OpAccessChain %204 %35 
                                                      OpStore %211 %210 
                                         i32 %212 = OpLoad %129 
                                         i32 %213 = OpSDiv %212 %142 
                              Uniform f32_4* %214 = OpAccessChain %153 %46 %213 %58 
                                       f32_4 %215 = OpLoad %214 
                                       f32_4 %216 = OpLoad %198 
                                         f32 %217 = OpDot %215 %216 
                                Private f32* %218 = OpAccessChain %204 %61 
                                                      OpStore %218 %217 
                                         i32 %219 = OpLoad %129 
                                         i32 %220 = OpSDiv %219 %142 
                              Uniform f32_4* %221 = OpAccessChain %153 %46 %220 %63 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %198 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %204 %53 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %204 
                                       f32_3 %228 = OpLoad vs_TEXCOORD3 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %198 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %198 %231 
                                       f32_4 %232 = OpLoad %198 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %235 = OpExtInst %1 40 %233 %234 
                                       f32_4 %236 = OpLoad %198 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %198 %237 
                                       f32_3 %238 = OpLoad %51 
                                       f32_4 %239 = OpLoad %198 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                                      OpStore %51 %241 
                                       f32_3 %243 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %244 = OpAccessChain %19 %58 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %243 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 40 %248 %99 
                                                      OpStore %242 %249 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 3 
                                         f32 %254 = OpLoad %242 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_3 %257 = OpLoad %51 
                                       f32_3 %258 = OpFAdd %256 %257 
                                       f32_4 %259 = OpLoad %251 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %251 %260 
                                 Output f32* %262 = OpAccessChain %251 %78 
                                                      OpStore %262 %100 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 194
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 %185 %187 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate vs_TEXCOORD5 Location 187 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %184 = OpVariable Output 
                                Input f32_4* %185 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %188 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD4 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                       f32_4 %186 = OpLoad %185 
                                                      OpStore %184 %186 
                                                      OpStore vs_TEXCOORD5 %188 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFNegate %190 
                                 Output f32* %192 = OpAccessChain %92 %28 %88 
                                                      OpStore %192 %191 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 90
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %29 %47 %68 %74 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpDecorate %29 Location 29 
                                               OpMemberDecorate %34 0 Offset 34 
                                               OpMemberDecorate %34 1 Offset 34 
                                               OpMemberDecorate %34 2 Offset 34 
                                               OpDecorate %34 Block 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate vs_TEXCOORD4 Location 68 
                                               OpDecorate %74 Location 74 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypePointer Input %24 
                          Input f32_4* %29 = OpVariable Input 
                                       %34 = OpTypeStruct %24 %24 %24 
                                       %35 = OpTypePointer Uniform %34 
Uniform struct {f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
                                       %37 = OpTypeInt 32 1 
                                   i32 %38 = OpConstant 2 
                                       %39 = OpTypePointer Uniform %24 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                   i32 %61 = OpConstant 1 
                                       %67 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD4 = OpVariable Input 
                                   f32 %71 = OpConstant 3.674022E-40 
                                       %73 = OpTypePointer Output %24 
                         Output f32_4* %74 = OpVariable Output 
                                       %85 = OpTypeInt 32 0 
                                   u32 %86 = OpConstant 3 
                                       %87 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                                 f32_4 %30 = OpLoad %29 
                                 f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                 f32_3 %32 = OpFMul %27 %31 
                                               OpStore %9 %32 
                                 f32_3 %33 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %36 %38 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %33 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %36 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                 f32_3 %57 = OpLoad %9 
                                   f32 %58 = OpLoad %45 
                                 f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                 f32_3 %60 = OpFMul %57 %59 
                        Uniform f32_4* %62 = OpAccessChain %36 %61 
                                 f32_4 %63 = OpLoad %62 
                                 f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                 f32_3 %65 = OpFNegate %64 
                                 f32_3 %66 = OpFAdd %60 %65 
                                               OpStore %9 %66 
                                   f32 %69 = OpLoad vs_TEXCOORD4 
                                               OpStore %45 %69 
                                   f32 %70 = OpLoad %45 
                                   f32 %72 = OpExtInst %1 43 %70 %55 %71 
                                               OpStore %45 %72 
                                   f32 %75 = OpLoad %45 
                                 f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                 f32_3 %77 = OpLoad %9 
                                 f32_3 %78 = OpFMul %76 %77 
                        Uniform f32_4* %79 = OpAccessChain %36 %61 
                                 f32_4 %80 = OpLoad %79 
                                 f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                 f32_3 %82 = OpFAdd %78 %81 
                                 f32_4 %83 = OpLoad %74 
                                 f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                               OpStore %74 %84 
                           Output f32* %88 = OpAccessChain %74 %86 
                                               OpStore %88 %71 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 282
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %153 %188 %191 %192 %270 %275 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 188 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate vs_TEXCOORD3 Location 270 
                                                      OpDecorate vs_TEXCOORD5 Location 275 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                                             %152 = OpTypePointer Input %51 
                                Input f32_3* %153 = OpVariable Input 
                                         i32 %155 = OpConstant 9 
                                Private f32* %173 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %191 = OpVariable Output 
                                Input f32_4* %192 = OpVariable Input 
                              Private f32_4* %210 = OpVariable Private 
                                             %216 = OpTypePointer Private %51 
                              Private f32_3* %217 = OpVariable Private 
                                         i32 %218 = OpConstant 4 
                                         i32 %224 = OpConstant 5 
                                         i32 %230 = OpConstant 6 
                                         i32 %236 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                       f32_3 %273 = OpConstantComposite %122 %122 %122 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %276 = OpConstantComposite %122 %122 %122 %122 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %9 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %9 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %9 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %9 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %9 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %9 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %9 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %9 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                              Uniform f32_4* %156 = OpAccessChain %21 %155 %29 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %154 %158 
                                Private f32* %160 = OpAccessChain %9 %106 
                                                      OpStore %160 %159 
                                       f32_3 %161 = OpLoad %153 
                              Uniform f32_4* %162 = OpAccessChain %21 %155 %24 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                         f32 %165 = OpDot %161 %164 
                                Private f32* %166 = OpAccessChain %9 %90 
                                                      OpStore %166 %165 
                                       f32_3 %167 = OpLoad %153 
                              Uniform f32_4* %168 = OpAccessChain %21 %155 %37 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                         f32 %171 = OpDot %167 %170 
                                Private f32* %172 = OpAccessChain %9 %98 
                                                      OpStore %172 %171 
                                       f32_4 %174 = OpLoad %9 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                         f32 %178 = OpDot %175 %177 
                                                      OpStore %173 %178 
                                         f32 %179 = OpLoad %173 
                                         f32 %180 = OpExtInst %1 32 %179 
                                                      OpStore %173 %180 
                                         f32 %181 = OpLoad %173 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                                      OpStore vs_TEXCOORD1 %190 
                                       f32_4 %193 = OpLoad %192 
                                                      OpStore %191 %193 
                                Private f32* %194 = OpAccessChain %9 %90 
                                         f32 %195 = OpLoad %194 
                                Private f32* %196 = OpAccessChain %9 %90 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %195 %197 
                                Private f32* %199 = OpAccessChain %45 %106 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %106 
                                         f32 %201 = OpLoad %200 
                                Private f32* %202 = OpAccessChain %9 %106 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFMul %201 %203 
                                Private f32* %205 = OpAccessChain %45 %106 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFNegate %206 
                                         f32 %208 = OpFAdd %204 %207 
                                Private f32* %209 = OpAccessChain %45 %106 
                                                      OpStore %209 %208 
                                       f32_4 %211 = OpLoad %9 
                                       f32_4 %212 = OpVectorShuffle %211 %211 1 2 2 0 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpVectorShuffle %213 %213 0 1 2 2 
                                       f32_4 %215 = OpFMul %212 %214 
                                                      OpStore %210 %215 
                              Uniform f32_4* %219 = OpAccessChain %21 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %210 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %217 %106 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %21 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %210 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %217 %90 
                                                      OpStore %229 %228 
                              Uniform f32_4* %231 = OpAccessChain %21 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_4 %233 = OpLoad %210 
                                         f32 %234 = OpDot %232 %233 
                                Private f32* %235 = OpAccessChain %217 %98 
                                                      OpStore %235 %234 
                              Uniform f32_4* %237 = OpAccessChain %21 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_4 %240 = OpLoad %45 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 0 0 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_3 %243 = OpLoad %217 
                                       f32_3 %244 = OpFAdd %242 %243 
                                       f32_4 %245 = OpLoad %45 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 6 3 
                                                      OpStore %45 %246 
                                Private f32* %247 = OpAccessChain %9 %133 
                                                      OpStore %247 %111 
                              Uniform f32_4* %248 = OpAccessChain %21 %24 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %9 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %210 %106 
                                                      OpStore %252 %251 
                              Uniform f32_4* %253 = OpAccessChain %21 %37 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %9 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %210 %90 
                                                      OpStore %257 %256 
                              Uniform f32_4* %258 = OpAccessChain %21 %47 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %9 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %210 %98 
                                                      OpStore %262 %261 
                                       f32_4 %263 = OpLoad %45 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %210 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFAdd %264 %266 
                                       f32_4 %268 = OpLoad %9 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %9 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %274 = OpExtInst %1 40 %272 %273 
                                                      OpStore vs_TEXCOORD3 %274 
                                                      OpStore vs_TEXCOORD5 %276 
                                 Output f32* %277 = OpAccessChain %94 %29 %90 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                 Output f32* %280 = OpAccessChain %94 %29 %90 
                                                      OpStore %280 %279 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %46 %52 %64 %82 %88 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpDecorate vs_TEXCOORD1 Location 11 
                                               OpMemberDecorate %14 0 Offset 14 
                                               OpMemberDecorate %14 1 Offset 14 
                                               OpMemberDecorate %14 2 Offset 14 
                                               OpDecorate %14 Block 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD0 Location 46 
                                               OpDecorate %52 Location 52 
                                               OpDecorate vs_TEXCOORD3 Location 64 
                                               OpDecorate vs_TEXCOORD4 Location 82 
                                               OpDecorate %88 Location 88 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                       %13 = OpTypeVector %6 4 
                                       %14 = OpTypeStruct %13 %13 %13 
                                       %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                       %17 = OpTypeInt 32 1 
                                   i32 %18 = OpConstant 0 
                                       %19 = OpTypePointer Uniform %13 
                                       %24 = OpTypeInt 32 0 
                                   u32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Private %6 
                                   f32 %30 = OpConstant 3.674022E-40 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %44 = OpTypeVector %6 2 
                                       %45 = OpTypePointer Input %44 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %51 = OpTypePointer Input %13 
                          Input f32_4* %52 = OpVariable Input 
                        Private f32_3* %56 = OpVariable Private 
                                   i32 %58 = OpConstant 2 
                 Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                   i32 %74 = OpConstant 1 
                          Private f32* %80 = OpVariable Private 
                                       %81 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD4 = OpVariable Input 
                                   f32 %85 = OpConstant 3.674022E-40 
                                       %87 = OpTypePointer Output %13 
                         Output f32_4* %88 = OpVariable Output 
                                   u32 %99 = OpConstant 3 
                                      %100 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_3 %12 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %20 = OpAccessChain %16 %18 
                                 f32_4 %21 = OpLoad %20 
                                 f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                   f32 %23 = OpDot %12 %22 
                          Private f32* %27 = OpAccessChain %9 %25 
                                               OpStore %27 %23 
                          Private f32* %28 = OpAccessChain %9 %25 
                                   f32 %29 = OpLoad %28 
                                   f32 %31 = OpExtInst %1 40 %29 %30 
                          Private f32* %32 = OpAccessChain %9 %25 
                                               OpStore %32 %31 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %47 = OpLoad vs_TEXCOORD0 
                                 f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                               OpStore %33 %49 
                                 f32_3 %50 = OpLoad %33 
                                 f32_4 %53 = OpLoad %52 
                                 f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                 f32_3 %55 = OpFMul %50 %54 
                                               OpStore %33 %55 
                                 f32_3 %57 = OpLoad %33 
                        Uniform f32_4* %59 = OpAccessChain %16 %58 
                                 f32_4 %60 = OpLoad %59 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                 f32_3 %62 = OpFMul %57 %61 
                                               OpStore %56 %62 
                                 f32_3 %63 = OpLoad %33 
                                 f32_3 %65 = OpLoad vs_TEXCOORD3 
                                 f32_3 %66 = OpFMul %63 %65 
                                               OpStore %33 %66 
                                 f32_3 %67 = OpLoad %56 
                                 f32_3 %68 = OpLoad %9 
                                 f32_3 %69 = OpVectorShuffle %68 %68 0 0 0 
                                 f32_3 %70 = OpFMul %67 %69 
                                 f32_3 %71 = OpLoad %33 
                                 f32_3 %72 = OpFAdd %70 %71 
                                               OpStore %9 %72 
                                 f32_3 %73 = OpLoad %9 
                        Uniform f32_4* %75 = OpAccessChain %16 %74 
                                 f32_4 %76 = OpLoad %75 
                                 f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                 f32_3 %78 = OpFNegate %77 
                                 f32_3 %79 = OpFAdd %73 %78 
                                               OpStore %9 %79 
                                   f32 %83 = OpLoad vs_TEXCOORD4 
                                               OpStore %80 %83 
                                   f32 %84 = OpLoad %80 
                                   f32 %86 = OpExtInst %1 43 %84 %30 %85 
                                               OpStore %80 %86 
                                   f32 %89 = OpLoad %80 
                                 f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                 f32_3 %91 = OpLoad %9 
                                 f32_3 %92 = OpFMul %90 %91 
                        Uniform f32_4* %93 = OpAccessChain %16 %74 
                                 f32_4 %94 = OpLoad %93 
                                 f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                 f32_3 %96 = OpFAdd %92 %95 
                                 f32_4 %97 = OpLoad %88 
                                 f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                               OpStore %88 %98 
                          Output f32* %101 = OpAccessChain %88 %99 
                                               OpStore %101 %85 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4 = inversesqrt(u_xlat4);
    vs_TEXCOORD1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat2 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %97 %102 %109 %110 %123 %151 %157 %158 %185 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 97 
                                                      OpDecorate vs_TEXCOORD5 Location 102 
                                                      OpDecorate vs_TEXCOORD0 Location 109 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %123 Location 123 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD6 Location 185 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                             %108 = OpTypePointer Output %103 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %110 = OpVariable Input 
                                         i32 %113 = OpConstant 4 
                                             %122 = OpTypePointer Input %50 
                                Input f32_3* %123 = OpVariable Input 
                                         u32 %129 = OpConstant 0 
                                Private f32* %143 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                                Input f32_4* %158 = OpVariable Input 
                                Private f32* %160 = OpVariable Private 
                                             %163 = OpTypePointer Uniform %6 
                                         f32 %169 = OpConstant 3.674022E-40 
                                       f32_2 %170 = OpConstantComposite %169 %169 
                                         u32 %176 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %186 = OpConstant 3.674022E-40 
                                       f32_4 %187 = OpConstantComposite %186 %186 %186 %186 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                                      OpStore vs_TEXCOORD4 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %107 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFMul %112 %116 
                              Uniform f32_4* %118 = OpAccessChain %21 %113 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
                                       f32_2 %121 = OpFAdd %117 %120 
                                                      OpStore vs_TEXCOORD0 %121 
                                       f32_3 %124 = OpLoad %123 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %28 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %44 %129 
                                                      OpStore %130 %128 
                                       f32_3 %131 = OpLoad %123 
                              Uniform f32_4* %132 = OpAccessChain %21 %36 %23 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                         f32 %135 = OpDot %131 %134 
                                Private f32* %136 = OpAccessChain %44 %88 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %123 
                              Uniform f32_4* %138 = OpAccessChain %21 %36 %36 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %44 %98 
                                                      OpStore %142 %141 
                                       f32_4 %144 = OpLoad %44 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %44 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %143 %148 
                                         f32 %149 = OpLoad %143 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %143 %150 
                                         f32 %152 = OpLoad %143 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_4 %154 = OpLoad %44 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %153 %155 
                                                      OpStore vs_TEXCOORD1 %156 
                                       f32_4 %159 = OpLoad %158 
                                                      OpStore %157 %159 
                                Private f32* %161 = OpAccessChain %9 %88 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %164 = OpAccessChain %21 %28 %129 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %162 %165 
                                                      OpStore %160 %166 
                                       f32_4 %167 = OpLoad %9 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 1 5 3 
                                                      OpStore %9 %173 
                                         f32 %174 = OpLoad %160 
                                         f32 %175 = OpFMul %174 %169 
                                Private f32* %177 = OpAccessChain %9 %176 
                                                      OpStore %177 %175 
                                       f32_4 %178 = OpLoad %9 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad vs_TEXCOORD5 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %184 
                                                      OpStore vs_TEXCOORD6 %187 
                                 Output f32* %188 = OpAccessChain %92 %28 %88 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %92 %28 %88 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 221
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %163 %182 %207 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate vs_TEXCOORD4 Location 182 
                                                      OpDecorate %207 Location 207 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %175 = OpConstant 6 
                                             %181 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %197 = OpConstant 7 
                                             %206 = OpTypePointer Output %13 
                               Output f32_4* %207 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %58 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %95 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %9 
                                         f32 %172 = OpLoad %162 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %9 %180 
                                         f32 %183 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %184 = OpAccessChain %19 %53 %56 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFDiv %183 %185 
                                                      OpStore %162 %186 
                                         f32 %187 = OpLoad %162 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %96 
                                                      OpStore %162 %189 
                                         f32 %190 = OpLoad %162 
                                Uniform f32* %191 = OpAccessChain %19 %53 %48 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %162 %193 
                                         f32 %194 = OpLoad %162 
                                         f32 %195 = OpExtInst %1 40 %194 %95 
                                                      OpStore %162 %195 
                                         f32 %196 = OpLoad %162 
                                Uniform f32* %198 = OpAccessChain %19 %197 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %196 %199 
                                Uniform f32* %201 = OpAccessChain %19 %197 %73 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                                      OpStore %162 %203 
                                         f32 %204 = OpLoad %162 
                                         f32 %205 = OpExtInst %1 43 %204 %95 %96 
                                                      OpStore %162 %205 
                                         f32 %208 = OpLoad %162 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpFMul %209 %210 
                              Uniform f32_4* %212 = OpAccessChain %19 %175 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFAdd %211 %214 
                                       f32_4 %216 = OpLoad %207 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %207 %217 
                                 Output f32* %219 = OpAccessChain %207 %73 
                                                      OpStore %219 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat3;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat6 = u_xlat1.y * u_xlat1.y;
    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat2.x = dot(unity_SHBr, u_xlat1);
    u_xlat2.y = dot(unity_SHBg, u_xlat1);
    u_xlat2.z = dot(unity_SHBb, u_xlat1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat3 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 245
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %99 %104 %111 %112 %125 %161 %164 %165 %202 %237 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 99 
                                                      OpDecorate vs_TEXCOORD5 Location 104 
                                                      OpDecorate vs_TEXCOORD0 Location 111 
                                                      OpDecorate %112 Location 112 
                                                      OpDecorate %125 Location 125 
                                                      OpDecorate vs_TEXCOORD1 Location 161 
                                                      OpDecorate %164 Location 164 
                                                      OpDecorate %165 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 202 
                                                      OpDecorate vs_TEXCOORD6 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 5 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 7 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %100 = OpConstant 2 
                                             %101 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %105 = OpTypeVector %6 2 
                                             %110 = OpTypePointer Output %105 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %112 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                             %124 = OpTypePointer Input %51 
                                Input f32_3* %125 = OpVariable Input 
                                         i32 %127 = OpConstant 6 
                                         u32 %132 = OpConstant 0 
                                Private f32* %146 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %164 = OpVariable Output 
                                Input f32_4* %165 = OpVariable Input 
                                             %185 = OpTypePointer Private %51 
                              Private f32_3* %186 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %203 = OpConstant 4 
                                Private f32* %212 = OpVariable Private 
                                             %215 = OpTypePointer Uniform %6 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_2 %222 = OpConstantComposite %221 %221 
                                         u32 %228 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_4 %239 = OpConstantComposite %238 %238 %238 %238 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %102 = OpAccessChain %9 %100 
                                         f32 %103 = OpLoad %102 
                                                      OpStore vs_TEXCOORD4 %103 
                                       f32_4 %106 = OpLoad %9 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_4 %108 = OpLoad vs_TEXCOORD5 
                                       f32_4 %109 = OpVectorShuffle %108 %107 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %109 
                                       f32_4 %113 = OpLoad %112 
                                       f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_2 %118 = OpVectorShuffle %117 %117 0 1 
                                       f32_2 %119 = OpFMul %114 %118 
                              Uniform f32_4* %120 = OpAccessChain %21 %115 
                                       f32_4 %121 = OpLoad %120 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 3 
                                       f32_2 %123 = OpFAdd %119 %122 
                                                      OpStore vs_TEXCOORD0 %123 
                                       f32_3 %126 = OpLoad %125 
                              Uniform f32_4* %128 = OpAccessChain %21 %127 %29 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                         f32 %131 = OpDot %126 %130 
                                Private f32* %133 = OpAccessChain %45 %132 
                                                      OpStore %133 %131 
                                       f32_3 %134 = OpLoad %125 
                              Uniform f32_4* %135 = OpAccessChain %21 %127 %24 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                Private f32* %139 = OpAccessChain %45 %90 
                                                      OpStore %139 %138 
                                       f32_3 %140 = OpLoad %125 
                              Uniform f32_4* %141 = OpAccessChain %21 %127 %37 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %140 %143 
                                Private f32* %145 = OpAccessChain %45 %100 
                                                      OpStore %145 %144 
                                       f32_4 %147 = OpLoad %45 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_4 %149 = OpLoad %45 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                         f32 %151 = OpDot %148 %150 
                                                      OpStore %146 %151 
                                         f32 %152 = OpLoad %146 
                                         f32 %153 = OpExtInst %1 32 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                       f32_3 %155 = OpCompositeConstruct %154 %154 %154 
                                       f32_4 %156 = OpLoad %45 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %45 
                                       f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                      OpStore %45 %160 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                                      OpStore vs_TEXCOORD1 %163 
                                       f32_4 %166 = OpLoad %165 
                                                      OpStore %164 %166 
                                Private f32* %167 = OpAccessChain %45 %90 
                                         f32 %168 = OpLoad %167 
                                Private f32* %169 = OpAccessChain %45 %90 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %168 %170 
                                                      OpStore %146 %171 
                                Private f32* %172 = OpAccessChain %45 %132 
                                         f32 %173 = OpLoad %172 
                                Private f32* %174 = OpAccessChain %45 %132 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                         f32 %177 = OpLoad %146 
                                         f32 %178 = OpFNegate %177 
                                         f32 %179 = OpFAdd %176 %178 
                                                      OpStore %146 %179 
                                       f32_4 %180 = OpLoad %45 
                                       f32_4 %181 = OpVectorShuffle %180 %180 1 2 2 0 
                                       f32_4 %182 = OpLoad %45 
                                       f32_4 %183 = OpVectorShuffle %182 %182 0 1 2 2 
                                       f32_4 %184 = OpFMul %181 %183 
                                                      OpStore %45 %184 
                              Uniform f32_4* %187 = OpAccessChain %21 %24 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %45 
                                         f32 %190 = OpDot %188 %189 
                                Private f32* %191 = OpAccessChain %186 %132 
                                                      OpStore %191 %190 
                              Uniform f32_4* %192 = OpAccessChain %21 %37 
                                       f32_4 %193 = OpLoad %192 
                                       f32_4 %194 = OpLoad %45 
                                         f32 %195 = OpDot %193 %194 
                                Private f32* %196 = OpAccessChain %186 %90 
                                                      OpStore %196 %195 
                              Uniform f32_4* %197 = OpAccessChain %21 %47 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpLoad %45 
                                         f32 %200 = OpDot %198 %199 
                                Private f32* %201 = OpAccessChain %186 %100 
                                                      OpStore %201 %200 
                              Uniform f32_4* %204 = OpAccessChain %21 %203 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                         f32 %207 = OpLoad %146 
                                       f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_3 %210 = OpLoad %186 
                                       f32_3 %211 = OpFAdd %209 %210 
                                                      OpStore vs_TEXCOORD3 %211 
                                Private f32* %213 = OpAccessChain %9 %90 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %216 = OpAccessChain %21 %29 %132 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %214 %217 
                                                      OpStore %212 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 3 
                                       f32_2 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 1 5 3 
                                                      OpStore %9 %225 
                                         f32 %226 = OpLoad %212 
                                         f32 %227 = OpFMul %226 %221 
                                Private f32* %229 = OpAccessChain %9 %228 
                                                      OpStore %229 %227 
                                       f32_4 %230 = OpLoad %9 
                                       f32_2 %231 = OpVectorShuffle %230 %230 2 2 
                                       f32_4 %232 = OpLoad %9 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 3 
                                       f32_2 %234 = OpFAdd %231 %233 
                                       f32_4 %235 = OpLoad vs_TEXCOORD5 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %236 
                                                      OpStore vs_TEXCOORD6 %239 
                                 Output f32* %240 = OpAccessChain %94 %29 %90 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                 Output f32* %243 = OpAccessChain %94 %29 %90 
                                                      OpStore %243 %242 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 265
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %164 %189 %226 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate vs_TEXCOORD4 Location 226 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 7 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 8 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 6 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 11 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                             %162 = OpTypePointer Private %13 
                              Private f32_4* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %170 = OpConstant 3 
                                         i32 %176 = OpConstant 4 
                                         i32 %182 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %196 = OpConstantComposite %95 %95 %95 
                                Private f32* %204 = OpVariable Private 
                                         i32 %219 = OpConstant 9 
                                             %225 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %241 = OpConstant 10 
                                             %250 = OpTypePointer Output %13 
                               Output f32_4* %251 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                                       f32_4 %166 = OpLoad %163 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %163 %167 
                                Private f32* %168 = OpAccessChain %163 %73 
                                                      OpStore %168 %96 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpLoad %163 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %169 %31 
                                                      OpStore %175 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %163 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %169 %56 
                                                      OpStore %181 %180 
                              Uniform f32_4* %183 = OpAccessChain %19 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %163 
                                         f32 %186 = OpDot %184 %185 
                                Private f32* %187 = OpAccessChain %169 %48 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %169 
                                       f32_3 %190 = OpLoad vs_TEXCOORD3 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %163 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %163 %193 
                                       f32_4 %194 = OpLoad %163 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %197 = OpExtInst %1 40 %195 %196 
                                       f32_4 %198 = OpLoad %163 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %163 %199 
                                       f32_3 %200 = OpLoad %46 
                                       f32_4 %201 = OpLoad %163 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %46 %203 
                                       f32_3 %205 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %206 = OpAccessChain %19 %58 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 40 %210 %95 
                                                      OpStore %204 %211 
                                       f32_3 %212 = OpLoad %9 
                                         f32 %213 = OpLoad %204 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_3 %216 = OpLoad %46 
                                       f32_3 %217 = OpFAdd %215 %216 
                                                      OpStore %9 %217 
                                       f32_3 %218 = OpLoad %9 
                              Uniform f32_4* %220 = OpAccessChain %19 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %9 %224 
                                         f32 %227 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %228 = OpAccessChain %19 %53 %56 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFDiv %227 %229 
                                                      OpStore %204 %230 
                                         f32 %231 = OpLoad %204 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %232 %96 
                                                      OpStore %204 %233 
                                         f32 %234 = OpLoad %204 
                                Uniform f32* %235 = OpAccessChain %19 %53 %48 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                                      OpStore %204 %237 
                                         f32 %238 = OpLoad %204 
                                         f32 %239 = OpExtInst %1 40 %238 %95 
                                                      OpStore %204 %239 
                                         f32 %240 = OpLoad %204 
                                Uniform f32* %242 = OpAccessChain %19 %241 %48 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %240 %243 
                                Uniform f32* %245 = OpAccessChain %19 %241 %73 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFAdd %244 %246 
                                                      OpStore %204 %247 
                                         f32 %248 = OpLoad %204 
                                         f32 %249 = OpExtInst %1 43 %248 %95 %96 
                                                      OpStore %204 %249 
                                         f32 %252 = OpLoad %204 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_3 %254 = OpLoad %9 
                                       f32_3 %255 = OpFMul %253 %254 
                              Uniform f32_4* %256 = OpAccessChain %19 %219 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFAdd %255 %258 
                                       f32_4 %260 = OpLoad %251 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %251 %261 
                                 Output f32* %263 = OpAccessChain %251 %73 
                                                      OpStore %263 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 194
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 %185 %187 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate vs_TEXCOORD5 Location 187 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %184 = OpVariable Output 
                                Input f32_4* %185 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                       f32_4 %188 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD4 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                       f32_4 %186 = OpLoad %185 
                                                      OpStore %184 %186 
                                                      OpStore vs_TEXCOORD5 %188 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFNegate %190 
                                 Output f32* %192 = OpAccessChain %92 %28 %88 
                                                      OpStore %192 %191 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 90
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %22 %29 %47 %68 %74 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD0 Location 22 
                                               OpDecorate %29 Location 29 
                                               OpMemberDecorate %34 0 Offset 34 
                                               OpMemberDecorate %34 1 Offset 34 
                                               OpMemberDecorate %34 2 Offset 34 
                                               OpDecorate %34 Block 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate vs_TEXCOORD1 Location 47 
                                               OpDecorate vs_TEXCOORD4 Location 68 
                                               OpDecorate %74 Location 74 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypeVector %6 2 
                                       %21 = OpTypePointer Input %20 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %24 = OpTypeVector %6 4 
                                       %28 = OpTypePointer Input %24 
                          Input f32_4* %29 = OpVariable Input 
                                       %34 = OpTypeStruct %24 %24 %24 
                                       %35 = OpTypePointer Uniform %34 
Uniform struct {f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
                                       %37 = OpTypeInt 32 1 
                                   i32 %38 = OpConstant 2 
                                       %39 = OpTypePointer Uniform %24 
                                       %44 = OpTypePointer Private %6 
                          Private f32* %45 = OpVariable Private 
                                       %46 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                   i32 %49 = OpConstant 0 
                                   f32 %55 = OpConstant 3.674022E-40 
                                   i32 %61 = OpConstant 1 
                                       %67 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD4 = OpVariable Input 
                                   f32 %71 = OpConstant 3.674022E-40 
                                       %73 = OpTypePointer Output %24 
                         Output f32_4* %74 = OpVariable Output 
                                       %85 = OpTypeInt 32 0 
                                   u32 %86 = OpConstant 3 
                                       %87 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_2 %23 = OpLoad vs_TEXCOORD0 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                 f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                               OpStore %9 %26 
                                 f32_3 %27 = OpLoad %9 
                                 f32_4 %30 = OpLoad %29 
                                 f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                 f32_3 %32 = OpFMul %27 %31 
                                               OpStore %9 %32 
                                 f32_3 %33 = OpLoad %9 
                        Uniform f32_4* %40 = OpAccessChain %36 %38 
                                 f32_4 %41 = OpLoad %40 
                                 f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                 f32_3 %43 = OpFMul %33 %42 
                                               OpStore %9 %43 
                                 f32_3 %48 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %50 = OpAccessChain %36 %49 
                                 f32_4 %51 = OpLoad %50 
                                 f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                   f32 %53 = OpDot %48 %52 
                                               OpStore %45 %53 
                                   f32 %54 = OpLoad %45 
                                   f32 %56 = OpExtInst %1 40 %54 %55 
                                               OpStore %45 %56 
                                 f32_3 %57 = OpLoad %9 
                                   f32 %58 = OpLoad %45 
                                 f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                 f32_3 %60 = OpFMul %57 %59 
                        Uniform f32_4* %62 = OpAccessChain %36 %61 
                                 f32_4 %63 = OpLoad %62 
                                 f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                 f32_3 %65 = OpFNegate %64 
                                 f32_3 %66 = OpFAdd %60 %65 
                                               OpStore %9 %66 
                                   f32 %69 = OpLoad vs_TEXCOORD4 
                                               OpStore %45 %69 
                                   f32 %70 = OpLoad %45 
                                   f32 %72 = OpExtInst %1 43 %70 %55 %71 
                                               OpStore %45 %72 
                                   f32 %75 = OpLoad %45 
                                 f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                 f32_3 %77 = OpLoad %9 
                                 f32_3 %78 = OpFMul %76 %77 
                        Uniform f32_4* %79 = OpAccessChain %36 %61 
                                 f32_4 %80 = OpLoad %79 
                                 f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                 f32_3 %82 = OpFAdd %78 %81 
                                 f32_4 %83 = OpLoad %74 
                                 f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                               OpStore %74 %84 
                           Output f32* %88 = OpAccessChain %74 %86 
                                               OpStore %88 %71 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _LightColor0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vs_TEXCOORD3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 401
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %122 %134 %135 %148 %184 %187 %190 %191 %389 %395 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpMemberDecorate %21 17 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 122 
                                                      OpDecorate vs_TEXCOORD0 Location 134 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 184 
                                                      OpDecorate vs_TEXCOORD2 Location 187 
                                                      OpDecorate %190 Location 190 
                                                      OpDecorate %191 Location 191 
                                                      OpDecorate vs_TEXCOORD3 Location 389 
                                                      OpDecorate vs_TEXCOORD5 Location 395 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %7 %7 %7 %18 %19 %20 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 13 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 15 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypePointer Private %6 
                                Private f32* %102 = OpVariable Private 
                                         u32 %103 = OpConstant 2 
                                             %106 = OpTypePointer Uniform %6 
                                         f32 %112 = OpConstant 3.674022E-40 
                                         f32 %119 = OpConstant 3.674022E-40 
                                             %121 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %124 = OpConstant 16 
                                         u32 %128 = OpConstant 3 
                                             %132 = OpTypeVector %6 2 
                                             %133 = OpTypePointer Output %132 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %135 = OpVariable Input 
                                         i32 %138 = OpConstant 17 
                                             %147 = OpTypePointer Input %53 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 14 
                                         u32 %155 = OpConstant 0 
                                             %183 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %190 = OpVariable Output 
                                Input f32_4* %191 = OpVariable Input 
                              Private f32_4* %211 = OpVariable Private 
                                         i32 %212 = OpConstant 9 
                                         i32 %218 = OpConstant 10 
                                         i32 %224 = OpConstant 11 
                                         i32 %230 = OpConstant 12 
                                         i32 %243 = OpConstant 6 
                                         i32 %249 = OpConstant 7 
                                         i32 %255 = OpConstant 8 
                                       f32_3 %270 = OpConstantComposite %119 %119 %119 
                              Private f32_4* %280 = OpVariable Private 
                              Private f32_4* %288 = OpVariable Private 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_4 %325 = OpConstantComposite %324 %324 %324 %324 
                                         i32 %330 = OpConstant 4 
                                       f32_4 %334 = OpConstantComposite %112 %112 %112 %112 
                                       f32_4 %342 = OpConstantComposite %119 %119 %119 %119 
                                         i32 %349 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                Private f32* %104 = OpAccessChain %47 %103 
                                         f32 %105 = OpLoad %104 
                                Uniform f32* %107 = OpAccessChain %23 %31 %93 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFDiv %105 %108 
                                                      OpStore %102 %109 
                                         f32 %110 = OpLoad %102 
                                         f32 %111 = OpFNegate %110 
                                         f32 %113 = OpFAdd %111 %112 
                                                      OpStore %102 %113 
                                         f32 %114 = OpLoad %102 
                                Uniform f32* %115 = OpAccessChain %23 %31 %103 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFMul %114 %116 
                                                      OpStore %102 %117 
                                         f32 %118 = OpLoad %102 
                                         f32 %120 = OpExtInst %1 40 %118 %119 
                                                      OpStore %102 %120 
                                         f32 %123 = OpLoad %102 
                                Uniform f32* %125 = OpAccessChain %23 %124 %103 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFMul %123 %126 
                                Uniform f32* %129 = OpAccessChain %23 %124 %128 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFAdd %127 %130 
                                                      OpStore vs_TEXCOORD4 %131 
                                       f32_4 %136 = OpLoad %135 
                                       f32_2 %137 = OpVectorShuffle %136 %136 0 1 
                              Uniform f32_4* %139 = OpAccessChain %23 %138 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %137 %141 
                              Uniform f32_4* %143 = OpAccessChain %23 %138 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %23 %150 %31 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %156 = OpAccessChain %47 %155 
                                                      OpStore %156 %154 
                                       f32_3 %157 = OpLoad %148 
                              Uniform f32_4* %158 = OpAccessChain %23 %150 %26 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %157 %160 
                                Private f32* %162 = OpAccessChain %47 %93 
                                                      OpStore %162 %161 
                                       f32_3 %163 = OpLoad %148 
                              Uniform f32_4* %164 = OpAccessChain %23 %150 %39 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                         f32 %167 = OpDot %163 %166 
                                Private f32* %168 = OpAccessChain %47 %103 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %47 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %47 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %170 %172 
                                                      OpStore %102 %173 
                                         f32 %174 = OpLoad %102 
                                         f32 %175 = OpExtInst %1 32 %174 
                                                      OpStore %102 %175 
                                         f32 %176 = OpLoad %102 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_4 %178 = OpLoad %47 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_3 %180 = OpFMul %177 %179 
                                       f32_4 %181 = OpLoad %47 
                                       f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                                      OpStore %47 %182 
                                       f32_4 %185 = OpLoad %47 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                                      OpStore vs_TEXCOORD1 %186 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore vs_TEXCOORD2 %189 
                                       f32_4 %192 = OpLoad %191 
                                                      OpStore %190 %192 
                                Private f32* %193 = OpAccessChain %47 %93 
                                         f32 %194 = OpLoad %193 
                                Private f32* %195 = OpAccessChain %47 %93 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %194 %196 
                                                      OpStore %102 %197 
                                Private f32* %198 = OpAccessChain %47 %155 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %47 %155 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                         f32 %203 = OpLoad %102 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %202 %204 
                                                      OpStore %102 %205 
                                       f32_4 %206 = OpLoad %47 
                                       f32_4 %207 = OpVectorShuffle %206 %206 1 2 2 0 
                                       f32_4 %208 = OpLoad %47 
                                       f32_4 %209 = OpVectorShuffle %208 %208 0 1 2 2 
                                       f32_4 %210 = OpFMul %207 %209 
                                                      OpStore %65 %210 
                              Uniform f32_4* %213 = OpAccessChain %23 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_4 %215 = OpLoad %65 
                                         f32 %216 = OpDot %214 %215 
                                Private f32* %217 = OpAccessChain %211 %155 
                                                      OpStore %217 %216 
                              Uniform f32_4* %219 = OpAccessChain %23 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_4 %221 = OpLoad %65 
                                         f32 %222 = OpDot %220 %221 
                                Private f32* %223 = OpAccessChain %211 %93 
                                                      OpStore %223 %222 
                              Uniform f32_4* %225 = OpAccessChain %23 %224 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %65 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %211 %103 
                                                      OpStore %229 %228 
                              Uniform f32_4* %231 = OpAccessChain %23 %230 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                         f32 %234 = OpLoad %102 
                                       f32_3 %235 = OpCompositeConstruct %234 %234 %234 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_4 %237 = OpLoad %211 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %236 %238 
                                       f32_4 %240 = OpLoad %65 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %65 %241 
                                Private f32* %242 = OpAccessChain %47 %128 
                                                      OpStore %242 %112 
                              Uniform f32_4* %244 = OpAccessChain %23 %243 
                                       f32_4 %245 = OpLoad %244 
                                       f32_4 %246 = OpLoad %47 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %211 %155 
                                                      OpStore %248 %247 
                              Uniform f32_4* %250 = OpAccessChain %23 %249 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %47 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %211 %93 
                                                      OpStore %254 %253 
                              Uniform f32_4* %256 = OpAccessChain %23 %255 
                                       f32_4 %257 = OpLoad %256 
                                       f32_4 %258 = OpLoad %47 
                                         f32 %259 = OpDot %257 %258 
                                Private f32* %260 = OpAccessChain %211 %103 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %65 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %211 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %65 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %65 %267 
                                       f32_4 %268 = OpLoad %65 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %271 = OpExtInst %1 40 %269 %270 
                                       f32_4 %272 = OpLoad %65 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %65 %273 
                                       f32_4 %274 = OpLoad %9 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                                       f32_4 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %23 %39 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpFAdd %276 %278 
                                                      OpStore %211 %279 
                                       f32_4 %281 = OpLoad %47 
                                       f32_4 %282 = OpVectorShuffle %281 %281 1 1 1 1 
                                       f32_4 %283 = OpLoad %211 
                                       f32_4 %284 = OpFMul %282 %283 
                                                      OpStore %280 %284 
                                       f32_4 %285 = OpLoad %211 
                                       f32_4 %286 = OpLoad %211 
                                       f32_4 %287 = OpFMul %285 %286 
                                                      OpStore %211 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %289 0 0 0 0 
                                       f32_4 %291 = OpFNegate %290 
                              Uniform f32_4* %292 = OpAccessChain %23 %26 
                                       f32_4 %293 = OpLoad %292 
                                       f32_4 %294 = OpFAdd %291 %293 
                                                      OpStore %288 %294 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %295 2 2 2 2 
                                       f32_4 %297 = OpFNegate %296 
                              Uniform f32_4* %298 = OpAccessChain %23 %49 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpFAdd %297 %299 
                                                      OpStore %9 %300 
                                       f32_4 %301 = OpLoad %288 
                                       f32_4 %302 = OpLoad %47 
                                       f32_4 %303 = OpVectorShuffle %302 %302 0 0 0 0 
                                       f32_4 %304 = OpFMul %301 %303 
                                       f32_4 %305 = OpLoad %280 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %280 %306 
                                       f32_4 %307 = OpLoad %9 
                                       f32_4 %308 = OpLoad %47 
                                       f32_4 %309 = OpVectorShuffle %308 %308 2 2 2 2 
                                       f32_4 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %280 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %47 %312 
                                       f32_4 %313 = OpLoad %288 
                                       f32_4 %314 = OpLoad %288 
                                       f32_4 %315 = OpFMul %313 %314 
                                       f32_4 %316 = OpLoad %211 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %211 %317 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpLoad %9 
                                       f32_4 %320 = OpFMul %318 %319 
                                       f32_4 %321 = OpLoad %211 
                                       f32_4 %322 = OpFAdd %320 %321 
                                                      OpStore %9 %322 
                                       f32_4 %323 = OpLoad %9 
                                       f32_4 %326 = OpExtInst %1 40 %323 %325 
                                                      OpStore %9 %326 
                                       f32_4 %327 = OpLoad %9 
                                       f32_4 %328 = OpExtInst %1 32 %327 
                                                      OpStore %211 %328 
                                       f32_4 %329 = OpLoad %9 
                              Uniform f32_4* %331 = OpAccessChain %23 %330 
                                       f32_4 %332 = OpLoad %331 
                                       f32_4 %333 = OpFMul %329 %332 
                                       f32_4 %335 = OpFAdd %333 %334 
                                                      OpStore %9 %335 
                                       f32_4 %336 = OpLoad %9 
                                       f32_4 %337 = OpFDiv %334 %336 
                                                      OpStore %9 %337 
                                       f32_4 %338 = OpLoad %47 
                                       f32_4 %339 = OpLoad %211 
                                       f32_4 %340 = OpFMul %338 %339 
                                                      OpStore %47 %340 
                                       f32_4 %341 = OpLoad %47 
                                       f32_4 %343 = OpExtInst %1 40 %341 %342 
                                                      OpStore %47 %343 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpLoad %47 
                                       f32_4 %346 = OpFMul %344 %345 
                                                      OpStore %9 %346 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 1 1 1 
                              Uniform f32_4* %350 = OpAccessChain %23 %349 %26 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFMul %348 %352 
                                       f32_4 %354 = OpLoad %47 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %47 %355 
                              Uniform f32_4* %356 = OpAccessChain %23 %349 %31 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %47 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %47 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %47 %366 
                              Uniform f32_4* %367 = OpAccessChain %23 %349 %39 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %9 
                                       f32_3 %371 = OpVectorShuffle %370 %370 2 2 2 
                                       f32_3 %372 = OpFMul %369 %371 
                                       f32_4 %373 = OpLoad %47 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFAdd %372 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %9 %377 
                              Uniform f32_4* %378 = OpAccessChain %23 %349 %49 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 3 3 3 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFAdd %383 %385 
                                       f32_4 %387 = OpLoad %9 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %9 %388 
                                       f32_4 %390 = OpLoad %65 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %9 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFAdd %391 %393 
                                                      OpStore vs_TEXCOORD3 %394 
                                                      OpStore vs_TEXCOORD5 %342 
                                 Output f32* %396 = OpAccessChain %97 %31 %93 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                 Output f32* %399 = OpAccessChain %97 %31 %93 
                                                      OpStore %399 %398 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %11 %46 %52 %64 %82 %88 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpDecorate vs_TEXCOORD1 Location 11 
                                               OpMemberDecorate %14 0 Offset 14 
                                               OpMemberDecorate %14 1 Offset 14 
                                               OpMemberDecorate %14 2 Offset 14 
                                               OpDecorate %14 Block 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %40 DescriptorSet 40 
                                               OpDecorate %40 Binding 40 
                                               OpDecorate vs_TEXCOORD0 Location 46 
                                               OpDecorate %52 Location 52 
                                               OpDecorate vs_TEXCOORD3 Location 64 
                                               OpDecorate vs_TEXCOORD4 Location 82 
                                               OpDecorate %88 Location 88 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                       %13 = OpTypeVector %6 4 
                                       %14 = OpTypeStruct %13 %13 %13 
                                       %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                       %17 = OpTypeInt 32 1 
                                   i32 %18 = OpConstant 0 
                                       %19 = OpTypePointer Uniform %13 
                                       %24 = OpTypeInt 32 0 
                                   u32 %25 = OpConstant 0 
                                       %26 = OpTypePointer Private %6 
                                   f32 %30 = OpConstant 3.674022E-40 
                        Private f32_3* %33 = OpVariable Private 
                                       %34 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %35 = OpTypePointer UniformConstant %34 
  UniformConstant read_only Texture2D* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampler 
                                       %39 = OpTypePointer UniformConstant %38 
              UniformConstant sampler* %40 = OpVariable UniformConstant 
                                       %42 = OpTypeSampledImage %34 
                                       %44 = OpTypeVector %6 2 
                                       %45 = OpTypePointer Input %44 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %51 = OpTypePointer Input %13 
                          Input f32_4* %52 = OpVariable Input 
                        Private f32_3* %56 = OpVariable Private 
                                   i32 %58 = OpConstant 2 
                 Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                   i32 %74 = OpConstant 1 
                          Private f32* %80 = OpVariable Private 
                                       %81 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD4 = OpVariable Input 
                                   f32 %85 = OpConstant 3.674022E-40 
                                       %87 = OpTypePointer Output %13 
                         Output f32_4* %88 = OpVariable Output 
                                   u32 %99 = OpConstant 3 
                                      %100 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_3 %12 = OpLoad vs_TEXCOORD1 
                        Uniform f32_4* %20 = OpAccessChain %16 %18 
                                 f32_4 %21 = OpLoad %20 
                                 f32_3 %22 = OpVectorShuffle %21 %21 0 1 2 
                                   f32 %23 = OpDot %12 %22 
                          Private f32* %27 = OpAccessChain %9 %25 
                                               OpStore %27 %23 
                          Private f32* %28 = OpAccessChain %9 %25 
                                   f32 %29 = OpLoad %28 
                                   f32 %31 = OpExtInst %1 40 %29 %30 
                          Private f32* %32 = OpAccessChain %9 %25 
                                               OpStore %32 %31 
                   read_only Texture2D %37 = OpLoad %36 
                               sampler %41 = OpLoad %40 
            read_only Texture2DSampled %43 = OpSampledImage %37 %41 
                                 f32_2 %47 = OpLoad vs_TEXCOORD0 
                                 f32_4 %48 = OpImageSampleImplicitLod %43 %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                               OpStore %33 %49 
                                 f32_3 %50 = OpLoad %33 
                                 f32_4 %53 = OpLoad %52 
                                 f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                 f32_3 %55 = OpFMul %50 %54 
                                               OpStore %33 %55 
                                 f32_3 %57 = OpLoad %33 
                        Uniform f32_4* %59 = OpAccessChain %16 %58 
                                 f32_4 %60 = OpLoad %59 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                 f32_3 %62 = OpFMul %57 %61 
                                               OpStore %56 %62 
                                 f32_3 %63 = OpLoad %33 
                                 f32_3 %65 = OpLoad vs_TEXCOORD3 
                                 f32_3 %66 = OpFMul %63 %65 
                                               OpStore %33 %66 
                                 f32_3 %67 = OpLoad %56 
                                 f32_3 %68 = OpLoad %9 
                                 f32_3 %69 = OpVectorShuffle %68 %68 0 0 0 
                                 f32_3 %70 = OpFMul %67 %69 
                                 f32_3 %71 = OpLoad %33 
                                 f32_3 %72 = OpFAdd %70 %71 
                                               OpStore %9 %72 
                                 f32_3 %73 = OpLoad %9 
                        Uniform f32_4* %75 = OpAccessChain %16 %74 
                                 f32_4 %76 = OpLoad %75 
                                 f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                                 f32_3 %78 = OpFNegate %77 
                                 f32_3 %79 = OpFAdd %73 %78 
                                               OpStore %9 %79 
                                   f32 %83 = OpLoad vs_TEXCOORD4 
                                               OpStore %80 %83 
                                   f32 %84 = OpLoad %80 
                                   f32 %86 = OpExtInst %1 43 %84 %30 %85 
                                               OpStore %80 %86 
                                   f32 %89 = OpLoad %80 
                                 f32_3 %90 = OpCompositeConstruct %89 %89 %89 
                                 f32_3 %91 = OpLoad %9 
                                 f32_3 %92 = OpFMul %90 %91 
                        Uniform f32_4* %93 = OpAccessChain %16 %74 
                                 f32_4 %94 = OpLoad %93 
                                 f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                 f32_3 %96 = OpFAdd %92 %95 
                                 f32_4 %97 = OpLoad %88 
                                 f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                               OpStore %88 %98 
                          Output f32* %101 = OpAccessChain %88 %99 
                                               OpStore %101 %85 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD4 = u_xlat0.z;
    vs_TEXCOORD5.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4 = inversesqrt(u_xlat4);
    vs_TEXCOORD1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat0.w = u_xlat2 * 0.5;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %97 %102 %109 %110 %123 %151 %157 %158 %185 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 97 
                                                      OpDecorate vs_TEXCOORD5 Location 102 
                                                      OpDecorate vs_TEXCOORD0 Location 109 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate %123 Location 123 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate %158 Location 158 
                                                      OpDecorate vs_TEXCOORD6 Location 185 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                              %96 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                             %108 = OpTypePointer Output %103 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %110 = OpVariable Input 
                                         i32 %113 = OpConstant 4 
                                             %122 = OpTypePointer Input %50 
                                Input f32_3* %123 = OpVariable Input 
                                         u32 %129 = OpConstant 0 
                                Private f32* %143 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %157 = OpVariable Output 
                                Input f32_4* %158 = OpVariable Input 
                                Private f32* %160 = OpVariable Private 
                                             %163 = OpTypePointer Uniform %6 
                                         f32 %169 = OpConstant 3.674022E-40 
                                       f32_2 %170 = OpConstantComposite %169 %169 
                                         u32 %176 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %186 = OpConstant 3.674022E-40 
                                       f32_4 %187 = OpConstantComposite %186 %186 %186 %186 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                                      OpStore vs_TEXCOORD4 %101 
                                       f32_4 %104 = OpLoad %9 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD5 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %107 
                                       f32_4 %111 = OpLoad %110 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                              Uniform f32_4* %114 = OpAccessChain %21 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_2 %116 = OpVectorShuffle %115 %115 0 1 
                                       f32_2 %117 = OpFMul %112 %116 
                              Uniform f32_4* %118 = OpAccessChain %21 %113 
                                       f32_4 %119 = OpLoad %118 
                                       f32_2 %120 = OpVectorShuffle %119 %119 2 3 
                                       f32_2 %121 = OpFAdd %117 %120 
                                                      OpStore vs_TEXCOORD0 %121 
                                       f32_3 %124 = OpLoad %123 
                              Uniform f32_4* %125 = OpAccessChain %21 %36 %28 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %124 %127 
                                Private f32* %130 = OpAccessChain %44 %129 
                                                      OpStore %130 %128 
                                       f32_3 %131 = OpLoad %123 
                              Uniform f32_4* %132 = OpAccessChain %21 %36 %23 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                         f32 %135 = OpDot %131 %134 
                                Private f32* %136 = OpAccessChain %44 %88 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %123 
                              Uniform f32_4* %138 = OpAccessChain %21 %36 %36 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %44 %98 
                                                      OpStore %142 %141 
                                       f32_4 %144 = OpLoad %44 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %44 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %143 %148 
                                         f32 %149 = OpLoad %143 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %143 %150 
                                         f32 %152 = OpLoad %143 
                                       f32_3 %153 = OpCompositeConstruct %152 %152 %152 
                                       f32_4 %154 = OpLoad %44 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %153 %155 
                                                      OpStore vs_TEXCOORD1 %156 
                                       f32_4 %159 = OpLoad %158 
                                                      OpStore %157 %159 
                                Private f32* %161 = OpAccessChain %9 %88 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %164 = OpAccessChain %21 %28 %129 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %162 %165 
                                                      OpStore %160 %166 
                                       f32_4 %167 = OpLoad %9 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 1 5 3 
                                                      OpStore %9 %173 
                                         f32 %174 = OpLoad %160 
                                         f32 %175 = OpFMul %174 %169 
                                Private f32* %177 = OpAccessChain %9 %176 
                                                      OpStore %177 %175 
                                       f32_4 %178 = OpLoad %9 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad vs_TEXCOORD5 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %184 
                                                      OpStore vs_TEXCOORD6 %187 
                                 Output f32* %188 = OpAccessChain %92 %28 %88 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %92 %28 %88 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 221
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %163 %182 %207 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate vs_TEXCOORD4 Location 182 
                                                      OpDecorate %207 Location 207 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %175 = OpConstant 6 
                                             %181 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %197 = OpConstant 7 
                                             %206 = OpTypePointer Output %13 
                               Output f32_4* %207 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %58 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %95 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %9 
                                         f32 %172 = OpLoad %162 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %9 %180 
                                         f32 %183 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %184 = OpAccessChain %19 %53 %56 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFDiv %183 %185 
                                                      OpStore %162 %186 
                                         f32 %187 = OpLoad %162 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %96 
                                                      OpStore %162 %189 
                                         f32 %190 = OpLoad %162 
                                Uniform f32* %191 = OpAccessChain %19 %53 %48 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %162 %193 
                                         f32 %194 = OpLoad %162 
                                         f32 %195 = OpExtInst %1 40 %194 %95 
                                                      OpStore %162 %195 
                                         f32 %196 = OpLoad %162 
                                Uniform f32* %198 = OpAccessChain %19 %197 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %196 %199 
                                Uniform f32* %201 = OpAccessChain %19 %197 %73 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                                      OpStore %162 %203 
                                         f32 %204 = OpLoad %162 
                                         f32 %205 = OpExtInst %1 43 %204 %95 %96 
                                                      OpStore %162 %205 
                                         f32 %208 = OpLoad %162 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpFMul %209 %210 
                              Uniform f32_4* %212 = OpAccessChain %19 %175 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFAdd %211 %214 
                                       f32_4 %216 = OpLoad %207 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %207 %217 
                                 Output f32* %219 = OpAccessChain %207 %73 
                                                      OpStore %219 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat4.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat2);
    u_xlat3.y = dot(unity_SHAg, u_xlat2);
    u_xlat3.z = dot(unity_SHAb, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 378
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %97 %102 %107 %114 %115 %128 %165 %168 %171 %172 %340 %372 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpMemberDecorate %95 0 BuiltIn 95 
                                                      OpMemberDecorate %95 1 BuiltIn 95 
                                                      OpMemberDecorate %95 2 BuiltIn 95 
                                                      OpDecorate %95 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 102 
                                                      OpDecorate vs_TEXCOORD5 Location 107 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate %115 Location 115 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate vs_TEXCOORD1 Location 165 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %172 Location 172 
                                                      OpDecorate vs_TEXCOORD3 Location 340 
                                                      OpDecorate vs_TEXCOORD6 Location 372 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 8 
                                              %16 = OpTypeArray %7 %15 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %7 %17 
                                              %19 = OpTypeArray %7 %17 
                                              %20 = OpTypeArray %7 %17 
                                              %21 = OpTypeStruct %7 %7 %7 %7 %7 %16 %7 %7 %7 %7 %18 %19 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 10 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 0 
                                          i32 %39 = OpConstant 2 
                               Private f32_4* %47 = OpVariable Private 
                                          i32 %49 = OpConstant 3 
                                              %53 = OpTypeVector %6 3 
                               Private f32_4* %65 = OpVariable Private 
                                          i32 %68 = OpConstant 12 
                                          u32 %93 = OpConstant 1 
                                              %94 = OpTypeArray %6 %93 
                                              %95 = OpTypeStruct %7 %6 %94 
                                              %96 = OpTypePointer Output %95 
         Output struct {f32_4; f32; f32[1];}* %97 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %103 = OpConstant 2 
                                             %104 = OpTypePointer Private %6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %108 = OpTypeVector %6 2 
                                             %113 = OpTypePointer Output %108 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %115 = OpVariable Input 
                                         i32 %118 = OpConstant 13 
                                             %127 = OpTypePointer Input %53 
                                Input f32_3* %128 = OpVariable Input 
                                         i32 %130 = OpConstant 11 
                                         u32 %135 = OpConstant 0 
                                Private f32* %149 = OpVariable Private 
                                             %164 = OpTypePointer Output %53 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %171 = OpVariable Output 
                                Input f32_4* %172 = OpVariable Input 
                              Private f32_4* %174 = OpVariable Private 
                              Private f32_4* %181 = OpVariable Private 
                              Private f32_4* %194 = OpVariable Private 
                                         f32 %225 = OpConstant 3.674022E-40 
                                       f32_4 %226 = OpConstantComposite %225 %225 %225 %225 
                                         i32 %231 = OpConstant 4 
                                         f32 %235 = OpConstant 3.674022E-40 
                                       f32_4 %236 = OpConstantComposite %235 %235 %235 %235 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_4 %245 = OpConstantComposite %244 %244 %244 %244 
                                         i32 %252 = OpConstant 5 
                                         i32 %310 = OpConstant 6 
                                         i32 %316 = OpConstant 7 
                                         i32 %322 = OpConstant 8 
                                         i32 %328 = OpConstant 9 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %348 = OpTypePointer Uniform %6 
                                         f32 %355 = OpConstant 3.674022E-40 
                                       f32_2 %356 = OpConstantComposite %355 %355 
                                         u32 %363 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpFMul %13 %29 
                                                      OpStore %9 %30 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %31 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpLoad %11 
                                        f32_4 %35 = OpVectorShuffle %34 %34 0 0 0 0 
                                        f32_4 %36 = OpFMul %33 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpFAdd %36 %37 
                                                      OpStore %9 %38 
                               Uniform f32_4* %40 = OpAccessChain %23 %25 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_4 %42 = OpLoad %11 
                                        f32_4 %43 = OpVectorShuffle %42 %42 2 2 2 2 
                                        f32_4 %44 = OpFMul %41 %43 
                                        f32_4 %45 = OpLoad %9 
                                        f32_4 %46 = OpFAdd %44 %45 
                                                      OpStore %9 %46 
                                        f32_4 %48 = OpLoad %9 
                               Uniform f32_4* %50 = OpAccessChain %23 %25 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFAdd %48 %51 
                                                      OpStore %47 %52 
                               Uniform f32_4* %54 = OpAccessChain %23 %25 %49 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                        f32_4 %63 = OpLoad %9 
                                        f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                      OpStore %9 %64 
                                        f32_4 %66 = OpLoad %47 
                                        f32_4 %67 = OpVectorShuffle %66 %66 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %23 %68 %26 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %67 %70 
                                                      OpStore %65 %71 
                               Uniform f32_4* %72 = OpAccessChain %23 %68 %31 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %47 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %65 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %65 %78 
                               Uniform f32_4* %79 = OpAccessChain %23 %68 %39 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %47 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %65 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %65 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %68 %49 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %47 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %65 
                                        f32_4 %92 = OpFAdd %90 %91 
                                                      OpStore %47 %92 
                                        f32_4 %98 = OpLoad %47 
                               Output f32_4* %100 = OpAccessChain %97 %31 
                                                      OpStore %100 %98 
                                Private f32* %105 = OpAccessChain %47 %103 
                                         f32 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD4 %106 
                                       f32_4 %109 = OpLoad %47 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_4 %111 = OpLoad vs_TEXCOORD5 
                                       f32_4 %112 = OpVectorShuffle %111 %110 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %112 
                                       f32_4 %116 = OpLoad %115 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 1 
                              Uniform f32_4* %119 = OpAccessChain %23 %118 
                                       f32_4 %120 = OpLoad %119 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                       f32_2 %122 = OpFMul %117 %121 
                              Uniform f32_4* %123 = OpAccessChain %23 %118 
                                       f32_4 %124 = OpLoad %123 
                                       f32_2 %125 = OpVectorShuffle %124 %124 2 3 
                                       f32_2 %126 = OpFAdd %122 %125 
                                                      OpStore vs_TEXCOORD0 %126 
                                       f32_3 %129 = OpLoad %128 
                              Uniform f32_4* %131 = OpAccessChain %23 %130 %31 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %129 %133 
                                Private f32* %136 = OpAccessChain %65 %135 
                                                      OpStore %136 %134 
                                       f32_3 %137 = OpLoad %128 
                              Uniform f32_4* %138 = OpAccessChain %23 %130 %26 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %137 %140 
                                Private f32* %142 = OpAccessChain %65 %93 
                                                      OpStore %142 %141 
                                       f32_3 %143 = OpLoad %128 
                              Uniform f32_4* %144 = OpAccessChain %23 %130 %39 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %65 %103 
                                                      OpStore %148 %147 
                                       f32_4 %150 = OpLoad %65 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_4 %152 = OpLoad %65 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %151 %153 
                                                      OpStore %149 %154 
                                         f32 %155 = OpLoad %149 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %149 %156 
                                         f32 %157 = OpLoad %149 
                                       f32_3 %158 = OpCompositeConstruct %157 %157 %157 
                                       f32_4 %159 = OpLoad %65 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %65 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %65 %163 
                                       f32_4 %166 = OpLoad %65 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                                      OpStore vs_TEXCOORD1 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                                      OpStore vs_TEXCOORD2 %170 
                                       f32_4 %173 = OpLoad %172 
                                                      OpStore %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                       f32_4 %177 = OpFNegate %176 
                              Uniform f32_4* %178 = OpAccessChain %23 %26 
                                       f32_4 %179 = OpLoad %178 
                                       f32_4 %180 = OpFAdd %177 %179 
                                                      OpStore %174 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %182 1 1 1 1 
                                       f32_4 %184 = OpFNegate %183 
                              Uniform f32_4* %185 = OpAccessChain %23 %39 
                                       f32_4 %186 = OpLoad %185 
                                       f32_4 %187 = OpFAdd %184 %186 
                                                      OpStore %181 %187 
                                       f32_4 %188 = OpLoad %9 
                                       f32_4 %189 = OpVectorShuffle %188 %188 2 2 2 2 
                                       f32_4 %190 = OpFNegate %189 
                              Uniform f32_4* %191 = OpAccessChain %23 %49 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpFAdd %190 %192 
                                                      OpStore %9 %193 
                                       f32_4 %195 = OpLoad %65 
                                       f32_4 %196 = OpVectorShuffle %195 %195 1 1 1 1 
                                       f32_4 %197 = OpLoad %181 
                                       f32_4 %198 = OpFMul %196 %197 
                                                      OpStore %194 %198 
                                       f32_4 %199 = OpLoad %181 
                                       f32_4 %200 = OpLoad %181 
                                       f32_4 %201 = OpFMul %199 %200 
                                                      OpStore %181 %201 
                                       f32_4 %202 = OpLoad %174 
                                       f32_4 %203 = OpLoad %174 
                                       f32_4 %204 = OpFMul %202 %203 
                                       f32_4 %205 = OpLoad %181 
                                       f32_4 %206 = OpFAdd %204 %205 
                                                      OpStore %181 %206 
                                       f32_4 %207 = OpLoad %174 
                                       f32_4 %208 = OpLoad %65 
                                       f32_4 %209 = OpVectorShuffle %208 %208 0 0 0 0 
                                       f32_4 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %194 
                                       f32_4 %212 = OpFAdd %210 %211 
                                                      OpStore %174 %212 
                                       f32_4 %213 = OpLoad %9 
                                       f32_4 %214 = OpLoad %65 
                                       f32_4 %215 = OpVectorShuffle %214 %214 2 2 2 2 
                                       f32_4 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %174 
                                       f32_4 %218 = OpFAdd %216 %217 
                                                      OpStore %174 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpLoad %9 
                                       f32_4 %221 = OpFMul %219 %220 
                                       f32_4 %222 = OpLoad %181 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore %9 %223 
                                       f32_4 %224 = OpLoad %9 
                                       f32_4 %227 = OpExtInst %1 40 %224 %226 
                                                      OpStore %9 %227 
                                       f32_4 %228 = OpLoad %9 
                                       f32_4 %229 = OpExtInst %1 32 %228 
                                                      OpStore %181 %229 
                                       f32_4 %230 = OpLoad %9 
                              Uniform f32_4* %232 = OpAccessChain %23 %231 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpFMul %230 %233 
                                       f32_4 %237 = OpFAdd %234 %236 
                                                      OpStore %9 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_4 %239 = OpFDiv %236 %238 
                                                      OpStore %9 %239 
                                       f32_4 %240 = OpLoad %174 
                                       f32_4 %241 = OpLoad %181 
                                       f32_4 %242 = OpFMul %240 %241 
                                                      OpStore %174 %242 
                                       f32_4 %243 = OpLoad %174 
                                       f32_4 %246 = OpExtInst %1 40 %243 %245 
                                                      OpStore %174 %246 
                                       f32_4 %247 = OpLoad %9 
                                       f32_4 %248 = OpLoad %174 
                                       f32_4 %249 = OpFMul %247 %248 
                                                      OpStore %9 %249 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                              Uniform f32_4* %253 = OpAccessChain %23 %252 %26 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                       f32_4 %257 = OpLoad %174 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %174 %258 
                              Uniform f32_4* %259 = OpAccessChain %23 %252 %31 
                                       f32_4 %260 = OpLoad %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpFMul %261 %263 
                                       f32_4 %265 = OpLoad %174 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFAdd %264 %266 
                                       f32_4 %268 = OpLoad %174 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %174 %269 
                              Uniform f32_4* %270 = OpAccessChain %23 %252 %39 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 2 2 2 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %174 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %9 %280 
                              Uniform f32_4* %281 = OpAccessChain %23 %252 %49 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 3 3 3 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %9 %291 
                                Private f32* %292 = OpAccessChain %65 %93 
                                         f32 %293 = OpLoad %292 
                                Private f32* %294 = OpAccessChain %65 %93 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                                      OpStore %149 %296 
                                Private f32* %297 = OpAccessChain %65 %135 
                                         f32 %298 = OpLoad %297 
                                Private f32* %299 = OpAccessChain %65 %135 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                         f32 %302 = OpLoad %149 
                                         f32 %303 = OpFNegate %302 
                                         f32 %304 = OpFAdd %301 %303 
                                                      OpStore %149 %304 
                                       f32_4 %305 = OpLoad %65 
                                       f32_4 %306 = OpVectorShuffle %305 %305 1 2 2 0 
                                       f32_4 %307 = OpLoad %65 
                                       f32_4 %308 = OpVectorShuffle %307 %307 0 1 2 2 
                                       f32_4 %309 = OpFMul %306 %308 
                                                      OpStore %65 %309 
                              Uniform f32_4* %311 = OpAccessChain %23 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_4 %313 = OpLoad %65 
                                         f32 %314 = OpDot %312 %313 
                                Private f32* %315 = OpAccessChain %174 %135 
                                                      OpStore %315 %314 
                              Uniform f32_4* %317 = OpAccessChain %23 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_4 %319 = OpLoad %65 
                                         f32 %320 = OpDot %318 %319 
                                Private f32* %321 = OpAccessChain %174 %93 
                                                      OpStore %321 %320 
                              Uniform f32_4* %323 = OpAccessChain %23 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_4 %325 = OpLoad %65 
                                         f32 %326 = OpDot %324 %325 
                                Private f32* %327 = OpAccessChain %174 %103 
                                                      OpStore %327 %326 
                              Uniform f32_4* %329 = OpAccessChain %23 %328 
                                       f32_4 %330 = OpLoad %329 
                                       f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                         f32 %332 = OpLoad %149 
                                       f32_3 %333 = OpCompositeConstruct %332 %332 %332 
                                       f32_3 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %174 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFAdd %334 %336 
                                       f32_4 %338 = OpLoad %65 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                                      OpStore %65 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %65 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                                      OpStore vs_TEXCOORD3 %345 
                                Private f32* %346 = OpAccessChain %47 %93 
                                         f32 %347 = OpLoad %346 
                                Uniform f32* %349 = OpAccessChain %23 %31 %135 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %347 %350 
                                Private f32* %352 = OpAccessChain %9 %135 
                                                      OpStore %352 %351 
                                       f32_4 %353 = OpLoad %47 
                                       f32_2 %354 = OpVectorShuffle %353 %353 0 3 
                                       f32_2 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %47 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 1 5 3 
                                                      OpStore %47 %359 
                                Private f32* %360 = OpAccessChain %9 %135 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %361 %355 
                                Private f32* %364 = OpAccessChain %47 %363 
                                                      OpStore %364 %362 
                                       f32_4 %365 = OpLoad %47 
                                       f32_2 %366 = OpVectorShuffle %365 %365 2 2 
                                       f32_4 %367 = OpLoad %47 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 3 
                                       f32_2 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad vs_TEXCOORD5 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %371 
                                                      OpStore vs_TEXCOORD6 %245 
                                 Output f32* %373 = OpAccessChain %97 %31 %93 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFNegate %374 
                                 Output f32* %376 = OpAccessChain %97 %31 %93 
                                                      OpStore %376 %375 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 265
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %164 %189 %226 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 164 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate vs_TEXCOORD4 Location 226 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 7 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 8 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 6 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 11 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                             %162 = OpTypePointer Private %13 
                              Private f32_4* %163 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %170 = OpConstant 3 
                                         i32 %176 = OpConstant 4 
                                         i32 %182 = OpConstant 5 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %196 = OpConstantComposite %95 %95 %95 
                                Private f32* %204 = OpVariable Private 
                                         i32 %219 = OpConstant 9 
                                             %225 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %241 = OpConstant 10 
                                             %250 = OpTypePointer Output %13 
                               Output f32_4* %251 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %165 = OpLoad vs_TEXCOORD1 
                                       f32_4 %166 = OpLoad %163 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %163 %167 
                                Private f32* %168 = OpAccessChain %163 %73 
                                                      OpStore %168 %96 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpLoad %163 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %169 %31 
                                                      OpStore %175 %174 
                              Uniform f32_4* %177 = OpAccessChain %19 %176 
                                       f32_4 %178 = OpLoad %177 
                                       f32_4 %179 = OpLoad %163 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %181 = OpAccessChain %169 %56 
                                                      OpStore %181 %180 
                              Uniform f32_4* %183 = OpAccessChain %19 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpLoad %163 
                                         f32 %186 = OpDot %184 %185 
                                Private f32* %187 = OpAccessChain %169 %48 
                                                      OpStore %187 %186 
                                       f32_3 %188 = OpLoad %169 
                                       f32_3 %190 = OpLoad vs_TEXCOORD3 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %163 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %163 %193 
                                       f32_4 %194 = OpLoad %163 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %197 = OpExtInst %1 40 %195 %196 
                                       f32_4 %198 = OpLoad %163 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %163 %199 
                                       f32_3 %200 = OpLoad %46 
                                       f32_4 %201 = OpLoad %163 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %46 %203 
                                       f32_3 %205 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %206 = OpAccessChain %19 %58 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                                      OpStore %204 %209 
                                         f32 %210 = OpLoad %204 
                                         f32 %211 = OpExtInst %1 40 %210 %95 
                                                      OpStore %204 %211 
                                       f32_3 %212 = OpLoad %9 
                                         f32 %213 = OpLoad %204 
                                       f32_3 %214 = OpCompositeConstruct %213 %213 %213 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_3 %216 = OpLoad %46 
                                       f32_3 %217 = OpFAdd %215 %216 
                                                      OpStore %9 %217 
                                       f32_3 %218 = OpLoad %9 
                              Uniform f32_4* %220 = OpAccessChain %19 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %9 %224 
                                         f32 %227 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %228 = OpAccessChain %19 %53 %56 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFDiv %227 %229 
                                                      OpStore %204 %230 
                                         f32 %231 = OpLoad %204 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %232 %96 
                                                      OpStore %204 %233 
                                         f32 %234 = OpLoad %204 
                                Uniform f32* %235 = OpAccessChain %19 %53 %48 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                                      OpStore %204 %237 
                                         f32 %238 = OpLoad %204 
                                         f32 %239 = OpExtInst %1 40 %238 %95 
                                                      OpStore %204 %239 
                                         f32 %240 = OpLoad %204 
                                Uniform f32* %242 = OpAccessChain %19 %241 %48 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %240 %243 
                                Uniform f32* %245 = OpAccessChain %19 %241 %73 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFAdd %244 %246 
                                                      OpStore %204 %247 
                                         f32 %248 = OpLoad %204 
                                         f32 %249 = OpExtInst %1 43 %248 %95 %96 
                                                      OpStore %204 %249 
                                         f32 %252 = OpLoad %204 
                                       f32_3 %253 = OpCompositeConstruct %252 %252 %252 
                                       f32_3 %254 = OpLoad %9 
                                       f32_3 %255 = OpFMul %253 %254 
                              Uniform f32_4* %256 = OpAccessChain %19 %219 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFAdd %255 %258 
                                       f32_4 %260 = OpLoad %251 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %251 %261 
                                 Output f32* %263 = OpAccessChain %251 %73 
                                                      OpStore %263 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %135 %136 %148 %182 %188 %189 %191 %194 %196 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD0 Location 135 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 182 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate vs_TEXCOORD5 Location 191 
                                                      OpDecorate vs_TEXCOORD6 Location 194 
                                                      OpDecorate %196 Flat 
                                                      OpDecorate %196 Location 196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                                             %133 = OpTypeVector %23 2 
                                             %134 = OpTypePointer Output %133 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %136 = OpVariable Input 
                                             %147 = OpTypePointer Input %75 
                                Input f32_3* %148 = OpVariable Input 
                                         u32 %156 = OpConstant 0 
                                Private f32* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %188 = OpVariable Output 
                                Input f32_4* %189 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_4 %193 = OpConstantComposite %192 %192 %192 %192 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %195 = OpTypePointer Output %31 
                                 Output u32* %196 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %15 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %139 = OpAccessChain %94 %44 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %138 %141 
                              Uniform f32_4* %143 = OpAccessChain %94 %44 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                                         i32 %150 = OpLoad %8 
                                         i32 %151 = OpSDiv %150 %42 
                              Uniform f32_4* %152 = OpAccessChain %40 %15 %151 %44 %15 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %149 %154 
                                Private f32* %157 = OpAccessChain %26 %156 
                                                      OpStore %157 %155 
                                       f32_3 %158 = OpLoad %148 
                                         i32 %159 = OpLoad %8 
                                         i32 %160 = OpSDiv %159 %42 
                              Uniform f32_4* %161 = OpAccessChain %40 %15 %160 %44 %44 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %165 = OpAccessChain %26 %119 
                                                      OpStore %165 %164 
                                       f32_3 %166 = OpLoad %148 
                                         i32 %167 = OpLoad %8 
                                         i32 %168 = OpSDiv %167 %42 
                              Uniform f32_4* %169 = OpAccessChain %40 %15 %168 %44 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %166 %171 
                                Private f32* %173 = OpAccessChain %26 %129 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %174 %179 
                                         f32 %180 = OpLoad %174 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %174 %181 
                                         f32 %183 = OpLoad %174 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_4 %185 = OpLoad %26 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore vs_TEXCOORD1 %187 
                                       f32_4 %190 = OpLoad %189 
                                                      OpStore %188 %190 
                                                      OpStore vs_TEXCOORD5 %193 
                                                      OpStore vs_TEXCOORD6 %193 
                                         i32 %197 = OpLoad %10 
                                         u32 %198 = OpBitcast %197 
                                                      OpStore %196 %198 
                                 Output f32* %199 = OpAccessChain %123 %15 %119 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %123 %15 %119 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 114
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %29 %47 %68 %100 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %29 Location 29 
                                                      OpMemberDecorate %34 0 Offset 34 
                                                      OpMemberDecorate %34 1 Offset 34 
                                                      OpMemberDecorate %34 2 Offset 34 
                                                      OpMemberDecorate %34 3 Offset 34 
                                                      OpMemberDecorate %34 4 Offset 34 
                                                      OpDecorate %34 Block 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %100 Location 100 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypePointer Input %24 
                                 Input f32_4* %29 = OpVariable Input 
                                              %34 = OpTypeStruct %24 %24 %24 %24 %24 
                                              %35 = OpTypePointer Uniform %34 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
                                              %37 = OpTypeInt 32 1 
                                          i32 %38 = OpConstant 4 
                                              %39 = OpTypePointer Uniform %24 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 1 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 2 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          i32 %70 = OpConstant 0 
                                              %71 = OpTypeInt 32 0 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypePointer Uniform %6 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          u32 %82 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                          u32 %93 = OpConstant 3 
                                              %99 = OpTypePointer Output %24 
                               Output f32_4* %100 = OpVariable Output 
                                             %111 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_3 %32 = OpFMul %27 %31 
                                                      OpStore %9 %32 
                                        f32_3 %33 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %36 %38 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %33 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %36 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %36 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                 Uniform f32* %74 = OpAccessChain %36 %70 %72 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %69 %75 
                                                      OpStore %45 %76 
                                          f32 %77 = OpLoad %45 
                                          f32 %78 = OpFNegate %77 
                                          f32 %80 = OpFAdd %78 %79 
                                                      OpStore %45 %80 
                                          f32 %81 = OpLoad %45 
                                 Uniform f32* %83 = OpAccessChain %36 %70 %82 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %81 %84 
                                                      OpStore %45 %85 
                                          f32 %86 = OpLoad %45 
                                          f32 %87 = OpExtInst %1 40 %86 %55 
                                                      OpStore %45 %87 
                                          f32 %88 = OpLoad %45 
                                 Uniform f32* %90 = OpAccessChain %36 %89 %82 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %94 = OpAccessChain %36 %89 %93 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %92 %95 
                                                      OpStore %45 %96 
                                          f32 %97 = OpLoad %45 
                                          f32 %98 = OpExtInst %1 43 %97 %55 %79 
                                                      OpStore %45 %98 
                                         f32 %101 = OpLoad %45 
                                       f32_3 %102 = OpCompositeConstruct %101 %101 %101 
                                       f32_3 %103 = OpLoad %9 
                                       f32_3 %104 = OpFMul %102 %103 
                              Uniform f32_4* %105 = OpAccessChain %36 %61 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %100 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %100 %110 
                                 Output f32* %112 = OpAccessChain %100 %93 
                                                      OpStore %112 %79 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat9 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 275
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %139 %140 %152 %195 %197 %198 %250 %262 %265 %267 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 132 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate vs_TEXCOORD1 Location 195 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate %198 Location 198 
                                                      OpMemberDecorate %222 0 Offset 222 
                                                      OpMemberDecorate %222 1 Offset 222 
                                                      OpMemberDecorate %222 2 Offset 222 
                                                      OpMemberDecorate %222 3 Offset 222 
                                                      OpMemberDecorate %222 4 Offset 222 
                                                      OpMemberDecorate %222 5 Offset 222 
                                                      OpMemberDecorate %222 6 Offset 222 
                                                      OpDecorate %223 ArrayStride 223 
                                                      OpMemberDecorate %224 0 Offset 224 
                                                      OpDecorate %224 Block 
                                                      OpDecorate %226 DescriptorSet 226 
                                                      OpDecorate %226 Binding 226 
                                                      OpDecorate vs_TEXCOORD3 Location 250 
                                                      OpDecorate vs_TEXCOORD5 Location 262 
                                                      OpDecorate vs_TEXCOORD6 Location 265 
                                                      OpDecorate %267 Flat 
                                                      OpDecorate %267 Location 267 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                                             %137 = OpTypeVector %27 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                             %151 = OpTypePointer Input %79 
                                Input f32_3* %152 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                             %178 = OpTypePointer Private %79 
                              Private f32_3* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %197 = OpVariable Output 
                                Input f32_4* %198 = OpVariable Input 
                              Private f32_3* %221 = OpVariable Private 
                                             %222 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %223 = OpTypeArray %222 %40 
                                             %224 = OpTypeStruct %223 
                                             %225 = OpTypePointer Uniform %224 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %226 = OpVariable Uniform 
                                         i32 %236 = OpConstant 4 
                                         i32 %244 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %253 = OpConstant 6 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %263 = OpConstant 3.674022E-40 
                                       f32_4 %264 = OpConstantComposite %263 %263 %263 %263 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %266 = OpTypePointer Output %35 
                                 Output u32* %267 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %15 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %143 = OpAccessChain %98 %48 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                       f32_2 %146 = OpFMul %142 %145 
                              Uniform f32_4* %147 = OpAccessChain %98 %48 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                       f32_2 %150 = OpFAdd %146 %149 
                                                      OpStore vs_TEXCOORD0 %150 
                                       f32_3 %153 = OpLoad %152 
                                         i32 %154 = OpLoad %20 
                                         i32 %155 = OpSDiv %154 %46 
                              Uniform f32_4* %156 = OpAccessChain %44 %15 %155 %48 %15 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %153 %158 
                                Private f32* %161 = OpAccessChain %30 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %152 
                                         i32 %163 = OpLoad %20 
                                         i32 %164 = OpSDiv %163 %46 
                              Uniform f32_4* %165 = OpAccessChain %44 %15 %164 %48 %48 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %162 %167 
                                Private f32* %169 = OpAccessChain %30 %123 
                                                      OpStore %169 %168 
                                       f32_3 %170 = OpLoad %152 
                                         i32 %171 = OpLoad %20 
                                         i32 %172 = OpSDiv %171 %46 
                              Uniform f32_4* %173 = OpAccessChain %44 %15 %172 %48 %64 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                         f32 %176 = OpDot %170 %175 
                                Private f32* %177 = OpAccessChain %30 %133 
                                                      OpStore %177 %176 
                                       f32_4 %180 = OpLoad %30 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %30 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %179 %160 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %179 %160 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpExtInst %1 32 %187 
                                Private f32* %189 = OpAccessChain %179 %160 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %179 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 0 0 
                                       f32_4 %192 = OpLoad %30 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                                      OpStore %179 %194 
                                       f32_3 %196 = OpLoad %179 
                                                      OpStore vs_TEXCOORD1 %196 
                                       f32_4 %199 = OpLoad %198 
                                                      OpStore %197 %199 
                                Private f32* %200 = OpAccessChain %179 %123 
                                         f32 %201 = OpLoad %200 
                                Private f32* %202 = OpAccessChain %179 %123 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFMul %201 %203 
                                Private f32* %205 = OpAccessChain %30 %160 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %179 %160 
                                         f32 %207 = OpLoad %206 
                                Private f32* %208 = OpAccessChain %179 %160 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                Private f32* %211 = OpAccessChain %30 %160 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %210 %213 
                                Private f32* %215 = OpAccessChain %30 %160 
                                                      OpStore %215 %214 
                                       f32_3 %216 = OpLoad %179 
                                       f32_4 %217 = OpVectorShuffle %216 %216 1 2 2 0 
                                       f32_3 %218 = OpLoad %179 
                                       f32_4 %219 = OpVectorShuffle %218 %218 0 1 2 2 
                                       f32_4 %220 = OpFMul %217 %219 
                                                      OpStore %72 %220 
                                         i32 %227 = OpLoad %8 
                                         i32 %228 = OpSDiv %227 %25 
                              Uniform f32_4* %229 = OpAccessChain %226 %15 %228 %22 
                                       f32_4 %230 = OpLoad %229 
                                       f32_4 %231 = OpLoad %72 
                                         f32 %232 = OpDot %230 %231 
                                Private f32* %233 = OpAccessChain %221 %160 
                                                      OpStore %233 %232 
                                         i32 %234 = OpLoad %8 
                                         i32 %235 = OpSDiv %234 %25 
                              Uniform f32_4* %237 = OpAccessChain %226 %15 %235 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_4 %239 = OpLoad %72 
                                         f32 %240 = OpDot %238 %239 
                                Private f32* %241 = OpAccessChain %221 %123 
                                                      OpStore %241 %240 
                                         i32 %242 = OpLoad %8 
                                         i32 %243 = OpSDiv %242 %25 
                              Uniform f32_4* %245 = OpAccessChain %226 %15 %243 %244 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %72 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %221 %133 
                                                      OpStore %249 %248 
                                         i32 %251 = OpLoad %8 
                                         i32 %252 = OpSDiv %251 %25 
                              Uniform f32_4* %254 = OpAccessChain %226 %15 %252 %253 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_4 %257 = OpLoad %30 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %256 %258 
                                       f32_3 %260 = OpLoad %221 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore vs_TEXCOORD3 %261 
                                                      OpStore vs_TEXCOORD5 %264 
                                                      OpStore vs_TEXCOORD6 %264 
                                         i32 %268 = OpLoad %10 
                                         u32 %269 = OpBitcast %268 
                                                      OpStore %267 %269 
                                 Output f32* %270 = OpAccessChain %127 %15 %123 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFNegate %271 
                                 Output f32* %273 = OpAccessChain %127 %15 %123 
                                                      OpStore %273 %272 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %90 %114 %120 %155 %181 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpMemberDecorate %75 3 Offset 75 
                                                      OpMemberDecorate %75 4 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 90 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate vs_TEXCOORD4 Location 155 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %78 = OpConstant 4 
                                          i32 %84 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                                             %102 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %103 = OpTypePointer UniformConstant %102 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampler 
                                             %107 = OpTypePointer UniformConstant %106 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                             %110 = OpTypeSampledImage %102 
                                             %112 = OpTypeVector %25 2 
                                             %113 = OpTypePointer Input %112 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %119 = OpTypePointer Input %26 
                                Input f32_4* %120 = OpVariable Input 
                                Private f32* %133 = OpVariable Private 
                                             %154 = OpTypePointer Input %25 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %157 = OpTypePointer Uniform %25 
                                         i32 %171 = OpConstant 3 
                                             %180 = OpTypePointer Output %26 
                               Output f32_4* %181 = OpVariable Output 
                                             %192 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %79 = OpAccessChain %77 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                          i32 %82 = OpLoad %8 
                                          i32 %83 = OpSDiv %82 %23 
                               Uniform f32_4* %85 = OpAccessChain %46 %17 %83 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_3 %88 = OpFMul %81 %87 
                                                      OpStore %74 %88 
                                        f32_3 %89 = OpLoad %40 
                                        f32_3 %91 = OpLoad vs_TEXCOORD3 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %28 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %28 %94 
                                        f32_4 %95 = OpLoad %28 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %99 = OpExtInst %1 40 %96 %98 
                                       f32_4 %100 = OpLoad %28 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %28 %101 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %111 = OpSampledImage %105 %109 
                                       f32_2 %115 = OpLoad vs_TEXCOORD0 
                                       f32_4 %116 = OpImageSampleImplicitLod %111 %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                                      OpStore %40 %117 
                                       f32_3 %118 = OpLoad %40 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFMul %118 %122 
                                                      OpStore %40 %123 
                                       f32_4 %124 = OpLoad %28 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %40 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_4 %128 = OpLoad %28 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %28 %129 
                                       f32_3 %130 = OpLoad %74 
                                       f32_3 %131 = OpLoad %40 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %74 %132 
                                       f32_3 %134 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %135 = OpAccessChain %77 %58 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 40 %139 %97 
                                                      OpStore %133 %140 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %133 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                                      OpStore %74 %147 
                                       f32_3 %148 = OpLoad %74 
                              Uniform f32_4* %149 = OpAccessChain %77 %67 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %74 %153 
                                         f32 %156 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %158 = OpAccessChain %77 %17 %63 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFDiv %156 %159 
                                                      OpStore %133 %160 
                                         f32 %161 = OpLoad %133 
                                         f32 %162 = OpFNegate %161 
                                         f32 %163 = OpFAdd %162 %35 
                                                      OpStore %133 %163 
                                         f32 %164 = OpLoad %133 
                                Uniform f32* %165 = OpAccessChain %77 %17 %72 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                                      OpStore %133 %167 
                                         f32 %168 = OpLoad %133 
                                         f32 %169 = OpExtInst %1 40 %168 %97 
                                                      OpStore %133 %169 
                                         f32 %170 = OpLoad %133 
                                Uniform f32* %172 = OpAccessChain %77 %171 %72 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %170 %173 
                                Uniform f32* %175 = OpAccessChain %77 %171 %36 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                                      OpStore %133 %177 
                                         f32 %178 = OpLoad %133 
                                         f32 %179 = OpExtInst %1 43 %178 %97 %35 
                                                      OpStore %133 %179 
                                         f32 %182 = OpLoad %133 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_3 %184 = OpLoad %74 
                                       f32_3 %185 = OpFMul %183 %184 
                              Uniform f32_4* %186 = OpAccessChain %77 %67 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %181 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %181 %191 
                                 Output f32* %193 = OpAccessChain %181 %36 
                                                      OpStore %193 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %187 %193 %194 %220 %224 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD5 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 187 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate vs_TEXCOORD6 Location 220 
                                                      OpDecorate %224 Flat 
                                                      OpDecorate %224 Location 224 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                             %152 = OpTypePointer Input %75 
                                Input f32_3* %153 = OpVariable Input 
                                         u32 %161 = OpConstant 0 
                                Private f32* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                                             %198 = OpTypePointer Uniform %23 
                                         f32 %204 = OpConstant 3.674022E-40 
                                       f32_2 %205 = OpConstantComposite %204 %204 
                                         u32 %211 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_4 %222 = OpConstantComposite %221 %221 %221 %221 
                                             %223 = OpTypePointer Output %31 
                                 Output u32* %224 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %144 = OpAccessChain %94 %60 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %143 %146 
                              Uniform f32_4* %148 = OpAccessChain %94 %60 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                                         i32 %155 = OpLoad %8 
                                         i32 %156 = OpSDiv %155 %42 
                              Uniform f32_4* %157 = OpAccessChain %40 %15 %156 %44 %15 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %154 %159 
                                Private f32* %162 = OpAccessChain %68 %161 
                                                      OpStore %162 %160 
                                       f32_3 %163 = OpLoad %153 
                                         i32 %164 = OpLoad %8 
                                         i32 %165 = OpSDiv %164 %42 
                              Uniform f32_4* %166 = OpAccessChain %40 %15 %165 %44 %44 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %163 %168 
                                Private f32* %170 = OpAccessChain %68 %119 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %153 
                                         i32 %172 = OpLoad %8 
                                         i32 %173 = OpSDiv %172 %42 
                              Uniform f32_4* %174 = OpAccessChain %40 %15 %173 %44 %60 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %68 %129 
                                                      OpStore %178 %177 
                                       f32_4 %180 = OpLoad %68 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %68 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                                      OpStore %179 %184 
                                         f32 %185 = OpLoad %179 
                                         f32 %186 = OpExtInst %1 32 %185 
                                                      OpStore %179 %186 
                                         f32 %188 = OpLoad %179 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %68 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                                      OpStore vs_TEXCOORD1 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                Private f32* %196 = OpAccessChain %26 %119 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %94 %15 %161 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %179 %201 
                                       f32_4 %202 = OpLoad %26 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 3 
                                       f32_2 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %26 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 1 5 3 
                                                      OpStore %26 %208 
                                         f32 %209 = OpLoad %179 
                                         f32 %210 = OpFMul %209 %204 
                                Private f32* %212 = OpAccessChain %26 %211 
                                                      OpStore %212 %210 
                                       f32_4 %213 = OpLoad %26 
                                       f32_2 %214 = OpVectorShuffle %213 %213 2 2 
                                       f32_4 %215 = OpLoad %26 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 3 
                                       f32_2 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad vs_TEXCOORD5 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %219 
                                                      OpStore vs_TEXCOORD6 %222 
                                         i32 %225 = OpLoad %10 
                                         u32 %226 = OpBitcast %225 
                                                      OpStore %224 %226 
                                 Output f32* %227 = OpAccessChain %123 %15 %119 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFNegate %228 
                                 Output f32* %230 = OpAccessChain %123 %15 %119 
                                                      OpStore %230 %229 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 221
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %163 %182 %207 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate vs_TEXCOORD4 Location 182 
                                                      OpDecorate %207 Location 207 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %175 = OpConstant 6 
                                             %181 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %197 = OpConstant 7 
                                             %206 = OpTypePointer Output %13 
                               Output f32_4* %207 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %58 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %95 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %9 
                                         f32 %172 = OpLoad %162 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %9 %180 
                                         f32 %183 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %184 = OpAccessChain %19 %53 %56 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFDiv %183 %185 
                                                      OpStore %162 %186 
                                         f32 %187 = OpLoad %162 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %96 
                                                      OpStore %162 %189 
                                         f32 %190 = OpLoad %162 
                                Uniform f32* %191 = OpAccessChain %19 %53 %48 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %162 %193 
                                         f32 %194 = OpLoad %162 
                                         f32 %195 = OpExtInst %1 40 %194 %95 
                                                      OpStore %162 %195 
                                         f32 %196 = OpLoad %162 
                                Uniform f32* %198 = OpAccessChain %19 %197 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %196 %199 
                                Uniform f32* %201 = OpAccessChain %19 %197 %73 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                                      OpStore %162 %203 
                                         f32 %204 = OpLoad %162 
                                         f32 %205 = OpExtInst %1 43 %204 %95 %96 
                                                      OpStore %162 %205 
                                         f32 %208 = OpLoad %162 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpFMul %209 %210 
                              Uniform f32_4* %212 = OpAccessChain %19 %175 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFAdd %211 %214 
                                       f32_4 %216 = OpLoad %207 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %207 %217 
                                 Output f32* %219 = OpAccessChain %207 %73 
                                                      OpStore %219 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat9;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat9 = u_xlat4.y * u_xlat4.y;
    u_xlat9 = u_xlat4.x * u_xlat4.x + (-u_xlat9);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat9) + u_xlat3.xyz;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 302
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %157 %200 %202 %203 %253 %290 %294 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 132 
                                                      OpDecorate vs_TEXCOORD5 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD1 Location 200 
                                                      OpDecorate %202 Location 202 
                                                      OpDecorate %203 Location 203 
                                                      OpMemberDecorate %225 0 Offset 225 
                                                      OpMemberDecorate %225 1 Offset 225 
                                                      OpMemberDecorate %225 2 Offset 225 
                                                      OpMemberDecorate %225 3 Offset 225 
                                                      OpMemberDecorate %225 4 Offset 225 
                                                      OpMemberDecorate %225 5 Offset 225 
                                                      OpMemberDecorate %225 6 Offset 225 
                                                      OpDecorate %226 ArrayStride 226 
                                                      OpMemberDecorate %227 0 Offset 227 
                                                      OpDecorate %227 Block 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate vs_TEXCOORD3 Location 253 
                                                      OpDecorate vs_TEXCOORD6 Location 290 
                                                      OpDecorate %294 Flat 
                                                      OpDecorate %294 Location 294 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                                             %156 = OpTypePointer Input %79 
                                Input f32_3* %157 = OpVariable Input 
                                         u32 %165 = OpConstant 0 
                                             %183 = OpTypePointer Private %79 
                              Private f32_3* %184 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %202 = OpVariable Output 
                                Input f32_4* %203 = OpVariable Input 
                                Private f32* %205 = OpVariable Private 
                              Private f32_3* %224 = OpVariable Private 
                                             %225 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %226 = OpTypeArray %225 %40 
                                             %227 = OpTypeStruct %226 
                                             %228 = OpTypePointer Uniform %227 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %229 = OpVariable Uniform 
                                         i32 %239 = OpConstant 4 
                                         i32 %247 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %256 = OpConstant 6 
                                Private f32* %265 = OpVariable Private 
                                             %268 = OpTypePointer Uniform %27 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_2 %275 = OpConstantComposite %274 %274 
                                         u32 %281 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_4 %292 = OpConstantComposite %291 %291 %291 %291 
                                             %293 = OpTypePointer Output %35 
                                 Output u32* %294 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD4 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD5 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_3 %158 = OpLoad %157 
                                         i32 %159 = OpLoad %20 
                                         i32 %160 = OpSDiv %159 %46 
                              Uniform f32_4* %161 = OpAccessChain %44 %15 %160 %48 %15 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %166 = OpAccessChain %72 %165 
                                                      OpStore %166 %164 
                                       f32_3 %167 = OpLoad %157 
                                         i32 %168 = OpLoad %20 
                                         i32 %169 = OpSDiv %168 %46 
                              Uniform f32_4* %170 = OpAccessChain %44 %15 %169 %48 %48 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %167 %172 
                                Private f32* %174 = OpAccessChain %72 %123 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %157 
                                         i32 %176 = OpLoad %20 
                                         i32 %177 = OpSDiv %176 %46 
                              Uniform f32_4* %178 = OpAccessChain %44 %15 %177 %48 %64 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %175 %180 
                                Private f32* %182 = OpAccessChain %72 %133 
                                                      OpStore %182 %181 
                                       f32_4 %185 = OpLoad %72 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %72 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %186 %188 
                                Private f32* %190 = OpAccessChain %184 %165 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %184 %165 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %184 %165 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %184 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_4 %197 = OpLoad %72 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %184 %199 
                                       f32_3 %201 = OpLoad %184 
                                                      OpStore vs_TEXCOORD1 %201 
                                       f32_4 %204 = OpLoad %203 
                                                      OpStore %202 %204 
                                Private f32* %206 = OpAccessChain %184 %123 
                                         f32 %207 = OpLoad %206 
                                Private f32* %208 = OpAccessChain %184 %123 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFMul %207 %209 
                                                      OpStore %205 %210 
                                Private f32* %211 = OpAccessChain %184 %165 
                                         f32 %212 = OpLoad %211 
                                Private f32* %213 = OpAccessChain %184 %165 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpFMul %212 %214 
                                         f32 %216 = OpLoad %205 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %215 %217 
                                                      OpStore %205 %218 
                                       f32_3 %219 = OpLoad %184 
                                       f32_4 %220 = OpVectorShuffle %219 %219 1 2 2 0 
                                       f32_3 %221 = OpLoad %184 
                                       f32_4 %222 = OpVectorShuffle %221 %221 0 1 2 2 
                                       f32_4 %223 = OpFMul %220 %222 
                                                      OpStore %72 %223 
                                         i32 %230 = OpLoad %8 
                                         i32 %231 = OpSDiv %230 %25 
                              Uniform f32_4* %232 = OpAccessChain %229 %15 %231 %22 
                                       f32_4 %233 = OpLoad %232 
                                       f32_4 %234 = OpLoad %72 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %224 %165 
                                                      OpStore %236 %235 
                                         i32 %237 = OpLoad %8 
                                         i32 %238 = OpSDiv %237 %25 
                              Uniform f32_4* %240 = OpAccessChain %229 %15 %238 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %72 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %224 %123 
                                                      OpStore %244 %243 
                                         i32 %245 = OpLoad %8 
                                         i32 %246 = OpSDiv %245 %25 
                              Uniform f32_4* %248 = OpAccessChain %229 %15 %246 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %72 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %224 %133 
                                                      OpStore %252 %251 
                                         i32 %254 = OpLoad %8 
                                         i32 %255 = OpSDiv %254 %25 
                              Uniform f32_4* %257 = OpAccessChain %229 %15 %255 %256 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpLoad %205 
                                       f32_3 %261 = OpCompositeConstruct %260 %260 %260 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_3 %263 = OpLoad %224 
                                       f32_3 %264 = OpFAdd %262 %263 
                                                      OpStore vs_TEXCOORD3 %264 
                                Private f32* %266 = OpAccessChain %30 %123 
                                         f32 %267 = OpLoad %266 
                                Uniform f32* %269 = OpAccessChain %98 %15 %165 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %267 %270 
                                                      OpStore %265 %271 
                                       f32_4 %272 = OpLoad %30 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 3 
                                       f32_2 %276 = OpFMul %273 %275 
                                       f32_4 %277 = OpLoad %30 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 1 5 3 
                                                      OpStore %30 %278 
                                         f32 %279 = OpLoad %265 
                                         f32 %280 = OpFMul %279 %274 
                                Private f32* %282 = OpAccessChain %30 %281 
                                                      OpStore %282 %280 
                                       f32_4 %283 = OpLoad %30 
                                       f32_2 %284 = OpVectorShuffle %283 %283 2 2 
                                       f32_4 %285 = OpLoad %30 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 3 
                                       f32_2 %287 = OpFAdd %284 %286 
                                       f32_4 %288 = OpLoad vs_TEXCOORD5 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %289 
                                                      OpStore vs_TEXCOORD6 %292 
                                         i32 %295 = OpLoad %10 
                                         u32 %296 = OpBitcast %295 
                                                      OpStore %294 %296 
                                 Output f32* %297 = OpAccessChain %127 %15 %123 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFNegate %298 
                                 Output f32* %300 = OpAccessChain %127 %15 %123 
                                                      OpStore %300 %299 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %105 %132 %184 %189 %200 %228 %270 %294 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 105 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %120 DescriptorSet 120 
                                                      OpDecorate %120 Binding 120 
                                                      OpDecorate %132 Flat 
                                                      OpDecorate %132 Location 132 
                                                      OpMemberDecorate %135 0 Offset 135 
                                                      OpMemberDecorate %135 1 Offset 135 
                                                      OpDecorate %135 Block 
                                                      OpDecorate %137 DescriptorSet 137 
                                                      OpDecorate %137 Binding 137 
                                                      OpMemberDecorate %149 0 Offset 149 
                                                      OpMemberDecorate %149 1 Offset 149 
                                                      OpMemberDecorate %149 2 Offset 149 
                                                      OpMemberDecorate %149 3 Offset 149 
                                                      OpMemberDecorate %149 4 Offset 149 
                                                      OpMemberDecorate %149 5 Offset 149 
                                                      OpMemberDecorate %149 6 Offset 149 
                                                      OpDecorate %150 SpecId 150 
                                                      OpDecorate %151 ArrayStride 151 
                                                      OpMemberDecorate %152 0 Offset 152 
                                                      OpDecorate %152 Block 
                                                      OpDecorate %154 DescriptorSet 154 
                                                      OpDecorate %154 Binding 154 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate vs_TEXCOORD0 Location 184 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate vs_TEXCOORD1 Location 200 
                                                      OpDecorate vs_TEXCOORD3 Location 228 
                                                      OpDecorate vs_TEXCOORD4 Location 270 
                                                      OpDecorate %294 Location 294 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %7 %16 %7 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          i32 %90 = OpConstant 3 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         f32 %101 = OpConstant 3.674022E-40 
                                             %104 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %106 = OpTypeVector %6 2 
                                             %114 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %115 = OpTypePointer UniformConstant %114 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                                             %118 = OpTypeSampler 
                                             %119 = OpTypePointer UniformConstant %118 
                    UniformConstant sampler* %120 = OpVariable UniformConstant 
                                             %122 = OpTypeSampledImage %114 
                                             %129 = OpTypePointer Private %20 
                                Private i32* %130 = OpVariable Private 
                                             %131 = OpTypePointer Input %14 
                                  Input u32* %132 = OpVariable Input 
                                             %135 = OpTypeStruct %20 %20 
                                             %136 = OpTypePointer Uniform %135 
                 Uniform struct {i32; i32;}* %137 = OpVariable Uniform 
                                             %138 = OpTypePointer Uniform %20 
                                         i32 %143 = OpConstant 7 
                                Private f32* %145 = OpVariable Private 
                                             %149 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %150 = OpSpecConstant 2 
                                             %151 = OpTypeArray %149 %150 
                                             %152 = OpTypeStruct %151 
                                             %153 = OpTypePointer Uniform %152 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %154 = OpVariable Uniform 
                                         i32 %157 = OpConstant 6 
                                         i32 %171 = OpConstant 8 
        UniformConstant read_only Texture2D* %178 = OpVariable UniformConstant 
                    UniformConstant sampler* %180 = OpVariable UniformConstant 
                                             %183 = OpTypePointer Input %106 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %189 = OpVariable Input 
                              Private f32_4* %199 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %205 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %235 = OpConstantComposite %100 %100 %100 
                                Private f32* %243 = OpVariable Private 
                                             %269 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %293 = OpTypePointer Output %7 
                               Output f32_4* %294 = OpVariable Output 
                                             %306 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %19 %90 %53 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %89 %92 
                                 Uniform f32* %94 = OpAccessChain %19 %90 %78 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %35 
                                          f32 %99 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 43 %99 %100 %101 
                                Private f32* %103 = OpAccessChain %9 %35 
                                                      OpStore %103 %102 
                                       f32_4 %107 = OpLoad vs_TEXCOORD5 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad vs_TEXCOORD5 
                                       f32_2 %110 = OpVectorShuffle %109 %109 3 3 
                                       f32_2 %111 = OpFDiv %108 %110 
                                       f32_3 %112 = OpLoad %43 
                                       f32_3 %113 = OpVectorShuffle %112 %111 3 4 2 
                                                      OpStore %43 %113 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %121 = OpLoad %120 
                  read_only Texture2DSampled %123 = OpSampledImage %117 %121 
                                       f32_3 %124 = OpLoad %43 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_4 %126 = OpImageSampleImplicitLod %123 %125 
                                         f32 %127 = OpCompositeExtract %126 0 
                                Private f32* %128 = OpAccessChain %43 %35 
                                                      OpStore %128 %127 
                                         u32 %133 = OpLoad %132 
                                         i32 %134 = OpBitcast %133 
                                Uniform i32* %139 = OpAccessChain %137 %46 
                                         i32 %140 = OpLoad %139 
                                         i32 %141 = OpIAdd %134 %140 
                                                      OpStore %130 %141 
                                         i32 %142 = OpLoad %130 
                                         i32 %144 = OpIMul %142 %143 
                                                      OpStore %130 %144 
                                Private f32* %146 = OpAccessChain %43 %35 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         i32 %155 = OpLoad %130 
                                         i32 %156 = OpSDiv %155 %143 
                                Uniform f32* %158 = OpAccessChain %154 %46 %156 %157 %78 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %148 %159 
                                                      OpStore %145 %160 
                                Private f32* %161 = OpAccessChain %9 %35 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpLoad %145 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %43 %35 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                Private f32* %168 = OpAccessChain %9 %35 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 0 0 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %170 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 6 
                                                      OpStore %9 %177 
                         read_only Texture2D %179 = OpLoad %178 
                                     sampler %181 = OpLoad %180 
                  read_only Texture2DSampled %182 = OpSampledImage %179 %181 
                                       f32_2 %185 = OpLoad vs_TEXCOORD0 
                                       f32_4 %186 = OpImageSampleImplicitLod %182 %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %51 %187 
                                       f32_3 %188 = OpLoad %51 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %188 %191 
                                                      OpStore %51 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 3 
                                       f32_3 %195 = OpLoad %51 
                                       f32_3 %196 = OpFMul %194 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 2 6 
                                                      OpStore %9 %198 
                                       f32_3 %201 = OpLoad vs_TEXCOORD1 
                                       f32_4 %202 = OpLoad %199 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %199 %203 
                                Private f32* %204 = OpAccessChain %199 %78 
                                                      OpStore %204 %101 
                                         i32 %206 = OpLoad %130 
                                         i32 %207 = OpSDiv %206 %143 
                              Uniform f32_4* %208 = OpAccessChain %154 %46 %207 %46 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %199 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %205 %35 
                                                      OpStore %212 %211 
                                         i32 %213 = OpLoad %130 
                                         i32 %214 = OpSDiv %213 %143 
                              Uniform f32_4* %215 = OpAccessChain %154 %46 %214 %58 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %199 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %205 %61 
                                                      OpStore %219 %218 
                                         i32 %220 = OpLoad %130 
                                         i32 %221 = OpSDiv %220 %143 
                              Uniform f32_4* %222 = OpAccessChain %154 %46 %221 %63 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %199 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %205 %53 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %205 
                                       f32_3 %229 = OpLoad vs_TEXCOORD3 
                                       f32_3 %230 = OpFAdd %227 %229 
                                       f32_4 %231 = OpLoad %199 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %199 %232 
                                       f32_4 %233 = OpLoad %199 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %236 = OpExtInst %1 40 %234 %235 
                                       f32_4 %237 = OpLoad %199 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %199 %238 
                                       f32_3 %239 = OpLoad %51 
                                       f32_4 %240 = OpLoad %199 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                                      OpStore %51 %242 
                                       f32_3 %244 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %245 = OpAccessChain %19 %63 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                                      OpStore %243 %248 
                                         f32 %249 = OpLoad %243 
                                         f32 %250 = OpExtInst %1 40 %249 %100 
                                                      OpStore %243 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 3 
                                         f32 %253 = OpLoad %243 
                                       f32_3 %254 = OpCompositeConstruct %253 %253 %253 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %256 = OpLoad %51 
                                       f32_3 %257 = OpFAdd %255 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %9 %259 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                              Uniform f32_4* %262 = OpAccessChain %19 %157 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %261 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                                         f32 %271 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %272 = OpAccessChain %19 %58 %61 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFDiv %271 %273 
                                                      OpStore %145 %274 
                                         f32 %275 = OpLoad %145 
                                         f32 %276 = OpFNegate %275 
                                         f32 %277 = OpFAdd %276 %101 
                                                      OpStore %145 %277 
                                         f32 %278 = OpLoad %145 
                                Uniform f32* %279 = OpAccessChain %19 %58 %53 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFMul %278 %280 
                                                      OpStore %145 %281 
                                         f32 %282 = OpLoad %145 
                                         f32 %283 = OpExtInst %1 40 %282 %100 
                                                      OpStore %145 %283 
                                         f32 %284 = OpLoad %145 
                                Uniform f32* %285 = OpAccessChain %19 %143 %53 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Uniform f32* %288 = OpAccessChain %19 %143 %78 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFAdd %287 %289 
                                                      OpStore %145 %290 
                                         f32 %291 = OpLoad %145 
                                         f32 %292 = OpExtInst %1 43 %291 %100 %101 
                                                      OpStore %145 %292 
                                         f32 %295 = OpLoad %145 
                                       f32_3 %296 = OpCompositeConstruct %295 %295 %295 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %296 %298 
                              Uniform f32_4* %300 = OpAccessChain %19 %157 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %299 %302 
                                       f32_4 %304 = OpLoad %294 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %294 %305 
                                 Output f32* %307 = OpAccessChain %294 %78 
                                                      OpStore %307 %101 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3) + (-unity_FogColor.xyz);
    u_xlat3 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 204
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %135 %136 %148 %182 %188 %189 %191 %194 %196 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD0 Location 135 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD1 Location 182 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate vs_TEXCOORD5 Location 191 
                                                      OpDecorate vs_TEXCOORD6 Location 194 
                                                      OpDecorate %196 Flat 
                                                      OpDecorate %196 Location 196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                                             %133 = OpTypeVector %23 2 
                                             %134 = OpTypePointer Output %133 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %136 = OpVariable Input 
                                             %147 = OpTypePointer Input %75 
                                Input f32_3* %148 = OpVariable Input 
                                         u32 %156 = OpConstant 0 
                                Private f32* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %188 = OpVariable Output 
                                Input f32_4* %189 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                         f32 %192 = OpConstant 3.674022E-40 
                                       f32_4 %193 = OpConstantComposite %192 %192 %192 %192 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %195 = OpTypePointer Output %31 
                                 Output u32* %196 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %15 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                              Uniform f32_4* %139 = OpAccessChain %94 %44 
                                       f32_4 %140 = OpLoad %139 
                                       f32_2 %141 = OpVectorShuffle %140 %140 0 1 
                                       f32_2 %142 = OpFMul %138 %141 
                              Uniform f32_4* %143 = OpAccessChain %94 %44 
                                       f32_4 %144 = OpLoad %143 
                                       f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                       f32_2 %146 = OpFAdd %142 %145 
                                                      OpStore vs_TEXCOORD0 %146 
                                       f32_3 %149 = OpLoad %148 
                                         i32 %150 = OpLoad %8 
                                         i32 %151 = OpSDiv %150 %42 
                              Uniform f32_4* %152 = OpAccessChain %40 %15 %151 %44 %15 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                         f32 %155 = OpDot %149 %154 
                                Private f32* %157 = OpAccessChain %26 %156 
                                                      OpStore %157 %155 
                                       f32_3 %158 = OpLoad %148 
                                         i32 %159 = OpLoad %8 
                                         i32 %160 = OpSDiv %159 %42 
                              Uniform f32_4* %161 = OpAccessChain %40 %15 %160 %44 %44 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %165 = OpAccessChain %26 %119 
                                                      OpStore %165 %164 
                                       f32_3 %166 = OpLoad %148 
                                         i32 %167 = OpLoad %8 
                                         i32 %168 = OpSDiv %167 %42 
                              Uniform f32_4* %169 = OpAccessChain %40 %15 %168 %44 %60 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %166 %171 
                                Private f32* %173 = OpAccessChain %26 %129 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %174 %179 
                                         f32 %180 = OpLoad %174 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %174 %181 
                                         f32 %183 = OpLoad %174 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_4 %185 = OpLoad %26 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore vs_TEXCOORD1 %187 
                                       f32_4 %190 = OpLoad %189 
                                                      OpStore %188 %190 
                                                      OpStore vs_TEXCOORD5 %193 
                                                      OpStore vs_TEXCOORD6 %193 
                                         i32 %197 = OpLoad %10 
                                         u32 %198 = OpBitcast %197 
                                                      OpStore %196 %198 
                                 Output f32* %199 = OpAccessChain %123 %15 %119 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                 Output f32* %202 = OpAccessChain %123 %15 %119 
                                                      OpStore %202 %201 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 114
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %29 %47 %68 %100 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %29 Location 29 
                                                      OpMemberDecorate %34 0 Offset 34 
                                                      OpMemberDecorate %34 1 Offset 34 
                                                      OpMemberDecorate %34 2 Offset 34 
                                                      OpMemberDecorate %34 3 Offset 34 
                                                      OpMemberDecorate %34 4 Offset 34 
                                                      OpDecorate %34 Block 
                                                      OpDecorate %36 DescriptorSet 36 
                                                      OpDecorate %36 Binding 36 
                                                      OpDecorate vs_TEXCOORD1 Location 47 
                                                      OpDecorate vs_TEXCOORD4 Location 68 
                                                      OpDecorate %100 Location 100 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypePointer Input %24 
                                 Input f32_4* %29 = OpVariable Input 
                                              %34 = OpTypeStruct %24 %24 %24 %24 %24 
                                              %35 = OpTypePointer Uniform %34 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %36 = OpVariable Uniform 
                                              %37 = OpTypeInt 32 1 
                                          i32 %38 = OpConstant 4 
                                              %39 = OpTypePointer Uniform %24 
                                              %44 = OpTypePointer Private %6 
                                 Private f32* %45 = OpVariable Private 
                                              %46 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          i32 %49 = OpConstant 1 
                                          f32 %55 = OpConstant 3.674022E-40 
                                          i32 %61 = OpConstant 2 
                                              %67 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                          i32 %70 = OpConstant 0 
                                              %71 = OpTypeInt 32 0 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypePointer Uniform %6 
                                          f32 %79 = OpConstant 3.674022E-40 
                                          u32 %82 = OpConstant 2 
                                          i32 %89 = OpConstant 3 
                                          u32 %93 = OpConstant 3 
                                              %99 = OpTypePointer Output %24 
                               Output f32_4* %100 = OpVariable Output 
                                             %111 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_3 %32 = OpFMul %27 %31 
                                                      OpStore %9 %32 
                                        f32_3 %33 = OpLoad %9 
                               Uniform f32_4* %40 = OpAccessChain %36 %38 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                                        f32_3 %43 = OpFMul %33 %42 
                                                      OpStore %9 %43 
                                        f32_3 %48 = OpLoad vs_TEXCOORD1 
                               Uniform f32_4* %50 = OpAccessChain %36 %49 
                                        f32_4 %51 = OpLoad %50 
                                        f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                          f32 %53 = OpDot %48 %52 
                                                      OpStore %45 %53 
                                          f32 %54 = OpLoad %45 
                                          f32 %56 = OpExtInst %1 40 %54 %55 
                                                      OpStore %45 %56 
                                        f32_3 %57 = OpLoad %9 
                                          f32 %58 = OpLoad %45 
                                        f32_3 %59 = OpCompositeConstruct %58 %58 %58 
                                        f32_3 %60 = OpFMul %57 %59 
                               Uniform f32_4* %62 = OpAccessChain %36 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 1 2 
                                        f32_3 %65 = OpFNegate %64 
                                        f32_3 %66 = OpFAdd %60 %65 
                                                      OpStore %9 %66 
                                          f32 %69 = OpLoad vs_TEXCOORD4 
                                 Uniform f32* %74 = OpAccessChain %36 %70 %72 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %69 %75 
                                                      OpStore %45 %76 
                                          f32 %77 = OpLoad %45 
                                          f32 %78 = OpFNegate %77 
                                          f32 %80 = OpFAdd %78 %79 
                                                      OpStore %45 %80 
                                          f32 %81 = OpLoad %45 
                                 Uniform f32* %83 = OpAccessChain %36 %70 %82 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFMul %81 %84 
                                                      OpStore %45 %85 
                                          f32 %86 = OpLoad %45 
                                          f32 %87 = OpExtInst %1 40 %86 %55 
                                                      OpStore %45 %87 
                                          f32 %88 = OpLoad %45 
                                 Uniform f32* %90 = OpAccessChain %36 %89 %82 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFMul %88 %91 
                                 Uniform f32* %94 = OpAccessChain %36 %89 %93 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %92 %95 
                                                      OpStore %45 %96 
                                          f32 %97 = OpLoad %45 
                                          f32 %98 = OpExtInst %1 43 %97 %55 %79 
                                                      OpStore %45 %98 
                                         f32 %101 = OpLoad %45 
                                       f32_3 %102 = OpCompositeConstruct %101 %101 %101 
                                       f32_3 %103 = OpLoad %9 
                                       f32_3 %104 = OpFMul %102 %103 
                              Uniform f32_4* %105 = OpAccessChain %36 %61 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %104 %107 
                                       f32_4 %109 = OpLoad %100 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %100 %110 
                                 Output f32* %112 = OpAccessChain %100 %93 
                                                      OpStore %112 %79 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
int u_xlati6;
float u_xlat19;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati6 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat6.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat19 = u_xlat6.y * u_xlat6.y;
    u_xlat19 = u_xlat6.x * u_xlat6.x + (-u_xlat19);
    u_xlat2 = u_xlat6.yzzx * u_xlat6.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat2.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat19) + u_xlat3.xyz;
    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat6.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat6.xxxx + u_xlat4;
    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    u_xlat0.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD3.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat9 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 401
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %136 %143 %144 %157 %201 %203 %206 %207 %384 %390 %391 %393 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 136 
                                                      OpDecorate vs_TEXCOORD0 Location 143 
                                                      OpDecorate %144 Location 144 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD1 Location 201 
                                                      OpDecorate vs_TEXCOORD2 Location 203 
                                                      OpDecorate %206 Location 206 
                                                      OpDecorate %207 Location 207 
                                                      OpMemberDecorate %228 0 Offset 228 
                                                      OpMemberDecorate %228 1 Offset 228 
                                                      OpMemberDecorate %228 2 Offset 228 
                                                      OpMemberDecorate %228 3 Offset 228 
                                                      OpMemberDecorate %228 4 Offset 228 
                                                      OpMemberDecorate %228 5 Offset 228 
                                                      OpMemberDecorate %228 6 Offset 228 
                                                      OpDecorate %229 ArrayStride 229 
                                                      OpMemberDecorate %230 0 Offset 230 
                                                      OpDecorate %230 Block 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate vs_TEXCOORD3 Location 384 
                                                      OpDecorate vs_TEXCOORD5 Location 390 
                                                      OpDecorate vs_TEXCOORD6 Location 391 
                                                      OpDecorate %393 Flat 
                                                      OpDecorate %393 Location 393 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 5 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %137 = OpConstant 2 
                                             %138 = OpTypePointer Private %27 
                                             %141 = OpTypeVector %27 2 
                                             %142 = OpTypePointer Output %141 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %144 = OpVariable Input 
                                         i32 %147 = OpConstant 6 
                                             %156 = OpTypePointer Input %81 
                                Input f32_3* %157 = OpVariable Input 
                                         u32 %165 = OpConstant 0 
                                             %183 = OpTypePointer Private %81 
                              Private f32_3* %184 = OpVariable Private 
                                             %200 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %206 = OpVariable Output 
                                Input f32_4* %207 = OpVariable Input 
                                Private f32* %209 = OpVariable Private 
                                             %228 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %229 = OpTypeArray %228 %40 
                                             %230 = OpTypeStruct %229 
                                             %231 = OpTypePointer Uniform %230 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %232 = OpVariable Uniform 
                                         i32 %242 = OpConstant 4 
                              Private f32_4* %274 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                              Private f32_4* %301 = OpVariable Private 
                                         f32 %319 = OpConstant 3.674022E-40 
                                       f32_4 %320 = OpConstantComposite %319 %319 %319 %319 
                                         f32 %328 = OpConstant 3.674022E-40 
                                       f32_4 %329 = OpConstantComposite %328 %328 %328 %328 
                                         f32 %337 = OpConstant 3.674022E-40 
                                       f32_4 %338 = OpConstantComposite %337 %337 %337 %337 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %392 = OpTypePointer Output %35 
                                 Output u32* %393 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                Private f32* %139 = OpAccessChain %72 %137 
                                         f32 %140 = OpLoad %139 
                                                      OpStore vs_TEXCOORD4 %140 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                              Uniform f32_4* %148 = OpAccessChain %101 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %146 %150 
                              Uniform f32_4* %152 = OpAccessChain %101 %147 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_3 %158 = OpLoad %157 
                                         i32 %159 = OpLoad %20 
                                         i32 %160 = OpSDiv %159 %46 
                              Uniform f32_4* %161 = OpAccessChain %44 %15 %160 %48 %15 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                         f32 %164 = OpDot %158 %163 
                                Private f32* %166 = OpAccessChain %72 %165 
                                                      OpStore %166 %164 
                                       f32_3 %167 = OpLoad %157 
                                         i32 %168 = OpLoad %20 
                                         i32 %169 = OpSDiv %168 %46 
                              Uniform f32_4* %170 = OpAccessChain %44 %15 %169 %48 %48 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %167 %172 
                                Private f32* %174 = OpAccessChain %72 %127 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %157 
                                         i32 %176 = OpLoad %20 
                                         i32 %177 = OpSDiv %176 %46 
                              Uniform f32_4* %178 = OpAccessChain %44 %15 %177 %48 %64 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                         f32 %181 = OpDot %175 %180 
                                Private f32* %182 = OpAccessChain %72 %137 
                                                      OpStore %182 %181 
                                       f32_4 %185 = OpLoad %72 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %72 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %186 %188 
                                Private f32* %190 = OpAccessChain %184 %165 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %184 %165 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 32 %192 
                                Private f32* %194 = OpAccessChain %184 %165 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %184 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_4 %197 = OpLoad %72 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %196 %198 
                                                      OpStore %184 %199 
                                       f32_3 %202 = OpLoad %184 
                                                      OpStore vs_TEXCOORD1 %202 
                                       f32_4 %204 = OpLoad %30 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                                      OpStore vs_TEXCOORD2 %205 
                                       f32_4 %208 = OpLoad %207 
                                                      OpStore %206 %208 
                                Private f32* %210 = OpAccessChain %184 %127 
                                         f32 %211 = OpLoad %210 
                                Private f32* %212 = OpAccessChain %184 %127 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                                      OpStore %209 %214 
                                Private f32* %215 = OpAccessChain %184 %165 
                                         f32 %216 = OpLoad %215 
                                Private f32* %217 = OpAccessChain %184 %165 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFMul %216 %218 
                                         f32 %220 = OpLoad %209 
                                         f32 %221 = OpFNegate %220 
                                         f32 %222 = OpFAdd %219 %221 
                                                      OpStore %209 %222 
                                       f32_3 %223 = OpLoad %184 
                                       f32_4 %224 = OpVectorShuffle %223 %223 1 2 2 0 
                                       f32_3 %225 = OpLoad %184 
                                       f32_4 %226 = OpVectorShuffle %225 %225 0 1 2 2 
                                       f32_4 %227 = OpFMul %224 %226 
                                                      OpStore %72 %227 
                                         i32 %233 = OpLoad %8 
                                         i32 %234 = OpSDiv %233 %25 
                              Uniform f32_4* %235 = OpAccessChain %232 %15 %234 %22 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpLoad %72 
                                         f32 %238 = OpDot %236 %237 
                                Private f32* %239 = OpAccessChain %93 %165 
                                                      OpStore %239 %238 
                                         i32 %240 = OpLoad %8 
                                         i32 %241 = OpSDiv %240 %25 
                              Uniform f32_4* %243 = OpAccessChain %232 %15 %241 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %72 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %93 %127 
                                                      OpStore %247 %246 
                                         i32 %248 = OpLoad %8 
                                         i32 %249 = OpSDiv %248 %25 
                              Uniform f32_4* %250 = OpAccessChain %232 %15 %249 %102 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %72 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %93 %137 
                                                      OpStore %254 %253 
                                         i32 %255 = OpLoad %8 
                                         i32 %256 = OpSDiv %255 %25 
                              Uniform f32_4* %257 = OpAccessChain %232 %15 %256 %147 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpLoad %209 
                                       f32_3 %261 = OpCompositeConstruct %260 %260 %260 
                                       f32_3 %262 = OpFMul %259 %261 
                                       f32_4 %263 = OpLoad %93 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFAdd %262 %264 
                                       f32_4 %266 = OpLoad %72 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %72 %267 
                                       f32_4 %268 = OpLoad %30 
                                       f32_4 %269 = OpVectorShuffle %268 %268 1 1 1 1 
                                       f32_4 %270 = OpFNegate %269 
                              Uniform f32_4* %271 = OpAccessChain %101 %48 
                                       f32_4 %272 = OpLoad %271 
                                       f32_4 %273 = OpFAdd %270 %272 
                                                      OpStore %93 %273 
                                       f32_3 %275 = OpLoad %184 
                                       f32_4 %276 = OpVectorShuffle %275 %275 1 1 1 1 
                                       f32_4 %277 = OpLoad %93 
                                       f32_4 %278 = OpFMul %276 %277 
                                                      OpStore %274 %278 
                                       f32_4 %279 = OpLoad %93 
                                       f32_4 %280 = OpLoad %93 
                                       f32_4 %281 = OpFMul %279 %280 
                                                      OpStore %93 %281 
                                       f32_4 %283 = OpLoad %30 
                                       f32_4 %284 = OpVectorShuffle %283 %283 0 0 0 0 
                                       f32_4 %285 = OpFNegate %284 
                              Uniform f32_4* %286 = OpAccessChain %101 %15 
                                       f32_4 %287 = OpLoad %286 
                                       f32_4 %288 = OpFAdd %285 %287 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %30 
                                       f32_4 %290 = OpVectorShuffle %289 %289 2 2 2 2 
                                       f32_4 %291 = OpFNegate %290 
                              Uniform f32_4* %292 = OpAccessChain %101 %64 
                                       f32_4 %293 = OpLoad %292 
                                       f32_4 %294 = OpFAdd %291 %293 
                                                      OpStore %30 %294 
                                       f32_4 %295 = OpLoad %282 
                                       f32_3 %296 = OpLoad %184 
                                       f32_4 %297 = OpVectorShuffle %296 %296 0 0 0 0 
                                       f32_4 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %274 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %274 %300 
                                       f32_4 %302 = OpLoad %30 
                                       f32_3 %303 = OpLoad %184 
                                       f32_4 %304 = OpVectorShuffle %303 %303 2 2 2 2 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %274 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %301 %307 
                                       f32_4 %308 = OpLoad %282 
                                       f32_4 %309 = OpLoad %282 
                                       f32_4 %310 = OpFMul %308 %309 
                                       f32_4 %311 = OpLoad %93 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %93 %312 
                                       f32_4 %313 = OpLoad %30 
                                       f32_4 %314 = OpLoad %30 
                                       f32_4 %315 = OpFMul %313 %314 
                                       f32_4 %316 = OpLoad %93 
                                       f32_4 %317 = OpFAdd %315 %316 
                                                      OpStore %30 %317 
                                       f32_4 %318 = OpLoad %30 
                                       f32_4 %321 = OpExtInst %1 40 %318 %320 
                                                      OpStore %30 %321 
                                       f32_4 %322 = OpLoad %30 
                                       f32_4 %323 = OpExtInst %1 32 %322 
                                                      OpStore %93 %323 
                                       f32_4 %324 = OpLoad %30 
                              Uniform f32_4* %325 = OpAccessChain %101 %22 
                                       f32_4 %326 = OpLoad %325 
                                       f32_4 %327 = OpFMul %324 %326 
                                       f32_4 %330 = OpFAdd %327 %329 
                                                      OpStore %30 %330 
                                       f32_4 %331 = OpLoad %30 
                                       f32_4 %332 = OpFDiv %329 %331 
                                                      OpStore %30 %332 
                                       f32_4 %333 = OpLoad %301 
                                       f32_4 %334 = OpLoad %93 
                                       f32_4 %335 = OpFMul %333 %334 
                                                      OpStore %301 %335 
                                       f32_4 %336 = OpLoad %301 
                                       f32_4 %339 = OpExtInst %1 40 %336 %338 
                                                      OpStore %301 %339 
                                       f32_4 %340 = OpLoad %30 
                                       f32_4 %341 = OpLoad %301 
                                       f32_4 %342 = OpFMul %340 %341 
                                                      OpStore %301 %342 
                                       f32_4 %343 = OpLoad %301 
                                       f32_3 %344 = OpVectorShuffle %343 %343 1 1 1 
                              Uniform f32_4* %345 = OpAccessChain %101 %242 %48 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %344 %347 
                                       f32_4 %349 = OpLoad %30 
                                       f32_4 %350 = OpVectorShuffle %349 %348 4 5 6 3 
                                                      OpStore %30 %350 
                              Uniform f32_4* %351 = OpAccessChain %101 %242 %15 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_4 %354 = OpLoad %301 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 0 0 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %30 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %356 %358 
                                       f32_4 %360 = OpLoad %30 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %30 %361 
                              Uniform f32_4* %362 = OpAccessChain %101 %242 %64 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_4 %365 = OpLoad %301 
                                       f32_3 %366 = OpVectorShuffle %365 %365 2 2 2 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %30 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFAdd %367 %369 
                                       f32_4 %371 = OpLoad %301 
                                       f32_4 %372 = OpVectorShuffle %371 %370 4 5 6 3 
                                                      OpStore %301 %372 
                              Uniform f32_4* %373 = OpAccessChain %101 %242 %22 
                                       f32_4 %374 = OpLoad %373 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_4 %376 = OpLoad %301 
                                       f32_3 %377 = OpVectorShuffle %376 %376 3 3 3 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %301 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %301 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %301 %383 
                                       f32_4 %385 = OpLoad %72 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %301 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %386 %388 
                                                      OpStore vs_TEXCOORD3 %389 
                                                      OpStore vs_TEXCOORD5 %338 
                                                      OpStore vs_TEXCOORD6 %338 
                                         i32 %394 = OpLoad %10 
                                         u32 %395 = OpBitcast %394 
                                                      OpStore %393 %395 
                                 Output f32* %396 = OpAccessChain %131 %15 %127 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFNegate %397 
                                 Output f32* %399 = OpAccessChain %131 %15 %127 
                                                      OpStore %399 %398 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %31 %90 %114 %120 %155 %181 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Flat 
                                                      OpDecorate %11 Location 11 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 31 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpDecorate %42 SpecId 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpMemberDecorate %75 0 Offset 75 
                                                      OpMemberDecorate %75 1 Offset 75 
                                                      OpMemberDecorate %75 2 Offset 75 
                                                      OpMemberDecorate %75 3 Offset 75 
                                                      OpMemberDecorate %75 4 Offset 75 
                                                      OpDecorate %75 Block 
                                                      OpDecorate %77 DescriptorSet 77 
                                                      OpDecorate %77 Binding 77 
                                                      OpDecorate vs_TEXCOORD3 Location 90 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate vs_TEXCOORD0 Location 114 
                                                      OpDecorate %120 Location 120 
                                                      OpDecorate vs_TEXCOORD4 Location 155 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypeInt 32 0 
                                              %10 = OpTypePointer Input %9 
                                   Input u32* %11 = OpVariable Input 
                                              %14 = OpTypeStruct %6 %6 
                                              %15 = OpTypePointer Uniform %14 
                  Uniform struct {i32; i32;}* %16 = OpVariable Uniform 
                                          i32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Uniform %6 
                                          i32 %23 = OpConstant 7 
                                              %25 = OpTypeFloat 32 
                                              %26 = OpTypeVector %25 4 
                                              %27 = OpTypePointer Private %26 
                               Private f32_4* %28 = OpVariable Private 
                                              %29 = OpTypeVector %25 3 
                                              %30 = OpTypePointer Input %29 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %35 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 3 
                                              %37 = OpTypePointer Private %25 
                                              %39 = OpTypePointer Private %29 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypeStruct %26 %26 %26 %26 %26 %26 %26 
                                          i32 %42 = OpSpecConstant 2 
                                              %43 = OpTypeArray %41 %42 
                                              %44 = OpTypeStruct %43 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %46 = OpVariable Uniform 
                                              %49 = OpTypePointer Uniform %26 
                                          u32 %54 = OpConstant 0 
                                          i32 %58 = OpConstant 1 
                                          u32 %63 = OpConstant 1 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 2 
                               Private f32_3* %74 = OpVariable Private 
                                              %75 = OpTypeStruct %26 %26 %26 %26 %26 
                                              %76 = OpTypePointer Uniform %75 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %77 = OpVariable Uniform 
                                          i32 %78 = OpConstant 4 
                                          i32 %84 = OpConstant 6 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                                             %102 = OpTypeImage %25 Dim2D 0 0 0 1 Unknown 
                                             %103 = OpTypePointer UniformConstant %102 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampler 
                                             %107 = OpTypePointer UniformConstant %106 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                             %110 = OpTypeSampledImage %102 
                                             %112 = OpTypeVector %25 2 
                                             %113 = OpTypePointer Input %112 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %119 = OpTypePointer Input %26 
                                Input f32_4* %120 = OpVariable Input 
                                Private f32* %133 = OpVariable Private 
                                             %154 = OpTypePointer Input %25 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %157 = OpTypePointer Uniform %25 
                                         i32 %171 = OpConstant 3 
                                             %180 = OpTypePointer Output %26 
                               Output f32_4* %181 = OpVariable Output 
                                             %192 = OpTypePointer Output %25 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          u32 %12 = OpLoad %11 
                                          i32 %13 = OpBitcast %12 
                                 Uniform i32* %19 = OpAccessChain %16 %17 
                                          i32 %20 = OpLoad %19 
                                          i32 %21 = OpIAdd %13 %20 
                                                      OpStore %8 %21 
                                          i32 %22 = OpLoad %8 
                                          i32 %24 = OpIMul %22 %23 
                                                      OpStore %8 %24 
                                        f32_3 %32 = OpLoad vs_TEXCOORD1 
                                        f32_4 %33 = OpLoad %28 
                                        f32_4 %34 = OpVectorShuffle %33 %32 4 5 6 3 
                                                      OpStore %28 %34 
                                 Private f32* %38 = OpAccessChain %28 %36 
                                                      OpStore %38 %35 
                                          i32 %47 = OpLoad %8 
                                          i32 %48 = OpSDiv %47 %23 
                               Uniform f32_4* %50 = OpAccessChain %46 %17 %48 %17 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpLoad %28 
                                          f32 %53 = OpDot %51 %52 
                                 Private f32* %55 = OpAccessChain %40 %54 
                                                      OpStore %55 %53 
                                          i32 %56 = OpLoad %8 
                                          i32 %57 = OpSDiv %56 %23 
                               Uniform f32_4* %59 = OpAccessChain %46 %17 %57 %58 
                                        f32_4 %60 = OpLoad %59 
                                        f32_4 %61 = OpLoad %28 
                                          f32 %62 = OpDot %60 %61 
                                 Private f32* %64 = OpAccessChain %40 %63 
                                                      OpStore %64 %62 
                                          i32 %65 = OpLoad %8 
                                          i32 %66 = OpSDiv %65 %23 
                               Uniform f32_4* %68 = OpAccessChain %46 %17 %66 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpLoad %28 
                                          f32 %71 = OpDot %69 %70 
                                 Private f32* %73 = OpAccessChain %40 %72 
                                                      OpStore %73 %71 
                               Uniform f32_4* %79 = OpAccessChain %77 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                          i32 %82 = OpLoad %8 
                                          i32 %83 = OpSDiv %82 %23 
                               Uniform f32_4* %85 = OpAccessChain %46 %17 %83 %84 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_3 %88 = OpFMul %81 %87 
                                                      OpStore %74 %88 
                                        f32_3 %89 = OpLoad %40 
                                        f32_3 %91 = OpLoad vs_TEXCOORD3 
                                        f32_3 %92 = OpFAdd %89 %91 
                                        f32_4 %93 = OpLoad %28 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %28 %94 
                                        f32_4 %95 = OpLoad %28 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %99 = OpExtInst %1 40 %96 %98 
                                       f32_4 %100 = OpLoad %28 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %28 %101 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %111 = OpSampledImage %105 %109 
                                       f32_2 %115 = OpLoad vs_TEXCOORD0 
                                       f32_4 %116 = OpImageSampleImplicitLod %111 %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                                      OpStore %40 %117 
                                       f32_3 %118 = OpLoad %40 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFMul %118 %122 
                                                      OpStore %40 %123 
                                       f32_4 %124 = OpLoad %28 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %40 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_4 %128 = OpLoad %28 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %28 %129 
                                       f32_3 %130 = OpLoad %74 
                                       f32_3 %131 = OpLoad %40 
                                       f32_3 %132 = OpFMul %130 %131 
                                                      OpStore %74 %132 
                                       f32_3 %134 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %135 = OpAccessChain %77 %58 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %134 %137 
                                                      OpStore %133 %138 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpExtInst %1 40 %139 %97 
                                                      OpStore %133 %140 
                                       f32_3 %141 = OpLoad %74 
                                         f32 %142 = OpLoad %133 
                                       f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %28 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %144 %146 
                                                      OpStore %74 %147 
                                       f32_3 %148 = OpLoad %74 
                              Uniform f32_4* %149 = OpAccessChain %77 %67 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %74 %153 
                                         f32 %156 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %158 = OpAccessChain %77 %17 %63 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFDiv %156 %159 
                                                      OpStore %133 %160 
                                         f32 %161 = OpLoad %133 
                                         f32 %162 = OpFNegate %161 
                                         f32 %163 = OpFAdd %162 %35 
                                                      OpStore %133 %163 
                                         f32 %164 = OpLoad %133 
                                Uniform f32* %165 = OpAccessChain %77 %17 %72 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                                      OpStore %133 %167 
                                         f32 %168 = OpLoad %133 
                                         f32 %169 = OpExtInst %1 40 %168 %97 
                                                      OpStore %133 %169 
                                         f32 %170 = OpLoad %133 
                                Uniform f32* %172 = OpAccessChain %77 %171 %72 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFMul %170 %173 
                                Uniform f32* %175 = OpAccessChain %77 %171 %36 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFAdd %174 %176 
                                                      OpStore %133 %177 
                                         f32 %178 = OpLoad %133 
                                         f32 %179 = OpExtInst %1 43 %178 %97 %35 
                                                      OpStore %133 %179 
                                         f32 %182 = OpLoad %133 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_3 %184 = OpLoad %74 
                                       f32_3 %185 = OpFMul %183 %184 
                              Uniform f32_4* %186 = OpAccessChain %77 %67 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %181 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %181 %191 
                                 Output f32* %193 = OpAccessChain %181 %36 
                                                      OpStore %193 %35 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD4 = u_xlat1.z;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat0 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0 * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat2.xy);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat2.x + u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 232
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %187 %193 %194 %220 %224 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 128 
                                                      OpDecorate vs_TEXCOORD5 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD1 Location 187 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate vs_TEXCOORD6 Location 220 
                                                      OpDecorate %224 Flat 
                                                      OpDecorate %224 Location 224 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                             %152 = OpTypePointer Input %75 
                                Input f32_3* %153 = OpVariable Input 
                                         u32 %161 = OpConstant 0 
                                Private f32* %179 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                                             %198 = OpTypePointer Uniform %23 
                                         f32 %204 = OpConstant 3.674022E-40 
                                       f32_2 %205 = OpConstantComposite %204 %204 
                                         u32 %211 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                         f32 %221 = OpConstant 3.674022E-40 
                                       f32_4 %222 = OpConstantComposite %221 %221 %221 %221 
                                             %223 = OpTypePointer Output %31 
                                 Output u32* %224 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %44 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %44 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %44 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %44 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD4 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD5 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %144 = OpAccessChain %94 %60 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %143 %146 
                              Uniform f32_4* %148 = OpAccessChain %94 %60 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_3 %154 = OpLoad %153 
                                         i32 %155 = OpLoad %8 
                                         i32 %156 = OpSDiv %155 %42 
                              Uniform f32_4* %157 = OpAccessChain %40 %15 %156 %44 %15 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %154 %159 
                                Private f32* %162 = OpAccessChain %68 %161 
                                                      OpStore %162 %160 
                                       f32_3 %163 = OpLoad %153 
                                         i32 %164 = OpLoad %8 
                                         i32 %165 = OpSDiv %164 %42 
                              Uniform f32_4* %166 = OpAccessChain %40 %15 %165 %44 %44 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %163 %168 
                                Private f32* %170 = OpAccessChain %68 %119 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %153 
                                         i32 %172 = OpLoad %8 
                                         i32 %173 = OpSDiv %172 %42 
                              Uniform f32_4* %174 = OpAccessChain %40 %15 %173 %44 %60 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %68 %129 
                                                      OpStore %178 %177 
                                       f32_4 %180 = OpLoad %68 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %68 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                                      OpStore %179 %184 
                                         f32 %185 = OpLoad %179 
                                         f32 %186 = OpExtInst %1 32 %185 
                                                      OpStore %179 %186 
                                         f32 %188 = OpLoad %179 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %68 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                                      OpStore vs_TEXCOORD1 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                Private f32* %196 = OpAccessChain %26 %119 
                                         f32 %197 = OpLoad %196 
                                Uniform f32* %199 = OpAccessChain %94 %15 %161 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %197 %200 
                                                      OpStore %179 %201 
                                       f32_4 %202 = OpLoad %26 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 3 
                                       f32_2 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %26 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 1 5 3 
                                                      OpStore %26 %208 
                                         f32 %209 = OpLoad %179 
                                         f32 %210 = OpFMul %209 %204 
                                Private f32* %212 = OpAccessChain %26 %211 
                                                      OpStore %212 %210 
                                       f32_4 %213 = OpLoad %26 
                                       f32_2 %214 = OpVectorShuffle %213 %213 2 2 
                                       f32_4 %215 = OpLoad %26 
                                       f32_2 %216 = OpVectorShuffle %215 %215 0 3 
                                       f32_2 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad vs_TEXCOORD5 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %219 
                                                      OpStore vs_TEXCOORD6 %222 
                                         i32 %225 = OpLoad %10 
                                         u32 %226 = OpBitcast %225 
                                                      OpStore %224 %226 
                                 Output f32* %227 = OpAccessChain %123 %15 %119 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFNegate %228 
                                 Output f32* %230 = OpAccessChain %123 %15 %119 
                                                      OpStore %230 %229 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 221
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %100 %150 %155 %163 %182 %207 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 100 
                                                      OpDecorate %111 DescriptorSet 111 
                                                      OpDecorate %111 Binding 111 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %146 DescriptorSet 146 
                                                      OpDecorate %146 Binding 146 
                                                      OpDecorate vs_TEXCOORD0 Location 150 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD1 Location 163 
                                                      OpDecorate vs_TEXCOORD4 Location 182 
                                                      OpDecorate %207 Location 207 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %13 = OpTypeVector %6 4 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %13 %15 
                                              %17 = OpTypeStruct %7 %13 %13 %13 %13 %16 %13 %13 %13 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %13 
                                          u32 %31 = OpConstant 0 
                                              %32 = OpTypePointer Private %6 
                               Private f32_3* %38 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                               Private f32_3* %46 = OpVariable Private 
                                          i32 %47 = OpConstant 5 
                                          u32 %48 = OpConstant 2 
                                              %49 = OpTypePointer Uniform %6 
                                          i32 %53 = OpConstant 1 
                                          u32 %56 = OpConstant 1 
                                          i32 %58 = OpConstant 2 
                                          u32 %73 = OpConstant 3 
                                          i32 %85 = OpConstant 3 
                                          f32 %95 = OpConstant 3.674022E-40 
                                          f32 %96 = OpConstant 3.674022E-40 
                                              %99 = OpTypePointer Input %13 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %101 = OpTypeVector %6 2 
                                             %109 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %110 = OpTypePointer UniformConstant %109 
        UniformConstant read_only Texture2D* %111 = OpVariable UniformConstant 
                                             %113 = OpTypeSampler 
                                             %114 = OpTypePointer UniformConstant %113 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                             %117 = OpTypeSampledImage %109 
                                Private f32* %124 = OpVariable Private 
                                         i32 %139 = OpConstant 8 
        UniformConstant read_only Texture2D* %144 = OpVariable UniformConstant 
                    UniformConstant sampler* %146 = OpVariable UniformConstant 
                                             %149 = OpTypePointer Input %101 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %155 = OpVariable Input 
                                Private f32* %162 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         i32 %175 = OpConstant 6 
                                             %181 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                         i32 %197 = OpConstant 7 
                                             %206 = OpTypePointer Output %13 
                               Output f32_4* %207 = OpVariable Output 
                                             %218 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %12 %26 
                                                      OpStore %9 %27 
                                        f32_3 %28 = OpLoad %9 
                                        f32_3 %29 = OpLoad %9 
                                          f32 %30 = OpDot %28 %29 
                                 Private f32* %33 = OpAccessChain %9 %31 
                                                      OpStore %33 %30 
                                 Private f32* %34 = OpAccessChain %9 %31 
                                          f32 %35 = OpLoad %34 
                                          f32 %36 = OpExtInst %1 31 %35 
                                 Private f32* %37 = OpAccessChain %9 %31 
                                                      OpStore %37 %36 
                                        f32_3 %39 = OpLoad vs_TEXCOORD2 
                                        f32_3 %40 = OpFNegate %39 
                               Uniform f32_3* %43 = OpAccessChain %19 %41 
                                        f32_3 %44 = OpLoad %43 
                                        f32_3 %45 = OpFAdd %40 %44 
                                                      OpStore %38 %45 
                                 Uniform f32* %50 = OpAccessChain %19 %47 %41 %48 
                                          f32 %51 = OpLoad %50 
                                 Private f32* %52 = OpAccessChain %46 %31 
                                                      OpStore %52 %51 
                                 Uniform f32* %54 = OpAccessChain %19 %47 %53 %48 
                                          f32 %55 = OpLoad %54 
                                 Private f32* %57 = OpAccessChain %46 %56 
                                                      OpStore %57 %55 
                                 Uniform f32* %59 = OpAccessChain %19 %47 %58 %48 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %61 = OpAccessChain %46 %48 
                                                      OpStore %61 %60 
                                        f32_3 %62 = OpLoad %38 
                                        f32_3 %63 = OpLoad %46 
                                          f32 %64 = OpDot %62 %63 
                                 Private f32* %65 = OpAccessChain %38 %31 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %38 %31 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFNegate %67 
                                 Private f32* %69 = OpAccessChain %9 %31 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %68 %70 
                                 Private f32* %72 = OpAccessChain %9 %31 
                                                      OpStore %72 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %21 %73 
                                          f32 %75 = OpLoad %74 
                                 Private f32* %76 = OpAccessChain %9 %31 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFMul %75 %77 
                                 Private f32* %79 = OpAccessChain %38 %31 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %78 %80 
                                 Private f32* %82 = OpAccessChain %9 %31 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %9 %31 
                                          f32 %84 = OpLoad %83 
                                 Uniform f32* %86 = OpAccessChain %19 %85 %48 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpFMul %84 %87 
                                 Uniform f32* %89 = OpAccessChain %19 %85 %73 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFAdd %88 %90 
                                 Private f32* %92 = OpAccessChain %9 %31 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %31 
                                          f32 %94 = OpLoad %93 
                                          f32 %97 = OpExtInst %1 43 %94 %95 %96 
                                 Private f32* %98 = OpAccessChain %9 %31 
                                                      OpStore %98 %97 
                                       f32_4 %102 = OpLoad vs_TEXCOORD5 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_4 %104 = OpLoad vs_TEXCOORD5 
                                       f32_2 %105 = OpVectorShuffle %104 %104 3 3 
                                       f32_2 %106 = OpFDiv %103 %105 
                                       f32_3 %107 = OpLoad %38 
                                       f32_3 %108 = OpVectorShuffle %107 %106 3 4 2 
                                                      OpStore %38 %108 
                         read_only Texture2D %112 = OpLoad %111 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %118 = OpSampledImage %112 %116 
                                       f32_3 %119 = OpLoad %38 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                         f32 %122 = OpCompositeExtract %121 0 
                                Private f32* %123 = OpAccessChain %38 %31 
                                                      OpStore %123 %122 
                                Private f32* %125 = OpAccessChain %38 %31 
                                         f32 %126 = OpLoad %125 
                                         f32 %127 = OpFNegate %126 
                                         f32 %128 = OpFAdd %127 %96 
                                                      OpStore %124 %128 
                                Private f32* %129 = OpAccessChain %9 %31 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpLoad %124 
                                         f32 %132 = OpFMul %130 %131 
                                Private f32* %133 = OpAccessChain %38 %31 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFAdd %132 %134 
                                Private f32* %136 = OpAccessChain %9 %31 
                                                      OpStore %136 %135 
                                       f32_3 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                              Uniform f32_4* %140 = OpAccessChain %19 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %138 %142 
                                                      OpStore %9 %143 
                         read_only Texture2D %145 = OpLoad %144 
                                     sampler %147 = OpLoad %146 
                  read_only Texture2DSampled %148 = OpSampledImage %145 %147 
                                       f32_2 %151 = OpLoad vs_TEXCOORD0 
                                       f32_4 %152 = OpImageSampleImplicitLod %148 %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore %46 %153 
                                       f32_3 %154 = OpLoad %46 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %158 = OpFMul %154 %157 
                                                      OpStore %46 %158 
                                       f32_3 %159 = OpLoad %9 
                                       f32_3 %160 = OpLoad %46 
                                       f32_3 %161 = OpFMul %159 %160 
                                                      OpStore %9 %161 
                                       f32_3 %164 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %165 = OpAccessChain %19 %58 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                                      OpStore %162 %168 
                                         f32 %169 = OpLoad %162 
                                         f32 %170 = OpExtInst %1 40 %169 %95 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %9 
                                         f32 %172 = OpLoad %162 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_3 %174 = OpFMul %171 %173 
                              Uniform f32_4* %176 = OpAccessChain %19 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %9 %180 
                                         f32 %183 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %184 = OpAccessChain %19 %53 %56 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFDiv %183 %185 
                                                      OpStore %162 %186 
                                         f32 %187 = OpLoad %162 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %96 
                                                      OpStore %162 %189 
                                         f32 %190 = OpLoad %162 
                                Uniform f32* %191 = OpAccessChain %19 %53 %48 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFMul %190 %192 
                                                      OpStore %162 %193 
                                         f32 %194 = OpLoad %162 
                                         f32 %195 = OpExtInst %1 40 %194 %95 
                                                      OpStore %162 %195 
                                         f32 %196 = OpLoad %162 
                                Uniform f32* %198 = OpAccessChain %19 %197 %48 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFMul %196 %199 
                                Uniform f32* %201 = OpAccessChain %19 %197 %73 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                                      OpStore %162 %203 
                                         f32 %204 = OpLoad %162 
                                         f32 %205 = OpExtInst %1 43 %204 %95 %96 
                                                      OpStore %162 %205 
                                         f32 %208 = OpLoad %162 
                                       f32_3 %209 = OpCompositeConstruct %208 %208 %208 
                                       f32_3 %210 = OpLoad %9 
                                       f32_3 %211 = OpFMul %209 %210 
                              Uniform f32_4* %212 = OpAccessChain %19 %175 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFAdd %211 %214 
                                       f32_4 %216 = OpLoad %207 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %207 %217 
                                 Output f32* %219 = OpAccessChain %207 %73 
                                                      OpStore %219 %96 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat22;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati7 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1.xyz = unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_TEXCOORD4 = u_xlat2.z;
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati7 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat22 = u_xlat7.y * u_xlat7.y;
    u_xlat22 = u_xlat7.x * u_xlat7.x + (-u_xlat22);
    u_xlat3 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat3);
    u_xlat4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat3);
    u_xlat4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat3);
    u_xlat3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat22) + u_xlat4.xyz;
    u_xlat4 = (-u_xlat1.yyyy) + unity_4LightPosY0;
    u_xlat5 = u_xlat7.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat6 = (-u_xlat1.xxxx) + unity_4LightPosX0;
    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat6 * u_xlat7.xxxx + u_xlat5;
    u_xlat0 = u_xlat1 * u_xlat7.zzzz + u_xlat5;
    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat4;
    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = inversesqrt(u_xlat1);
    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat1 * u_xlat0;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat2.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat0.x * 0.5;
    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _LightColor0;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD4;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD5;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat1 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati4 = u_xlati4 * 7;
    u_xlat8 = (-u_xlat1.x) + unity_Builtins2Array[u_xlati4 / 7].unity_SHCArray.w;
    u_xlat0.x = u_xlat0.x * u_xlat8 + u_xlat1.x;
    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD1.xyz;
    u_xlat2.w = 1.0;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHArArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati4 / 7].unity_SHAbArray, u_xlat2);
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat4.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat4.x = max(u_xlat4.x, 0.0);
    u_xlat0.xyz = u_xlat0.xzw * u_xlat4.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.z + unity_FogParams.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 432
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %131 %136 %141 %148 %149 %161 %205 %207 %210 %211 %390 %422 %424 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %97 ArrayStride 97 
                                                      OpDecorate %98 ArrayStride 98 
                                                      OpMemberDecorate %99 0 Offset 99 
                                                      OpMemberDecorate %99 1 Offset 99 
                                                      OpMemberDecorate %99 2 Offset 99 
                                                      OpMemberDecorate %99 3 Offset 99 
                                                      OpMemberDecorate %99 4 Offset 99 
                                                      OpMemberDecorate %99 5 Offset 99 
                                                      OpMemberDecorate %99 6 Offset 99 
                                                      OpMemberDecorate %99 7 Offset 99 
                                                      OpDecorate %99 Block 
                                                      OpDecorate %101 DescriptorSet 101 
                                                      OpDecorate %101 Binding 101 
                                                      OpMemberDecorate %129 0 BuiltIn 129 
                                                      OpMemberDecorate %129 1 BuiltIn 129 
                                                      OpMemberDecorate %129 2 BuiltIn 129 
                                                      OpDecorate %129 Block 
                                                      OpDecorate vs_TEXCOORD4 Location 136 
                                                      OpDecorate vs_TEXCOORD5 Location 141 
                                                      OpDecorate vs_TEXCOORD0 Location 148 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD1 Location 205 
                                                      OpDecorate vs_TEXCOORD2 Location 207 
                                                      OpDecorate %210 Location 210 
                                                      OpDecorate %211 Location 211 
                                                      OpMemberDecorate %233 0 Offset 233 
                                                      OpMemberDecorate %233 1 Offset 233 
                                                      OpMemberDecorate %233 2 Offset 233 
                                                      OpMemberDecorate %233 3 Offset 233 
                                                      OpMemberDecorate %233 4 Offset 233 
                                                      OpMemberDecorate %233 5 Offset 233 
                                                      OpMemberDecorate %233 6 Offset 233 
                                                      OpDecorate %234 ArrayStride 234 
                                                      OpMemberDecorate %235 0 Offset 235 
                                                      OpDecorate %235 Block 
                                                      OpDecorate %237 DescriptorSet 237 
                                                      OpDecorate %237 Binding 237 
                                                      OpDecorate vs_TEXCOORD3 Location 390 
                                                      OpDecorate vs_TEXCOORD6 Location 422 
                                                      OpDecorate %424 Flat 
                                                      OpDecorate %424 Location 424 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %81 = OpTypeVector %27 3 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %96 = OpConstant 8 
                                              %97 = OpTypeArray %28 %96 
                                              %98 = OpTypeArray %28 %36 
                                              %99 = OpTypeStruct %28 %28 %28 %28 %28 %97 %98 %28 
                                             %100 = OpTypePointer Uniform %99 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[8]; f32_4[4]; f32_4;}* %101 = OpVariable Uniform 
                                         i32 %102 = OpConstant 6 
                                         u32 %127 = OpConstant 1 
                                             %128 = OpTypeArray %27 %127 
                                             %129 = OpTypeStruct %28 %27 %128 
                                             %130 = OpTypePointer Output %129 
        Output struct {f32_4; f32; f32[1];}* %131 = OpVariable Output 
                                             %133 = OpTypePointer Output %28 
                                             %135 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD4 = OpVariable Output 
                                         u32 %137 = OpConstant 2 
                                             %138 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD5 = OpVariable Output 
                                             %142 = OpTypeVector %27 2 
                                             %147 = OpTypePointer Output %142 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %149 = OpVariable Input 
                                             %160 = OpTypePointer Input %81 
                                Input f32_3* %161 = OpVariable Input 
                                         u32 %169 = OpConstant 0 
                                             %187 = OpTypePointer Private %81 
                              Private f32_3* %188 = OpVariable Private 
                                             %204 = OpTypePointer Output %81 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %210 = OpVariable Output 
                                Input f32_4* %211 = OpVariable Input 
                                Private f32* %213 = OpVariable Private 
                              Private f32_4* %232 = OpVariable Private 
                                             %233 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %234 = OpTypeArray %233 %40 
                                             %235 = OpTypeStruct %234 
                                             %236 = OpTypePointer Uniform %235 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %237 = OpVariable Uniform 
                                         i32 %247 = OpConstant 4 
                                         i32 %255 = OpConstant 5 
                              Private f32_4* %280 = OpVariable Private 
                              Private f32_4* %288 = OpVariable Private 
                              Private f32_4* %307 = OpVariable Private 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_4 %326 = OpConstantComposite %325 %325 %325 %325 
                                         f32 %334 = OpConstant 3.674022E-40 
                                       f32_4 %335 = OpConstantComposite %334 %334 %334 %334 
                                         f32 %343 = OpConstant 3.674022E-40 
                                       f32_4 %344 = OpConstantComposite %343 %343 %343 %343 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %398 = OpTypePointer Uniform %27 
                                         f32 %405 = OpConstant 3.674022E-40 
                                       f32_2 %406 = OpConstantComposite %405 %405 
                                         u32 %413 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                             %423 = OpTypePointer Output %35 
                                 Output u32* %424 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %79 = OpLoad %20 
                                          i32 %80 = OpSDiv %79 %46 
                               Uniform f32_4* %82 = OpAccessChain %44 %15 %80 %15 %22 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_4 %85 = OpLoad %32 
                                        f32_3 %86 = OpVectorShuffle %85 %85 3 3 3 
                                        f32_3 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %30 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFAdd %87 %89 
                                        f32_4 %91 = OpLoad %30 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %30 %92 
                                        f32_4 %94 = OpLoad %72 
                                        f32_4 %95 = OpVectorShuffle %94 %94 1 1 1 1 
                              Uniform f32_4* %103 = OpAccessChain %101 %102 %48 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpFMul %95 %104 
                                                      OpStore %93 %105 
                              Uniform f32_4* %106 = OpAccessChain %101 %102 %15 
                                       f32_4 %107 = OpLoad %106 
                                       f32_4 %108 = OpLoad %72 
                                       f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                       f32_4 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %93 
                                       f32_4 %112 = OpFAdd %110 %111 
                                                      OpStore %93 %112 
                              Uniform f32_4* %113 = OpAccessChain %101 %102 %64 
                                       f32_4 %114 = OpLoad %113 
                                       f32_4 %115 = OpLoad %72 
                                       f32_4 %116 = OpVectorShuffle %115 %115 2 2 2 2 
                                       f32_4 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %93 
                                       f32_4 %119 = OpFAdd %117 %118 
                                                      OpStore %93 %119 
                              Uniform f32_4* %120 = OpAccessChain %101 %102 %22 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpLoad %72 
                                       f32_4 %123 = OpVectorShuffle %122 %122 3 3 3 3 
                                       f32_4 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %93 
                                       f32_4 %126 = OpFAdd %124 %125 
                                                      OpStore %72 %126 
                                       f32_4 %132 = OpLoad %72 
                               Output f32_4* %134 = OpAccessChain %131 %15 
                                                      OpStore %134 %132 
                                Private f32* %139 = OpAccessChain %72 %137 
                                         f32 %140 = OpLoad %139 
                                                      OpStore vs_TEXCOORD4 %140 
                                       f32_4 %143 = OpLoad %72 
                                       f32_2 %144 = OpVectorShuffle %143 %143 2 3 
                                       f32_4 %145 = OpLoad vs_TEXCOORD5 
                                       f32_4 %146 = OpVectorShuffle %145 %144 0 1 4 5 
                                                      OpStore vs_TEXCOORD5 %146 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                              Uniform f32_4* %152 = OpAccessChain %101 %25 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                       f32_2 %155 = OpFMul %151 %154 
                              Uniform f32_4* %156 = OpAccessChain %101 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                       f32_2 %159 = OpFAdd %155 %158 
                                                      OpStore vs_TEXCOORD0 %159 
                                       f32_3 %162 = OpLoad %161 
                                         i32 %163 = OpLoad %20 
                                         i32 %164 = OpSDiv %163 %46 
                              Uniform f32_4* %165 = OpAccessChain %44 %15 %164 %48 %15 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %162 %167 
                                Private f32* %170 = OpAccessChain %93 %169 
                                                      OpStore %170 %168 
                                       f32_3 %171 = OpLoad %161 
                                         i32 %172 = OpLoad %20 
                                         i32 %173 = OpSDiv %172 %46 
                              Uniform f32_4* %174 = OpAccessChain %44 %15 %173 %48 %48 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                         f32 %177 = OpDot %171 %176 
                                Private f32* %178 = OpAccessChain %93 %127 
                                                      OpStore %178 %177 
                                       f32_3 %179 = OpLoad %161 
                                         i32 %180 = OpLoad %20 
                                         i32 %181 = OpSDiv %180 %46 
                              Uniform f32_4* %182 = OpAccessChain %44 %15 %181 %48 %64 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %179 %184 
                                Private f32* %186 = OpAccessChain %93 %137 
                                                      OpStore %186 %185 
                                       f32_4 %189 = OpLoad %93 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %93 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                Private f32* %194 = OpAccessChain %188 %169 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %188 %169 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpExtInst %1 32 %196 
                                Private f32* %198 = OpAccessChain %188 %169 
                                                      OpStore %198 %197 
                                       f32_3 %199 = OpLoad %188 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_4 %201 = OpLoad %93 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFMul %200 %202 
                                                      OpStore %188 %203 
                                       f32_3 %206 = OpLoad %188 
                                                      OpStore vs_TEXCOORD1 %206 
                                       f32_4 %208 = OpLoad %30 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                                      OpStore vs_TEXCOORD2 %209 
                                       f32_4 %212 = OpLoad %211 
                                                      OpStore %210 %212 
                                Private f32* %214 = OpAccessChain %188 %127 
                                         f32 %215 = OpLoad %214 
                                Private f32* %216 = OpAccessChain %188 %127 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFMul %215 %217 
                                                      OpStore %213 %218 
                                Private f32* %219 = OpAccessChain %188 %169 
                                         f32 %220 = OpLoad %219 
                                Private f32* %221 = OpAccessChain %188 %169 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFMul %220 %222 
                                         f32 %224 = OpLoad %213 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %223 %225 
                                                      OpStore %213 %226 
                                       f32_3 %227 = OpLoad %188 
                                       f32_4 %228 = OpVectorShuffle %227 %227 1 2 2 0 
                                       f32_3 %229 = OpLoad %188 
                                       f32_4 %230 = OpVectorShuffle %229 %229 0 1 2 2 
                                       f32_4 %231 = OpFMul %228 %230 
                                                      OpStore %93 %231 
                                         i32 %238 = OpLoad %8 
                                         i32 %239 = OpSDiv %238 %25 
                              Uniform f32_4* %240 = OpAccessChain %237 %15 %239 %22 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %93 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %232 %169 
                                                      OpStore %244 %243 
                                         i32 %245 = OpLoad %8 
                                         i32 %246 = OpSDiv %245 %25 
                              Uniform f32_4* %248 = OpAccessChain %237 %15 %246 %247 
                                       f32_4 %249 = OpLoad %248 
                                       f32_4 %250 = OpLoad %93 
                                         f32 %251 = OpDot %249 %250 
                                Private f32* %252 = OpAccessChain %232 %127 
                                                      OpStore %252 %251 
                                         i32 %253 = OpLoad %8 
                                         i32 %254 = OpSDiv %253 %25 
                              Uniform f32_4* %256 = OpAccessChain %237 %15 %254 %255 
                                       f32_4 %257 = OpLoad %256 
                                       f32_4 %258 = OpLoad %93 
                                         f32 %259 = OpDot %257 %258 
                                Private f32* %260 = OpAccessChain %232 %137 
                                                      OpStore %260 %259 
                                         i32 %261 = OpLoad %8 
                                         i32 %262 = OpSDiv %261 %25 
                              Uniform f32_4* %263 = OpAccessChain %237 %15 %262 %102 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpLoad %213 
                                       f32_3 %267 = OpCompositeConstruct %266 %266 %266 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %232 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFAdd %268 %270 
                                       f32_4 %272 = OpLoad %93 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %93 %273 
                                       f32_4 %274 = OpLoad %30 
                                       f32_4 %275 = OpVectorShuffle %274 %274 1 1 1 1 
                                       f32_4 %276 = OpFNegate %275 
                              Uniform f32_4* %277 = OpAccessChain %101 %64 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpFAdd %276 %278 
                                                      OpStore %232 %279 
                                       f32_3 %281 = OpLoad %188 
                                       f32_4 %282 = OpVectorShuffle %281 %281 1 1 1 1 
                                       f32_4 %283 = OpLoad %232 
                                       f32_4 %284 = OpFMul %282 %283 
                                                      OpStore %280 %284 
                                       f32_4 %285 = OpLoad %232 
                                       f32_4 %286 = OpLoad %232 
                                       f32_4 %287 = OpFMul %285 %286 
                                                      OpStore %232 %287 
                                       f32_4 %289 = OpLoad %30 
                                       f32_4 %290 = OpVectorShuffle %289 %289 0 0 0 0 
                                       f32_4 %291 = OpFNegate %290 
                              Uniform f32_4* %292 = OpAccessChain %101 %48 
                                       f32_4 %293 = OpLoad %292 
                                       f32_4 %294 = OpFAdd %291 %293 
                                                      OpStore %288 %294 
                                       f32_4 %295 = OpLoad %30 
                                       f32_4 %296 = OpVectorShuffle %295 %295 2 2 2 2 
                                       f32_4 %297 = OpFNegate %296 
                              Uniform f32_4* %298 = OpAccessChain %101 %22 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpFAdd %297 %299 
                                                      OpStore %30 %300 
                                       f32_4 %301 = OpLoad %288 
                                       f32_3 %302 = OpLoad %188 
                                       f32_4 %303 = OpVectorShuffle %302 %302 0 0 0 0 
                                       f32_4 %304 = OpFMul %301 %303 
                                       f32_4 %305 = OpLoad %280 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %280 %306 
                                       f32_4 %308 = OpLoad %30 
                                       f32_3 %309 = OpLoad %188 
                                       f32_4 %310 = OpVectorShuffle %309 %309 2 2 2 2 
                                       f32_4 %311 = OpFMul %308 %310 
                                       f32_4 %312 = OpLoad %280 
                                       f32_4 %313 = OpFAdd %311 %312 
                                                      OpStore %307 %313 
                                       f32_4 %314 = OpLoad %288 
                                       f32_4 %315 = OpLoad %288 
                                       f32_4 %316 = OpFMul %314 %315 
                                       f32_4 %317 = OpLoad %232 
                                       f32_4 %318 = OpFAdd %316 %317 
                                                      OpStore %232 %318 
                                       f32_4 %319 = OpLoad %30 
                                       f32_4 %320 = OpLoad %30 
                                       f32_4 %321 = OpFMul %319 %320 
                                       f32_4 %322 = OpLoad %232 
                                       f32_4 %323 = OpFAdd %321 %322 
                                                      OpStore %30 %323 
                                       f32_4 %324 = OpLoad %30 
                                       f32_4 %327 = OpExtInst %1 40 %324 %326 
                                                      OpStore %30 %327 
                                       f32_4 %328 = OpLoad %30 
                                       f32_4 %329 = OpExtInst %1 32 %328 
                                                      OpStore %232 %329 
                                       f32_4 %330 = OpLoad %30 
                              Uniform f32_4* %331 = OpAccessChain %101 %247 
                                       f32_4 %332 = OpLoad %331 
                                       f32_4 %333 = OpFMul %330 %332 
                                       f32_4 %336 = OpFAdd %333 %335 
                                                      OpStore %30 %336 
                                       f32_4 %337 = OpLoad %30 
                                       f32_4 %338 = OpFDiv %335 %337 
                                                      OpStore %30 %338 
                                       f32_4 %339 = OpLoad %307 
                                       f32_4 %340 = OpLoad %232 
                                       f32_4 %341 = OpFMul %339 %340 
                                                      OpStore %307 %341 
                                       f32_4 %342 = OpLoad %307 
                                       f32_4 %345 = OpExtInst %1 40 %342 %344 
                                                      OpStore %307 %345 
                                       f32_4 %346 = OpLoad %30 
                                       f32_4 %347 = OpLoad %307 
                                       f32_4 %348 = OpFMul %346 %347 
                                                      OpStore %307 %348 
                                       f32_4 %349 = OpLoad %307 
                                       f32_3 %350 = OpVectorShuffle %349 %349 1 1 1 
                              Uniform f32_4* %351 = OpAccessChain %101 %255 %48 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFMul %350 %353 
                                       f32_4 %355 = OpLoad %30 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %30 %356 
                              Uniform f32_4* %357 = OpAccessChain %101 %255 %15 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                       f32_4 %360 = OpLoad %307 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 0 0 
                                       f32_3 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %30 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFAdd %362 %364 
                                       f32_4 %366 = OpLoad %30 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %30 %367 
                              Uniform f32_4* %368 = OpAccessChain %101 %255 %64 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %307 
                                       f32_3 %372 = OpVectorShuffle %371 %371 2 2 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %30 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %307 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %307 %378 
                              Uniform f32_4* %379 = OpAccessChain %101 %255 %22 
                                       f32_4 %380 = OpLoad %379 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_4 %382 = OpLoad %307 
                                       f32_3 %383 = OpVectorShuffle %382 %382 3 3 3 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %307 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFAdd %384 %386 
                                       f32_4 %388 = OpLoad %307 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %307 %389 
                                       f32_4 %391 = OpLoad %93 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_4 %393 = OpLoad %307 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_3 %395 = OpFAdd %392 %394 
                                                      OpStore vs_TEXCOORD3 %395 
                                Private f32* %396 = OpAccessChain %72 %127 
                                         f32 %397 = OpLoad %396 
                                Uniform f32* %399 = OpAccessChain %101 %15 %169 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpFMul %397 %400 
                                Private f32* %402 = OpAccessChain %307 %169 
                                                      OpStore %402 %401 
                                       f32_4 %403 = OpLoad %72 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 3 
                                       f32_2 %407 = OpFMul %404 %406 
                                       f32_4 %408 = OpLoad %30 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 1 5 3 
                                                      OpStore %30 %409 
                                Private f32* %410 = OpAccessChain %307 %169 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %411 %405 
                                Private f32* %414 = OpAccessChain %30 %413 
                                                      OpStore %414 %412 
                                       f32_4 %415 = OpLoad %30 
                                       f32_2 %416 = OpVectorShuffle %415 %415 2 2 
                                       f32_4 %417 = OpLoad %30 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 3 
                                       f32_2 %419 = OpFAdd %416 %418 
                                       f32_4 %420 = OpLoad vs_TEXCOORD5 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 2 3 
                                                      OpStore vs_TEXCOORD5 %421 
                                                      OpStore vs_TEXCOORD6 %344 
                                         i32 %425 = OpLoad %10 
                                         u32 %426 = OpBitcast %425 
                                                      OpStore %424 %426 
                                 Output f32* %427 = OpAccessChain %131 %15 %127 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFNegate %428 
                                 Output f32* %430 = OpAccessChain %131 %15 %127 
                                                      OpStore %430 %429 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 309
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %105 %132 %184 %189 %200 %228 %270 %294 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD5 Location 105 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %120 DescriptorSet 120 
                                                      OpDecorate %120 Binding 120 
                                                      OpDecorate %132 Flat 
                                                      OpDecorate %132 Location 132 
                                                      OpMemberDecorate %135 0 Offset 135 
                                                      OpMemberDecorate %135 1 Offset 135 
                                                      OpDecorate %135 Block 
                                                      OpDecorate %137 DescriptorSet 137 
                                                      OpDecorate %137 Binding 137 
                                                      OpMemberDecorate %149 0 Offset 149 
                                                      OpMemberDecorate %149 1 Offset 149 
                                                      OpMemberDecorate %149 2 Offset 149 
                                                      OpMemberDecorate %149 3 Offset 149 
                                                      OpMemberDecorate %149 4 Offset 149 
                                                      OpMemberDecorate %149 5 Offset 149 
                                                      OpMemberDecorate %149 6 Offset 149 
                                                      OpDecorate %150 SpecId 150 
                                                      OpDecorate %151 ArrayStride 151 
                                                      OpMemberDecorate %152 0 Offset 152 
                                                      OpDecorate %152 Block 
                                                      OpDecorate %154 DescriptorSet 154 
                                                      OpDecorate %154 Binding 154 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate vs_TEXCOORD0 Location 184 
                                                      OpDecorate %189 Location 189 
                                                      OpDecorate vs_TEXCOORD1 Location 200 
                                                      OpDecorate vs_TEXCOORD3 Location 228 
                                                      OpDecorate vs_TEXCOORD4 Location 270 
                                                      OpDecorate %294 Location 294 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeStruct %10 %7 %7 %7 %7 %16 %7 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 4 
                                              %22 = OpTypePointer Uniform %7 
                                          u32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Private %6 
                                              %42 = OpTypePointer Private %10 
                               Private f32_3* %43 = OpVariable Private 
                                          i32 %46 = OpConstant 0 
                                              %47 = OpTypePointer Uniform %10 
                               Private f32_3* %51 = OpVariable Private 
                                          i32 %52 = OpConstant 5 
                                          u32 %53 = OpConstant 2 
                                              %54 = OpTypePointer Uniform %6 
                                          i32 %58 = OpConstant 1 
                                          u32 %61 = OpConstant 1 
                                          i32 %63 = OpConstant 2 
                                          u32 %78 = OpConstant 3 
                                          i32 %90 = OpConstant 3 
                                         f32 %100 = OpConstant 3.674022E-40 
                                         f32 %101 = OpConstant 3.674022E-40 
                                             %104 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD5 = OpVariable Input 
                                             %106 = OpTypeVector %6 2 
                                             %114 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %115 = OpTypePointer UniformConstant %114 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                                             %118 = OpTypeSampler 
                                             %119 = OpTypePointer UniformConstant %118 
                    UniformConstant sampler* %120 = OpVariable UniformConstant 
                                             %122 = OpTypeSampledImage %114 
                                             %129 = OpTypePointer Private %20 
                                Private i32* %130 = OpVariable Private 
                                             %131 = OpTypePointer Input %14 
                                  Input u32* %132 = OpVariable Input 
                                             %135 = OpTypeStruct %20 %20 
                                             %136 = OpTypePointer Uniform %135 
                 Uniform struct {i32; i32;}* %137 = OpVariable Uniform 
                                             %138 = OpTypePointer Uniform %20 
                                         i32 %143 = OpConstant 7 
                                Private f32* %145 = OpVariable Private 
                                             %149 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                         i32 %150 = OpSpecConstant 2 
                                             %151 = OpTypeArray %149 %150 
                                             %152 = OpTypeStruct %151 
                                             %153 = OpTypePointer Uniform %152 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %154 = OpVariable Uniform 
                                         i32 %157 = OpConstant 6 
                                         i32 %171 = OpConstant 8 
        UniformConstant read_only Texture2D* %178 = OpVariable UniformConstant 
                    UniformConstant sampler* %180 = OpVariable UniformConstant 
                                             %183 = OpTypePointer Input %106 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                Input f32_4* %189 = OpVariable Input 
                              Private f32_4* %199 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                              Private f32_3* %205 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                       f32_3 %235 = OpConstantComposite %100 %100 %100 
                                Private f32* %243 = OpVariable Private 
                                             %269 = OpTypePointer Input %6 
                          Input f32* vs_TEXCOORD4 = OpVariable Input 
                                             %293 = OpTypePointer Output %7 
                               Output f32_4* %294 = OpVariable Output 
                                             %306 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                               Uniform f32_4* %23 = OpAccessChain %19 %21 
                                        f32_4 %24 = OpLoad %23 
                                        f32_3 %25 = OpVectorShuffle %24 %24 0 1 2 
                                        f32_3 %26 = OpFNegate %25 
                                        f32_3 %27 = OpFAdd %13 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 6 3 
                                                      OpStore %9 %29 
                                        f32_4 %30 = OpLoad %9 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                                          f32 %34 = OpDot %31 %33 
                                 Private f32* %37 = OpAccessChain %9 %35 
                                                      OpStore %37 %34 
                                 Private f32* %38 = OpAccessChain %9 %35 
                                          f32 %39 = OpLoad %38 
                                          f32 %40 = OpExtInst %1 31 %39 
                                 Private f32* %41 = OpAccessChain %9 %35 
                                                      OpStore %41 %40 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFNegate %44 
                               Uniform f32_3* %48 = OpAccessChain %19 %46 
                                        f32_3 %49 = OpLoad %48 
                                        f32_3 %50 = OpFAdd %45 %49 
                                                      OpStore %43 %50 
                                 Uniform f32* %55 = OpAccessChain %19 %52 %46 %53 
                                          f32 %56 = OpLoad %55 
                                 Private f32* %57 = OpAccessChain %51 %35 
                                                      OpStore %57 %56 
                                 Uniform f32* %59 = OpAccessChain %19 %52 %58 %53 
                                          f32 %60 = OpLoad %59 
                                 Private f32* %62 = OpAccessChain %51 %61 
                                                      OpStore %62 %60 
                                 Uniform f32* %64 = OpAccessChain %19 %52 %63 %53 
                                          f32 %65 = OpLoad %64 
                                 Private f32* %66 = OpAccessChain %51 %53 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %43 
                                        f32_3 %68 = OpLoad %51 
                                          f32 %69 = OpDot %67 %68 
                                 Private f32* %70 = OpAccessChain %43 %35 
                                                      OpStore %70 %69 
                                 Private f32* %71 = OpAccessChain %43 %35 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFNegate %72 
                                 Private f32* %74 = OpAccessChain %9 %35 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %35 
                                                      OpStore %77 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %21 %78 
                                          f32 %80 = OpLoad %79 
                                 Private f32* %81 = OpAccessChain %9 %35 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %80 %82 
                                 Private f32* %84 = OpAccessChain %43 %35 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFAdd %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %35 
                                                      OpStore %87 %86 
                                 Private f32* %88 = OpAccessChain %9 %35 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %19 %90 %53 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %89 %92 
                                 Uniform f32* %94 = OpAccessChain %19 %90 %78 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFAdd %93 %95 
                                 Private f32* %97 = OpAccessChain %9 %35 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %9 %35 
                                          f32 %99 = OpLoad %98 
                                         f32 %102 = OpExtInst %1 43 %99 %100 %101 
                                Private f32* %103 = OpAccessChain %9 %35 
                                                      OpStore %103 %102 
                                       f32_4 %107 = OpLoad vs_TEXCOORD5 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpLoad vs_TEXCOORD5 
                                       f32_2 %110 = OpVectorShuffle %109 %109 3 3 
                                       f32_2 %111 = OpFDiv %108 %110 
                                       f32_3 %112 = OpLoad %43 
                                       f32_3 %113 = OpVectorShuffle %112 %111 3 4 2 
                                                      OpStore %43 %113 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %121 = OpLoad %120 
                  read_only Texture2DSampled %123 = OpSampledImage %117 %121 
                                       f32_3 %124 = OpLoad %43 
                                       f32_2 %125 = OpVectorShuffle %124 %124 0 1 
                                       f32_4 %126 = OpImageSampleImplicitLod %123 %125 
                                         f32 %127 = OpCompositeExtract %126 0 
                                Private f32* %128 = OpAccessChain %43 %35 
                                                      OpStore %128 %127 
                                         u32 %133 = OpLoad %132 
                                         i32 %134 = OpBitcast %133 
                                Uniform i32* %139 = OpAccessChain %137 %46 
                                         i32 %140 = OpLoad %139 
                                         i32 %141 = OpIAdd %134 %140 
                                                      OpStore %130 %141 
                                         i32 %142 = OpLoad %130 
                                         i32 %144 = OpIMul %142 %143 
                                                      OpStore %130 %144 
                                Private f32* %146 = OpAccessChain %43 %35 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         i32 %155 = OpLoad %130 
                                         i32 %156 = OpSDiv %155 %143 
                                Uniform f32* %158 = OpAccessChain %154 %46 %156 %157 %78 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %148 %159 
                                                      OpStore %145 %160 
                                Private f32* %161 = OpAccessChain %9 %35 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpLoad %145 
                                         f32 %164 = OpFMul %162 %163 
                                Private f32* %165 = OpAccessChain %43 %35 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                Private f32* %168 = OpAccessChain %9 %35 
                                                      OpStore %168 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 0 0 
                              Uniform f32_4* %172 = OpAccessChain %19 %171 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %170 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 2 6 
                                                      OpStore %9 %177 
                         read_only Texture2D %179 = OpLoad %178 
                                     sampler %181 = OpLoad %180 
                  read_only Texture2DSampled %182 = OpSampledImage %179 %181 
                                       f32_2 %185 = OpLoad vs_TEXCOORD0 
                                       f32_4 %186 = OpImageSampleImplicitLod %182 %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                                      OpStore %51 %187 
                                       f32_3 %188 = OpLoad %51 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %188 %191 
                                                      OpStore %51 %192 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 3 
                                       f32_3 %195 = OpLoad %51 
                                       f32_3 %196 = OpFMul %194 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 2 6 
                                                      OpStore %9 %198 
                                       f32_3 %201 = OpLoad vs_TEXCOORD1 
                                       f32_4 %202 = OpLoad %199 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %199 %203 
                                Private f32* %204 = OpAccessChain %199 %78 
                                                      OpStore %204 %101 
                                         i32 %206 = OpLoad %130 
                                         i32 %207 = OpSDiv %206 %143 
                              Uniform f32_4* %208 = OpAccessChain %154 %46 %207 %46 
                                       f32_4 %209 = OpLoad %208 
                                       f32_4 %210 = OpLoad %199 
                                         f32 %211 = OpDot %209 %210 
                                Private f32* %212 = OpAccessChain %205 %35 
                                                      OpStore %212 %211 
                                         i32 %213 = OpLoad %130 
                                         i32 %214 = OpSDiv %213 %143 
                              Uniform f32_4* %215 = OpAccessChain %154 %46 %214 %58 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %199 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %205 %61 
                                                      OpStore %219 %218 
                                         i32 %220 = OpLoad %130 
                                         i32 %221 = OpSDiv %220 %143 
                              Uniform f32_4* %222 = OpAccessChain %154 %46 %221 %63 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpLoad %199 
                                         f32 %225 = OpDot %223 %224 
                                Private f32* %226 = OpAccessChain %205 %53 
                                                      OpStore %226 %225 
                                       f32_3 %227 = OpLoad %205 
                                       f32_3 %229 = OpLoad vs_TEXCOORD3 
                                       f32_3 %230 = OpFAdd %227 %229 
                                       f32_4 %231 = OpLoad %199 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %199 %232 
                                       f32_4 %233 = OpLoad %199 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %236 = OpExtInst %1 40 %234 %235 
                                       f32_4 %237 = OpLoad %199 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %199 %238 
                                       f32_3 %239 = OpLoad %51 
                                       f32_4 %240 = OpLoad %199 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                                      OpStore %51 %242 
                                       f32_3 %244 = OpLoad vs_TEXCOORD1 
                              Uniform f32_4* %245 = OpAccessChain %19 %63 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %244 %247 
                                                      OpStore %243 %248 
                                         f32 %249 = OpLoad %243 
                                         f32 %250 = OpExtInst %1 40 %249 %100 
                                                      OpStore %243 %250 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 3 
                                         f32 %253 = OpLoad %243 
                                       f32_3 %254 = OpCompositeConstruct %253 %253 %253 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_3 %256 = OpLoad %51 
                                       f32_3 %257 = OpFAdd %255 %256 
                                       f32_4 %258 = OpLoad %9 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %9 %259 
                                       f32_4 %260 = OpLoad %9 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                              Uniform f32_4* %262 = OpAccessChain %19 %157 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFNegate %264 
                                       f32_3 %266 = OpFAdd %261 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                                         f32 %271 = OpLoad vs_TEXCOORD4 
                                Uniform f32* %272 = OpAccessChain %19 %58 %61 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFDiv %271 %273 
                                                      OpStore %145 %274 
                                         f32 %275 = OpLoad %145 
                                         f32 %276 = OpFNegate %275 
                                         f32 %277 = OpFAdd %276 %101 
                                                      OpStore %145 %277 
                                         f32 %278 = OpLoad %145 
                                Uniform f32* %279 = OpAccessChain %19 %58 %53 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpFMul %278 %280 
                                                      OpStore %145 %281 
                                         f32 %282 = OpLoad %145 
                                         f32 %283 = OpExtInst %1 40 %282 %100 
                                                      OpStore %145 %283 
                                         f32 %284 = OpLoad %145 
                                Uniform f32* %285 = OpAccessChain %19 %143 %53 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Uniform f32* %288 = OpAccessChain %19 %143 %78 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpFAdd %287 %289 
                                                      OpStore %145 %290 
                                         f32 %291 = OpLoad %145 
                                         f32 %292 = OpExtInst %1 43 %291 %100 %101 
                                                      OpStore %145 %292 
                                         f32 %295 = OpLoad %145 
                                       f32_3 %296 = OpCompositeConstruct %295 %295 %295 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFMul %296 %298 
                              Uniform f32_4* %300 = OpAccessChain %19 %157 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %299 %302 
                                       f32_4 %304 = OpLoad %294 
                                       f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                      OpStore %294 %305 
                                 Output f32* %307 = OpAccessChain %294 %78 
                                                      OpStore %307 %101 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
""
}
}
}
 Pass {
  Name "FORWARD"
  LOD 200
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 87701
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 208
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %156 %157 %189 %199 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate vs_TEXCOORD4 Location 199 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %200 = OpConstant 3.674022E-40 
                                       f32_4 %201 = OpConstantComposite %200 %200 %200 %200 
                                             %202 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %158 = OpLoad %157 
                                                      OpStore %156 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 1 1 1 
                              Uniform f32_4* %161 = OpAccessChain %22 %47 %25 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad %45 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                      OpStore %45 %166 
                              Uniform f32_4* %167 = OpAccessChain %22 %47 %24 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 0 0 
                                       f32_3 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %45 %177 
                              Uniform f32_4* %178 = OpAccessChain %22 %47 %37 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 2 2 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %45 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFAdd %183 %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %9 %188 
                              Uniform f32_4* %190 = OpAccessChain %22 %47 %47 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 3 3 3 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                                      OpStore vs_TEXCOORD3 %198 
                                                      OpStore vs_TEXCOORD4 %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                 Output f32* %206 = OpAccessChain %75 %24 %71 
                                                      OpStore %206 %205 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 136
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %87 %93 %116 %124 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %60 DescriptorSet 60 
                                                  OpDecorate %60 Binding 60 
                                                  OpDecorate %64 DescriptorSet 64 
                                                  OpDecorate %64 Binding 64 
                                                  OpDecorate %81 DescriptorSet 81 
                                                  OpDecorate %81 Binding 81 
                                                  OpDecorate %83 DescriptorSet 83 
                                                  OpDecorate %83 Binding 83 
                                                  OpDecorate vs_TEXCOORD0 Location 87 
                                                  OpDecorate %93 Location 93 
                                                  OpDecorate vs_TEXCOORD1 Location 116 
                                                  OpDecorate %124 Location 124 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %14 = OpTypeVector %6 4 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %14 %16 
                                          %18 = OpTypeStruct %14 %14 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %14 
                                      i32 %29 = OpConstant 0 
                                      i32 %47 = OpConstant 3 
                                      u32 %55 = OpConstant 0 
                                          %56 = OpTypePointer Private %6 
                                          %58 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %59 = OpTypePointer UniformConstant %58 
     UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                                          %62 = OpTypeSampler 
                                          %63 = OpTypePointer UniformConstant %62 
                 UniformConstant sampler* %64 = OpVariable UniformConstant 
                                          %66 = OpTypeSampledImage %58 
                                          %68 = OpTypeVector %6 2 
                           Private f32_3* %80 = OpVariable Private 
     UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                 UniformConstant sampler* %83 = OpVariable UniformConstant 
                                          %86 = OpTypePointer Input %68 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          %92 = OpTypePointer Input %14 
                             Input f32_4* %93 = OpVariable Input 
                            Private f32* %106 = OpVariable Private 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %121 = OpConstant 3.674022E-40 
                                         %123 = OpTypePointer Output %14 
                           Output f32_4* %124 = OpVariable Output 
                                     f32 %131 = OpConstant 3.674022E-40 
                                     u32 %132 = OpConstant 3 
                                         %133 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %12 = OpLoad vs_TEXCOORD2 
                                    f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                    f32_3 %28 = OpFMul %13 %27 
                                                  OpStore %9 %28 
                           Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                    f32_4 %31 = OpLoad %30 
                                    f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                    f32_3 %33 = OpLoad vs_TEXCOORD2 
                                    f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                    f32_3 %35 = OpFMul %32 %34 
                                    f32_3 %36 = OpLoad %9 
                                    f32_3 %37 = OpFAdd %35 %36 
                                                  OpStore %9 %37 
                           Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                    f32_4 %39 = OpLoad %38 
                                    f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                    f32_3 %41 = OpLoad vs_TEXCOORD2 
                                    f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                    f32_3 %43 = OpFMul %40 %42 
                                    f32_3 %44 = OpLoad %9 
                                    f32_3 %45 = OpFAdd %43 %44 
                                                  OpStore %9 %45 
                                    f32_3 %46 = OpLoad %9 
                           Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                    f32_4 %49 = OpLoad %48 
                                    f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                    f32_3 %51 = OpFAdd %46 %50 
                                                  OpStore %9 %51 
                                    f32_3 %52 = OpLoad %9 
                                    f32_3 %53 = OpLoad %9 
                                      f32 %54 = OpDot %52 %53 
                             Private f32* %57 = OpAccessChain %9 %55 
                                                  OpStore %57 %54 
                      read_only Texture2D %61 = OpLoad %60 
                                  sampler %65 = OpLoad %64 
               read_only Texture2DSampled %67 = OpSampledImage %61 %65 
                                    f32_3 %69 = OpLoad %9 
                                    f32_2 %70 = OpVectorShuffle %69 %69 0 0 
                                    f32_4 %71 = OpImageSampleImplicitLod %67 %70 
                                      f32 %72 = OpCompositeExtract %71 0 
                             Private f32* %73 = OpAccessChain %9 %55 
                                                  OpStore %73 %72 
                                    f32_3 %74 = OpLoad %9 
                                    f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                           Uniform f32_4* %76 = OpAccessChain %20 %23 
                                    f32_4 %77 = OpLoad %76 
                                    f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                    f32_3 %79 = OpFMul %75 %78 
                                                  OpStore %9 %79 
                      read_only Texture2D %82 = OpLoad %81 
                                  sampler %84 = OpLoad %83 
               read_only Texture2DSampled %85 = OpSampledImage %82 %84 
                                    f32_2 %88 = OpLoad vs_TEXCOORD0 
                                    f32_4 %89 = OpImageSampleImplicitLod %85 %88 
                                    f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                  OpStore %80 %90 
                                    f32_3 %91 = OpLoad %80 
                                    f32_4 %94 = OpLoad %93 
                                    f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                    f32_3 %96 = OpFMul %91 %95 
                                                  OpStore %80 %96 
                                    f32_3 %97 = OpLoad %9 
                                    f32_3 %98 = OpLoad %80 
                                    f32_3 %99 = OpFMul %97 %98 
                                                  OpStore %9 %99 
                                   f32_3 %100 = OpLoad vs_TEXCOORD2 
                                   f32_3 %101 = OpFNegate %100 
                          Uniform f32_4* %102 = OpAccessChain %20 %29 
                                   f32_4 %103 = OpLoad %102 
                                   f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                   f32_3 %105 = OpFAdd %101 %104 
                                                  OpStore %80 %105 
                                   f32_3 %107 = OpLoad %80 
                                   f32_3 %108 = OpLoad %80 
                                     f32 %109 = OpDot %107 %108 
                                                  OpStore %106 %109 
                                     f32 %110 = OpLoad %106 
                                     f32 %111 = OpExtInst %1 32 %110 
                                                  OpStore %106 %111 
                                     f32 %112 = OpLoad %106 
                                   f32_3 %113 = OpCompositeConstruct %112 %112 %112 
                                   f32_3 %114 = OpLoad %80 
                                   f32_3 %115 = OpFMul %113 %114 
                                                  OpStore %80 %115 
                                   f32_3 %117 = OpLoad vs_TEXCOORD1 
                                   f32_3 %118 = OpLoad %80 
                                     f32 %119 = OpDot %117 %118 
                                                  OpStore %106 %119 
                                     f32 %120 = OpLoad %106 
                                     f32 %122 = OpExtInst %1 40 %120 %121 
                                                  OpStore %106 %122 
                                     f32 %125 = OpLoad %106 
                                   f32_3 %126 = OpCompositeConstruct %125 %125 %125 
                                   f32_3 %127 = OpLoad %9 
                                   f32_3 %128 = OpFMul %126 %127 
                                   f32_4 %129 = OpLoad %124 
                                   f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                  OpStore %124 %130 
                             Output f32* %134 = OpAccessChain %124 %132 
                                                  OpStore %134 %131 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    SV_Target0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %147 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate vs_TEXCOORD4 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_4 %151 = OpConstantComposite %150 %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                       f32_4 %148 = OpLoad %147 
                                                      OpStore %146 %148 
                                                      OpStore vs_TEXCOORD4 %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %85 %23 %81 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 71
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %58 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %57 = OpTypePointer Output %24 
                       Output f32_4* %58 = OpVariable Output 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %66 = OpTypeInt 32 0 
                                 u32 %67 = OpConstant 3 
                                     %68 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %59 = OpLoad %45 
                               f32_3 %60 = OpCompositeConstruct %59 %59 %59 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpFMul %60 %61 
                               f32_4 %63 = OpLoad %58 
                               f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                             OpStore %58 %64 
                         Output f32* %69 = OpAccessChain %58 %67 
                                             OpStore %69 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 195
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %156 %157 %178 %186 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD3 Location 178 
                                                      OpDecorate vs_TEXCOORD4 Location 186 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_4 %188 = OpConstantComposite %187 %187 %187 %187 
                                             %189 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %158 = OpLoad %157 
                                                      OpStore %156 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %159 1 1 1 1 
                              Uniform f32_4* %161 = OpAccessChain %22 %47 %25 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpFMul %160 %162 
                                                      OpStore %45 %163 
                              Uniform f32_4* %164 = OpAccessChain %22 %47 %24 
                                       f32_4 %165 = OpLoad %164 
                                       f32_4 %166 = OpLoad %9 
                                       f32_4 %167 = OpVectorShuffle %166 %166 0 0 0 0 
                                       f32_4 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %45 
                                       f32_4 %170 = OpFAdd %168 %169 
                                                      OpStore %45 %170 
                              Uniform f32_4* %171 = OpAccessChain %22 %47 %37 
                                       f32_4 %172 = OpLoad %171 
                                       f32_4 %173 = OpLoad %9 
                                       f32_4 %174 = OpVectorShuffle %173 %173 2 2 2 2 
                                       f32_4 %175 = OpFMul %172 %174 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpFAdd %175 %176 
                                                      OpStore %45 %177 
                              Uniform f32_4* %179 = OpAccessChain %22 %47 %47 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_4 %182 = OpVectorShuffle %181 %181 3 3 3 3 
                                       f32_4 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %45 
                                       f32_4 %185 = OpFAdd %183 %184 
                                                      OpStore vs_TEXCOORD3 %185 
                                                      OpStore vs_TEXCOORD4 %188 
                                 Output f32* %190 = OpAccessChain %75 %24 %71 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFNegate %191 
                                 Output f32* %193 = OpAccessChain %75 %24 %71 
                                                      OpStore %193 %192 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %12 %133 %139 %164 %171 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpDecorate vs_TEXCOORD2 Location 12 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %69 DescriptorSet 69 
                                                  OpDecorate %69 Binding 69 
                                                  OpDecorate %73 DescriptorSet 73 
                                                  OpDecorate %73 Binding 73 
                                                  OpDecorate %97 DescriptorSet 97 
                                                  OpDecorate %97 Binding 97 
                                                  OpDecorate %99 DescriptorSet 99 
                                                  OpDecorate %99 Binding 99 
                                                  OpDecorate %127 DescriptorSet 127 
                                                  OpDecorate %127 Binding 127 
                                                  OpDecorate %129 DescriptorSet 129 
                                                  OpDecorate %129 Binding 129 
                                                  OpDecorate vs_TEXCOORD0 Location 133 
                                                  OpDecorate %139 Location 139 
                                                  OpDecorate vs_TEXCOORD1 Location 164 
                                                  OpDecorate %171 Location 171 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 4 
                                           %8 = OpTypePointer Private %7 
                            Private f32_4* %9 = OpVariable Private 
                                          %10 = OpTypeVector %6 3 
                                          %11 = OpTypePointer Input %10 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %7 %16 
                                          %18 = OpTypeStruct %7 %7 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %7 
                                      i32 %28 = OpConstant 0 
                                      i32 %44 = OpConstant 3 
                                          %48 = OpTypePointer Private %10 
                           Private f32_3* %49 = OpVariable Private 
                                          %50 = OpTypeVector %6 2 
                                      f32 %60 = OpConstant 3.674022E-40 
                                    f32_2 %61 = OpConstantComposite %60 %60 
                                          %65 = OpTypePointer Private %6 
                             Private f32* %66 = OpVariable Private 
                                          %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %68 = OpTypePointer UniformConstant %67 
     UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                          %71 = OpTypeSampler 
                                          %72 = OpTypePointer UniformConstant %71 
                 UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          %75 = OpTypeSampledImage %67 
                                      u32 %80 = OpConstant 3 
                                          %82 = OpTypeBool 
                                          %83 = OpTypePointer Private %82 
                            Private bool* %84 = OpVariable Private 
                                      f32 %85 = OpConstant 3.674022E-40 
                                      u32 %86 = OpConstant 2 
                                      u32 %95 = OpConstant 0 
     UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                 UniformConstant sampler* %99 = OpVariable UniformConstant 
                            Private f32* %107 = OpVariable Private 
                                     f32 %109 = OpConstant 3.674022E-40 
    UniformConstant read_only Texture2D* %127 = OpVariable UniformConstant 
                UniformConstant sampler* %129 = OpVariable UniformConstant 
                                         %132 = OpTypePointer Input %50 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %138 = OpTypePointer Input %7 
                            Input f32_4* %139 = OpVariable Input 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         %170 = OpTypePointer Output %7 
                           Output f32_4* %171 = OpVariable Output 
                                         %179 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %13 = OpLoad vs_TEXCOORD2 
                                    f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_4 %27 = OpFMul %14 %26 
                                                  OpStore %9 %27 
                           Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                    f32_4 %30 = OpLoad %29 
                                    f32_3 %31 = OpLoad vs_TEXCOORD2 
                                    f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                    f32_4 %33 = OpFMul %30 %32 
                                    f32_4 %34 = OpLoad %9 
                                    f32_4 %35 = OpFAdd %33 %34 
                                                  OpStore %9 %35 
                           Uniform f32_4* %36 = OpAccessChain %20 %22 %22 
                                    f32_4 %37 = OpLoad %36 
                                    f32_3 %38 = OpLoad vs_TEXCOORD2 
                                    f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                    f32_4 %40 = OpFMul %37 %39 
                                    f32_4 %41 = OpLoad %9 
                                    f32_4 %42 = OpFAdd %40 %41 
                                                  OpStore %9 %42 
                                    f32_4 %43 = OpLoad %9 
                           Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                    f32_4 %46 = OpLoad %45 
                                    f32_4 %47 = OpFAdd %43 %46 
                                                  OpStore %9 %47 
                                    f32_4 %51 = OpLoad %9 
                                    f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                    f32_4 %53 = OpLoad %9 
                                    f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                    f32_2 %55 = OpFDiv %52 %54 
                                    f32_3 %56 = OpLoad %49 
                                    f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                  OpStore %49 %57 
                                    f32_3 %58 = OpLoad %49 
                                    f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                    f32_2 %62 = OpFAdd %59 %61 
                                    f32_3 %63 = OpLoad %49 
                                    f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                  OpStore %49 %64 
                      read_only Texture2D %70 = OpLoad %69 
                                  sampler %74 = OpLoad %73 
               read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                    f32_3 %77 = OpLoad %49 
                                    f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                    f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                      f32 %81 = OpCompositeExtract %79 3 
                                                  OpStore %66 %81 
                             Private f32* %87 = OpAccessChain %9 %86 
                                      f32 %88 = OpLoad %87 
                                     bool %89 = OpFOrdLessThan %85 %88 
                                                  OpStore %84 %89 
                                    f32_4 %90 = OpLoad %9 
                                    f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                    f32_4 %92 = OpLoad %9 
                                    f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                      f32 %94 = OpDot %91 %93 
                             Private f32* %96 = OpAccessChain %9 %95 
                                                  OpStore %96 %94 
                      read_only Texture2D %98 = OpLoad %97 
                                 sampler %100 = OpLoad %99 
              read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                   f32_4 %102 = OpLoad %9 
                                   f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                   f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                     f32 %105 = OpCompositeExtract %104 0 
                            Private f32* %106 = OpAccessChain %9 %95 
                                                  OpStore %106 %105 
                                    bool %108 = OpLoad %84 
                                     f32 %110 = OpSelect %108 %109 %85 
                                                  OpStore %107 %110 
                                     f32 %111 = OpLoad %66 
                                     f32 %112 = OpLoad %107 
                                     f32 %113 = OpFMul %111 %112 
                                                  OpStore %107 %113 
                            Private f32* %114 = OpAccessChain %9 %95 
                                     f32 %115 = OpLoad %114 
                                     f32 %116 = OpLoad %107 
                                     f32 %117 = OpFMul %115 %116 
                            Private f32* %118 = OpAccessChain %9 %95 
                                                  OpStore %118 %117 
                                   f32_4 %119 = OpLoad %9 
                                   f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                          Uniform f32_4* %121 = OpAccessChain %20 %23 
                                   f32_4 %122 = OpLoad %121 
                                   f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                   f32_3 %124 = OpFMul %120 %123 
                                   f32_4 %125 = OpLoad %9 
                                   f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                  OpStore %9 %126 
                     read_only Texture2D %128 = OpLoad %127 
                                 sampler %130 = OpLoad %129 
              read_only Texture2DSampled %131 = OpSampledImage %128 %130 
                                   f32_2 %134 = OpLoad vs_TEXCOORD0 
                                   f32_4 %135 = OpImageSampleImplicitLod %131 %134 
                                   f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                  OpStore %49 %136 
                                   f32_3 %137 = OpLoad %49 
                                   f32_4 %140 = OpLoad %139 
                                   f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                   f32_3 %142 = OpFMul %137 %141 
                                                  OpStore %49 %142 
                                   f32_4 %143 = OpLoad %9 
                                   f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                   f32_3 %145 = OpLoad %49 
                                   f32_3 %146 = OpFMul %144 %145 
                                   f32_4 %147 = OpLoad %9 
                                   f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                  OpStore %9 %148 
                                   f32_3 %149 = OpLoad vs_TEXCOORD2 
                                   f32_3 %150 = OpFNegate %149 
                          Uniform f32_4* %151 = OpAccessChain %20 %28 
                                   f32_4 %152 = OpLoad %151 
                                   f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                   f32_3 %154 = OpFAdd %150 %153 
                                                  OpStore %49 %154 
                                   f32_3 %155 = OpLoad %49 
                                   f32_3 %156 = OpLoad %49 
                                     f32 %157 = OpDot %155 %156 
                                                  OpStore %66 %157 
                                     f32 %158 = OpLoad %66 
                                     f32 %159 = OpExtInst %1 32 %158 
                                                  OpStore %66 %159 
                                     f32 %160 = OpLoad %66 
                                   f32_3 %161 = OpCompositeConstruct %160 %160 %160 
                                   f32_3 %162 = OpLoad %49 
                                   f32_3 %163 = OpFMul %161 %162 
                                                  OpStore %49 %163 
                                   f32_3 %165 = OpLoad vs_TEXCOORD1 
                                   f32_3 %166 = OpLoad %49 
                                     f32 %167 = OpDot %165 %166 
                                                  OpStore %66 %167 
                                     f32 %168 = OpLoad %66 
                                     f32 %169 = OpExtInst %1 40 %168 %85 
                                                  OpStore %66 %169 
                                     f32 %172 = OpLoad %66 
                                   f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                   f32_4 %174 = OpLoad %9 
                                   f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                   f32_3 %176 = OpFMul %173 %175 
                                   f32_4 %177 = OpLoad %171 
                                   f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                  OpStore %171 %178 
                             Output f32* %180 = OpAccessChain %171 %80 
                                                  OpStore %180 %109 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 208
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %87 %88 %102 %133 %139 %156 %157 %189 %199 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 87 
                                                      OpDecorate %88 Location 88 
                                                      OpDecorate %102 Location 102 
                                                      OpDecorate vs_TEXCOORD1 Location 133 
                                                      OpDecorate vs_TEXCOORD2 Location 139 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD3 Location 189 
                                                      OpDecorate vs_TEXCOORD4 Location 199 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %85 = OpTypeVector %6 2 
                                              %86 = OpTypePointer Output %85 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %88 = OpVariable Input 
                                          i32 %91 = OpConstant 4 
                                             %100 = OpTypeVector %6 3 
                                             %101 = OpTypePointer Input %100 
                                Input f32_3* %102 = OpVariable Input 
                                         u32 %108 = OpConstant 0 
                                             %109 = OpTypePointer Private %6 
                                         u32 %122 = OpConstant 2 
                                Private f32* %124 = OpVariable Private 
                                             %132 = OpTypePointer Output %100 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %200 = OpConstant 3.674022E-40 
                                       f32_4 %201 = OpConstantComposite %200 %200 %200 %200 
                                             %202 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                                        f32_4 %89 = OpLoad %88 
                                        f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               Uniform f32_4* %92 = OpAccessChain %22 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_2 %95 = OpFMul %90 %94 
                               Uniform f32_4* %96 = OpAccessChain %22 %91 
                                        f32_4 %97 = OpLoad %96 
                                        f32_2 %98 = OpVectorShuffle %97 %97 2 3 
                                        f32_2 %99 = OpFAdd %95 %98 
                                                      OpStore vs_TEXCOORD0 %99 
                                       f32_3 %103 = OpLoad %102 
                              Uniform f32_4* %104 = OpAccessChain %22 %25 %24 
                                       f32_4 %105 = OpLoad %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                         f32 %107 = OpDot %103 %106 
                                Private f32* %110 = OpAccessChain %45 %108 
                                                      OpStore %110 %107 
                                       f32_3 %111 = OpLoad %102 
                              Uniform f32_4* %112 = OpAccessChain %22 %25 %25 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %116 = OpAccessChain %45 %71 
                                                      OpStore %116 %115 
                                       f32_3 %117 = OpLoad %102 
                              Uniform f32_4* %118 = OpAccessChain %22 %25 %37 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %123 = OpAccessChain %45 %122 
                                                      OpStore %123 %121 
                                       f32_4 %125 = OpLoad %45 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %45 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %126 %128 
                                                      OpStore %124 %129 
                                         f32 %130 = OpLoad %124 
                                         f32 %131 = OpExtInst %1 32 %130 
                                                      OpStore %124 %131 
                                         f32 %134 = OpLoad %124 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_4 %136 = OpLoad %45 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFMul %135 %137 
                                                      OpStore vs_TEXCOORD1 %138 
                              Uniform f32_4* %140 = OpAccessChain %22 %24 %47 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_4 %143 = OpLoad %11 
                                       f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                              Uniform f32_4* %149 = OpAccessChain %22 %24 %47 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpLoad %11 
                                       f32_4 %152 = OpVectorShuffle %151 %151 3 3 3 3 
                                       f32_4 %153 = OpFMul %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpFAdd %153 %154 
                                                      OpStore %9 %155 
                                       f32_4 %158 = OpLoad %157 
                                                      OpStore %156 %158 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 1 1 1 
                              Uniform f32_4* %161 = OpAccessChain %22 %47 %25 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFMul %160 %163 
                                       f32_4 %165 = OpLoad %45 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                      OpStore %45 %166 
                              Uniform f32_4* %167 = OpAccessChain %22 %47 %24 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 0 0 
                                       f32_3 %172 = OpFMul %169 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFAdd %172 %174 
                                       f32_4 %176 = OpLoad %45 
                                       f32_4 %177 = OpVectorShuffle %176 %175 4 5 6 3 
                                                      OpStore %45 %177 
                              Uniform f32_4* %178 = OpAccessChain %22 %47 %37 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 2 2 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %45 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFAdd %183 %185 
                                       f32_4 %187 = OpLoad %9 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %9 %188 
                              Uniform f32_4* %190 = OpAccessChain %22 %47 %47 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 3 3 3 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %9 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFAdd %195 %197 
                                                      OpStore vs_TEXCOORD3 %198 
                                                      OpStore vs_TEXCOORD4 %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                 Output f32* %206 = OpAccessChain %75 %24 %71 
                                                      OpStore %206 %205 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 152
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %105 %111 %133 %141 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %59 DescriptorSet 59 
                                                  OpDecorate %59 Binding 59 
                                                  OpDecorate %63 DescriptorSet 63 
                                                  OpDecorate %63 Binding 63 
                                                  OpDecorate %76 DescriptorSet 76 
                                                  OpDecorate %76 Binding 76 
                                                  OpDecorate %78 DescriptorSet 78 
                                                  OpDecorate %78 Binding 78 
                                                  OpDecorate %99 DescriptorSet 99 
                                                  OpDecorate %99 Binding 99 
                                                  OpDecorate %101 DescriptorSet 101 
                                                  OpDecorate %101 Binding 101 
                                                  OpDecorate vs_TEXCOORD0 Location 105 
                                                  OpDecorate %111 Location 111 
                                                  OpDecorate vs_TEXCOORD1 Location 133 
                                                  OpDecorate %141 Location 141 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %14 = OpTypeVector %6 4 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %14 %16 
                                          %18 = OpTypeStruct %14 %14 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %14 
                                      i32 %29 = OpConstant 0 
                                      i32 %47 = OpConstant 3 
                                          %52 = OpTypePointer Private %6 
                             Private f32* %53 = OpVariable Private 
                                          %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                          %58 = OpTypePointer UniformConstant %57 
   UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                          %61 = OpTypeSampler 
                                          %62 = OpTypePointer UniformConstant %61 
                 UniformConstant sampler* %63 = OpVariable UniformConstant 
                                          %65 = OpTypeSampledImage %57 
                                      u32 %69 = OpConstant 3 
                                      u32 %71 = OpConstant 0 
                             Private f32* %73 = OpVariable Private 
                                          %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %75 = OpTypePointer UniformConstant %74 
     UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                 UniformConstant sampler* %78 = OpVariable UniformConstant 
                                          %80 = OpTypeSampledImage %74 
                                          %83 = OpTypeVector %6 2 
                           Private f32_3* %98 = OpVariable Private 
     UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
                UniformConstant sampler* %101 = OpVariable UniformConstant 
                                         %104 = OpTypePointer Input %83 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %110 = OpTypePointer Input %14 
                            Input f32_4* %111 = OpVariable Input 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %138 = OpConstant 3.674022E-40 
                                         %140 = OpTypePointer Output %14 
                           Output f32_4* %141 = OpVariable Output 
                                     f32 %148 = OpConstant 3.674022E-40 
                                         %149 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %12 = OpLoad vs_TEXCOORD2 
                                    f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                    f32_3 %28 = OpFMul %13 %27 
                                                  OpStore %9 %28 
                           Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                    f32_4 %31 = OpLoad %30 
                                    f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                    f32_3 %33 = OpLoad vs_TEXCOORD2 
                                    f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                    f32_3 %35 = OpFMul %32 %34 
                                    f32_3 %36 = OpLoad %9 
                                    f32_3 %37 = OpFAdd %35 %36 
                                                  OpStore %9 %37 
                           Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                    f32_4 %39 = OpLoad %38 
                                    f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                    f32_3 %41 = OpLoad vs_TEXCOORD2 
                                    f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                    f32_3 %43 = OpFMul %40 %42 
                                    f32_3 %44 = OpLoad %9 
                                    f32_3 %45 = OpFAdd %43 %44 
                                                  OpStore %9 %45 
                                    f32_3 %46 = OpLoad %9 
                           Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                    f32_4 %49 = OpLoad %48 
                                    f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                    f32_3 %51 = OpFAdd %46 %50 
                                                  OpStore %9 %51 
                                    f32_3 %54 = OpLoad %9 
                                    f32_3 %55 = OpLoad %9 
                                      f32 %56 = OpDot %54 %55 
                                                  OpStore %53 %56 
                    read_only TextureCube %60 = OpLoad %59 
                                  sampler %64 = OpLoad %63 
             read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                    f32_3 %67 = OpLoad %9 
                                    f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                      f32 %70 = OpCompositeExtract %68 3 
                             Private f32* %72 = OpAccessChain %9 %71 
                                                  OpStore %72 %70 
                      read_only Texture2D %77 = OpLoad %76 
                                  sampler %79 = OpLoad %78 
               read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                      f32 %82 = OpLoad %53 
                                    f32_2 %84 = OpCompositeConstruct %82 %82 
                                    f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                      f32 %86 = OpCompositeExtract %85 0 
                                                  OpStore %73 %86 
                             Private f32* %87 = OpAccessChain %9 %71 
                                      f32 %88 = OpLoad %87 
                                      f32 %89 = OpLoad %73 
                                      f32 %90 = OpFMul %88 %89 
                             Private f32* %91 = OpAccessChain %9 %71 
                                                  OpStore %91 %90 
                                    f32_3 %92 = OpLoad %9 
                                    f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                           Uniform f32_4* %94 = OpAccessChain %20 %23 
                                    f32_4 %95 = OpLoad %94 
                                    f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                    f32_3 %97 = OpFMul %93 %96 
                                                  OpStore %9 %97 
                     read_only Texture2D %100 = OpLoad %99 
                                 sampler %102 = OpLoad %101 
              read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                                   f32_2 %106 = OpLoad vs_TEXCOORD0 
                                   f32_4 %107 = OpImageSampleImplicitLod %103 %106 
                                   f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                                  OpStore %98 %108 
                                   f32_3 %109 = OpLoad %98 
                                   f32_4 %112 = OpLoad %111 
                                   f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                   f32_3 %114 = OpFMul %109 %113 
                                                  OpStore %98 %114 
                                   f32_3 %115 = OpLoad %9 
                                   f32_3 %116 = OpLoad %98 
                                   f32_3 %117 = OpFMul %115 %116 
                                                  OpStore %9 %117 
                                   f32_3 %118 = OpLoad vs_TEXCOORD2 
                                   f32_3 %119 = OpFNegate %118 
                          Uniform f32_4* %120 = OpAccessChain %20 %29 
                                   f32_4 %121 = OpLoad %120 
                                   f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                   f32_3 %123 = OpFAdd %119 %122 
                                                  OpStore %98 %123 
                                   f32_3 %124 = OpLoad %98 
                                   f32_3 %125 = OpLoad %98 
                                     f32 %126 = OpDot %124 %125 
                                                  OpStore %53 %126 
                                     f32 %127 = OpLoad %53 
                                     f32 %128 = OpExtInst %1 32 %127 
                                                  OpStore %53 %128 
                                     f32 %129 = OpLoad %53 
                                   f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                   f32_3 %131 = OpLoad %98 
                                   f32_3 %132 = OpFMul %130 %131 
                                                  OpStore %98 %132 
                                   f32_3 %134 = OpLoad vs_TEXCOORD1 
                                   f32_3 %135 = OpLoad %98 
                                     f32 %136 = OpDot %134 %135 
                                                  OpStore %53 %136 
                                     f32 %137 = OpLoad %53 
                                     f32 %139 = OpExtInst %1 40 %137 %138 
                                                  OpStore %53 %139 
                                     f32 %142 = OpLoad %53 
                                   f32_3 %143 = OpCompositeConstruct %142 %142 %142 
                                   f32_3 %144 = OpLoad %9 
                                   f32_3 %145 = OpFMul %143 %144 
                                   f32_4 %146 = OpLoad %141 
                                   f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                  OpStore %141 %147 
                             Output f32* %150 = OpAccessChain %141 %69 
                                                  OpStore %150 %148 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 208
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %75 %94 %136 %146 %147 %160 %190 %196 %197 %199 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %73 0 BuiltIn 73 
                                                      OpMemberDecorate %73 1 BuiltIn 73 
                                                      OpMemberDecorate %73 2 BuiltIn 73 
                                                      OpDecorate %73 Block 
                                                      OpDecorate vs_TEXCOORD2 Location 94 
                                                      OpDecorate vs_TEXCOORD3 Location 136 
                                                      OpDecorate vs_TEXCOORD0 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate %160 Location 160 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate %197 Location 197 
                                                      OpDecorate vs_TEXCOORD4 Location 199 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %16 %17 %18 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 0 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypePointer Uniform %7 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %71 = OpConstant 1 
                                              %72 = OpTypeArray %6 %71 
                                              %73 = OpTypeStruct %7 %6 %72 
                                              %74 = OpTypePointer Output %73 
         Output struct {f32_4; f32; f32[1];}* %75 = OpVariable Output 
                                              %83 = OpTypePointer Output %7 
                                              %92 = OpTypeVector %6 3 
                                              %93 = OpTypePointer Output %92 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %104 = OpTypeVector %6 2 
                                             %135 = OpTypePointer Output %104 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                                         i32 %150 = OpConstant 4 
                                             %159 = OpTypePointer Input %92 
                                Input f32_3* %160 = OpVariable Input 
                                         u32 %166 = OpConstant 0 
                                             %167 = OpTypePointer Private %6 
                                         u32 %180 = OpConstant 2 
                                Private f32* %182 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %196 = OpVariable Output 
                                Input f32_4* %197 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                         f32 %200 = OpConstant 3.674022E-40 
                                       f32_4 %201 = OpConstantComposite %200 %200 %200 %200 
                                             %202 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %27 = OpAccessChain %22 %24 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_4 %29 = OpFMul %13 %28 
                                                      OpStore %9 %29 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %37 %25 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %37 %24 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %37 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %76 = OpAccessChain %22 %37 %47 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 3 3 3 3 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %51 
                                        f32_4 %82 = OpFAdd %80 %81 
                                Output f32_4* %84 = OpAccessChain %75 %24 
                                                      OpStore %84 %82 
                               Uniform f32_4* %85 = OpAccessChain %22 %24 %47 
                                        f32_4 %86 = OpLoad %85 
                                        f32_4 %87 = OpLoad %11 
                                        f32_4 %88 = OpVectorShuffle %87 %87 3 3 3 3 
                                        f32_4 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %9 
                                        f32_4 %91 = OpFAdd %89 %90 
                                                      OpStore %45 %91 
                               Uniform f32_4* %95 = OpAccessChain %22 %24 %47 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %11 
                                        f32_3 %99 = OpVectorShuffle %98 %98 3 3 3 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                                      OpStore vs_TEXCOORD2 %103 
                                       f32_4 %105 = OpLoad %45 
                                       f32_2 %106 = OpVectorShuffle %105 %105 1 1 
                              Uniform f32_4* %107 = OpAccessChain %22 %47 %25 
                                       f32_4 %108 = OpLoad %107 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_2 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 3 
                                                      OpStore %9 %112 
                              Uniform f32_4* %113 = OpAccessChain %22 %47 %24 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                                       f32_4 %116 = OpLoad %45 
                                       f32_2 %117 = OpVectorShuffle %116 %116 0 0 
                                       f32_2 %118 = OpFMul %115 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_2 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 3 
                                                      OpStore %9 %123 
                              Uniform f32_4* %124 = OpAccessChain %22 %47 %37 
                                       f32_4 %125 = OpLoad %124 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                       f32_4 %127 = OpLoad %45 
                                       f32_2 %128 = OpVectorShuffle %127 %127 2 2 
                                       f32_2 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                                       f32_2 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 2 3 
                                                      OpStore %9 %134 
                              Uniform f32_4* %137 = OpAccessChain %22 %47 %47 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_4 %140 = OpLoad %45 
                                       f32_2 %141 = OpVectorShuffle %140 %140 3 3 
                                       f32_2 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFAdd %142 %144 
                                                      OpStore vs_TEXCOORD3 %145 
                                       f32_4 %148 = OpLoad %147 
                                       f32_2 %149 = OpVectorShuffle %148 %148 0 1 
                              Uniform f32_4* %151 = OpAccessChain %22 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFMul %149 %153 
                              Uniform f32_4* %155 = OpAccessChain %22 %150 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                                       f32_2 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD0 %158 
                                       f32_3 %161 = OpLoad %160 
                              Uniform f32_4* %162 = OpAccessChain %22 %25 %24 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                         f32 %165 = OpDot %161 %164 
                                Private f32* %168 = OpAccessChain %9 %166 
                                                      OpStore %168 %165 
                                       f32_3 %169 = OpLoad %160 
                              Uniform f32_4* %170 = OpAccessChain %22 %25 %25 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                         f32 %173 = OpDot %169 %172 
                                Private f32* %174 = OpAccessChain %9 %71 
                                                      OpStore %174 %173 
                                       f32_3 %175 = OpLoad %160 
                              Uniform f32_4* %176 = OpAccessChain %22 %25 %37 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %175 %178 
                                Private f32* %181 = OpAccessChain %9 %180 
                                                      OpStore %181 %179 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                         f32 %187 = OpDot %184 %186 
                                                      OpStore %182 %187 
                                         f32 %188 = OpLoad %182 
                                         f32 %189 = OpExtInst %1 32 %188 
                                                      OpStore %182 %189 
                                         f32 %191 = OpLoad %182 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                       f32_3 %195 = OpFMul %192 %194 
                                                      OpStore vs_TEXCOORD1 %195 
                                       f32_4 %198 = OpLoad %197 
                                                      OpStore %196 %198 
                                                      OpStore vs_TEXCOORD4 %201 
                                 Output f32* %203 = OpAccessChain %75 %24 %71 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFNegate %204 
                                 Output f32* %206 = OpAccessChain %75 %24 %71 
                                                      OpStore %206 %205 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 130
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %95 %101 %109 %119 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %18 ArrayStride 18 
                                                  OpMemberDecorate %19 0 Offset 19 
                                                  OpMemberDecorate %19 1 Offset 19 
                                                  OpMemberDecorate %19 2 Offset 19 
                                                  OpDecorate %19 Block 
                                                  OpDecorate %21 DescriptorSet 21 
                                                  OpDecorate %21 Binding 21 
                                                  OpDecorate %66 DescriptorSet 66 
                                                  OpDecorate %66 Binding 66 
                                                  OpDecorate %70 DescriptorSet 70 
                                                  OpDecorate %70 Binding 70 
                                                  OpDecorate %89 DescriptorSet 89 
                                                  OpDecorate %89 Binding 89 
                                                  OpDecorate %91 DescriptorSet 91 
                                                  OpDecorate %91 Binding 91 
                                                  OpDecorate vs_TEXCOORD0 Location 95 
                                                  OpDecorate %101 Location 101 
                                                  OpDecorate vs_TEXCOORD1 Location 109 
                                                  OpDecorate %119 Location 119 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %12 = OpTypeVector %6 2 
                                          %15 = OpTypeVector %6 4 
                                          %16 = OpTypeInt 32 0 
                                      u32 %17 = OpConstant 4 
                                          %18 = OpTypeArray %15 %17 
                                          %19 = OpTypeStruct %15 %15 %18 
                                          %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4[4];}* %21 = OpVariable Uniform 
                                          %22 = OpTypeInt 32 1 
                                      i32 %23 = OpConstant 2 
                                      i32 %24 = OpConstant 1 
                                          %25 = OpTypePointer Uniform %15 
                                      i32 %32 = OpConstant 0 
                                      i32 %57 = OpConstant 3 
                                          %64 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %65 = OpTypePointer UniformConstant %64 
     UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                                          %68 = OpTypeSampler 
                                          %69 = OpTypePointer UniformConstant %68 
                 UniformConstant sampler* %70 = OpVariable UniformConstant 
                                          %72 = OpTypeSampledImage %64 
                                      u32 %77 = OpConstant 3 
                                      u32 %79 = OpConstant 0 
                                          %80 = OpTypePointer Private %6 
                           Private f32_3* %88 = OpVariable Private 
     UniformConstant read_only Texture2D* %89 = OpVariable UniformConstant 
                 UniformConstant sampler* %91 = OpVariable UniformConstant 
                                          %94 = OpTypePointer Input %12 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %100 = OpTypePointer Input %15 
                            Input f32_4* %101 = OpVariable Input 
                            Private f32* %108 = OpVariable Private 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %116 = OpConstant 3.674022E-40 
                                         %118 = OpTypePointer Output %15 
                           Output f32_4* %119 = OpVariable Output 
                                     f32 %126 = OpConstant 3.674022E-40 
                                         %127 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %13 = OpLoad vs_TEXCOORD2 
                                    f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                           Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                    f32_4 %27 = OpLoad %26 
                                    f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                    f32_2 %29 = OpFMul %14 %28 
                                    f32_3 %30 = OpLoad %9 
                                    f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                  OpStore %9 %31 
                           Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                    f32_4 %34 = OpLoad %33 
                                    f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                    f32_3 %36 = OpLoad vs_TEXCOORD2 
                                    f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                    f32_2 %38 = OpFMul %35 %37 
                                    f32_3 %39 = OpLoad %9 
                                    f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                    f32_2 %41 = OpFAdd %38 %40 
                                    f32_3 %42 = OpLoad %9 
                                    f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                  OpStore %9 %43 
                           Uniform f32_4* %44 = OpAccessChain %21 %23 %23 
                                    f32_4 %45 = OpLoad %44 
                                    f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                    f32_3 %47 = OpLoad vs_TEXCOORD2 
                                    f32_2 %48 = OpVectorShuffle %47 %47 2 2 
                                    f32_2 %49 = OpFMul %46 %48 
                                    f32_3 %50 = OpLoad %9 
                                    f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                    f32_2 %52 = OpFAdd %49 %51 
                                    f32_3 %53 = OpLoad %9 
                                    f32_3 %54 = OpVectorShuffle %53 %52 3 4 2 
                                                  OpStore %9 %54 
                                    f32_3 %55 = OpLoad %9 
                                    f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                           Uniform f32_4* %58 = OpAccessChain %21 %23 %57 
                                    f32_4 %59 = OpLoad %58 
                                    f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                    f32_2 %61 = OpFAdd %56 %60 
                                    f32_3 %62 = OpLoad %9 
                                    f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                  OpStore %9 %63 
                      read_only Texture2D %67 = OpLoad %66 
                                  sampler %71 = OpLoad %70 
               read_only Texture2DSampled %73 = OpSampledImage %67 %71 
                                    f32_3 %74 = OpLoad %9 
                                    f32_2 %75 = OpVectorShuffle %74 %74 0 1 
                                    f32_4 %76 = OpImageSampleImplicitLod %73 %75 
                                      f32 %78 = OpCompositeExtract %76 3 
                             Private f32* %81 = OpAccessChain %9 %79 
                                                  OpStore %81 %78 
                                    f32_3 %82 = OpLoad %9 
                                    f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                           Uniform f32_4* %84 = OpAccessChain %21 %24 
                                    f32_4 %85 = OpLoad %84 
                                    f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                    f32_3 %87 = OpFMul %83 %86 
                                                  OpStore %9 %87 
                      read_only Texture2D %90 = OpLoad %89 
                                  sampler %92 = OpLoad %91 
               read_only Texture2DSampled %93 = OpSampledImage %90 %92 
                                    f32_2 %96 = OpLoad vs_TEXCOORD0 
                                    f32_4 %97 = OpImageSampleImplicitLod %93 %96 
                                    f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                                  OpStore %88 %98 
                                    f32_3 %99 = OpLoad %88 
                                   f32_4 %102 = OpLoad %101 
                                   f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                   f32_3 %104 = OpFMul %99 %103 
                                                  OpStore %88 %104 
                                   f32_3 %105 = OpLoad %9 
                                   f32_3 %106 = OpLoad %88 
                                   f32_3 %107 = OpFMul %105 %106 
                                                  OpStore %9 %107 
                                   f32_3 %110 = OpLoad vs_TEXCOORD1 
                          Uniform f32_4* %111 = OpAccessChain %21 %32 
                                   f32_4 %112 = OpLoad %111 
                                   f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                     f32 %114 = OpDot %110 %113 
                                                  OpStore %108 %114 
                                     f32 %115 = OpLoad %108 
                                     f32 %117 = OpExtInst %1 40 %115 %116 
                                                  OpStore %108 %117 
                                     f32 %120 = OpLoad %108 
                                   f32_3 %121 = OpCompositeConstruct %120 %120 %120 
                                   f32_3 %122 = OpLoad %9 
                                   f32_3 %123 = OpFMul %121 %122 
                                   f32_4 %124 = OpLoad %119 
                                   f32_4 %125 = OpVectorShuffle %124 %123 4 5 6 3 
                                                  OpStore %119 %125 
                             Output f32* %128 = OpAccessChain %119 %77 
                                                  OpStore %128 %126 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 244
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %193 %194 %227 %237 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                                         i32 %198 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %238 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_3 %197 = OpVectorShuffle %196 %196 1 1 1 
                              Uniform f32_4* %199 = OpAccessChain %22 %198 %24 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %197 %201 
                                       f32_4 %203 = OpLoad %45 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %45 %204 
                              Uniform f32_4* %205 = OpAccessChain %22 %198 %29 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 0 0 
                                       f32_3 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %45 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %45 %215 
                              Uniform f32_4* %216 = OpAccessChain %22 %198 %37 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 2 2 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %45 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %9 %226 
                              Uniform f32_4* %228 = OpAccessChain %22 %198 %47 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 3 3 3 
                                       f32_3 %233 = OpFMul %230 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore vs_TEXCOORD3 %236 
                                                      OpStore vs_TEXCOORD4 %238 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFNegate %240 
                                 Output f32* %242 = OpAccessChain %82 %29 %78 
                                                      OpStore %242 %241 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 145
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %87 %93 %116 %128 %134 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %60 DescriptorSet 60 
                                                  OpDecorate %60 Binding 60 
                                                  OpDecorate %64 DescriptorSet 64 
                                                  OpDecorate %64 Binding 64 
                                                  OpDecorate %81 DescriptorSet 81 
                                                  OpDecorate %81 Binding 81 
                                                  OpDecorate %83 DescriptorSet 83 
                                                  OpDecorate %83 Binding 83 
                                                  OpDecorate vs_TEXCOORD0 Location 87 
                                                  OpDecorate %93 Location 93 
                                                  OpDecorate vs_TEXCOORD1 Location 116 
                                                  OpDecorate vs_TEXCOORD5 Location 128 
                                                  OpDecorate %134 Location 134 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %14 = OpTypeVector %6 4 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %14 %16 
                                          %18 = OpTypeStruct %14 %14 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %14 
                                      i32 %29 = OpConstant 0 
                                      i32 %47 = OpConstant 3 
                                      u32 %55 = OpConstant 0 
                                          %56 = OpTypePointer Private %6 
                                          %58 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %59 = OpTypePointer UniformConstant %58 
     UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                                          %62 = OpTypeSampler 
                                          %63 = OpTypePointer UniformConstant %62 
                 UniformConstant sampler* %64 = OpVariable UniformConstant 
                                          %66 = OpTypeSampledImage %58 
                                          %68 = OpTypeVector %6 2 
                           Private f32_3* %80 = OpVariable Private 
     UniformConstant read_only Texture2D* %81 = OpVariable UniformConstant 
                 UniformConstant sampler* %83 = OpVariable UniformConstant 
                                          %86 = OpTypePointer Input %68 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          %92 = OpTypePointer Input %14 
                             Input f32_4* %93 = OpVariable Input 
                            Private f32* %106 = OpVariable Private 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %121 = OpConstant 3.674022E-40 
                                         %127 = OpTypePointer Input %6 
                      Input f32* vs_TEXCOORD5 = OpVariable Input 
                                     f32 %131 = OpConstant 3.674022E-40 
                                         %133 = OpTypePointer Output %14 
                           Output f32_4* %134 = OpVariable Output 
                                     u32 %141 = OpConstant 3 
                                         %142 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %12 = OpLoad vs_TEXCOORD2 
                                    f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                    f32_3 %28 = OpFMul %13 %27 
                                                  OpStore %9 %28 
                           Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                    f32_4 %31 = OpLoad %30 
                                    f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                    f32_3 %33 = OpLoad vs_TEXCOORD2 
                                    f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                    f32_3 %35 = OpFMul %32 %34 
                                    f32_3 %36 = OpLoad %9 
                                    f32_3 %37 = OpFAdd %35 %36 
                                                  OpStore %9 %37 
                           Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                    f32_4 %39 = OpLoad %38 
                                    f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                    f32_3 %41 = OpLoad vs_TEXCOORD2 
                                    f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                    f32_3 %43 = OpFMul %40 %42 
                                    f32_3 %44 = OpLoad %9 
                                    f32_3 %45 = OpFAdd %43 %44 
                                                  OpStore %9 %45 
                                    f32_3 %46 = OpLoad %9 
                           Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                    f32_4 %49 = OpLoad %48 
                                    f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                    f32_3 %51 = OpFAdd %46 %50 
                                                  OpStore %9 %51 
                                    f32_3 %52 = OpLoad %9 
                                    f32_3 %53 = OpLoad %9 
                                      f32 %54 = OpDot %52 %53 
                             Private f32* %57 = OpAccessChain %9 %55 
                                                  OpStore %57 %54 
                      read_only Texture2D %61 = OpLoad %60 
                                  sampler %65 = OpLoad %64 
               read_only Texture2DSampled %67 = OpSampledImage %61 %65 
                                    f32_3 %69 = OpLoad %9 
                                    f32_2 %70 = OpVectorShuffle %69 %69 0 0 
                                    f32_4 %71 = OpImageSampleImplicitLod %67 %70 
                                      f32 %72 = OpCompositeExtract %71 0 
                             Private f32* %73 = OpAccessChain %9 %55 
                                                  OpStore %73 %72 
                                    f32_3 %74 = OpLoad %9 
                                    f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                           Uniform f32_4* %76 = OpAccessChain %20 %23 
                                    f32_4 %77 = OpLoad %76 
                                    f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                    f32_3 %79 = OpFMul %75 %78 
                                                  OpStore %9 %79 
                      read_only Texture2D %82 = OpLoad %81 
                                  sampler %84 = OpLoad %83 
               read_only Texture2DSampled %85 = OpSampledImage %82 %84 
                                    f32_2 %88 = OpLoad vs_TEXCOORD0 
                                    f32_4 %89 = OpImageSampleImplicitLod %85 %88 
                                    f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                  OpStore %80 %90 
                                    f32_3 %91 = OpLoad %80 
                                    f32_4 %94 = OpLoad %93 
                                    f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                    f32_3 %96 = OpFMul %91 %95 
                                                  OpStore %80 %96 
                                    f32_3 %97 = OpLoad %9 
                                    f32_3 %98 = OpLoad %80 
                                    f32_3 %99 = OpFMul %97 %98 
                                                  OpStore %9 %99 
                                   f32_3 %100 = OpLoad vs_TEXCOORD2 
                                   f32_3 %101 = OpFNegate %100 
                          Uniform f32_4* %102 = OpAccessChain %20 %29 
                                   f32_4 %103 = OpLoad %102 
                                   f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                   f32_3 %105 = OpFAdd %101 %104 
                                                  OpStore %80 %105 
                                   f32_3 %107 = OpLoad %80 
                                   f32_3 %108 = OpLoad %80 
                                     f32 %109 = OpDot %107 %108 
                                                  OpStore %106 %109 
                                     f32 %110 = OpLoad %106 
                                     f32 %111 = OpExtInst %1 32 %110 
                                                  OpStore %106 %111 
                                     f32 %112 = OpLoad %106 
                                   f32_3 %113 = OpCompositeConstruct %112 %112 %112 
                                   f32_3 %114 = OpLoad %80 
                                   f32_3 %115 = OpFMul %113 %114 
                                                  OpStore %80 %115 
                                   f32_3 %117 = OpLoad vs_TEXCOORD1 
                                   f32_3 %118 = OpLoad %80 
                                     f32 %119 = OpDot %117 %118 
                                                  OpStore %106 %119 
                                     f32 %120 = OpLoad %106 
                                     f32 %122 = OpExtInst %1 40 %120 %121 
                                                  OpStore %106 %122 
                                     f32 %123 = OpLoad %106 
                                   f32_3 %124 = OpCompositeConstruct %123 %123 %123 
                                   f32_3 %125 = OpLoad %9 
                                   f32_3 %126 = OpFMul %124 %125 
                                                  OpStore %9 %126 
                                     f32 %129 = OpLoad vs_TEXCOORD5 
                                                  OpStore %106 %129 
                                     f32 %130 = OpLoad %106 
                                     f32 %132 = OpExtInst %1 43 %130 %121 %131 
                                                  OpStore %106 %132 
                                   f32_3 %135 = OpLoad %9 
                                     f32 %136 = OpLoad %106 
                                   f32_3 %137 = OpCompositeConstruct %136 %136 %136 
                                   f32_3 %138 = OpFMul %135 %137 
                                   f32_4 %139 = OpLoad %134 
                                   f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                  OpStore %134 %140 
                             Output f32* %143 = OpAccessChain %134 %141 
                                                  OpStore %143 %131 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat3 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat3 = max(u_xlat3, 0.0);
    u_xlat0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
    u_xlat3 = vs_TEXCOORD5;
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat3);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 194
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %92 %124 %137 %138 %151 %178 %184 %185 %187 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %90 0 BuiltIn 90 
                                                      OpMemberDecorate %90 1 BuiltIn 90 
                                                      OpMemberDecorate %90 2 BuiltIn 90 
                                                      OpDecorate %90 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 124 
                                                      OpDecorate vs_TEXCOORD0 Location 137 
                                                      OpDecorate %138 Location 138 
                                                      OpDecorate %151 Location 151 
                                                      OpDecorate vs_TEXCOORD1 Location 178 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate %185 Location 185 
                                                      OpDecorate vs_TEXCOORD4 Location 187 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %88 = OpConstant 1 
                                              %89 = OpTypeArray %6 %88 
                                              %90 = OpTypeStruct %7 %6 %89 
                                              %91 = OpTypePointer Output %90 
         Output struct {f32_4; f32; f32[1];}* %92 = OpVariable Output 
                                              %94 = OpTypePointer Output %7 
                                          u32 %96 = OpConstant 2 
                                              %97 = OpTypePointer Private %6 
                                             %100 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 0 
                                         f32 %109 = OpConstant 3.674022E-40 
                                         f32 %120 = OpConstant 3.674022E-40 
                                             %123 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %127 = OpConstant 4 
                                         u32 %131 = OpConstant 3 
                                             %135 = OpTypeVector %6 2 
                                             %136 = OpTypePointer Output %135 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %138 = OpVariable Input 
                                         i32 %141 = OpConstant 5 
                                             %150 = OpTypePointer Input %50 
                                Input f32_3* %151 = OpVariable Input 
                                Private f32* %170 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %184 = OpVariable Output 
                                Input f32_4* %185 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %188 = OpConstantComposite %120 %120 %120 %120 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %46 %23 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %46 %28 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %46 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %81 = OpAccessChain %21 %46 %46 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %44 
                                        f32_4 %84 = OpVectorShuffle %83 %83 3 3 3 3 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %9 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %9 %87 
                                        f32_4 %93 = OpLoad %9 
                                Output f32_4* %95 = OpAccessChain %92 %28 
                                                      OpStore %95 %93 
                                 Private f32* %98 = OpAccessChain %9 %96 
                                          f32 %99 = OpLoad %98 
                                Uniform f32* %101 = OpAccessChain %21 %28 %88 
                                         f32 %102 = OpLoad %101 
                                         f32 %103 = OpFDiv %99 %102 
                                Private f32* %105 = OpAccessChain %9 %104 
                                                      OpStore %105 %103 
                                Private f32* %106 = OpAccessChain %9 %104 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFNegate %107 
                                         f32 %110 = OpFAdd %108 %109 
                                Private f32* %111 = OpAccessChain %9 %104 
                                                      OpStore %111 %110 
                                Private f32* %112 = OpAccessChain %9 %104 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %114 = OpAccessChain %21 %28 %96 
                                         f32 %115 = OpLoad %114 
                                         f32 %116 = OpFMul %113 %115 
                                Private f32* %117 = OpAccessChain %9 %104 
                                                      OpStore %117 %116 
                                Private f32* %118 = OpAccessChain %9 %104 
                                         f32 %119 = OpLoad %118 
                                         f32 %121 = OpExtInst %1 40 %119 %120 
                                Private f32* %122 = OpAccessChain %9 %104 
                                                      OpStore %122 %121 
                                Private f32* %125 = OpAccessChain %9 %104 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %128 = OpAccessChain %21 %127 %96 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpFMul %126 %129 
                                Uniform f32* %132 = OpAccessChain %21 %127 %131 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpFAdd %130 %133 
                                                      OpStore vs_TEXCOORD5 %134 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 1 
                              Uniform f32_4* %142 = OpAccessChain %21 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_2 %145 = OpFMul %140 %144 
                              Uniform f32_4* %146 = OpAccessChain %21 %141 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 2 3 
                                       f32_2 %149 = OpFAdd %145 %148 
                                                      OpStore vs_TEXCOORD0 %149 
                                       f32_3 %152 = OpLoad %151 
                              Uniform f32_4* %153 = OpAccessChain %21 %36 %28 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                         f32 %156 = OpDot %152 %155 
                                Private f32* %157 = OpAccessChain %9 %104 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %151 
                              Uniform f32_4* %159 = OpAccessChain %21 %36 %23 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %158 %161 
                                Private f32* %163 = OpAccessChain %9 %88 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %151 
                              Uniform f32_4* %165 = OpAccessChain %21 %36 %36 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %164 %167 
                                Private f32* %169 = OpAccessChain %9 %96 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %9 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %172 %174 
                                                      OpStore %170 %175 
                                         f32 %176 = OpLoad %170 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %170 %177 
                                         f32 %179 = OpLoad %170 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFMul %180 %182 
                                                      OpStore vs_TEXCOORD1 %183 
                                       f32_4 %186 = OpLoad %185 
                                                      OpStore %184 %186 
                                                      OpStore vs_TEXCOORD4 %188 
                                 Output f32* %189 = OpAccessChain %92 %28 %88 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFNegate %190 
                                 Output f32* %192 = OpAccessChain %92 %28 %88 
                                                      OpStore %192 %191 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 80
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %47 %62 %68 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %34 0 Offset 34 
                                             OpMemberDecorate %34 1 Offset 34 
                                             OpDecorate %34 Block 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate vs_TEXCOORD5 Location 62 
                                             OpDecorate %68 Location 68 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %34 = OpTypeStruct %24 %24 
                                     %35 = OpTypePointer Uniform %34 
     Uniform struct {f32_4; f32_4;}* %36 = OpVariable Uniform 
                                     %37 = OpTypeInt 32 1 
                                 i32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %24 
                                     %44 = OpTypePointer Private %6 
                        Private f32* %45 = OpVariable Private 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %49 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %61 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %65 = OpConstant 3.674022E-40 
                                     %67 = OpTypePointer Output %24 
                       Output f32_4* %68 = OpVariable Output 
                                     %75 = OpTypeInt 32 0 
                                 u32 %76 = OpConstant 3 
                                     %77 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                      Uniform f32_4* %40 = OpAccessChain %36 %38 
                               f32_4 %41 = OpLoad %40 
                               f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               f32_3 %43 = OpFMul %33 %42 
                                             OpStore %9 %43 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                      Uniform f32_4* %50 = OpAccessChain %36 %49 
                               f32_4 %51 = OpLoad %50 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpDot %48 %52 
                                             OpStore %45 %53 
                                 f32 %54 = OpLoad %45 
                                 f32 %56 = OpExtInst %1 40 %54 %55 
                                             OpStore %45 %56 
                                 f32 %57 = OpLoad %45 
                               f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                               f32_3 %59 = OpLoad %9 
                               f32_3 %60 = OpFMul %58 %59 
                                             OpStore %9 %60 
                                 f32 %63 = OpLoad vs_TEXCOORD5 
                                             OpStore %45 %63 
                                 f32 %64 = OpLoad %45 
                                 f32 %66 = OpExtInst %1 43 %64 %55 %65 
                                             OpStore %45 %66 
                               f32_3 %69 = OpLoad %9 
                                 f32 %70 = OpLoad %45 
                               f32_3 %71 = OpCompositeConstruct %70 %70 %70 
                               f32_3 %72 = OpFMul %69 %71 
                               f32_4 %73 = OpLoad %68 
                               f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                             OpStore %68 %74 
                         Output f32* %78 = OpAccessChain %68 %76 
                                             OpStore %78 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlatb9 = 0.0<u_xlat0.z;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
    u_xlat0.x = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat9 = vs_TEXCOORD5;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 231
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %193 %194 %216 %224 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate vs_TEXCOORD3 Location 216 
                                                      OpDecorate vs_TEXCOORD4 Location 224 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                                         i32 %198 = OpConstant 5 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %225 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_4 %197 = OpVectorShuffle %196 %196 1 1 1 1 
                              Uniform f32_4* %199 = OpAccessChain %22 %198 %24 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpFMul %197 %200 
                                                      OpStore %45 %201 
                              Uniform f32_4* %202 = OpAccessChain %22 %198 %29 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %204 0 0 0 0 
                                       f32_4 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %45 
                                       f32_4 %208 = OpFAdd %206 %207 
                                                      OpStore %45 %208 
                              Uniform f32_4* %209 = OpAccessChain %22 %198 %37 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %9 
                                       f32_4 %212 = OpVectorShuffle %211 %211 2 2 2 2 
                                       f32_4 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %45 
                                       f32_4 %215 = OpFAdd %213 %214 
                                                      OpStore %45 %215 
                              Uniform f32_4* %217 = OpAccessChain %22 %198 %47 
                                       f32_4 %218 = OpLoad %217 
                                       f32_4 %219 = OpLoad %9 
                                       f32_4 %220 = OpVectorShuffle %219 %219 3 3 3 3 
                                       f32_4 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %45 
                                       f32_4 %223 = OpFAdd %221 %222 
                                                      OpStore vs_TEXCOORD3 %223 
                                                      OpStore vs_TEXCOORD4 %225 
                                 Output f32* %226 = OpAccessChain %82 %29 %78 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                 Output f32* %229 = OpAccessChain %82 %29 %78 
                                                      OpStore %229 %228 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 194
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %12 %133 %139 %164 %178 %183 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                  OpDecorate vs_TEXCOORD2 Location 12 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %69 DescriptorSet 69 
                                                  OpDecorate %69 Binding 69 
                                                  OpDecorate %73 DescriptorSet 73 
                                                  OpDecorate %73 Binding 73 
                                                  OpDecorate %97 DescriptorSet 97 
                                                  OpDecorate %97 Binding 97 
                                                  OpDecorate %99 DescriptorSet 99 
                                                  OpDecorate %99 Binding 99 
                                                  OpDecorate %127 DescriptorSet 127 
                                                  OpDecorate %127 Binding 127 
                                                  OpDecorate %129 DescriptorSet 129 
                                                  OpDecorate %129 Binding 129 
                                                  OpDecorate vs_TEXCOORD0 Location 133 
                                                  OpDecorate %139 Location 139 
                                                  OpDecorate vs_TEXCOORD1 Location 164 
                                                  OpDecorate vs_TEXCOORD5 Location 178 
                                                  OpDecorate %183 Location 183 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 4 
                                           %8 = OpTypePointer Private %7 
                            Private f32_4* %9 = OpVariable Private 
                                          %10 = OpTypeVector %6 3 
                                          %11 = OpTypePointer Input %10 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %7 %16 
                                          %18 = OpTypeStruct %7 %7 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %7 
                                      i32 %28 = OpConstant 0 
                                      i32 %44 = OpConstant 3 
                                          %48 = OpTypePointer Private %10 
                           Private f32_3* %49 = OpVariable Private 
                                          %50 = OpTypeVector %6 2 
                                      f32 %60 = OpConstant 3.674022E-40 
                                    f32_2 %61 = OpConstantComposite %60 %60 
                                          %65 = OpTypePointer Private %6 
                             Private f32* %66 = OpVariable Private 
                                          %67 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %68 = OpTypePointer UniformConstant %67 
     UniformConstant read_only Texture2D* %69 = OpVariable UniformConstant 
                                          %71 = OpTypeSampler 
                                          %72 = OpTypePointer UniformConstant %71 
                 UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          %75 = OpTypeSampledImage %67 
                                      u32 %80 = OpConstant 3 
                                          %82 = OpTypeBool 
                                          %83 = OpTypePointer Private %82 
                            Private bool* %84 = OpVariable Private 
                                      f32 %85 = OpConstant 3.674022E-40 
                                      u32 %86 = OpConstant 2 
                                      u32 %95 = OpConstant 0 
     UniformConstant read_only Texture2D* %97 = OpVariable UniformConstant 
                 UniformConstant sampler* %99 = OpVariable UniformConstant 
                            Private f32* %107 = OpVariable Private 
                                     f32 %109 = OpConstant 3.674022E-40 
    UniformConstant read_only Texture2D* %127 = OpVariable UniformConstant 
                UniformConstant sampler* %129 = OpVariable UniformConstant 
                                         %132 = OpTypePointer Input %50 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %138 = OpTypePointer Input %7 
                            Input f32_4* %139 = OpVariable Input 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                         %177 = OpTypePointer Input %6 
                      Input f32* vs_TEXCOORD5 = OpVariable Input 
                                         %182 = OpTypePointer Output %7 
                           Output f32_4* %183 = OpVariable Output 
                                         %191 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %13 = OpLoad vs_TEXCOORD2 
                                    f32_4 %14 = OpVectorShuffle %13 %13 1 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_4 %27 = OpFMul %14 %26 
                                                  OpStore %9 %27 
                           Uniform f32_4* %29 = OpAccessChain %20 %22 %28 
                                    f32_4 %30 = OpLoad %29 
                                    f32_3 %31 = OpLoad vs_TEXCOORD2 
                                    f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                    f32_4 %33 = OpFMul %30 %32 
                                    f32_4 %34 = OpLoad %9 
                                    f32_4 %35 = OpFAdd %33 %34 
                                                  OpStore %9 %35 
                           Uniform f32_4* %36 = OpAccessChain %20 %22 %22 
                                    f32_4 %37 = OpLoad %36 
                                    f32_3 %38 = OpLoad vs_TEXCOORD2 
                                    f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                    f32_4 %40 = OpFMul %37 %39 
                                    f32_4 %41 = OpLoad %9 
                                    f32_4 %42 = OpFAdd %40 %41 
                                                  OpStore %9 %42 
                                    f32_4 %43 = OpLoad %9 
                           Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                    f32_4 %46 = OpLoad %45 
                                    f32_4 %47 = OpFAdd %43 %46 
                                                  OpStore %9 %47 
                                    f32_4 %51 = OpLoad %9 
                                    f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                    f32_4 %53 = OpLoad %9 
                                    f32_2 %54 = OpVectorShuffle %53 %53 3 3 
                                    f32_2 %55 = OpFDiv %52 %54 
                                    f32_3 %56 = OpLoad %49 
                                    f32_3 %57 = OpVectorShuffle %56 %55 3 4 2 
                                                  OpStore %49 %57 
                                    f32_3 %58 = OpLoad %49 
                                    f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                    f32_2 %62 = OpFAdd %59 %61 
                                    f32_3 %63 = OpLoad %49 
                                    f32_3 %64 = OpVectorShuffle %63 %62 3 4 2 
                                                  OpStore %49 %64 
                      read_only Texture2D %70 = OpLoad %69 
                                  sampler %74 = OpLoad %73 
               read_only Texture2DSampled %76 = OpSampledImage %70 %74 
                                    f32_3 %77 = OpLoad %49 
                                    f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                                    f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                      f32 %81 = OpCompositeExtract %79 3 
                                                  OpStore %66 %81 
                             Private f32* %87 = OpAccessChain %9 %86 
                                      f32 %88 = OpLoad %87 
                                     bool %89 = OpFOrdLessThan %85 %88 
                                                  OpStore %84 %89 
                                    f32_4 %90 = OpLoad %9 
                                    f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                    f32_4 %92 = OpLoad %9 
                                    f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                      f32 %94 = OpDot %91 %93 
                             Private f32* %96 = OpAccessChain %9 %95 
                                                  OpStore %96 %94 
                      read_only Texture2D %98 = OpLoad %97 
                                 sampler %100 = OpLoad %99 
              read_only Texture2DSampled %101 = OpSampledImage %98 %100 
                                   f32_4 %102 = OpLoad %9 
                                   f32_2 %103 = OpVectorShuffle %102 %102 0 0 
                                   f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                     f32 %105 = OpCompositeExtract %104 0 
                            Private f32* %106 = OpAccessChain %9 %95 
                                                  OpStore %106 %105 
                                    bool %108 = OpLoad %84 
                                     f32 %110 = OpSelect %108 %109 %85 
                                                  OpStore %107 %110 
                                     f32 %111 = OpLoad %66 
                                     f32 %112 = OpLoad %107 
                                     f32 %113 = OpFMul %111 %112 
                                                  OpStore %107 %113 
                            Private f32* %114 = OpAccessChain %9 %95 
                                     f32 %115 = OpLoad %114 
                                     f32 %116 = OpLoad %107 
                                     f32 %117 = OpFMul %115 %116 
                            Private f32* %118 = OpAccessChain %9 %95 
                                                  OpStore %118 %117 
                                   f32_4 %119 = OpLoad %9 
                                   f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                          Uniform f32_4* %121 = OpAccessChain %20 %23 
                                   f32_4 %122 = OpLoad %121 
                                   f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                   f32_3 %124 = OpFMul %120 %123 
                                   f32_4 %125 = OpLoad %9 
                                   f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                  OpStore %9 %126 
                     read_only Texture2D %128 = OpLoad %127 
                                 sampler %130 = OpLoad %129 
              read_only Texture2DSampled %131 = OpSampledImage %128 %130 
                                   f32_2 %134 = OpLoad vs_TEXCOORD0 
                                   f32_4 %135 = OpImageSampleImplicitLod %131 %134 
                                   f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                                  OpStore %49 %136 
                                   f32_3 %137 = OpLoad %49 
                                   f32_4 %140 = OpLoad %139 
                                   f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                   f32_3 %142 = OpFMul %137 %141 
                                                  OpStore %49 %142 
                                   f32_4 %143 = OpLoad %9 
                                   f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                   f32_3 %145 = OpLoad %49 
                                   f32_3 %146 = OpFMul %144 %145 
                                   f32_4 %147 = OpLoad %9 
                                   f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                  OpStore %9 %148 
                                   f32_3 %149 = OpLoad vs_TEXCOORD2 
                                   f32_3 %150 = OpFNegate %149 
                          Uniform f32_4* %151 = OpAccessChain %20 %28 
                                   f32_4 %152 = OpLoad %151 
                                   f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                   f32_3 %154 = OpFAdd %150 %153 
                                                  OpStore %49 %154 
                                   f32_3 %155 = OpLoad %49 
                                   f32_3 %156 = OpLoad %49 
                                     f32 %157 = OpDot %155 %156 
                                                  OpStore %66 %157 
                                     f32 %158 = OpLoad %66 
                                     f32 %159 = OpExtInst %1 32 %158 
                                                  OpStore %66 %159 
                                     f32 %160 = OpLoad %66 
                                   f32_3 %161 = OpCompositeConstruct %160 %160 %160 
                                   f32_3 %162 = OpLoad %49 
                                   f32_3 %163 = OpFMul %161 %162 
                                                  OpStore %49 %163 
                                   f32_3 %165 = OpLoad vs_TEXCOORD1 
                                   f32_3 %166 = OpLoad %49 
                                     f32 %167 = OpDot %165 %166 
                                                  OpStore %66 %167 
                                     f32 %168 = OpLoad %66 
                                     f32 %169 = OpExtInst %1 40 %168 %85 
                                                  OpStore %66 %169 
                                     f32 %170 = OpLoad %66 
                                   f32_3 %171 = OpCompositeConstruct %170 %170 %170 
                                   f32_4 %172 = OpLoad %9 
                                   f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                   f32_3 %174 = OpFMul %171 %173 
                                   f32_4 %175 = OpLoad %9 
                                   f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                  OpStore %9 %176 
                                     f32 %179 = OpLoad vs_TEXCOORD5 
                                                  OpStore %66 %179 
                                     f32 %180 = OpLoad %66 
                                     f32 %181 = OpExtInst %1 43 %180 %85 %109 
                                                  OpStore %66 %181 
                                   f32_4 %184 = OpLoad %9 
                                   f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                     f32 %186 = OpLoad %66 
                                   f32_3 %187 = OpCompositeConstruct %186 %186 %186 
                                   f32_3 %188 = OpFMul %185 %187 
                                   f32_4 %189 = OpLoad %183 
                                   f32_4 %190 = OpVectorShuffle %189 %188 4 5 6 3 
                                                  OpStore %183 %190 
                             Output f32* %192 = OpAccessChain %183 %80 
                                                  OpStore %192 %109 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat6));
    u_xlat0.x = u_xlat1.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 244
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %127 %128 %142 %170 %176 %193 %194 %227 %237 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD0 Location 127 
                                                      OpDecorate %128 Location 128 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate vs_TEXCOORD1 Location 170 
                                                      OpDecorate vs_TEXCOORD2 Location 176 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate %194 Location 194 
                                                      OpDecorate vs_TEXCOORD3 Location 227 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %125 = OpTypeVector %6 2 
                                             %126 = OpTypePointer Output %125 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %128 = OpVariable Input 
                                         i32 %131 = OpConstant 6 
                                             %140 = OpTypeVector %6 3 
                                             %141 = OpTypePointer Input %140 
                                Input f32_3* %142 = OpVariable Input 
                                Private f32* %161 = OpVariable Private 
                                             %169 = OpTypePointer Output %140 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                               Output f32_4* %193 = OpVariable Output 
                                Input f32_4* %194 = OpVariable Input 
                                         i32 %198 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %238 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                              Uniform f32_4* %132 = OpAccessChain %22 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %130 %134 
                              Uniform f32_4* %136 = OpAccessChain %22 %131 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %143 = OpLoad %142 
                              Uniform f32_4* %144 = OpAccessChain %22 %37 %29 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                         f32 %147 = OpDot %143 %146 
                                Private f32* %148 = OpAccessChain %45 %94 
                                                      OpStore %148 %147 
                                       f32_3 %149 = OpLoad %142 
                              Uniform f32_4* %150 = OpAccessChain %22 %37 %24 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %149 %152 
                                Private f32* %154 = OpAccessChain %45 %78 
                                                      OpStore %154 %153 
                                       f32_3 %155 = OpLoad %142 
                              Uniform f32_4* %156 = OpAccessChain %22 %37 %37 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %160 = OpAccessChain %45 %86 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %45 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %45 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %161 %166 
                                         f32 %167 = OpLoad %161 
                                         f32 %168 = OpExtInst %1 32 %167 
                                                      OpStore %161 %168 
                                         f32 %171 = OpLoad %161 
                                       f32_3 %172 = OpCompositeConstruct %171 %171 %171 
                                       f32_4 %173 = OpLoad %45 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore vs_TEXCOORD1 %175 
                              Uniform f32_4* %177 = OpAccessChain %22 %24 %47 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %11 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD2 %185 
                              Uniform f32_4* %186 = OpAccessChain %22 %24 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_4 %188 = OpLoad %11 
                                       f32_4 %189 = OpVectorShuffle %188 %188 3 3 3 3 
                                       f32_4 %190 = OpFMul %187 %189 
                                       f32_4 %191 = OpLoad %9 
                                       f32_4 %192 = OpFAdd %190 %191 
                                                      OpStore %9 %192 
                                       f32_4 %195 = OpLoad %194 
                                                      OpStore %193 %195 
                                       f32_4 %196 = OpLoad %9 
                                       f32_3 %197 = OpVectorShuffle %196 %196 1 1 1 
                              Uniform f32_4* %199 = OpAccessChain %22 %198 %24 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFMul %197 %201 
                                       f32_4 %203 = OpLoad %45 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %45 %204 
                              Uniform f32_4* %205 = OpAccessChain %22 %198 %29 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %9 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 0 0 
                                       f32_3 %210 = OpFMul %207 %209 
                                       f32_4 %211 = OpLoad %45 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %45 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 6 3 
                                                      OpStore %45 %215 
                              Uniform f32_4* %216 = OpAccessChain %22 %198 %37 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 2 2 2 
                                       f32_3 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %45 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                       f32_3 %224 = OpFAdd %221 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %9 %226 
                              Uniform f32_4* %228 = OpAccessChain %22 %198 %47 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 3 3 3 
                                       f32_3 %233 = OpFMul %230 %232 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFAdd %233 %235 
                                                      OpStore vs_TEXCOORD3 %236 
                                                      OpStore vs_TEXCOORD4 %238 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFNegate %240 
                                 Output f32* %242 = OpAccessChain %82 %29 %78 
                                                      OpStore %242 %241 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 161
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %105 %111 %133 %145 %151 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %17 ArrayStride 17 
                                                  OpMemberDecorate %18 0 Offset 18 
                                                  OpMemberDecorate %18 1 Offset 18 
                                                  OpMemberDecorate %18 2 Offset 18 
                                                  OpDecorate %18 Block 
                                                  OpDecorate %20 DescriptorSet 20 
                                                  OpDecorate %20 Binding 20 
                                                  OpDecorate %59 DescriptorSet 59 
                                                  OpDecorate %59 Binding 59 
                                                  OpDecorate %63 DescriptorSet 63 
                                                  OpDecorate %63 Binding 63 
                                                  OpDecorate %76 DescriptorSet 76 
                                                  OpDecorate %76 Binding 76 
                                                  OpDecorate %78 DescriptorSet 78 
                                                  OpDecorate %78 Binding 78 
                                                  OpDecorate %99 DescriptorSet 99 
                                                  OpDecorate %99 Binding 99 
                                                  OpDecorate %101 DescriptorSet 101 
                                                  OpDecorate %101 Binding 101 
                                                  OpDecorate vs_TEXCOORD0 Location 105 
                                                  OpDecorate %111 Location 111 
                                                  OpDecorate vs_TEXCOORD1 Location 133 
                                                  OpDecorate vs_TEXCOORD5 Location 145 
                                                  OpDecorate %151 Location 151 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %14 = OpTypeVector %6 4 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 4 
                                          %17 = OpTypeArray %14 %16 
                                          %18 = OpTypeStruct %14 %14 %17 
                                          %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4; f32_4; f32_4[4];}* %20 = OpVariable Uniform 
                                          %21 = OpTypeInt 32 1 
                                      i32 %22 = OpConstant 2 
                                      i32 %23 = OpConstant 1 
                                          %24 = OpTypePointer Uniform %14 
                                      i32 %29 = OpConstant 0 
                                      i32 %47 = OpConstant 3 
                                          %52 = OpTypePointer Private %6 
                             Private f32* %53 = OpVariable Private 
                                          %57 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                          %58 = OpTypePointer UniformConstant %57 
   UniformConstant read_only TextureCube* %59 = OpVariable UniformConstant 
                                          %61 = OpTypeSampler 
                                          %62 = OpTypePointer UniformConstant %61 
                 UniformConstant sampler* %63 = OpVariable UniformConstant 
                                          %65 = OpTypeSampledImage %57 
                                      u32 %69 = OpConstant 3 
                                      u32 %71 = OpConstant 0 
                             Private f32* %73 = OpVariable Private 
                                          %74 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %75 = OpTypePointer UniformConstant %74 
     UniformConstant read_only Texture2D* %76 = OpVariable UniformConstant 
                 UniformConstant sampler* %78 = OpVariable UniformConstant 
                                          %80 = OpTypeSampledImage %74 
                                          %83 = OpTypeVector %6 2 
                           Private f32_3* %98 = OpVariable Private 
     UniformConstant read_only Texture2D* %99 = OpVariable UniformConstant 
                UniformConstant sampler* %101 = OpVariable UniformConstant 
                                         %104 = OpTypePointer Input %83 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %110 = OpTypePointer Input %14 
                            Input f32_4* %111 = OpVariable Input 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %138 = OpConstant 3.674022E-40 
                                         %144 = OpTypePointer Input %6 
                      Input f32* vs_TEXCOORD5 = OpVariable Input 
                                     f32 %148 = OpConstant 3.674022E-40 
                                         %150 = OpTypePointer Output %14 
                           Output f32_4* %151 = OpVariable Output 
                                         %158 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %12 = OpLoad vs_TEXCOORD2 
                                    f32_3 %13 = OpVectorShuffle %12 %12 1 1 1 
                           Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                    f32_4 %26 = OpLoad %25 
                                    f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                                    f32_3 %28 = OpFMul %13 %27 
                                                  OpStore %9 %28 
                           Uniform f32_4* %30 = OpAccessChain %20 %22 %29 
                                    f32_4 %31 = OpLoad %30 
                                    f32_3 %32 = OpVectorShuffle %31 %31 0 1 2 
                                    f32_3 %33 = OpLoad vs_TEXCOORD2 
                                    f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                    f32_3 %35 = OpFMul %32 %34 
                                    f32_3 %36 = OpLoad %9 
                                    f32_3 %37 = OpFAdd %35 %36 
                                                  OpStore %9 %37 
                           Uniform f32_4* %38 = OpAccessChain %20 %22 %22 
                                    f32_4 %39 = OpLoad %38 
                                    f32_3 %40 = OpVectorShuffle %39 %39 0 1 2 
                                    f32_3 %41 = OpLoad vs_TEXCOORD2 
                                    f32_3 %42 = OpVectorShuffle %41 %41 2 2 2 
                                    f32_3 %43 = OpFMul %40 %42 
                                    f32_3 %44 = OpLoad %9 
                                    f32_3 %45 = OpFAdd %43 %44 
                                                  OpStore %9 %45 
                                    f32_3 %46 = OpLoad %9 
                           Uniform f32_4* %48 = OpAccessChain %20 %22 %47 
                                    f32_4 %49 = OpLoad %48 
                                    f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                    f32_3 %51 = OpFAdd %46 %50 
                                                  OpStore %9 %51 
                                    f32_3 %54 = OpLoad %9 
                                    f32_3 %55 = OpLoad %9 
                                      f32 %56 = OpDot %54 %55 
                                                  OpStore %53 %56 
                    read_only TextureCube %60 = OpLoad %59 
                                  sampler %64 = OpLoad %63 
             read_only TextureCubeSampled %66 = OpSampledImage %60 %64 
                                    f32_3 %67 = OpLoad %9 
                                    f32_4 %68 = OpImageSampleImplicitLod %66 %67 
                                      f32 %70 = OpCompositeExtract %68 3 
                             Private f32* %72 = OpAccessChain %9 %71 
                                                  OpStore %72 %70 
                      read_only Texture2D %77 = OpLoad %76 
                                  sampler %79 = OpLoad %78 
               read_only Texture2DSampled %81 = OpSampledImage %77 %79 
                                      f32 %82 = OpLoad %53 
                                    f32_2 %84 = OpCompositeConstruct %82 %82 
                                    f32_4 %85 = OpImageSampleImplicitLod %81 %84 
                                      f32 %86 = OpCompositeExtract %85 0 
                                                  OpStore %73 %86 
                             Private f32* %87 = OpAccessChain %9 %71 
                                      f32 %88 = OpLoad %87 
                                      f32 %89 = OpLoad %73 
                                      f32 %90 = OpFMul %88 %89 
                             Private f32* %91 = OpAccessChain %9 %71 
                                                  OpStore %91 %90 
                                    f32_3 %92 = OpLoad %9 
                                    f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                           Uniform f32_4* %94 = OpAccessChain %20 %23 
                                    f32_4 %95 = OpLoad %94 
                                    f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                    f32_3 %97 = OpFMul %93 %96 
                                                  OpStore %9 %97 
                     read_only Texture2D %100 = OpLoad %99 
                                 sampler %102 = OpLoad %101 
              read_only Texture2DSampled %103 = OpSampledImage %100 %102 
                                   f32_2 %106 = OpLoad vs_TEXCOORD0 
                                   f32_4 %107 = OpImageSampleImplicitLod %103 %106 
                                   f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                                  OpStore %98 %108 
                                   f32_3 %109 = OpLoad %98 
                                   f32_4 %112 = OpLoad %111 
                                   f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                   f32_3 %114 = OpFMul %109 %113 
                                                  OpStore %98 %114 
                                   f32_3 %115 = OpLoad %9 
                                   f32_3 %116 = OpLoad %98 
                                   f32_3 %117 = OpFMul %115 %116 
                                                  OpStore %9 %117 
                                   f32_3 %118 = OpLoad vs_TEXCOORD2 
                                   f32_3 %119 = OpFNegate %118 
                          Uniform f32_4* %120 = OpAccessChain %20 %29 
                                   f32_4 %121 = OpLoad %120 
                                   f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                   f32_3 %123 = OpFAdd %119 %122 
                                                  OpStore %98 %123 
                                   f32_3 %124 = OpLoad %98 
                                   f32_3 %125 = OpLoad %98 
                                     f32 %126 = OpDot %124 %125 
                                                  OpStore %53 %126 
                                     f32 %127 = OpLoad %53 
                                     f32 %128 = OpExtInst %1 32 %127 
                                                  OpStore %53 %128 
                                     f32 %129 = OpLoad %53 
                                   f32_3 %130 = OpCompositeConstruct %129 %129 %129 
                                   f32_3 %131 = OpLoad %98 
                                   f32_3 %132 = OpFMul %130 %131 
                                                  OpStore %98 %132 
                                   f32_3 %134 = OpLoad vs_TEXCOORD1 
                                   f32_3 %135 = OpLoad %98 
                                     f32 %136 = OpDot %134 %135 
                                                  OpStore %53 %136 
                                     f32 %137 = OpLoad %53 
                                     f32 %139 = OpExtInst %1 40 %137 %138 
                                                  OpStore %53 %139 
                                     f32 %140 = OpLoad %53 
                                   f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                   f32_3 %142 = OpLoad %9 
                                   f32_3 %143 = OpFMul %141 %142 
                                                  OpStore %9 %143 
                                     f32 %146 = OpLoad vs_TEXCOORD5 
                                                  OpStore %53 %146 
                                     f32 %147 = OpLoad %53 
                                     f32 %149 = OpExtInst %1 43 %147 %138 %148 
                                                  OpStore %53 %149 
                                   f32_3 %152 = OpLoad %9 
                                     f32 %153 = OpLoad %53 
                                   f32_3 %154 = OpCompositeConstruct %153 %153 %153 
                                   f32_3 %155 = OpFMul %152 %154 
                                   f32_4 %156 = OpLoad %151 
                                   f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                  OpStore %151 %157 
                             Output f32* %159 = OpAccessChain %151 %69 
                                                  OpStore %159 %148 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD5;
in  vec3 vs_TEXCOORD2;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 244
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %82 %114 %134 %177 %187 %188 %201 %228 %234 %235 %237 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpMemberDecorate %20 4 Offset 20 
                                                      OpMemberDecorate %20 5 Offset 20 
                                                      OpMemberDecorate %20 6 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpMemberDecorate %80 0 BuiltIn 80 
                                                      OpMemberDecorate %80 1 BuiltIn 80 
                                                      OpMemberDecorate %80 2 BuiltIn 80 
                                                      OpDecorate %80 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 134 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate vs_TEXCOORD0 Location 187 
                                                      OpDecorate %188 Location 188 
                                                      OpDecorate %201 Location 201 
                                                      OpDecorate vs_TEXCOORD1 Location 228 
                                                      OpDecorate %234 Location 234 
                                                      OpDecorate %235 Location 235 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeStruct %7 %16 %17 %18 %7 %19 %7 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                               Private f32_4* %51 = OpVariable Private 
                                          u32 %78 = OpConstant 1 
                                              %79 = OpTypeArray %6 %78 
                                              %80 = OpTypeStruct %7 %6 %79 
                                              %81 = OpTypePointer Output %80 
         Output struct {f32_4; f32; f32[1];}* %82 = OpVariable Output 
                                              %84 = OpTypePointer Output %7 
                                          u32 %86 = OpConstant 2 
                                              %87 = OpTypePointer Private %6 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %94 = OpConstant 0 
                                          f32 %99 = OpConstant 3.674022E-40 
                                         f32 %110 = OpConstant 3.674022E-40 
                                             %113 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %117 = OpConstant 4 
                                         u32 %121 = OpConstant 3 
                                             %132 = OpTypeVector %6 3 
                                             %133 = OpTypePointer Output %132 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypeVector %6 2 
                                         i32 %147 = OpConstant 5 
                                             %176 = OpTypePointer Output %144 
                       Output f32_2* vs_TEXCOORD3 = OpVariable Output 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %188 = OpVariable Input 
                                         i32 %191 = OpConstant 6 
                                             %200 = OpTypePointer Input %132 
                                Input f32_3* %201 = OpVariable Input 
                                Private f32* %220 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %234 = OpVariable Output 
                                Input f32_4* %235 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD4 = OpVariable Output 
                                       f32_4 %238 = OpConstantComposite %110 %110 %110 %110 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %22 %24 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %22 %24 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                                        f32_4 %52 = OpLoad %45 
                                        f32_4 %53 = OpVectorShuffle %52 %52 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %47 %24 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %53 %55 
                                                      OpStore %51 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %47 %29 
                                        f32_4 %58 = OpLoad %57 
                                        f32_4 %59 = OpLoad %45 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %51 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %51 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %47 %37 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpLoad %45 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %51 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %51 %70 
                               Uniform f32_4* %71 = OpAccessChain %22 %47 %47 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %45 
                                        f32_4 %74 = OpVectorShuffle %73 %73 3 3 3 3 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %51 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %45 %77 
                                        f32_4 %83 = OpLoad %45 
                                Output f32_4* %85 = OpAccessChain %82 %29 
                                                      OpStore %85 %83 
                                 Private f32* %88 = OpAccessChain %45 %86 
                                          f32 %89 = OpLoad %88 
                                 Uniform f32* %91 = OpAccessChain %22 %29 %78 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFDiv %89 %92 
                                 Private f32* %95 = OpAccessChain %45 %94 
                                                      OpStore %95 %93 
                                 Private f32* %96 = OpAccessChain %45 %94 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFNegate %97 
                                         f32 %100 = OpFAdd %98 %99 
                                Private f32* %101 = OpAccessChain %45 %94 
                                                      OpStore %101 %100 
                                Private f32* %102 = OpAccessChain %45 %94 
                                         f32 %103 = OpLoad %102 
                                Uniform f32* %104 = OpAccessChain %22 %29 %86 
                                         f32 %105 = OpLoad %104 
                                         f32 %106 = OpFMul %103 %105 
                                Private f32* %107 = OpAccessChain %45 %94 
                                                      OpStore %107 %106 
                                Private f32* %108 = OpAccessChain %45 %94 
                                         f32 %109 = OpLoad %108 
                                         f32 %111 = OpExtInst %1 40 %109 %110 
                                Private f32* %112 = OpAccessChain %45 %94 
                                                      OpStore %112 %111 
                                Private f32* %115 = OpAccessChain %45 %94 
                                         f32 %116 = OpLoad %115 
                                Uniform f32* %118 = OpAccessChain %22 %117 %86 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %116 %119 
                                Uniform f32* %122 = OpAccessChain %22 %117 %121 
                                         f32 %123 = OpLoad %122 
                                         f32 %124 = OpFAdd %120 %123 
                                                      OpStore vs_TEXCOORD5 %124 
                              Uniform f32_4* %125 = OpAccessChain %22 %24 %47 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpLoad %11 
                                       f32_4 %128 = OpVectorShuffle %127 %127 3 3 3 3 
                                       f32_4 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpFAdd %129 %130 
                                                      OpStore %45 %131 
                              Uniform f32_4* %135 = OpAccessChain %22 %24 %47 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_4 %138 = OpLoad %11 
                                       f32_3 %139 = OpVectorShuffle %138 %138 3 3 3 
                                       f32_3 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %9 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %140 %142 
                                                      OpStore vs_TEXCOORD2 %143 
                                       f32_4 %145 = OpLoad %45 
                                       f32_2 %146 = OpVectorShuffle %145 %145 1 1 
                              Uniform f32_4* %148 = OpAccessChain %22 %147 %24 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %146 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                                      OpStore %9 %153 
                              Uniform f32_4* %154 = OpAccessChain %22 %147 %29 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                                       f32_4 %157 = OpLoad %45 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 0 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 2 3 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %22 %147 %37 
                                       f32_4 %166 = OpLoad %165 
                                       f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                       f32_4 %168 = OpLoad %45 
                                       f32_2 %169 = OpVectorShuffle %168 %168 2 2 
                                       f32_2 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %9 
                                       f32_2 %172 = OpVectorShuffle %171 %171 0 1 
                                       f32_2 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 2 3 
                                                      OpStore %9 %175 
                              Uniform f32_4* %178 = OpAccessChain %22 %147 %47 
                                       f32_4 %179 = OpLoad %178 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                                       f32_4 %181 = OpLoad %45 
                                       f32_2 %182 = OpVectorShuffle %181 %181 3 3 
                                       f32_2 %183 = OpFMul %180 %182 
                                       f32_4 %184 = OpLoad %9 
                                       f32_2 %185 = OpVectorShuffle %184 %184 0 1 
                                       f32_2 %186 = OpFAdd %183 %185 
                                                      OpStore vs_TEXCOORD3 %186 
                                       f32_4 %189 = OpLoad %188 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                              Uniform f32_4* %192 = OpAccessChain %22 %191 
                                       f32_4 %193 = OpLoad %192 
                                       f32_2 %194 = OpVectorShuffle %193 %193 0 1 
                                       f32_2 %195 = OpFMul %190 %194 
                              Uniform f32_4* %196 = OpAccessChain %22 %191 
                                       f32_4 %197 = OpLoad %196 
                                       f32_2 %198 = OpVectorShuffle %197 %197 2 3 
                                       f32_2 %199 = OpFAdd %195 %198 
                                                      OpStore vs_TEXCOORD0 %199 
                                       f32_3 %202 = OpLoad %201 
                              Uniform f32_4* %203 = OpAccessChain %22 %37 %29 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                         f32 %206 = OpDot %202 %205 
                                Private f32* %207 = OpAccessChain %9 %94 
                                                      OpStore %207 %206 
                                       f32_3 %208 = OpLoad %201 
                              Uniform f32_4* %209 = OpAccessChain %22 %37 %24 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %208 %211 
                                Private f32* %213 = OpAccessChain %9 %78 
                                                      OpStore %213 %212 
                                       f32_3 %214 = OpLoad %201 
                              Uniform f32_4* %215 = OpAccessChain %22 %37 %37 
                                       f32_4 %216 = OpLoad %215 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                         f32 %218 = OpDot %214 %217 
                                Private f32* %219 = OpAccessChain %9 %86 
                                                      OpStore %219 %218 
                                       f32_4 %221 = OpLoad %9 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %220 %225 
                                         f32 %226 = OpLoad %220 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %220 %227 
                                         f32 %229 = OpLoad %220 
                                       f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpFMul %230 %232 
                                                      OpStore vs_TEXCOORD1 %233 
                                       f32_4 %236 = OpLoad %235 
                                                      OpStore %234 %236 
                                                      OpStore vs_TEXCOORD4 %238 
                                 Output f32* %239 = OpAccessChain %82 %29 %78 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFNegate %240 
                                 Output f32* %242 = OpAccessChain %82 %29 %78 
                                                      OpStore %242 %241 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 139
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %11 %95 %101 %109 %123 %129 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                  OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                  OpDecorate vs_TEXCOORD2 Location 11 
                                                  OpDecorate %18 ArrayStride 18 
                                                  OpMemberDecorate %19 0 Offset 19 
                                                  OpMemberDecorate %19 1 Offset 19 
                                                  OpMemberDecorate %19 2 Offset 19 
                                                  OpDecorate %19 Block 
                                                  OpDecorate %21 DescriptorSet 21 
                                                  OpDecorate %21 Binding 21 
                                                  OpDecorate %66 DescriptorSet 66 
                                                  OpDecorate %66 Binding 66 
                                                  OpDecorate %70 DescriptorSet 70 
                                                  OpDecorate %70 Binding 70 
                                                  OpDecorate %89 DescriptorSet 89 
                                                  OpDecorate %89 Binding 89 
                                                  OpDecorate %91 DescriptorSet 91 
                                                  OpDecorate %91 Binding 91 
                                                  OpDecorate vs_TEXCOORD0 Location 95 
                                                  OpDecorate %101 Location 101 
                                                  OpDecorate vs_TEXCOORD1 Location 109 
                                                  OpDecorate vs_TEXCOORD5 Location 123 
                                                  OpDecorate %129 Location 129 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 3 
                                           %8 = OpTypePointer Private %7 
                            Private f32_3* %9 = OpVariable Private 
                                          %10 = OpTypePointer Input %7 
                    Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                          %12 = OpTypeVector %6 2 
                                          %15 = OpTypeVector %6 4 
                                          %16 = OpTypeInt 32 0 
                                      u32 %17 = OpConstant 4 
                                          %18 = OpTypeArray %15 %17 
                                          %19 = OpTypeStruct %15 %15 %18 
                                          %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4[4];}* %21 = OpVariable Uniform 
                                          %22 = OpTypeInt 32 1 
                                      i32 %23 = OpConstant 2 
                                      i32 %24 = OpConstant 1 
                                          %25 = OpTypePointer Uniform %15 
                                      i32 %32 = OpConstant 0 
                                      i32 %57 = OpConstant 3 
                                          %64 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %65 = OpTypePointer UniformConstant %64 
     UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                                          %68 = OpTypeSampler 
                                          %69 = OpTypePointer UniformConstant %68 
                 UniformConstant sampler* %70 = OpVariable UniformConstant 
                                          %72 = OpTypeSampledImage %64 
                                      u32 %77 = OpConstant 3 
                                      u32 %79 = OpConstant 0 
                                          %80 = OpTypePointer Private %6 
                           Private f32_3* %88 = OpVariable Private 
     UniformConstant read_only Texture2D* %89 = OpVariable UniformConstant 
                 UniformConstant sampler* %91 = OpVariable UniformConstant 
                                          %94 = OpTypePointer Input %12 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                         %100 = OpTypePointer Input %15 
                            Input f32_4* %101 = OpVariable Input 
                            Private f32* %108 = OpVariable Private 
                    Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                     f32 %116 = OpConstant 3.674022E-40 
                                         %122 = OpTypePointer Input %6 
                      Input f32* vs_TEXCOORD5 = OpVariable Input 
                                     f32 %126 = OpConstant 3.674022E-40 
                                         %128 = OpTypePointer Output %15 
                           Output f32_4* %129 = OpVariable Output 
                                         %136 = OpTypePointer Output %6 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                                    f32_3 %13 = OpLoad vs_TEXCOORD2 
                                    f32_2 %14 = OpVectorShuffle %13 %13 1 1 
                           Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                    f32_4 %27 = OpLoad %26 
                                    f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                    f32_2 %29 = OpFMul %14 %28 
                                    f32_3 %30 = OpLoad %9 
                                    f32_3 %31 = OpVectorShuffle %30 %29 3 4 2 
                                                  OpStore %9 %31 
                           Uniform f32_4* %33 = OpAccessChain %21 %23 %32 
                                    f32_4 %34 = OpLoad %33 
                                    f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                    f32_3 %36 = OpLoad vs_TEXCOORD2 
                                    f32_2 %37 = OpVectorShuffle %36 %36 0 0 
                                    f32_2 %38 = OpFMul %35 %37 
                                    f32_3 %39 = OpLoad %9 
                                    f32_2 %40 = OpVectorShuffle %39 %39 0 1 
                                    f32_2 %41 = OpFAdd %38 %40 
                                    f32_3 %42 = OpLoad %9 
                                    f32_3 %43 = OpVectorShuffle %42 %41 3 4 2 
                                                  OpStore %9 %43 
                           Uniform f32_4* %44 = OpAccessChain %21 %23 %23 
                                    f32_4 %45 = OpLoad %44 
                                    f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                    f32_3 %47 = OpLoad vs_TEXCOORD2 
                                    f32_2 %48 = OpVectorShuffle %47 %47 2 2 
                                    f32_2 %49 = OpFMul %46 %48 
                                    f32_3 %50 = OpLoad %9 
                                    f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                    f32_2 %52 = OpFAdd %49 %51 
                                    f32_3 %53 = OpLoad %9 
                                    f32_3 %54 = OpVectorShuffle %53 %52 3 4 2 
                                                  OpStore %9 %54 
                                    f32_3 %55 = OpLoad %9 
                                    f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                           Uniform f32_4* %58 = OpAccessChain %21 %23 %57 
                                    f32_4 %59 = OpLoad %58 
                                    f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                    f32_2 %61 = OpFAdd %56 %60 
                                    f32_3 %62 = OpLoad %9 
                                    f32_3 %63 = OpVectorShuffle %62 %61 3 4 2 
                                                  OpStore %9 %63 
                      read_only Texture2D %67 = OpLoad %66 
                                  sampler %71 = OpLoad %70 
               read_only Texture2DSampled %73 = OpSampledImage %67 %71 
                                    f32_3 %74 = OpLoad %9 
                                    f32_2 %75 = OpVectorShuffle %74 %74 0 1 
                                    f32_4 %76 = OpImageSampleImplicitLod %73 %75 
                                      f32 %78 = OpCompositeExtract %76 3 
                             Private f32* %81 = OpAccessChain %9 %79 
                                                  OpStore %81 %78 
                                    f32_3 %82 = OpLoad %9 
                                    f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                           Uniform f32_4* %84 = OpAccessChain %21 %24 
                                    f32_4 %85 = OpLoad %84 
                                    f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                    f32_3 %87 = OpFMul %83 %86 
                                                  OpStore %9 %87 
                      read_only Texture2D %90 = OpLoad %89 
                                  sampler %92 = OpLoad %91 
               read_only Texture2DSampled %93 = OpSampledImage %90 %92 
                                    f32_2 %96 = OpLoad vs_TEXCOORD0 
                                    f32_4 %97 = OpImageSampleImplicitLod %93 %96 
                                    f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                                  OpStore %88 %98 
                                    f32_3 %99 = OpLoad %88 
                                   f32_4 %102 = OpLoad %101 
                                   f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                   f32_3 %104 = OpFMul %99 %103 
                                                  OpStore %88 %104 
                                   f32_3 %105 = OpLoad %9 
                                   f32_3 %106 = OpLoad %88 
                                   f32_3 %107 = OpFMul %105 %106 
                                                  OpStore %9 %107 
                                   f32_3 %110 = OpLoad vs_TEXCOORD1 
                          Uniform f32_4* %111 = OpAccessChain %21 %32 
                                   f32_4 %112 = OpLoad %111 
                                   f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                     f32 %114 = OpDot %110 %113 
                                                  OpStore %108 %114 
                                     f32 %115 = OpLoad %108 
                                     f32 %117 = OpExtInst %1 40 %115 %116 
                                                  OpStore %108 %117 
                                     f32 %118 = OpLoad %108 
                                   f32_3 %119 = OpCompositeConstruct %118 %118 %118 
                                   f32_3 %120 = OpLoad %9 
                                   f32_3 %121 = OpFMul %119 %120 
                                                  OpStore %9 %121 
                                     f32 %124 = OpLoad vs_TEXCOORD5 
                                                  OpStore %108 %124 
                                     f32 %125 = OpLoad %108 
                                     f32 %127 = OpExtInst %1 43 %125 %116 %126 
                                                  OpStore %108 %127 
                                   f32_3 %130 = OpLoad %9 
                                     f32 %131 = OpLoad %108 
                                   f32_3 %132 = OpCompositeConstruct %131 %131 %131 
                                   f32_3 %133 = OpFMul %130 %132 
                                   f32_4 %134 = OpLoad %129 
                                   f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                                  OpStore %129 %135 
                             Output f32* %137 = OpAccessChain %129 %77 
                                                  OpStore %137 %126 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
""
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSBASE" "RenderType" = "Opaque" }
  GpuProgramID 167591
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 138
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %96 %126 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate %96 Location 96 
                                                      OpDecorate vs_TEXCOORD0 Location 126 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypePointer Input %50 
                                 Input f32_3* %96 = OpVariable Input 
                                         u32 %102 = OpConstant 0 
                                             %103 = OpTypePointer Private %6 
                                         u32 %116 = OpConstant 2 
                                Private f32* %118 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD1 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_3 %97 = OpLoad %96 
                               Uniform f32_4* %98 = OpAccessChain %21 %24 %23 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                         f32 %101 = OpDot %97 %100 
                                Private f32* %104 = OpAccessChain %9 %102 
                                                      OpStore %104 %101 
                                       f32_3 %105 = OpLoad %96 
                              Uniform f32_4* %106 = OpAccessChain %21 %24 %24 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                         f32 %109 = OpDot %105 %108 
                                Private f32* %110 = OpAccessChain %9 %81 
                                                      OpStore %110 %109 
                                       f32_3 %111 = OpLoad %96 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %36 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %117 = OpAccessChain %9 %116 
                                                      OpStore %117 %115 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %120 %122 
                                                      OpStore %118 %123 
                                         f32 %124 = OpLoad %118 
                                         f32 %125 = OpExtInst %1 32 %124 
                                                      OpStore %118 %125 
                                         f32 %127 = OpLoad %118 
                                       f32_3 %128 = OpCompositeConstruct %127 %127 %127 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore vs_TEXCOORD0 %131 
                                 Output f32* %133 = OpAccessChain %85 %23 %81 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                 Output f32* %136 = OpAccessChain %85 %23 %81 
                                                      OpStore %136 %135 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD0.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 179
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %127 %163 %170 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %127 Location 127 
                                                      OpDecorate vs_TEXCOORD0 Location 163 
                                                      OpDecorate %170 Flat 
                                                      OpDecorate %170 Location 170 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 
                                              %93 = OpTypePointer Uniform %92 
                  Uniform struct {f32_4[4];}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypePointer Input %75 
                                Input f32_3* %127 = OpVariable Input 
                                         u32 %135 = OpConstant 0 
                                             %136 = OpTypePointer Private %23 
                                         u32 %153 = OpConstant 2 
                                Private f32* %155 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD0 = OpVariable Output 
                                             %169 = OpTypePointer Output %31 
                                 Output u32* %170 = OpVariable Output 
                                             %173 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_3 %128 = OpLoad %127 
                                         i32 %129 = OpLoad %8 
                                         i32 %130 = OpSDiv %129 %42 
                              Uniform f32_4* %131 = OpAccessChain %40 %15 %130 %44 %15 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %128 %133 
                                Private f32* %137 = OpAccessChain %26 %135 
                                                      OpStore %137 %134 
                                       f32_3 %138 = OpLoad %127 
                                         i32 %139 = OpLoad %8 
                                         i32 %140 = OpSDiv %139 %42 
                              Uniform f32_4* %141 = OpAccessChain %40 %15 %140 %44 %44 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                         f32 %144 = OpDot %138 %143 
                                Private f32* %145 = OpAccessChain %26 %112 
                                                      OpStore %145 %144 
                                       f32_3 %146 = OpLoad %127 
                                         i32 %147 = OpLoad %8 
                                         i32 %148 = OpSDiv %147 %42 
                              Uniform f32_4* %149 = OpAccessChain %40 %15 %148 %44 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %154 = OpAccessChain %26 %153 
                                                      OpStore %154 %152 
                                       f32_4 %156 = OpLoad %26 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %26 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %157 %159 
                                                      OpStore %155 %160 
                                         f32 %161 = OpLoad %155 
                                         f32 %162 = OpExtInst %1 32 %161 
                                                      OpStore %155 %162 
                                         f32 %164 = OpLoad %155 
                                       f32_3 %165 = OpCompositeConstruct %164 %164 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %165 %167 
                                                      OpStore vs_TEXCOORD0 %168 
                                         i32 %171 = OpLoad %10 
                                         u32 %172 = OpBitcast %171 
                                                      OpStore %170 %172 
                                 Output f32* %174 = OpAccessChain %116 %15 %112 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFNegate %175 
                                 Output f32* %177 = OpAccessChain %116 %15 %112 
                                                      OpStore %177 %176 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 26
; Schema: 0
                              OpCapability Shader 
                       %1 = OpExtInstImport "GLSL.std.450" 
                              OpMemoryModel Logical GLSL450 
                              OpEntryPoint Fragment %4 "main" %9 %12 
                              OpExecutionMode %4 OriginUpperLeft 
                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                              OpDecorate %9 Location 9 
                              OpDecorate vs_TEXCOORD0 Location 12 
                       %2 = OpTypeVoid 
                       %3 = OpTypeFunction %2 
                       %6 = OpTypeFloat 32 
                       %7 = OpTypeVector %6 4 
                       %8 = OpTypePointer Output %7 
         Output f32_4* %9 = OpVariable Output 
                      %10 = OpTypeVector %6 3 
                      %11 = OpTypePointer Input %10 
Input f32_3* vs_TEXCOORD0 = OpVariable Input 
                  f32 %14 = OpConstant 3.674022E-40 
                f32_3 %15 = OpConstantComposite %14 %14 %14 
                  f32 %20 = OpConstant 3.674022E-40 
                      %21 = OpTypeInt 32 0 
                  u32 %22 = OpConstant 3 
                      %23 = OpTypePointer Output %6 
                  void %4 = OpFunction None %3 
                       %5 = OpLabel 
                f32_3 %13 = OpLoad vs_TEXCOORD0 
                f32_3 %16 = OpFMul %13 %15 
                f32_3 %17 = OpFAdd %16 %15 
                f32_4 %18 = OpLoad %9 
                f32_4 %19 = OpVectorShuffle %18 %17 4 5 6 3 
                              OpStore %9 %19 
          Output f32* %24 = OpAccessChain %9 %22 
                              OpStore %24 %20 
                              OpReturn
                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "PREPASS"
  LOD 200
  Tags { "LIGHTMODE" = "PREPASSFINAL" "RenderType" = "Opaque" }
  ZWrite Off
  GpuProgramID 234890
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %113 %114 %132 %144 %148 %255 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 132 
                                                      OpDecorate vs_TEXCOORD3 Location 144 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD4 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                               Output f32_4* %113 = OpVariable Output 
                                Input f32_4* %114 = OpVariable Input 
                                             %116 = OpTypePointer Private %6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Uniform %6 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %127 %127 %127 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %145 %145 %145 %145 
                                             %147 = OpTypePointer Input %51 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 9 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                             %206 = OpTypePointer Private %51 
                              Private f32_3* %207 = OpVariable Private 
                                         i32 %208 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_4 %115 = OpLoad %114 
                                                      OpStore %113 %115 
                                Private f32* %117 = OpAccessChain %9 %90 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %121 = OpAccessChain %21 %29 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFMul %118 %122 
                                Private f32* %124 = OpAccessChain %9 %90 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 3 1 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %45 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 1 5 6 
                                                      OpStore %45 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_4 %135 = OpLoad vs_TEXCOORD2 
                                       f32_4 %136 = OpVectorShuffle %135 %134 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %136 
                                       f32_4 %137 = OpLoad %45 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 2 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 3 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad vs_TEXCOORD2 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %143 
                                                      OpStore vs_TEXCOORD3 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %21 %150 %29 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %9 %119 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %21 %150 %24 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %9 %90 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %21 %150 %37 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %9 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                                Private f32* %184 = OpAccessChain %9 %90 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %9 %90 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %45 %119 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %119 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %9 %119 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                Private f32* %195 = OpAccessChain %45 %119 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %194 %197 
                                Private f32* %199 = OpAccessChain %45 %119 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 2 2 0 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 1 2 2 
                                       f32_4 %205 = OpFMul %202 %204 
                                                      OpStore %200 %205 
                              Uniform f32_4* %209 = OpAccessChain %21 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %207 %119 
                                                      OpStore %213 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %200 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %207 %90 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %21 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %200 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %207 %167 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %21 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %233 = OpLoad %207 
                                       f32_3 %234 = OpFAdd %232 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                Private f32* %239 = OpAccessChain %9 %238 
                                                      OpStore %239 %237 
                              Uniform f32_4* %240 = OpAccessChain %21 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %9 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %200 %119 
                                                      OpStore %244 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %200 %90 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %47 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %200 %167 
                                                      OpStore %254 %253 
                                       f32_4 %256 = OpLoad %45 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %200 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                                      OpStore vs_TEXCOORD4 %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %94 %29 %90 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %57 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpDecorate %57 Location 57 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %56 = OpTypePointer Output %10 
                       Output f32_4* %57 = OpVariable Output 
                                 f32 %63 = OpConstant 3.674022E-40 
                                     %64 = OpTypeInt 32 0 
                                 u32 %65 = OpConstant 3 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %58 = OpLoad %9 
                               f32_3 %59 = OpLoad %40 
                               f32_3 %60 = OpFMul %58 %59 
                               f32_4 %61 = OpLoad %57 
                               f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                             OpStore %57 %62 
                         Output f32* %67 = OpAccessChain %57 %65 
                                             OpStore %67 %63 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %113 %114 %132 %144 %148 %255 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 132 
                                                      OpDecorate vs_TEXCOORD3 Location 144 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD4 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                               Output f32_4* %113 = OpVariable Output 
                                Input f32_4* %114 = OpVariable Input 
                                             %116 = OpTypePointer Private %6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Uniform %6 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %127 %127 %127 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %145 %145 %145 %145 
                                             %147 = OpTypePointer Input %51 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 9 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                             %206 = OpTypePointer Private %51 
                              Private f32_3* %207 = OpVariable Private 
                                         i32 %208 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_4 %115 = OpLoad %114 
                                                      OpStore %113 %115 
                                Private f32* %117 = OpAccessChain %9 %90 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %121 = OpAccessChain %21 %29 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFMul %118 %122 
                                Private f32* %124 = OpAccessChain %9 %90 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 3 1 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %45 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 1 5 6 
                                                      OpStore %45 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_4 %135 = OpLoad vs_TEXCOORD2 
                                       f32_4 %136 = OpVectorShuffle %135 %134 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %136 
                                       f32_4 %137 = OpLoad %45 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 2 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 3 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad vs_TEXCOORD2 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %143 
                                                      OpStore vs_TEXCOORD3 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %21 %150 %29 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %9 %119 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %21 %150 %24 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %9 %90 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %21 %150 %37 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %9 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                                Private f32* %184 = OpAccessChain %9 %90 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %9 %90 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %45 %119 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %119 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %9 %119 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                Private f32* %195 = OpAccessChain %45 %119 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %194 %197 
                                Private f32* %199 = OpAccessChain %45 %119 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 2 2 0 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 1 2 2 
                                       f32_4 %205 = OpFMul %202 %204 
                                                      OpStore %200 %205 
                              Uniform f32_4* %209 = OpAccessChain %21 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %207 %119 
                                                      OpStore %213 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %200 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %207 %90 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %21 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %200 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %207 %167 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %21 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %233 = OpLoad %207 
                                       f32_3 %234 = OpFAdd %232 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                Private f32* %239 = OpAccessChain %9 %238 
                                                      OpStore %239 %237 
                              Uniform f32_4* %240 = OpAccessChain %21 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %9 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %200 %119 
                                                      OpStore %244 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %200 %90 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %47 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %200 %167 
                                                      OpStore %254 %253 
                                       f32_4 %256 = OpLoad %45 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %200 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                                      OpStore vs_TEXCOORD4 %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %94 %29 %90 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %59 = OpTypePointer Output %10 
                       Output f32_4* %60 = OpVariable Output 
                                 f32 %66 = OpConstant 3.674022E-40 
                                     %67 = OpTypeInt 32 0 
                                 u32 %68 = OpConstant 3 
                                     %69 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpLoad %43 
                               f32_3 %63 = OpFMul %61 %62 
                               f32_4 %64 = OpLoad %60 
                               f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                             OpStore %60 %65 
                         Output f32* %70 = OpAccessChain %60 %68 
                                             OpStore %70 %66 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %113 %114 %132 %144 %148 %255 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 132 
                                                      OpDecorate vs_TEXCOORD3 Location 144 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD4 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                               Output f32_4* %113 = OpVariable Output 
                                Input f32_4* %114 = OpVariable Input 
                                             %116 = OpTypePointer Private %6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Uniform %6 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %127 %127 %127 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %145 %145 %145 %145 
                                             %147 = OpTypePointer Input %51 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 9 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                             %206 = OpTypePointer Private %51 
                              Private f32_3* %207 = OpVariable Private 
                                         i32 %208 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_4 %115 = OpLoad %114 
                                                      OpStore %113 %115 
                                Private f32* %117 = OpAccessChain %9 %90 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %121 = OpAccessChain %21 %29 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFMul %118 %122 
                                Private f32* %124 = OpAccessChain %9 %90 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 3 1 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %45 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 1 5 6 
                                                      OpStore %45 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_4 %135 = OpLoad vs_TEXCOORD2 
                                       f32_4 %136 = OpVectorShuffle %135 %134 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %136 
                                       f32_4 %137 = OpLoad %45 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 2 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 3 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad vs_TEXCOORD2 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %143 
                                                      OpStore vs_TEXCOORD3 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %21 %150 %29 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %9 %119 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %21 %150 %24 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %9 %90 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %21 %150 %37 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %9 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                                Private f32* %184 = OpAccessChain %9 %90 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %9 %90 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %45 %119 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %119 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %9 %119 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                Private f32* %195 = OpAccessChain %45 %119 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %194 %197 
                                Private f32* %199 = OpAccessChain %45 %119 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 2 2 0 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 1 2 2 
                                       f32_4 %205 = OpFMul %202 %204 
                                                      OpStore %200 %205 
                              Uniform f32_4* %209 = OpAccessChain %21 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %207 %119 
                                                      OpStore %213 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %200 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %207 %90 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %21 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %200 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %207 %167 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %21 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %233 = OpLoad %207 
                                       f32_3 %234 = OpFAdd %232 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                Private f32* %239 = OpAccessChain %9 %238 
                                                      OpStore %239 %237 
                              Uniform f32_4* %240 = OpAccessChain %21 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %9 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %200 %119 
                                                      OpStore %244 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %200 %90 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %47 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %200 %167 
                                                      OpStore %254 %253 
                                       f32_4 %256 = OpLoad %45 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %200 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                                      OpStore vs_TEXCOORD4 %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %94 %29 %90 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %57 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpDecorate %57 Location 57 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %56 = OpTypePointer Output %10 
                       Output f32_4* %57 = OpVariable Output 
                                 f32 %63 = OpConstant 3.674022E-40 
                                     %64 = OpTypeInt 32 0 
                                 u32 %65 = OpConstant 3 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %58 = OpLoad %9 
                               f32_3 %59 = OpLoad %40 
                               f32_3 %60 = OpFMul %58 %59 
                               f32_4 %61 = OpLoad %57 
                               f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                             OpStore %57 %62 
                         Output f32* %67 = OpAccessChain %57 %65 
                                             OpStore %67 %63 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 267
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %100 %101 %113 %114 %132 %144 %148 %255 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 100 
                                                      OpDecorate %101 Location 101 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate %114 Location 114 
                                                      OpDecorate vs_TEXCOORD2 Location 132 
                                                      OpDecorate vs_TEXCOORD3 Location 144 
                                                      OpDecorate %148 Location 148 
                                                      OpDecorate vs_TEXCOORD4 Location 255 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                              %98 = OpTypeVector %6 2 
                                              %99 = OpTypePointer Output %98 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %101 = OpVariable Input 
                                         i32 %104 = OpConstant 11 
                               Output f32_4* %113 = OpVariable Output 
                                Input f32_4* %114 = OpVariable Input 
                                             %116 = OpTypePointer Private %6 
                                         u32 %119 = OpConstant 0 
                                             %120 = OpTypePointer Uniform %6 
                                         f32 %127 = OpConstant 3.674022E-40 
                                       f32_3 %128 = OpConstantComposite %127 %127 %127 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %145 = OpConstant 3.674022E-40 
                                       f32_4 %146 = OpConstantComposite %145 %145 %145 %145 
                                             %147 = OpTypePointer Input %51 
                                Input f32_3* %148 = OpVariable Input 
                                         i32 %150 = OpConstant 9 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                              Private f32_4* %200 = OpVariable Private 
                                             %206 = OpTypePointer Private %51 
                              Private f32_3* %207 = OpVariable Private 
                                         i32 %208 = OpConstant 4 
                                         i32 %214 = OpConstant 5 
                                         i32 %220 = OpConstant 6 
                                         i32 %226 = OpConstant 7 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         u32 %238 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %104 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                                       f32_2 %108 = OpFMul %103 %107 
                              Uniform f32_4* %109 = OpAccessChain %21 %104 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 2 3 
                                       f32_2 %112 = OpFAdd %108 %111 
                                                      OpStore vs_TEXCOORD0 %112 
                                       f32_4 %115 = OpLoad %114 
                                                      OpStore %113 %115 
                                Private f32* %117 = OpAccessChain %9 %90 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %121 = OpAccessChain %21 %29 %119 
                                         f32 %122 = OpLoad %121 
                                         f32 %123 = OpFMul %118 %122 
                                Private f32* %124 = OpAccessChain %9 %90 
                                                      OpStore %124 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 3 1 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %45 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 1 5 6 
                                                      OpStore %45 %131 
                                       f32_4 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_4 %135 = OpLoad vs_TEXCOORD2 
                                       f32_4 %136 = OpVectorShuffle %135 %134 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %136 
                                       f32_4 %137 = OpLoad %45 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 2 
                                       f32_4 %139 = OpLoad %45 
                                       f32_2 %140 = OpVectorShuffle %139 %139 0 3 
                                       f32_2 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad vs_TEXCOORD2 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %143 
                                                      OpStore vs_TEXCOORD3 %146 
                                       f32_3 %149 = OpLoad %148 
                              Uniform f32_4* %151 = OpAccessChain %21 %150 %29 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                         f32 %154 = OpDot %149 %153 
                                Private f32* %155 = OpAccessChain %9 %119 
                                                      OpStore %155 %154 
                                       f32_3 %156 = OpLoad %148 
                              Uniform f32_4* %157 = OpAccessChain %21 %150 %24 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                         f32 %160 = OpDot %156 %159 
                                Private f32* %161 = OpAccessChain %9 %90 
                                                      OpStore %161 %160 
                                       f32_3 %162 = OpLoad %148 
                              Uniform f32_4* %163 = OpAccessChain %21 %150 %37 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %168 = OpAccessChain %9 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %9 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %177 = OpLoad %169 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                                Private f32* %184 = OpAccessChain %9 %90 
                                         f32 %185 = OpLoad %184 
                                Private f32* %186 = OpAccessChain %9 %90 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %185 %187 
                                Private f32* %189 = OpAccessChain %45 %119 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %9 %119 
                                         f32 %191 = OpLoad %190 
                                Private f32* %192 = OpAccessChain %9 %119 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %191 %193 
                                Private f32* %195 = OpAccessChain %45 %119 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %194 %197 
                                Private f32* %199 = OpAccessChain %45 %119 
                                                      OpStore %199 %198 
                                       f32_4 %201 = OpLoad %9 
                                       f32_4 %202 = OpVectorShuffle %201 %201 1 2 2 0 
                                       f32_4 %203 = OpLoad %9 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 1 2 2 
                                       f32_4 %205 = OpFMul %202 %204 
                                                      OpStore %200 %205 
                              Uniform f32_4* %209 = OpAccessChain %21 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_4 %211 = OpLoad %200 
                                         f32 %212 = OpDot %210 %211 
                                Private f32* %213 = OpAccessChain %207 %119 
                                                      OpStore %213 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %214 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %200 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %207 %90 
                                                      OpStore %219 %218 
                              Uniform f32_4* %221 = OpAccessChain %21 %220 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpLoad %200 
                                         f32 %224 = OpDot %222 %223 
                                Private f32* %225 = OpAccessChain %207 %167 
                                                      OpStore %225 %224 
                              Uniform f32_4* %227 = OpAccessChain %21 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %233 = OpLoad %207 
                                       f32_3 %234 = OpFAdd %232 %233 
                                       f32_4 %235 = OpLoad %45 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %45 %236 
                                Private f32* %239 = OpAccessChain %9 %238 
                                                      OpStore %239 %237 
                              Uniform f32_4* %240 = OpAccessChain %21 %24 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpLoad %9 
                                         f32 %243 = OpDot %241 %242 
                                Private f32* %244 = OpAccessChain %200 %119 
                                                      OpStore %244 %243 
                              Uniform f32_4* %245 = OpAccessChain %21 %37 
                                       f32_4 %246 = OpLoad %245 
                                       f32_4 %247 = OpLoad %9 
                                         f32 %248 = OpDot %246 %247 
                                Private f32* %249 = OpAccessChain %200 %90 
                                                      OpStore %249 %248 
                              Uniform f32_4* %250 = OpAccessChain %21 %47 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %200 %167 
                                                      OpStore %254 %253 
                                       f32_4 %256 = OpLoad %45 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %200 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFAdd %257 %259 
                                                      OpStore vs_TEXCOORD4 %260 
                                 Output f32* %262 = OpAccessChain %94 %29 %90 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFNegate %263 
                                 Output f32* %265 = OpAccessChain %94 %29 %90 
                                                      OpStore %265 %264 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %59 = OpTypePointer Output %10 
                       Output f32_4* %60 = OpVariable Output 
                                 f32 %66 = OpConstant 3.674022E-40 
                                     %67 = OpTypeInt 32 0 
                                 u32 %68 = OpConstant 3 
                                     %69 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpLoad %43 
                               f32_3 %63 = OpFMul %61 %62 
                               f32_4 %64 = OpLoad %60 
                               f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                             OpStore %60 %65 
                         Output f32* %70 = OpAccessChain %60 %68 
                                             OpStore %70 %66 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat4 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %143 %165 %177 %181 %294 %301 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate vs_TEXCOORD4 Location 294 
                                                      OpDecorate %301 Flat 
                                                      OpDecorate %301 Location 301 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                         i32 %133 = OpConstant 9 
                               Output f32_4* %142 = OpVariable Output 
                                Input f32_4* %143 = OpVariable Input 
                                             %145 = OpTypePointer Private %23 
                                Private f32* %146 = OpVariable Private 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Uniform %23 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         u32 %157 = OpConstant 3 
                                       f32_2 %161 = OpConstantComposite %155 %155 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Input %75 
                                Input f32_3* %181 = OpVariable Input 
                                         u32 %205 = OpConstant 2 
                              Private f32_4* %207 = OpVariable Private 
                                             %246 = OpTypePointer Private %75 
                              Private f32_3* %247 = OpVariable Private 
                                         i32 %248 = OpConstant 4 
                                         i32 %254 = OpConstant 5 
                                         i32 %260 = OpConstant 6 
                                         i32 %266 = OpConstant 7 
                                         f32 %277 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %300 = OpTypePointer Output %31 
                                 Output u32* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %134 = OpAccessChain %94 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_2 %137 = OpFMul %132 %136 
                              Uniform f32_4* %138 = OpAccessChain %94 %133 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_2 %141 = OpFAdd %137 %140 
                                                      OpStore vs_TEXCOORD0 %141 
                                       f32_4 %144 = OpLoad %143 
                                                      OpStore %142 %144 
                                Private f32* %147 = OpAccessChain %26 %119 
                                         f32 %148 = OpLoad %147 
                                Uniform f32* %151 = OpAccessChain %94 %15 %149 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %148 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                         f32 %156 = OpFMul %154 %155 
                                Private f32* %158 = OpAccessChain %68 %157 
                                                      OpStore %158 %156 
                                       f32_4 %159 = OpLoad %26 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 3 
                                       f32_2 %162 = OpFMul %160 %161 
                                       f32_4 %163 = OpLoad %68 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 3 
                                                      OpStore %68 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %68 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %68 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %179 
                                       f32_3 %182 = OpLoad %181 
                                         i32 %183 = OpLoad %8 
                                         i32 %184 = OpSDiv %183 %42 
                              Uniform f32_4* %185 = OpAccessChain %40 %15 %184 %44 %15 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %182 %187 
                                Private f32* %189 = OpAccessChain %26 %149 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %181 
                                         i32 %191 = OpLoad %8 
                                         i32 %192 = OpSDiv %191 %42 
                              Uniform f32_4* %193 = OpAccessChain %40 %15 %192 %44 %44 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %26 %119 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %181 
                                         i32 %199 = OpLoad %8 
                                         i32 %200 = OpSDiv %199 %42 
                              Uniform f32_4* %201 = OpAccessChain %40 %15 %200 %44 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %206 = OpAccessChain %26 %205 
                                                      OpStore %206 %204 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_4 %210 = OpLoad %26 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %209 %211 
                                Private f32* %213 = OpAccessChain %207 %149 
                                                      OpStore %213 %212 
                                Private f32* %214 = OpAccessChain %207 %149 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 32 %215 
                                Private f32* %217 = OpAccessChain %207 %149 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %207 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 0 0 
                                       f32_4 %220 = OpLoad %26 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                       f32_4 %223 = OpLoad %207 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %207 %224 
                                Private f32* %225 = OpAccessChain %207 %119 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %207 %119 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %26 %149 
                                                      OpStore %230 %229 
                                Private f32* %231 = OpAccessChain %207 %149 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %207 %149 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                Private f32* %236 = OpAccessChain %26 %149 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFNegate %237 
                                         f32 %239 = OpFAdd %235 %238 
                                Private f32* %240 = OpAccessChain %26 %149 
                                                      OpStore %240 %239 
                                       f32_4 %241 = OpLoad %207 
                                       f32_4 %242 = OpVectorShuffle %241 %241 1 2 2 0 
                                       f32_4 %243 = OpLoad %207 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 1 2 2 
                                       f32_4 %245 = OpFMul %242 %244 
                                                      OpStore %68 %245 
                              Uniform f32_4* %249 = OpAccessChain %94 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %68 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %247 %149 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %94 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %68 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %247 %119 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %94 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %68 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %247 %205 
                                                      OpStore %265 %264 
                              Uniform f32_4* %267 = OpAccessChain %94 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %26 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 0 0 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_3 %273 = OpLoad %247 
                                       f32_3 %274 = OpFAdd %272 %273 
                                       f32_4 %275 = OpLoad %26 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %26 %276 
                                Private f32* %278 = OpAccessChain %207 %157 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %94 %44 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %207 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %68 %149 
                                                      OpStore %283 %282 
                              Uniform f32_4* %284 = OpAccessChain %94 %60 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpLoad %207 
                                         f32 %287 = OpDot %285 %286 
                                Private f32* %288 = OpAccessChain %68 %119 
                                                      OpStore %288 %287 
                              Uniform f32_4* %289 = OpAccessChain %94 %21 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpLoad %207 
                                         f32 %292 = OpDot %290 %291 
                                Private f32* %293 = OpAccessChain %68 %205 
                                                      OpStore %293 %292 
                                       f32_4 %295 = OpLoad %26 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %68 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFAdd %296 %298 
                                                      OpStore vs_TEXCOORD4 %299 
                                         i32 %302 = OpLoad %10 
                                         u32 %303 = OpBitcast %302 
                                                      OpStore %301 %303 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                                      OpStore %308 %307 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %59 = OpTypePointer Output %10 
                       Output f32_4* %60 = OpVariable Output 
                                 f32 %66 = OpConstant 3.674022E-40 
                                     %67 = OpTypeInt 32 0 
                                 u32 %68 = OpConstant 3 
                                     %69 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpLoad %43 
                               f32_3 %63 = OpFMul %61 %62 
                               f32_4 %64 = OpLoad %60 
                               f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                             OpStore %60 %65 
                         Output f32* %70 = OpAccessChain %60 %68 
                                             OpStore %70 %66 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %145 %146 %168 %180 %184 %313 %319 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %251 0 Offset 251 
                                                      OpMemberDecorate %251 1 Offset 251 
                                                      OpMemberDecorate %251 2 Offset 251 
                                                      OpMemberDecorate %251 3 Offset 251 
                                                      OpMemberDecorate %251 4 Offset 251 
                                                      OpMemberDecorate %251 5 Offset 251 
                                                      OpMemberDecorate %251 6 Offset 251 
                                                      OpDecorate %252 ArrayStride 252 
                                                      OpMemberDecorate %253 0 Offset 253 
                                                      OpDecorate %253 Block 
                                                      OpDecorate %255 DescriptorSet 255 
                                                      OpDecorate %255 Binding 255 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %319 Flat 
                                                      OpDecorate %319 Location 319 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_4* %145 = OpVariable Output 
                                Input f32_4* %146 = OpVariable Input 
                                             %148 = OpTypePointer Private %27 
                                Private f32* %149 = OpVariable Private 
                                         u32 %152 = OpConstant 0 
                                             %153 = OpTypePointer Uniform %27 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 3 
                                       f32_2 %164 = OpConstantComposite %158 %158 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %181 %181 %181 %181 
                                             %183 = OpTypePointer Input %79 
                                Input f32_3* %184 = OpVariable Input 
                                         u32 %208 = OpConstant 2 
                                             %210 = OpTypePointer Private %79 
                              Private f32_3* %211 = OpVariable Private 
                              Private f32_3* %250 = OpVariable Private 
                                             %251 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %252 = OpTypeArray %251 %40 
                                             %253 = OpTypeStruct %252 
                                             %254 = OpTypePointer Uniform %253 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %255 = OpVariable Uniform 
                                         i32 %265 = OpConstant 4 
                                         i32 %273 = OpConstant 5 
                                         i32 %281 = OpConstant 6 
                                         f32 %290 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %318 = OpTypePointer Output %35 
                                 Output u32* %319 = OpVariable Output 
                                             %322 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                       f32_4 %147 = OpLoad %146 
                                                      OpStore %145 %147 
                                Private f32* %150 = OpAccessChain %30 %123 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %154 = OpAccessChain %98 %15 %152 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %151 %155 
                                                      OpStore %149 %156 
                                         f32 %157 = OpLoad %149 
                                         f32 %159 = OpFMul %157 %158 
                                Private f32* %161 = OpAccessChain %72 %160 
                                                      OpStore %161 %159 
                                       f32_4 %162 = OpLoad %30 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 3 
                                       f32_2 %165 = OpFMul %163 %164 
                                       f32_4 %166 = OpLoad %72 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 3 
                                                      OpStore %72 %167 
                                       f32_4 %169 = OpLoad %30 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %72 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %72 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %182 
                                       f32_3 %185 = OpLoad %184 
                                         i32 %186 = OpLoad %20 
                                         i32 %187 = OpSDiv %186 %46 
                              Uniform f32_4* %188 = OpAccessChain %44 %15 %187 %48 %15 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %185 %190 
                                Private f32* %192 = OpAccessChain %30 %152 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %184 
                                         i32 %194 = OpLoad %20 
                                         i32 %195 = OpSDiv %194 %46 
                              Uniform f32_4* %196 = OpAccessChain %44 %15 %195 %48 %48 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                         f32 %199 = OpDot %193 %198 
                                Private f32* %200 = OpAccessChain %30 %123 
                                                      OpStore %200 %199 
                                       f32_3 %201 = OpLoad %184 
                                         i32 %202 = OpLoad %20 
                                         i32 %203 = OpSDiv %202 %46 
                              Uniform f32_4* %204 = OpAccessChain %44 %15 %203 %48 %64 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                         f32 %207 = OpDot %201 %206 
                                Private f32* %209 = OpAccessChain %30 %208 
                                                      OpStore %209 %207 
                                       f32_4 %212 = OpLoad %30 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %30 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                         f32 %216 = OpDot %213 %215 
                                Private f32* %217 = OpAccessChain %211 %152 
                                                      OpStore %217 %216 
                                Private f32* %218 = OpAccessChain %211 %152 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 32 %219 
                                Private f32* %221 = OpAccessChain %211 %152 
                                                      OpStore %221 %220 
                                       f32_3 %222 = OpLoad %211 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_4 %224 = OpLoad %30 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %30 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %30 %228 
                                Private f32* %229 = OpAccessChain %30 %123 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %30 %123 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %211 %152 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %30 %152 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %30 %152 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %211 %152 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %211 %152 
                                                      OpStore %244 %243 
                                       f32_4 %245 = OpLoad %30 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 2 2 0 
                                       f32_4 %247 = OpLoad %30 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %72 %249 
                                         i32 %256 = OpLoad %8 
                                         i32 %257 = OpSDiv %256 %25 
                              Uniform f32_4* %258 = OpAccessChain %255 %15 %257 %22 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %72 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %250 %152 
                                                      OpStore %262 %261 
                                         i32 %263 = OpLoad %8 
                                         i32 %264 = OpSDiv %263 %25 
                              Uniform f32_4* %266 = OpAccessChain %255 %15 %264 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpLoad %72 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %250 %123 
                                                      OpStore %270 %269 
                                         i32 %271 = OpLoad %8 
                                         i32 %272 = OpSDiv %271 %25 
                              Uniform f32_4* %274 = OpAccessChain %255 %15 %272 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %72 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %250 %208 
                                                      OpStore %278 %277 
                                         i32 %279 = OpLoad %8 
                                         i32 %280 = OpSDiv %279 %25 
                              Uniform f32_4* %282 = OpAccessChain %255 %15 %280 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpLoad %211 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 0 0 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_3 %288 = OpLoad %250 
                                       f32_3 %289 = OpFAdd %287 %288 
                                                      OpStore %211 %289 
                                Private f32* %291 = OpAccessChain %30 %160 
                                                      OpStore %291 %290 
                                         i32 %292 = OpLoad %8 
                                         i32 %293 = OpSDiv %292 %25 
                              Uniform f32_4* %294 = OpAccessChain %255 %15 %293 %15 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %30 
                                         f32 %297 = OpDot %295 %296 
                                Private f32* %298 = OpAccessChain %72 %152 
                                                      OpStore %298 %297 
                                         i32 %299 = OpLoad %8 
                                         i32 %300 = OpSDiv %299 %25 
                              Uniform f32_4* %301 = OpAccessChain %255 %15 %300 %48 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %30 
                                         f32 %304 = OpDot %302 %303 
                                Private f32* %305 = OpAccessChain %72 %123 
                                                      OpStore %305 %304 
                                         i32 %306 = OpLoad %8 
                                         i32 %307 = OpSDiv %306 %25 
                              Uniform f32_4* %308 = OpAccessChain %255 %15 %307 %64 
                                       f32_4 %309 = OpLoad %308 
                                       f32_4 %310 = OpLoad %30 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %72 %208 
                                                      OpStore %312 %311 
                                       f32_3 %314 = OpLoad %211 
                                       f32_4 %315 = OpLoad %72 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                                      OpStore vs_TEXCOORD4 %317 
                                         i32 %320 = OpLoad %10 
                                         u32 %321 = OpBitcast %320 
                                                      OpStore %319 %321 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 72
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %60 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpDecorate %60 Location 60 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %59 = OpTypePointer Output %10 
                       Output f32_4* %60 = OpVariable Output 
                                 f32 %66 = OpConstant 3.674022E-40 
                                     %67 = OpTypeInt 32 0 
                                 u32 %68 = OpConstant 3 
                                     %69 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %61 = OpLoad %9 
                               f32_3 %62 = OpLoad %43 
                               f32_3 %63 = OpFMul %61 %62 
                               f32_4 %64 = OpLoad %60 
                               f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                             OpStore %60 %65 
                         Output f32* %70 = OpAccessChain %60 %68 
                                             OpStore %70 %66 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat4 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %129 %130 %142 %143 %165 %177 %181 %294 %301 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 129 
                                                      OpDecorate %130 Location 130 
                                                      OpDecorate %142 Location 142 
                                                      OpDecorate %143 Location 143 
                                                      OpDecorate vs_TEXCOORD2 Location 165 
                                                      OpDecorate vs_TEXCOORD3 Location 177 
                                                      OpDecorate %181 Location 181 
                                                      OpDecorate vs_TEXCOORD4 Location 294 
                                                      OpDecorate %301 Flat 
                                                      OpDecorate %301 Location 301 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypeVector %23 2 
                                             %128 = OpTypePointer Output %127 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %130 = OpVariable Input 
                                         i32 %133 = OpConstant 9 
                               Output f32_4* %142 = OpVariable Output 
                                Input f32_4* %143 = OpVariable Input 
                                             %145 = OpTypePointer Private %23 
                                Private f32* %146 = OpVariable Private 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Uniform %23 
                                         f32 %155 = OpConstant 3.674022E-40 
                                         u32 %157 = OpConstant 3 
                                       f32_2 %161 = OpConstantComposite %155 %155 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %178 = OpConstant 3.674022E-40 
                                       f32_4 %179 = OpConstantComposite %178 %178 %178 %178 
                                             %180 = OpTypePointer Input %75 
                                Input f32_3* %181 = OpVariable Input 
                                         u32 %205 = OpConstant 2 
                              Private f32_4* %207 = OpVariable Private 
                                             %246 = OpTypePointer Private %75 
                              Private f32_3* %247 = OpVariable Private 
                                         i32 %248 = OpConstant 4 
                                         i32 %254 = OpConstant 5 
                                         i32 %260 = OpConstant 6 
                                         i32 %266 = OpConstant 7 
                                         f32 %277 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %300 = OpTypePointer Output %31 
                                 Output u32* %301 = OpVariable Output 
                                             %304 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                       f32_4 %131 = OpLoad %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              Uniform f32_4* %134 = OpAccessChain %94 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_2 %137 = OpFMul %132 %136 
                              Uniform f32_4* %138 = OpAccessChain %94 %133 
                                       f32_4 %139 = OpLoad %138 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_2 %141 = OpFAdd %137 %140 
                                                      OpStore vs_TEXCOORD0 %141 
                                       f32_4 %144 = OpLoad %143 
                                                      OpStore %142 %144 
                                Private f32* %147 = OpAccessChain %26 %119 
                                         f32 %148 = OpLoad %147 
                                Uniform f32* %151 = OpAccessChain %94 %15 %149 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %148 %152 
                                                      OpStore %146 %153 
                                         f32 %154 = OpLoad %146 
                                         f32 %156 = OpFMul %154 %155 
                                Private f32* %158 = OpAccessChain %68 %157 
                                                      OpStore %158 %156 
                                       f32_4 %159 = OpLoad %26 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 3 
                                       f32_2 %162 = OpFMul %160 %161 
                                       f32_4 %163 = OpLoad %68 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 1 5 3 
                                                      OpStore %68 %164 
                                       f32_4 %166 = OpLoad %26 
                                       f32_2 %167 = OpVectorShuffle %166 %166 2 3 
                                       f32_4 %168 = OpLoad vs_TEXCOORD2 
                                       f32_4 %169 = OpVectorShuffle %168 %167 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %169 
                                       f32_4 %170 = OpLoad %68 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 2 
                                       f32_4 %172 = OpLoad %68 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 3 
                                       f32_2 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad vs_TEXCOORD2 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %176 
                                                      OpStore vs_TEXCOORD3 %179 
                                       f32_3 %182 = OpLoad %181 
                                         i32 %183 = OpLoad %8 
                                         i32 %184 = OpSDiv %183 %42 
                              Uniform f32_4* %185 = OpAccessChain %40 %15 %184 %44 %15 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                         f32 %188 = OpDot %182 %187 
                                Private f32* %189 = OpAccessChain %26 %149 
                                                      OpStore %189 %188 
                                       f32_3 %190 = OpLoad %181 
                                         i32 %191 = OpLoad %8 
                                         i32 %192 = OpSDiv %191 %42 
                              Uniform f32_4* %193 = OpAccessChain %40 %15 %192 %44 %44 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %26 %119 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %181 
                                         i32 %199 = OpLoad %8 
                                         i32 %200 = OpSDiv %199 %42 
                              Uniform f32_4* %201 = OpAccessChain %40 %15 %200 %44 %60 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %206 = OpAccessChain %26 %205 
                                                      OpStore %206 %204 
                                       f32_4 %208 = OpLoad %26 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_4 %210 = OpLoad %26 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %209 %211 
                                Private f32* %213 = OpAccessChain %207 %149 
                                                      OpStore %213 %212 
                                Private f32* %214 = OpAccessChain %207 %149 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 32 %215 
                                Private f32* %217 = OpAccessChain %207 %149 
                                                      OpStore %217 %216 
                                       f32_4 %218 = OpLoad %207 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 0 0 
                                       f32_4 %220 = OpLoad %26 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                       f32_4 %223 = OpLoad %207 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %207 %224 
                                Private f32* %225 = OpAccessChain %207 %119 
                                         f32 %226 = OpLoad %225 
                                Private f32* %227 = OpAccessChain %207 %119 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %26 %149 
                                                      OpStore %230 %229 
                                Private f32* %231 = OpAccessChain %207 %149 
                                         f32 %232 = OpLoad %231 
                                Private f32* %233 = OpAccessChain %207 %149 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                Private f32* %236 = OpAccessChain %26 %149 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFNegate %237 
                                         f32 %239 = OpFAdd %235 %238 
                                Private f32* %240 = OpAccessChain %26 %149 
                                                      OpStore %240 %239 
                                       f32_4 %241 = OpLoad %207 
                                       f32_4 %242 = OpVectorShuffle %241 %241 1 2 2 0 
                                       f32_4 %243 = OpLoad %207 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 1 2 2 
                                       f32_4 %245 = OpFMul %242 %244 
                                                      OpStore %68 %245 
                              Uniform f32_4* %249 = OpAccessChain %94 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %68 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %247 %149 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %94 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %68 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %247 %119 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %94 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_4 %263 = OpLoad %68 
                                         f32 %264 = OpDot %262 %263 
                                Private f32* %265 = OpAccessChain %247 %205 
                                                      OpStore %265 %264 
                              Uniform f32_4* %267 = OpAccessChain %94 %266 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %26 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 0 0 
                                       f32_3 %272 = OpFMul %269 %271 
                                       f32_3 %273 = OpLoad %247 
                                       f32_3 %274 = OpFAdd %272 %273 
                                       f32_4 %275 = OpLoad %26 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %26 %276 
                                Private f32* %278 = OpAccessChain %207 %157 
                                                      OpStore %278 %277 
                              Uniform f32_4* %279 = OpAccessChain %94 %44 
                                       f32_4 %280 = OpLoad %279 
                                       f32_4 %281 = OpLoad %207 
                                         f32 %282 = OpDot %280 %281 
                                Private f32* %283 = OpAccessChain %68 %149 
                                                      OpStore %283 %282 
                              Uniform f32_4* %284 = OpAccessChain %94 %60 
                                       f32_4 %285 = OpLoad %284 
                                       f32_4 %286 = OpLoad %207 
                                         f32 %287 = OpDot %285 %286 
                                Private f32* %288 = OpAccessChain %68 %119 
                                                      OpStore %288 %287 
                              Uniform f32_4* %289 = OpAccessChain %94 %21 
                                       f32_4 %290 = OpLoad %289 
                                       f32_4 %291 = OpLoad %207 
                                         f32 %292 = OpDot %290 %291 
                                Private f32* %293 = OpAccessChain %68 %205 
                                                      OpStore %293 %292 
                                       f32_4 %295 = OpLoad %26 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_4 %297 = OpLoad %68 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFAdd %296 %298 
                                                      OpStore vs_TEXCOORD4 %299 
                                         i32 %302 = OpLoad %10 
                                         u32 %303 = OpBitcast %302 
                                                      OpStore %301 %303 
                                 Output f32* %305 = OpAccessChain %123 %15 %119 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFNegate %306 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                                      OpStore %308 %307 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %57 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpDecorate %57 Location 57 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %56 = OpTypePointer Output %10 
                       Output f32_4* %57 = OpVariable Output 
                                 f32 %63 = OpConstant 3.674022E-40 
                                     %64 = OpTypeInt 32 0 
                                 u32 %65 = OpConstant 3 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %58 = OpLoad %9 
                               f32_3 %59 = OpLoad %40 
                               f32_3 %60 = OpFMul %58 %59 
                               f32_4 %61 = OpLoad %57 
                               f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                             OpStore %57 %62 
                         Output f32* %67 = OpAccessChain %57 %65 
                                             OpStore %67 %63 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat8 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 328
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %133 %134 %145 %146 %168 %180 %184 %313 %319 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 133 
                                                      OpDecorate %134 Location 134 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %251 0 Offset 251 
                                                      OpMemberDecorate %251 1 Offset 251 
                                                      OpMemberDecorate %251 2 Offset 251 
                                                      OpMemberDecorate %251 3 Offset 251 
                                                      OpMemberDecorate %251 4 Offset 251 
                                                      OpMemberDecorate %251 5 Offset 251 
                                                      OpMemberDecorate %251 6 Offset 251 
                                                      OpDecorate %252 ArrayStride 252 
                                                      OpMemberDecorate %253 0 Offset 253 
                                                      OpDecorate %253 Block 
                                                      OpDecorate %255 DescriptorSet 255 
                                                      OpDecorate %255 Binding 255 
                                                      OpDecorate vs_TEXCOORD4 Location 313 
                                                      OpDecorate %319 Flat 
                                                      OpDecorate %319 Location 319 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypeVector %27 2 
                                             %132 = OpTypePointer Output %131 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %134 = OpVariable Input 
                               Output f32_4* %145 = OpVariable Output 
                                Input f32_4* %146 = OpVariable Input 
                                             %148 = OpTypePointer Private %27 
                                Private f32* %149 = OpVariable Private 
                                         u32 %152 = OpConstant 0 
                                             %153 = OpTypePointer Uniform %27 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         u32 %160 = OpConstant 3 
                                       f32_2 %164 = OpConstantComposite %158 %158 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %181 = OpConstant 3.674022E-40 
                                       f32_4 %182 = OpConstantComposite %181 %181 %181 %181 
                                             %183 = OpTypePointer Input %79 
                                Input f32_3* %184 = OpVariable Input 
                                         u32 %208 = OpConstant 2 
                                             %210 = OpTypePointer Private %79 
                              Private f32_3* %211 = OpVariable Private 
                              Private f32_3* %250 = OpVariable Private 
                                             %251 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %252 = OpTypeArray %251 %40 
                                             %253 = OpTypeStruct %252 
                                             %254 = OpTypePointer Uniform %253 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %255 = OpVariable Uniform 
                                         i32 %265 = OpConstant 4 
                                         i32 %273 = OpConstant 5 
                                         i32 %281 = OpConstant 6 
                                         f32 %290 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %318 = OpTypePointer Output %35 
                                 Output u32* %319 = OpVariable Output 
                                             %322 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                       f32_4 %135 = OpLoad %134 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %98 %64 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 0 1 
                                       f32_2 %140 = OpFMul %136 %139 
                              Uniform f32_4* %141 = OpAccessChain %98 %64 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 2 3 
                                       f32_2 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD0 %144 
                                       f32_4 %147 = OpLoad %146 
                                                      OpStore %145 %147 
                                Private f32* %150 = OpAccessChain %30 %123 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %154 = OpAccessChain %98 %15 %152 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFMul %151 %155 
                                                      OpStore %149 %156 
                                         f32 %157 = OpLoad %149 
                                         f32 %159 = OpFMul %157 %158 
                                Private f32* %161 = OpAccessChain %72 %160 
                                                      OpStore %161 %159 
                                       f32_4 %162 = OpLoad %30 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 3 
                                       f32_2 %165 = OpFMul %163 %164 
                                       f32_4 %166 = OpLoad %72 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 3 
                                                      OpStore %72 %167 
                                       f32_4 %169 = OpLoad %30 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %72 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %72 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %182 
                                       f32_3 %185 = OpLoad %184 
                                         i32 %186 = OpLoad %20 
                                         i32 %187 = OpSDiv %186 %46 
                              Uniform f32_4* %188 = OpAccessChain %44 %15 %187 %48 %15 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                         f32 %191 = OpDot %185 %190 
                                Private f32* %192 = OpAccessChain %30 %152 
                                                      OpStore %192 %191 
                                       f32_3 %193 = OpLoad %184 
                                         i32 %194 = OpLoad %20 
                                         i32 %195 = OpSDiv %194 %46 
                              Uniform f32_4* %196 = OpAccessChain %44 %15 %195 %48 %48 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                         f32 %199 = OpDot %193 %198 
                                Private f32* %200 = OpAccessChain %30 %123 
                                                      OpStore %200 %199 
                                       f32_3 %201 = OpLoad %184 
                                         i32 %202 = OpLoad %20 
                                         i32 %203 = OpSDiv %202 %46 
                              Uniform f32_4* %204 = OpAccessChain %44 %15 %203 %48 %64 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                         f32 %207 = OpDot %201 %206 
                                Private f32* %209 = OpAccessChain %30 %208 
                                                      OpStore %209 %207 
                                       f32_4 %212 = OpLoad %30 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %30 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                         f32 %216 = OpDot %213 %215 
                                Private f32* %217 = OpAccessChain %211 %152 
                                                      OpStore %217 %216 
                                Private f32* %218 = OpAccessChain %211 %152 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 32 %219 
                                Private f32* %221 = OpAccessChain %211 %152 
                                                      OpStore %221 %220 
                                       f32_3 %222 = OpLoad %211 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_4 %224 = OpLoad %30 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %30 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %30 %228 
                                Private f32* %229 = OpAccessChain %30 %123 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %30 %123 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %211 %152 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %30 %152 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %30 %152 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %211 %152 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %211 %152 
                                                      OpStore %244 %243 
                                       f32_4 %245 = OpLoad %30 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 2 2 0 
                                       f32_4 %247 = OpLoad %30 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %72 %249 
                                         i32 %256 = OpLoad %8 
                                         i32 %257 = OpSDiv %256 %25 
                              Uniform f32_4* %258 = OpAccessChain %255 %15 %257 %22 
                                       f32_4 %259 = OpLoad %258 
                                       f32_4 %260 = OpLoad %72 
                                         f32 %261 = OpDot %259 %260 
                                Private f32* %262 = OpAccessChain %250 %152 
                                                      OpStore %262 %261 
                                         i32 %263 = OpLoad %8 
                                         i32 %264 = OpSDiv %263 %25 
                              Uniform f32_4* %266 = OpAccessChain %255 %15 %264 %265 
                                       f32_4 %267 = OpLoad %266 
                                       f32_4 %268 = OpLoad %72 
                                         f32 %269 = OpDot %267 %268 
                                Private f32* %270 = OpAccessChain %250 %123 
                                                      OpStore %270 %269 
                                         i32 %271 = OpLoad %8 
                                         i32 %272 = OpSDiv %271 %25 
                              Uniform f32_4* %274 = OpAccessChain %255 %15 %272 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_4 %276 = OpLoad %72 
                                         f32 %277 = OpDot %275 %276 
                                Private f32* %278 = OpAccessChain %250 %208 
                                                      OpStore %278 %277 
                                         i32 %279 = OpLoad %8 
                                         i32 %280 = OpSDiv %279 %25 
                              Uniform f32_4* %282 = OpAccessChain %255 %15 %280 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpLoad %211 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 0 0 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_3 %288 = OpLoad %250 
                                       f32_3 %289 = OpFAdd %287 %288 
                                                      OpStore %211 %289 
                                Private f32* %291 = OpAccessChain %30 %160 
                                                      OpStore %291 %290 
                                         i32 %292 = OpLoad %8 
                                         i32 %293 = OpSDiv %292 %25 
                              Uniform f32_4* %294 = OpAccessChain %255 %15 %293 %15 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %30 
                                         f32 %297 = OpDot %295 %296 
                                Private f32* %298 = OpAccessChain %72 %152 
                                                      OpStore %298 %297 
                                         i32 %299 = OpLoad %8 
                                         i32 %300 = OpSDiv %299 %25 
                              Uniform f32_4* %301 = OpAccessChain %255 %15 %300 %48 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %30 
                                         f32 %304 = OpDot %302 %303 
                                Private f32* %305 = OpAccessChain %72 %123 
                                                      OpStore %305 %304 
                                         i32 %306 = OpLoad %8 
                                         i32 %307 = OpSDiv %306 %25 
                              Uniform f32_4* %308 = OpAccessChain %255 %15 %307 %64 
                                       f32_4 %309 = OpLoad %308 
                                       f32_4 %310 = OpLoad %30 
                                         f32 %311 = OpDot %309 %310 
                                Private f32* %312 = OpAccessChain %72 %208 
                                                      OpStore %312 %311 
                                       f32_3 %314 = OpLoad %211 
                                       f32_4 %315 = OpLoad %72 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %317 = OpFAdd %314 %316 
                                                      OpStore vs_TEXCOORD4 %317 
                                         i32 %320 = OpLoad %10 
                                         u32 %321 = OpBitcast %320 
                                                      OpStore %319 %321 
                                 Output f32* %323 = OpAccessChain %127 %15 %123 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                                      OpStore %326 %325 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %57 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpDecorate %57 Location 57 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %56 = OpTypePointer Output %10 
                       Output f32_4* %57 = OpVariable Output 
                                 f32 %63 = OpConstant 3.674022E-40 
                                     %64 = OpTypeInt 32 0 
                                 u32 %65 = OpConstant 3 
                                     %66 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %58 = OpLoad %9 
                               f32_3 %59 = OpLoad %40 
                               f32_3 %60 = OpFMul %58 %59 
                               f32_4 %61 = OpLoad %57 
                               f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                             OpStore %57 %62 
                         Output f32* %67 = OpAccessChain %57 %65 
                                             OpStore %67 %63 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %152 %153 %168 %180 %183 %287 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 287 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                               Output f32_4* %152 = OpVariable Output 
                                Input f32_4* %153 = OpVariable Input 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_3 %164 = OpConstantComposite %163 %163 %163 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %181 = OpConstantComposite %122 %122 %122 %122 
                                             %182 = OpTypePointer Input %51 
                                Input f32_3* %183 = OpVariable Input 
                                         i32 %185 = OpConstant 9 
                                Private f32* %203 = OpVariable Private 
                              Private f32_4* %234 = OpVariable Private 
                                             %240 = OpTypePointer Private %51 
                              Private f32_3* %241 = OpVariable Private 
                                         i32 %242 = OpConstant 4 
                                         i32 %248 = OpConstant 5 
                                         i32 %254 = OpConstant 6 
                                         i32 %260 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_4 %154 = OpLoad %153 
                                                      OpStore %152 %154 
                                Private f32* %155 = OpAccessChain %9 %90 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %21 %29 %106 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %9 %90 
                                                      OpStore %160 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 3 1 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %45 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 6 
                                                      OpStore %45 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %45 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %45 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                              Uniform f32_4* %186 = OpAccessChain %21 %185 %29 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %9 %106 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %183 
                              Uniform f32_4* %192 = OpAccessChain %21 %185 %24 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %191 %194 
                                Private f32* %196 = OpAccessChain %9 %90 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %183 
                              Uniform f32_4* %198 = OpAccessChain %21 %185 %37 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %202 = OpAccessChain %9 %98 
                                                      OpStore %202 %201 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                Private f32* %218 = OpAccessChain %9 %90 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %9 %90 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %45 %106 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %106 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %9 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %45 %106 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %228 %231 
                                Private f32* %233 = OpAccessChain %45 %106 
                                                      OpStore %233 %232 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 1 2 2 0 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpVectorShuffle %237 %237 0 1 2 2 
                                       f32_4 %239 = OpFMul %236 %238 
                                                      OpStore %234 %239 
                              Uniform f32_4* %243 = OpAccessChain %21 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %234 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %241 %106 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %21 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %234 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %241 %90 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %21 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %234 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %241 %98 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %21 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %45 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %241 
                                       f32_3 %268 = OpFAdd %266 %267 
                                       f32_4 %269 = OpLoad %45 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %45 %270 
                                Private f32* %271 = OpAccessChain %9 %133 
                                                      OpStore %271 %111 
                              Uniform f32_4* %272 = OpAccessChain %21 %24 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %9 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %234 %106 
                                                      OpStore %276 %275 
                              Uniform f32_4* %277 = OpAccessChain %21 %37 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpLoad %9 
                                         f32 %280 = OpDot %278 %279 
                                Private f32* %281 = OpAccessChain %234 %90 
                                                      OpStore %281 %280 
                              Uniform f32_4* %282 = OpAccessChain %21 %47 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %9 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %234 %98 
                                                      OpStore %286 %285 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_4 %290 = OpLoad %234 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                                      OpStore vs_TEXCOORD4 %292 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFNegate %294 
                                 Output f32* %296 = OpAccessChain %94 %29 %90 
                                                      OpStore %296 %295 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 99
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %76 %83 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpMemberDecorate %62 0 Offset 62 
                                             OpDecorate %62 Block 
                                             OpDecorate %64 DescriptorSet 64 
                                             OpDecorate %64 Binding 64 
                                             OpDecorate vs_TEXCOORD5 Location 76 
                                             OpDecorate %83 Location 83 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %62 = OpTypeStruct %10 
                                     %63 = OpTypePointer Uniform %62 
            Uniform struct {f32_4;}* %64 = OpVariable Uniform 
                                     %65 = OpTypeInt 32 1 
                                 i32 %66 = OpConstant 0 
                                     %67 = OpTypePointer Uniform %10 
                                     %73 = OpTypePointer Private %6 
                        Private f32* %74 = OpVariable Private 
                                     %75 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 f32 %80 = OpConstant 3.674022E-40 
                                     %82 = OpTypePointer Output %10 
                       Output f32_4* %83 = OpVariable Output 
                                     %94 = OpTypeInt 32 0 
                                 u32 %95 = OpConstant 3 
                                     %96 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %59 = OpLoad %43 
                               f32_3 %60 = OpLoad %9 
                               f32_3 %61 = OpFMul %59 %60 
                      Uniform f32_4* %68 = OpAccessChain %64 %66 
                               f32_4 %69 = OpLoad %68 
                               f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               f32_3 %71 = OpFNegate %70 
                               f32_3 %72 = OpFAdd %61 %71 
                                             OpStore %9 %72 
                                 f32 %77 = OpLoad vs_TEXCOORD5 
                                             OpStore %74 %77 
                                 f32 %78 = OpLoad %74 
                                 f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                             OpStore %74 %81 
                                 f32 %84 = OpLoad %74 
                               f32_3 %85 = OpCompositeConstruct %84 %84 %84 
                               f32_3 %86 = OpLoad %9 
                               f32_3 %87 = OpFMul %85 %86 
                      Uniform f32_4* %88 = OpAccessChain %64 %66 
                               f32_4 %89 = OpLoad %88 
                               f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                               f32_3 %91 = OpFAdd %87 %90 
                               f32_4 %92 = OpLoad %83 
                               f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                             OpStore %83 %93 
                         Output f32* %97 = OpAccessChain %83 %95 
                                             OpStore %97 %80 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %152 %153 %168 %180 %183 %287 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 287 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                               Output f32_4* %152 = OpVariable Output 
                                Input f32_4* %153 = OpVariable Input 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_3 %164 = OpConstantComposite %163 %163 %163 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %181 = OpConstantComposite %122 %122 %122 %122 
                                             %182 = OpTypePointer Input %51 
                                Input f32_3* %183 = OpVariable Input 
                                         i32 %185 = OpConstant 9 
                                Private f32* %203 = OpVariable Private 
                              Private f32_4* %234 = OpVariable Private 
                                             %240 = OpTypePointer Private %51 
                              Private f32_3* %241 = OpVariable Private 
                                         i32 %242 = OpConstant 4 
                                         i32 %248 = OpConstant 5 
                                         i32 %254 = OpConstant 6 
                                         i32 %260 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_4 %154 = OpLoad %153 
                                                      OpStore %152 %154 
                                Private f32* %155 = OpAccessChain %9 %90 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %21 %29 %106 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %9 %90 
                                                      OpStore %160 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 3 1 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %45 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 6 
                                                      OpStore %45 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %45 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %45 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                              Uniform f32_4* %186 = OpAccessChain %21 %185 %29 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %9 %106 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %183 
                              Uniform f32_4* %192 = OpAccessChain %21 %185 %24 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %191 %194 
                                Private f32* %196 = OpAccessChain %9 %90 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %183 
                              Uniform f32_4* %198 = OpAccessChain %21 %185 %37 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %202 = OpAccessChain %9 %98 
                                                      OpStore %202 %201 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                Private f32* %218 = OpAccessChain %9 %90 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %9 %90 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %45 %106 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %106 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %9 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %45 %106 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %228 %231 
                                Private f32* %233 = OpAccessChain %45 %106 
                                                      OpStore %233 %232 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 1 2 2 0 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpVectorShuffle %237 %237 0 1 2 2 
                                       f32_4 %239 = OpFMul %236 %238 
                                                      OpStore %234 %239 
                              Uniform f32_4* %243 = OpAccessChain %21 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %234 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %241 %106 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %21 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %234 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %241 %90 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %21 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %234 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %241 %98 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %21 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %45 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %241 
                                       f32_3 %268 = OpFAdd %266 %267 
                                       f32_4 %269 = OpLoad %45 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %45 %270 
                                Private f32* %271 = OpAccessChain %9 %133 
                                                      OpStore %271 %111 
                              Uniform f32_4* %272 = OpAccessChain %21 %24 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %9 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %234 %106 
                                                      OpStore %276 %275 
                              Uniform f32_4* %277 = OpAccessChain %21 %37 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpLoad %9 
                                         f32 %280 = OpDot %278 %279 
                                Private f32* %281 = OpAccessChain %234 %90 
                                                      OpStore %281 %280 
                              Uniform f32_4* %282 = OpAccessChain %21 %47 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %9 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %234 %98 
                                                      OpStore %286 %285 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_4 %290 = OpLoad %234 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                                      OpStore vs_TEXCOORD4 %292 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFNegate %294 
                                 Output f32* %296 = OpAccessChain %94 %29 %90 
                                                      OpStore %296 %295 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 99
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %76 %83 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate vs_TEXCOORD0 Location 50 
                                             OpDecorate %55 Location 55 
                                             OpMemberDecorate %62 0 Offset 62 
                                             OpDecorate %62 Block 
                                             OpDecorate %64 DescriptorSet 64 
                                             OpDecorate %64 Binding 64 
                                             OpDecorate vs_TEXCOORD5 Location 76 
                                             OpDecorate %83 Location 83 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %49 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %55 = OpVariable Input 
                                     %62 = OpTypeStruct %10 
                                     %63 = OpTypePointer Uniform %62 
            Uniform struct {f32_4;}* %64 = OpVariable Uniform 
                                     %65 = OpTypeInt 32 1 
                                 i32 %66 = OpConstant 0 
                                     %67 = OpTypePointer Uniform %10 
                                     %73 = OpTypePointer Private %6 
                        Private f32* %74 = OpVariable Private 
                                     %75 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %79 = OpConstant 3.674022E-40 
                                 f32 %80 = OpConstant 3.674022E-40 
                                     %82 = OpTypePointer Output %10 
                       Output f32_4* %83 = OpVariable Output 
                                     %94 = OpTypeInt 32 0 
                                 u32 %95 = OpConstant 3 
                                     %96 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpExtInst %1 30 %35 
                                             OpStore %9 %36 
                               f32_3 %37 = OpLoad %9 
                               f32_3 %38 = OpFNegate %37 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFAdd %38 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %51 = OpLoad vs_TEXCOORD0 
                               f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                               f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                             OpStore %43 %53 
                               f32_3 %54 = OpLoad %43 
                               f32_4 %56 = OpLoad %55 
                               f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               f32_3 %58 = OpFMul %54 %57 
                                             OpStore %43 %58 
                               f32_3 %59 = OpLoad %43 
                               f32_3 %60 = OpLoad %9 
                               f32_3 %61 = OpFMul %59 %60 
                      Uniform f32_4* %68 = OpAccessChain %64 %66 
                               f32_4 %69 = OpLoad %68 
                               f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               f32_3 %71 = OpFNegate %70 
                               f32_3 %72 = OpFAdd %61 %71 
                                             OpStore %9 %72 
                                 f32 %77 = OpLoad vs_TEXCOORD5 
                                             OpStore %74 %77 
                                 f32 %78 = OpLoad %74 
                                 f32 %81 = OpExtInst %1 43 %78 %79 %80 
                                             OpStore %74 %81 
                                 f32 %84 = OpLoad %74 
                               f32_3 %85 = OpCompositeConstruct %84 %84 %84 
                               f32_3 %86 = OpLoad %9 
                               f32_3 %87 = OpFMul %85 %86 
                      Uniform f32_4* %88 = OpAccessChain %64 %66 
                               f32_4 %89 = OpLoad %88 
                               f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                               f32_3 %91 = OpFAdd %87 %90 
                               f32_4 %92 = OpLoad %83 
                               f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                             OpStore %83 %93 
                         Output f32* %97 = OpAccessChain %83 %95 
                                             OpStore %97 %80 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %152 %153 %168 %180 %183 %287 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 287 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                               Output f32_4* %152 = OpVariable Output 
                                Input f32_4* %153 = OpVariable Input 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_3 %164 = OpConstantComposite %163 %163 %163 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %181 = OpConstantComposite %122 %122 %122 %122 
                                             %182 = OpTypePointer Input %51 
                                Input f32_3* %183 = OpVariable Input 
                                         i32 %185 = OpConstant 9 
                                Private f32* %203 = OpVariable Private 
                              Private f32_4* %234 = OpVariable Private 
                                             %240 = OpTypePointer Private %51 
                              Private f32_3* %241 = OpVariable Private 
                                         i32 %242 = OpConstant 4 
                                         i32 %248 = OpConstant 5 
                                         i32 %254 = OpConstant 6 
                                         i32 %260 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_4 %154 = OpLoad %153 
                                                      OpStore %152 %154 
                                Private f32* %155 = OpAccessChain %9 %90 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %21 %29 %106 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %9 %90 
                                                      OpStore %160 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 3 1 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %45 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 6 
                                                      OpStore %45 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %45 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %45 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                              Uniform f32_4* %186 = OpAccessChain %21 %185 %29 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %9 %106 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %183 
                              Uniform f32_4* %192 = OpAccessChain %21 %185 %24 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %191 %194 
                                Private f32* %196 = OpAccessChain %9 %90 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %183 
                              Uniform f32_4* %198 = OpAccessChain %21 %185 %37 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %202 = OpAccessChain %9 %98 
                                                      OpStore %202 %201 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                Private f32* %218 = OpAccessChain %9 %90 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %9 %90 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %45 %106 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %106 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %9 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %45 %106 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %228 %231 
                                Private f32* %233 = OpAccessChain %45 %106 
                                                      OpStore %233 %232 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 1 2 2 0 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpVectorShuffle %237 %237 0 1 2 2 
                                       f32_4 %239 = OpFMul %236 %238 
                                                      OpStore %234 %239 
                              Uniform f32_4* %243 = OpAccessChain %21 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %234 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %241 %106 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %21 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %234 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %241 %90 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %21 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %234 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %241 %98 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %21 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %45 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %241 
                                       f32_3 %268 = OpFAdd %266 %267 
                                       f32_4 %269 = OpLoad %45 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %45 %270 
                                Private f32* %271 = OpAccessChain %9 %133 
                                                      OpStore %271 %111 
                              Uniform f32_4* %272 = OpAccessChain %21 %24 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %9 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %234 %106 
                                                      OpStore %276 %275 
                              Uniform f32_4* %277 = OpAccessChain %21 %37 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpLoad %9 
                                         f32 %280 = OpDot %278 %279 
                                Private f32* %281 = OpAccessChain %234 %90 
                                                      OpStore %281 %280 
                              Uniform f32_4* %282 = OpAccessChain %21 %47 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %9 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %234 %98 
                                                      OpStore %286 %285 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_4 %290 = OpLoad %234 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                                      OpStore vs_TEXCOORD4 %292 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFNegate %294 
                                 Output f32* %296 = OpAccessChain %94 %29 %90 
                                                      OpStore %296 %295 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 96
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %73 %80 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpMemberDecorate %59 0 Offset 59 
                                             OpDecorate %59 Block 
                                             OpDecorate %61 DescriptorSet 61 
                                             OpDecorate %61 Binding 61 
                                             OpDecorate vs_TEXCOORD5 Location 73 
                                             OpDecorate %80 Location 80 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %59 = OpTypeStruct %10 
                                     %60 = OpTypePointer Uniform %59 
            Uniform struct {f32_4;}* %61 = OpVariable Uniform 
                                     %62 = OpTypeInt 32 1 
                                 i32 %63 = OpConstant 0 
                                     %64 = OpTypePointer Uniform %10 
                                     %70 = OpTypePointer Private %6 
                        Private f32* %71 = OpVariable Private 
                                     %72 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                                     %79 = OpTypePointer Output %10 
                       Output f32_4* %80 = OpVariable Output 
                                     %91 = OpTypeInt 32 0 
                                 u32 %92 = OpConstant 3 
                                     %93 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %56 = OpLoad %40 
                               f32_3 %57 = OpLoad %9 
                               f32_3 %58 = OpFMul %56 %57 
                      Uniform f32_4* %65 = OpAccessChain %61 %63 
                               f32_4 %66 = OpLoad %65 
                               f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                               f32_3 %68 = OpFNegate %67 
                               f32_3 %69 = OpFAdd %58 %68 
                                             OpStore %9 %69 
                                 f32 %74 = OpLoad vs_TEXCOORD5 
                                             OpStore %71 %74 
                                 f32 %75 = OpLoad %71 
                                 f32 %78 = OpExtInst %1 43 %75 %76 %77 
                                             OpStore %71 %78 
                                 f32 %81 = OpLoad %71 
                               f32_3 %82 = OpCompositeConstruct %81 %81 %81 
                               f32_3 %83 = OpLoad %9 
                               f32_3 %84 = OpFMul %82 %83 
                      Uniform f32_4* %85 = OpAccessChain %61 %63 
                               f32_4 %86 = OpLoad %85 
                               f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                               f32_3 %88 = OpFAdd %84 %87 
                               f32_4 %89 = OpLoad %80 
                               f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                             OpStore %80 %90 
                         Output f32* %94 = OpAccessChain %80 %92 
                                             OpStore %94 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 298
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %94 %126 %139 %140 %152 %153 %168 %180 %183 %287 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpMemberDecorate %19 11 Offset 19 
                                                      OpMemberDecorate %19 12 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD1 Location 53 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 126 
                                                      OpDecorate vs_TEXCOORD0 Location 139 
                                                      OpDecorate %140 Location 140 
                                                      OpDecorate %152 Location 152 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate vs_TEXCOORD2 Location 168 
                                                      OpDecorate vs_TEXCOORD3 Location 180 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate vs_TEXCOORD4 Location 287 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 8 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                          i32 %65 = OpConstant 10 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %96 = OpTypePointer Output %7 
                                          u32 %98 = OpConstant 2 
                                              %99 = OpTypePointer Private %6 
                                             %102 = OpTypePointer Uniform %6 
                                         u32 %106 = OpConstant 0 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         f32 %122 = OpConstant 3.674022E-40 
                                             %125 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         i32 %129 = OpConstant 11 
                                         u32 %133 = OpConstant 3 
                                             %137 = OpTypeVector %6 2 
                                             %138 = OpTypePointer Output %137 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %140 = OpVariable Input 
                                         i32 %143 = OpConstant 12 
                               Output f32_4* %152 = OpVariable Output 
                                Input f32_4* %153 = OpVariable Input 
                                         f32 %163 = OpConstant 3.674022E-40 
                                       f32_3 %164 = OpConstantComposite %163 %163 %163 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                       f32_4 %181 = OpConstantComposite %122 %122 %122 %122 
                                             %182 = OpTypePointer Input %51 
                                Input f32_3* %183 = OpVariable Input 
                                         i32 %185 = OpConstant 9 
                                Private f32* %203 = OpVariable Private 
                              Private f32_4* %234 = OpVariable Private 
                                             %240 = OpTypePointer Private %51 
                              Private f32_3* %241 = OpVariable Private 
                                         i32 %242 = OpConstant 4 
                                         i32 %248 = OpConstant 5 
                                         i32 %254 = OpConstant 6 
                                         i32 %260 = OpConstant 7 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD1 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %83 = OpAccessChain %21 %65 %47 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %45 
                                        f32_4 %86 = OpVectorShuffle %85 %85 3 3 3 3 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %9 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %9 %89 
                                        f32_4 %95 = OpLoad %9 
                                Output f32_4* %97 = OpAccessChain %94 %29 
                                                      OpStore %97 %95 
                                Private f32* %100 = OpAccessChain %9 %98 
                                         f32 %101 = OpLoad %100 
                                Uniform f32* %103 = OpAccessChain %21 %29 %90 
                                         f32 %104 = OpLoad %103 
                                         f32 %105 = OpFDiv %101 %104 
                                Private f32* %107 = OpAccessChain %45 %106 
                                                      OpStore %107 %105 
                                Private f32* %108 = OpAccessChain %45 %106 
                                         f32 %109 = OpLoad %108 
                                         f32 %110 = OpFNegate %109 
                                         f32 %112 = OpFAdd %110 %111 
                                Private f32* %113 = OpAccessChain %45 %106 
                                                      OpStore %113 %112 
                                Private f32* %114 = OpAccessChain %45 %106 
                                         f32 %115 = OpLoad %114 
                                Uniform f32* %116 = OpAccessChain %21 %29 %98 
                                         f32 %117 = OpLoad %116 
                                         f32 %118 = OpFMul %115 %117 
                                Private f32* %119 = OpAccessChain %45 %106 
                                                      OpStore %119 %118 
                                Private f32* %120 = OpAccessChain %45 %106 
                                         f32 %121 = OpLoad %120 
                                         f32 %123 = OpExtInst %1 40 %121 %122 
                                Private f32* %124 = OpAccessChain %45 %106 
                                                      OpStore %124 %123 
                                Private f32* %127 = OpAccessChain %45 %106 
                                         f32 %128 = OpLoad %127 
                                Uniform f32* %130 = OpAccessChain %21 %129 %98 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpFMul %128 %131 
                                Uniform f32* %134 = OpAccessChain %21 %129 %133 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpFAdd %132 %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                              Uniform f32_4* %144 = OpAccessChain %21 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 0 1 
                                       f32_2 %147 = OpFMul %142 %146 
                              Uniform f32_4* %148 = OpAccessChain %21 %143 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFAdd %147 %150 
                                                      OpStore vs_TEXCOORD0 %151 
                                       f32_4 %154 = OpLoad %153 
                                                      OpStore %152 %154 
                                Private f32* %155 = OpAccessChain %9 %90 
                                         f32 %156 = OpLoad %155 
                                Uniform f32* %157 = OpAccessChain %21 %29 %106 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %9 %90 
                                                      OpStore %160 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 3 1 
                                       f32_3 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %45 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 1 5 6 
                                                      OpStore %45 %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpLoad vs_TEXCOORD2 
                                       f32_4 %172 = OpVectorShuffle %171 %170 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %172 
                                       f32_4 %173 = OpLoad %45 
                                       f32_2 %174 = OpVectorShuffle %173 %173 2 2 
                                       f32_4 %175 = OpLoad %45 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 3 
                                       f32_2 %177 = OpFAdd %174 %176 
                                       f32_4 %178 = OpLoad vs_TEXCOORD2 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                                      OpStore vs_TEXCOORD3 %181 
                                       f32_3 %184 = OpLoad %183 
                              Uniform f32_4* %186 = OpAccessChain %21 %185 %29 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                         f32 %189 = OpDot %184 %188 
                                Private f32* %190 = OpAccessChain %9 %106 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %183 
                              Uniform f32_4* %192 = OpAccessChain %21 %185 %24 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 2 
                                         f32 %195 = OpDot %191 %194 
                                Private f32* %196 = OpAccessChain %9 %90 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %183 
                              Uniform f32_4* %198 = OpAccessChain %21 %185 %37 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %202 = OpAccessChain %9 %98 
                                                      OpStore %202 %201 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %9 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                                      OpStore %203 %208 
                                         f32 %209 = OpLoad %203 
                                         f32 %210 = OpExtInst %1 32 %209 
                                                      OpStore %203 %210 
                                         f32 %211 = OpLoad %203 
                                       f32_3 %212 = OpCompositeConstruct %211 %211 %211 
                                       f32_4 %213 = OpLoad %9 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %9 %217 
                                Private f32* %218 = OpAccessChain %9 %90 
                                         f32 %219 = OpLoad %218 
                                Private f32* %220 = OpAccessChain %9 %90 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                Private f32* %223 = OpAccessChain %45 %106 
                                                      OpStore %223 %222 
                                Private f32* %224 = OpAccessChain %9 %106 
                                         f32 %225 = OpLoad %224 
                                Private f32* %226 = OpAccessChain %9 %106 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                Private f32* %229 = OpAccessChain %45 %106 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %228 %231 
                                Private f32* %233 = OpAccessChain %45 %106 
                                                      OpStore %233 %232 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %235 1 2 2 0 
                                       f32_4 %237 = OpLoad %9 
                                       f32_4 %238 = OpVectorShuffle %237 %237 0 1 2 2 
                                       f32_4 %239 = OpFMul %236 %238 
                                                      OpStore %234 %239 
                              Uniform f32_4* %243 = OpAccessChain %21 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %234 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %241 %106 
                                                      OpStore %247 %246 
                              Uniform f32_4* %249 = OpAccessChain %21 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_4 %251 = OpLoad %234 
                                         f32 %252 = OpDot %250 %251 
                                Private f32* %253 = OpAccessChain %241 %90 
                                                      OpStore %253 %252 
                              Uniform f32_4* %255 = OpAccessChain %21 %254 
                                       f32_4 %256 = OpLoad %255 
                                       f32_4 %257 = OpLoad %234 
                                         f32 %258 = OpDot %256 %257 
                                Private f32* %259 = OpAccessChain %241 %98 
                                                      OpStore %259 %258 
                              Uniform f32_4* %261 = OpAccessChain %21 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %45 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %241 
                                       f32_3 %268 = OpFAdd %266 %267 
                                       f32_4 %269 = OpLoad %45 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %45 %270 
                                Private f32* %271 = OpAccessChain %9 %133 
                                                      OpStore %271 %111 
                              Uniform f32_4* %272 = OpAccessChain %21 %24 
                                       f32_4 %273 = OpLoad %272 
                                       f32_4 %274 = OpLoad %9 
                                         f32 %275 = OpDot %273 %274 
                                Private f32* %276 = OpAccessChain %234 %106 
                                                      OpStore %276 %275 
                              Uniform f32_4* %277 = OpAccessChain %21 %37 
                                       f32_4 %278 = OpLoad %277 
                                       f32_4 %279 = OpLoad %9 
                                         f32 %280 = OpDot %278 %279 
                                Private f32* %281 = OpAccessChain %234 %90 
                                                      OpStore %281 %280 
                              Uniform f32_4* %282 = OpAccessChain %21 %47 
                                       f32_4 %283 = OpLoad %282 
                                       f32_4 %284 = OpLoad %9 
                                         f32 %285 = OpDot %283 %284 
                                Private f32* %286 = OpAccessChain %234 %98 
                                                      OpStore %286 %285 
                                       f32_4 %288 = OpLoad %45 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_4 %290 = OpLoad %234 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFAdd %289 %291 
                                                      OpStore vs_TEXCOORD4 %292 
                                 Output f32* %293 = OpAccessChain %94 %29 %90 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFNegate %294 
                                 Output f32* %296 = OpAccessChain %94 %29 %90 
                                                      OpStore %296 %295 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 96
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %73 %80 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                             OpDecorate vs_TEXCOORD2 Location 12 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate %27 DescriptorSet 27 
                                             OpDecorate %27 Binding 27 
                                             OpDecorate vs_TEXCOORD4 Location 37 
                                             OpDecorate %41 DescriptorSet 41 
                                             OpDecorate %41 Binding 41 
                                             OpDecorate %43 DescriptorSet 43 
                                             OpDecorate %43 Binding 43 
                                             OpDecorate vs_TEXCOORD0 Location 47 
                                             OpDecorate %52 Location 52 
                                             OpMemberDecorate %59 0 Offset 59 
                                             OpDecorate %59 Block 
                                             OpDecorate %61 DescriptorSet 61 
                                             OpDecorate %61 Binding 61 
                                             OpDecorate vs_TEXCOORD5 Location 73 
                                             OpDecorate %80 Location 80 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                     %13 = OpTypeVector %6 2 
                                     %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %22 = OpTypePointer UniformConstant %21 
UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampler 
                                     %26 = OpTypePointer UniformConstant %25 
            UniformConstant sampler* %27 = OpVariable UniformConstant 
                                     %29 = OpTypeSampledImage %21 
                                     %36 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                      Private f32_3* %40 = OpVariable Private 
UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
            UniformConstant sampler* %43 = OpVariable UniformConstant 
                                     %46 = OpTypePointer Input %13 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                        Input f32_4* %52 = OpVariable Input 
                                     %59 = OpTypeStruct %10 
                                     %60 = OpTypePointer Uniform %59 
            Uniform struct {f32_4;}* %61 = OpVariable Uniform 
                                     %62 = OpTypeInt 32 1 
                                 i32 %63 = OpConstant 0 
                                     %64 = OpTypePointer Uniform %10 
                                     %70 = OpTypePointer Private %6 
                        Private f32* %71 = OpVariable Private 
                                     %72 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD5 = OpVariable Input 
                                 f32 %76 = OpConstant 3.674022E-40 
                                 f32 %77 = OpConstant 3.674022E-40 
                                     %79 = OpTypePointer Output %10 
                       Output f32_4* %80 = OpVariable Output 
                                     %91 = OpTypeInt 32 0 
                                 u32 %92 = OpConstant 3 
                                     %93 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %14 = OpLoad vs_TEXCOORD2 
                               f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                               f32_4 %16 = OpLoad vs_TEXCOORD2 
                               f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                               f32_2 %18 = OpFDiv %15 %17 
                               f32_3 %19 = OpLoad %9 
                               f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                             OpStore %9 %20 
                 read_only Texture2D %24 = OpLoad %23 
                             sampler %28 = OpLoad %27 
          read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                               f32_3 %31 = OpLoad %9 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                               f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                             OpStore %9 %34 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %38 = OpLoad vs_TEXCOORD4 
                               f32_3 %39 = OpFAdd %35 %38 
                                             OpStore %9 %39 
                 read_only Texture2D %42 = OpLoad %41 
                             sampler %44 = OpLoad %43 
          read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                               f32_2 %48 = OpLoad vs_TEXCOORD0 
                               f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                               f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                             OpStore %40 %50 
                               f32_3 %51 = OpLoad %40 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               f32_3 %55 = OpFMul %51 %54 
                                             OpStore %40 %55 
                               f32_3 %56 = OpLoad %40 
                               f32_3 %57 = OpLoad %9 
                               f32_3 %58 = OpFMul %56 %57 
                      Uniform f32_4* %65 = OpAccessChain %61 %63 
                               f32_4 %66 = OpLoad %65 
                               f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                               f32_3 %68 = OpFNegate %67 
                               f32_3 %69 = OpFAdd %58 %68 
                                             OpStore %9 %69 
                                 f32 %74 = OpLoad vs_TEXCOORD5 
                                             OpStore %71 %74 
                                 f32 %75 = OpLoad %71 
                                 f32 %78 = OpExtInst %1 43 %75 %76 %77 
                                             OpStore %71 %78 
                                 f32 %81 = OpLoad %71 
                               f32_3 %82 = OpCompositeConstruct %81 %81 %81 
                               f32_3 %83 = OpLoad %9 
                               f32_3 %84 = OpFMul %82 %83 
                      Uniform f32_4* %85 = OpAccessChain %61 %63 
                               f32_4 %86 = OpLoad %85 
                               f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                               f32_3 %88 = OpFAdd %84 %87 
                               f32_4 %89 = OpLoad %80 
                               f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                             OpStore %80 %90 
                         Output f32* %94 = OpAccessChain %80 %92 
                                             OpStore %94 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 313
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %154 %182 %186 %298 %305 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate vs_TEXCOORD2 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD3 Location 182 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate vs_TEXCOORD4 Location 298 
                                                      OpDecorate %305 Flat 
                                                      OpDecorate %305 Location 305 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                         i32 %144 = OpConstant 9 
                               Output f32_4* %153 = OpVariable Output 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %156 = OpVariable Private 
                                         u32 %159 = OpConstant 0 
                                             %160 = OpTypePointer Uniform %23 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                             %185 = OpTypePointer Input %75 
                                Input f32_3* %186 = OpVariable Input 
                              Private f32_4* %211 = OpVariable Private 
                                             %250 = OpTypePointer Private %75 
                              Private f32_3* %251 = OpVariable Private 
                                         i32 %252 = OpConstant 4 
                                         i32 %258 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %270 = OpConstant 7 
                                         f32 %281 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %304 = OpTypePointer Output %31 
                                 Output u32* %305 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD5 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD2 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %145 = OpAccessChain %94 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %148 = OpFMul %143 %147 
                              Uniform f32_4* %149 = OpAccessChain %94 %144 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 2 3 
                                       f32_2 %152 = OpFAdd %148 %151 
                                                      OpStore vs_TEXCOORD0 %152 
                                       f32_4 %155 = OpLoad %154 
                                                      OpStore %153 %155 
                                Private f32* %157 = OpAccessChain %26 %119 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %161 = OpAccessChain %94 %15 %159 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %158 %162 
                                                      OpStore %156 %163 
                                       f32_4 %164 = OpLoad %26 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %26 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %26 %170 
                                         f32 %171 = OpLoad %156 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %26 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD2 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %181 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_3 %187 = OpLoad %186 
                                         i32 %188 = OpLoad %8 
                                         i32 %189 = OpSDiv %188 %42 
                              Uniform f32_4* %190 = OpAccessChain %40 %15 %189 %44 %15 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %26 %159 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %186 
                                         i32 %196 = OpLoad %8 
                                         i32 %197 = OpSDiv %196 %42 
                              Uniform f32_4* %198 = OpAccessChain %40 %15 %197 %44 %44 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %202 = OpAccessChain %26 %119 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %186 
                                         i32 %204 = OpLoad %8 
                                         i32 %205 = OpSDiv %204 %42 
                              Uniform f32_4* %206 = OpAccessChain %40 %15 %205 %44 %60 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %203 %208 
                                Private f32* %210 = OpAccessChain %26 %129 
                                                      OpStore %210 %209 
                                       f32_4 %212 = OpLoad %26 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %26 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                         f32 %216 = OpDot %213 %215 
                                Private f32* %217 = OpAccessChain %211 %159 
                                                      OpStore %217 %216 
                                Private f32* %218 = OpAccessChain %211 %159 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 32 %219 
                                Private f32* %221 = OpAccessChain %211 %159 
                                                      OpStore %221 %220 
                                       f32_4 %222 = OpLoad %211 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_4 %224 = OpLoad %26 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %211 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %211 %228 
                                Private f32* %229 = OpAccessChain %211 %119 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %211 %119 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %26 %159 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %211 %159 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %211 %159 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %26 %159 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %26 %159 
                                                      OpStore %244 %243 
                                       f32_4 %245 = OpLoad %211 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 2 2 0 
                                       f32_4 %247 = OpLoad %211 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %68 %249 
                              Uniform f32_4* %253 = OpAccessChain %94 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %68 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %251 %159 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %94 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %68 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %119 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %94 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpLoad %68 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %251 %129 
                                                      OpStore %269 %268 
                              Uniform f32_4* %271 = OpAccessChain %94 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_4 %274 = OpLoad %26 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %251 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %26 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %26 %280 
                                Private f32* %282 = OpAccessChain %211 %173 
                                                      OpStore %282 %281 
                              Uniform f32_4* %283 = OpAccessChain %94 %44 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpLoad %211 
                                         f32 %286 = OpDot %284 %285 
                                Private f32* %287 = OpAccessChain %68 %159 
                                                      OpStore %287 %286 
                              Uniform f32_4* %288 = OpAccessChain %94 %60 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %211 
                                         f32 %291 = OpDot %289 %290 
                                Private f32* %292 = OpAccessChain %68 %119 
                                                      OpStore %292 %291 
                              Uniform f32_4* %293 = OpAccessChain %94 %21 
                                       f32_4 %294 = OpLoad %293 
                                       f32_4 %295 = OpLoad %211 
                                         f32 %296 = OpDot %294 %295 
                                Private f32* %297 = OpAccessChain %68 %129 
                                                      OpStore %297 %296 
                                       f32_4 %299 = OpLoad %26 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %68 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORD4 %303 
                                         i32 %306 = OpLoad %10 
                                         u32 %307 = OpBitcast %306 
                                                      OpStore %305 %307 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                 Output f32* %311 = OpAccessChain %123 %15 %119 
                                                      OpStore %311 %310 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 123
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %76 %109 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                               OpDecorate vs_TEXCOORD2 Location 12 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %27 DescriptorSet 27 
                                               OpDecorate %27 Binding 27 
                                               OpDecorate vs_TEXCOORD4 Location 40 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %46 DescriptorSet 46 
                                               OpDecorate %46 Binding 46 
                                               OpDecorate vs_TEXCOORD0 Location 50 
                                               OpDecorate %55 Location 55 
                                               OpMemberDecorate %62 0 Offset 62 
                                               OpMemberDecorate %62 1 Offset 62 
                                               OpMemberDecorate %62 2 Offset 62 
                                               OpDecorate %62 Block 
                                               OpDecorate %64 DescriptorSet 64 
                                               OpDecorate %64 Binding 64 
                                               OpDecorate vs_TEXCOORD5 Location 76 
                                               OpDecorate %109 Location 109 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypePointer Input %10 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                       %13 = OpTypeVector %6 2 
                                       %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %22 = OpTypePointer UniformConstant %21 
  UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                       %25 = OpTypeSampler 
                                       %26 = OpTypePointer UniformConstant %25 
              UniformConstant sampler* %27 = OpVariable UniformConstant 
                                       %29 = OpTypeSampledImage %21 
                                       %39 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Private f32_3* %43 = OpVariable Private 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
              UniformConstant sampler* %46 = OpVariable UniformConstant 
                                       %49 = OpTypePointer Input %13 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                          Input f32_4* %55 = OpVariable Input 
                                       %62 = OpTypeStruct %10 %10 %10 
                                       %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                       %65 = OpTypeInt 32 1 
                                   i32 %66 = OpConstant 1 
                                       %67 = OpTypePointer Uniform %10 
                                       %73 = OpTypePointer Private %6 
                          Private f32* %74 = OpVariable Private 
                                       %75 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD5 = OpVariable Input 
                                   i32 %78 = OpConstant 0 
                                       %79 = OpTypeInt 32 0 
                                   u32 %80 = OpConstant 1 
                                       %81 = OpTypePointer Uniform %6 
                                   f32 %87 = OpConstant 3.674022E-40 
                                   u32 %90 = OpConstant 2 
                                   f32 %95 = OpConstant 3.674022E-40 
                                   i32 %98 = OpConstant 2 
                                  u32 %102 = OpConstant 3 
                                      %108 = OpTypePointer Output %10 
                        Output f32_4* %109 = OpVariable Output 
                                      %120 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_4 %14 = OpLoad vs_TEXCOORD2 
                                 f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 f32_4 %16 = OpLoad vs_TEXCOORD2 
                                 f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                 f32_2 %18 = OpFDiv %15 %17 
                                 f32_3 %19 = OpLoad %9 
                                 f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                               OpStore %9 %20 
                   read_only Texture2D %24 = OpLoad %23 
                               sampler %28 = OpLoad %27 
            read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                 f32_3 %31 = OpLoad %9 
                                 f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                 f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                 f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                               OpStore %9 %34 
                                 f32_3 %35 = OpLoad %9 
                                 f32_3 %36 = OpExtInst %1 30 %35 
                                               OpStore %9 %36 
                                 f32_3 %37 = OpLoad %9 
                                 f32_3 %38 = OpFNegate %37 
                                 f32_3 %41 = OpLoad vs_TEXCOORD4 
                                 f32_3 %42 = OpFAdd %38 %41 
                                               OpStore %9 %42 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %47 = OpLoad %46 
            read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                 f32_2 %51 = OpLoad vs_TEXCOORD0 
                                 f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                                 f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                               OpStore %43 %53 
                                 f32_3 %54 = OpLoad %43 
                                 f32_4 %56 = OpLoad %55 
                                 f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                 f32_3 %58 = OpFMul %54 %57 
                                               OpStore %43 %58 
                                 f32_3 %59 = OpLoad %43 
                                 f32_3 %60 = OpLoad %9 
                                 f32_3 %61 = OpFMul %59 %60 
                        Uniform f32_4* %68 = OpAccessChain %64 %66 
                                 f32_4 %69 = OpLoad %68 
                                 f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                 f32_3 %71 = OpFNegate %70 
                                 f32_3 %72 = OpFAdd %61 %71 
                                               OpStore %9 %72 
                                   f32 %77 = OpLoad vs_TEXCOORD5 
                          Uniform f32* %82 = OpAccessChain %64 %78 %80 
                                   f32 %83 = OpLoad %82 
                                   f32 %84 = OpFDiv %77 %83 
                                               OpStore %74 %84 
                                   f32 %85 = OpLoad %74 
                                   f32 %86 = OpFNegate %85 
                                   f32 %88 = OpFAdd %86 %87 
                                               OpStore %74 %88 
                                   f32 %89 = OpLoad %74 
                          Uniform f32* %91 = OpAccessChain %64 %78 %90 
                                   f32 %92 = OpLoad %91 
                                   f32 %93 = OpFMul %89 %92 
                                               OpStore %74 %93 
                                   f32 %94 = OpLoad %74 
                                   f32 %96 = OpExtInst %1 40 %94 %95 
                                               OpStore %74 %96 
                                   f32 %97 = OpLoad %74 
                          Uniform f32* %99 = OpAccessChain %64 %98 %90 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpFMul %97 %100 
                         Uniform f32* %103 = OpAccessChain %64 %98 %102 
                                  f32 %104 = OpLoad %103 
                                  f32 %105 = OpFAdd %101 %104 
                                               OpStore %74 %105 
                                  f32 %106 = OpLoad %74 
                                  f32 %107 = OpExtInst %1 43 %106 %95 %87 
                                               OpStore %74 %107 
                                  f32 %110 = OpLoad %74 
                                f32_3 %111 = OpCompositeConstruct %110 %110 %110 
                                f32_3 %112 = OpLoad %9 
                                f32_3 %113 = OpFMul %111 %112 
                       Uniform f32_4* %114 = OpAccessChain %64 %66 
                                f32_4 %115 = OpLoad %114 
                                f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                f32_3 %117 = OpFAdd %113 %116 
                                f32_4 %118 = OpLoad %109 
                                f32_4 %119 = OpVectorShuffle %118 %117 4 5 6 3 
                                               OpStore %109 %119 
                          Output f32* %121 = OpAccessChain %109 %102 
                                               OpStore %121 %87 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat8 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 331
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %156 %157 %185 %189 %317 %323 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 132 
                                                      OpDecorate vs_TEXCOORD2 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD3 Location 185 
                                                      OpDecorate %189 Location 189 
                                                      OpMemberDecorate %255 0 Offset 255 
                                                      OpMemberDecorate %255 1 Offset 255 
                                                      OpMemberDecorate %255 2 Offset 255 
                                                      OpMemberDecorate %255 3 Offset 255 
                                                      OpMemberDecorate %255 4 Offset 255 
                                                      OpMemberDecorate %255 5 Offset 255 
                                                      OpMemberDecorate %255 6 Offset 255 
                                                      OpDecorate %256 ArrayStride 256 
                                                      OpMemberDecorate %257 0 Offset 257 
                                                      OpDecorate %257 Block 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate vs_TEXCOORD4 Location 317 
                                                      OpDecorate %323 Flat 
                                                      OpDecorate %323 Location 323 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                               Output f32_4* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                                Private f32* %159 = OpVariable Private 
                                         u32 %162 = OpConstant 0 
                                             %163 = OpTypePointer Uniform %27 
                                         f32 %169 = OpConstant 3.674022E-40 
                                       f32_2 %170 = OpConstantComposite %169 %169 
                                         u32 %176 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %186 = OpConstant 3.674022E-40 
                                       f32_4 %187 = OpConstantComposite %186 %186 %186 %186 
                                             %188 = OpTypePointer Input %79 
                                Input f32_3* %189 = OpVariable Input 
                                             %214 = OpTypePointer Private %79 
                              Private f32_3* %215 = OpVariable Private 
                              Private f32_3* %254 = OpVariable Private 
                                             %255 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %256 = OpTypeArray %255 %40 
                                             %257 = OpTypeStruct %256 
                                             %258 = OpTypePointer Uniform %257 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %259 = OpVariable Uniform 
                                         i32 %269 = OpConstant 4 
                                         i32 %277 = OpConstant 5 
                                         i32 %285 = OpConstant 6 
                                         f32 %294 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %322 = OpTypePointer Output %35 
                                 Output u32* %323 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD2 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_4 %158 = OpLoad %157 
                                                      OpStore %156 %158 
                                Private f32* %160 = OpAccessChain %30 %123 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %164 = OpAccessChain %98 %15 %162 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %161 %165 
                                                      OpStore %159 %166 
                                       f32_4 %167 = OpLoad %30 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %30 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 1 5 3 
                                                      OpStore %30 %173 
                                         f32 %174 = OpLoad %159 
                                         f32 %175 = OpFMul %174 %169 
                                Private f32* %177 = OpAccessChain %30 %176 
                                                      OpStore %177 %175 
                                       f32_4 %178 = OpLoad %30 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %30 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad vs_TEXCOORD2 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %184 
                                                      OpStore vs_TEXCOORD3 %187 
                                       f32_3 %190 = OpLoad %189 
                                         i32 %191 = OpLoad %20 
                                         i32 %192 = OpSDiv %191 %46 
                              Uniform f32_4* %193 = OpAccessChain %44 %15 %192 %48 %15 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %30 %162 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %189 
                                         i32 %199 = OpLoad %20 
                                         i32 %200 = OpSDiv %199 %46 
                              Uniform f32_4* %201 = OpAccessChain %44 %15 %200 %48 %48 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %205 = OpAccessChain %30 %123 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %189 
                                         i32 %207 = OpLoad %20 
                                         i32 %208 = OpSDiv %207 %46 
                              Uniform f32_4* %209 = OpAccessChain %44 %15 %208 %48 %64 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %206 %211 
                                Private f32* %213 = OpAccessChain %30 %133 
                                                      OpStore %213 %212 
                                       f32_4 %216 = OpLoad %30 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_4 %218 = OpLoad %30 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %217 %219 
                                Private f32* %221 = OpAccessChain %215 %162 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %215 %162 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 32 %223 
                                Private f32* %225 = OpAccessChain %215 %162 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %215 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_4 %228 = OpLoad %30 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %30 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %30 %232 
                                Private f32* %233 = OpAccessChain %30 %123 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %30 %123 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                Private f32* %238 = OpAccessChain %215 %162 
                                                      OpStore %238 %237 
                                Private f32* %239 = OpAccessChain %30 %162 
                                         f32 %240 = OpLoad %239 
                                Private f32* %241 = OpAccessChain %30 %162 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                Private f32* %244 = OpAccessChain %215 %162 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFAdd %243 %246 
                                Private f32* %248 = OpAccessChain %215 %162 
                                                      OpStore %248 %247 
                                       f32_4 %249 = OpLoad %30 
                                       f32_4 %250 = OpVectorShuffle %249 %249 1 2 2 0 
                                       f32_4 %251 = OpLoad %30 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 1 2 2 
                                       f32_4 %253 = OpFMul %250 %252 
                                                      OpStore %72 %253 
                                         i32 %260 = OpLoad %8 
                                         i32 %261 = OpSDiv %260 %25 
                              Uniform f32_4* %262 = OpAccessChain %259 %15 %261 %22 
                                       f32_4 %263 = OpLoad %262 
                                       f32_4 %264 = OpLoad %72 
                                         f32 %265 = OpDot %263 %264 
                                Private f32* %266 = OpAccessChain %254 %162 
                                                      OpStore %266 %265 
                                         i32 %267 = OpLoad %8 
                                         i32 %268 = OpSDiv %267 %25 
                              Uniform f32_4* %270 = OpAccessChain %259 %15 %268 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_4 %272 = OpLoad %72 
                                         f32 %273 = OpDot %271 %272 
                                Private f32* %274 = OpAccessChain %254 %123 
                                                      OpStore %274 %273 
                                         i32 %275 = OpLoad %8 
                                         i32 %276 = OpSDiv %275 %25 
                              Uniform f32_4* %278 = OpAccessChain %259 %15 %276 %277 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %72 
                                         f32 %281 = OpDot %279 %280 
                                Private f32* %282 = OpAccessChain %254 %133 
                                                      OpStore %282 %281 
                                         i32 %283 = OpLoad %8 
                                         i32 %284 = OpSDiv %283 %25 
                              Uniform f32_4* %286 = OpAccessChain %259 %15 %284 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpLoad %215 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %292 = OpLoad %254 
                                       f32_3 %293 = OpFAdd %291 %292 
                                                      OpStore %215 %293 
                                Private f32* %295 = OpAccessChain %30 %176 
                                                      OpStore %295 %294 
                                         i32 %296 = OpLoad %8 
                                         i32 %297 = OpSDiv %296 %25 
                              Uniform f32_4* %298 = OpAccessChain %259 %15 %297 %15 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %30 
                                         f32 %301 = OpDot %299 %300 
                                Private f32* %302 = OpAccessChain %72 %162 
                                                      OpStore %302 %301 
                                         i32 %303 = OpLoad %8 
                                         i32 %304 = OpSDiv %303 %25 
                              Uniform f32_4* %305 = OpAccessChain %259 %15 %304 %48 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpLoad %30 
                                         f32 %308 = OpDot %306 %307 
                                Private f32* %309 = OpAccessChain %72 %123 
                                                      OpStore %309 %308 
                                         i32 %310 = OpLoad %8 
                                         i32 %311 = OpSDiv %310 %25 
                              Uniform f32_4* %312 = OpAccessChain %259 %15 %311 %64 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %30 
                                         f32 %315 = OpDot %313 %314 
                                Private f32* %316 = OpAccessChain %72 %133 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %215 
                                       f32_4 %319 = OpLoad %72 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                                      OpStore vs_TEXCOORD4 %321 
                                         i32 %324 = OpLoad %10 
                                         u32 %325 = OpBitcast %324 
                                                      OpStore %323 %325 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                 Output f32* %329 = OpAccessChain %127 %15 %123 
                                                      OpStore %329 %328 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 123
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %40 %50 %55 %76 %109 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                               OpDecorate vs_TEXCOORD2 Location 12 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %27 DescriptorSet 27 
                                               OpDecorate %27 Binding 27 
                                               OpDecorate vs_TEXCOORD4 Location 40 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %46 DescriptorSet 46 
                                               OpDecorate %46 Binding 46 
                                               OpDecorate vs_TEXCOORD0 Location 50 
                                               OpDecorate %55 Location 55 
                                               OpMemberDecorate %62 0 Offset 62 
                                               OpMemberDecorate %62 1 Offset 62 
                                               OpMemberDecorate %62 2 Offset 62 
                                               OpDecorate %62 Block 
                                               OpDecorate %64 DescriptorSet 64 
                                               OpDecorate %64 Binding 64 
                                               OpDecorate vs_TEXCOORD5 Location 76 
                                               OpDecorate %109 Location 109 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypePointer Input %10 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                       %13 = OpTypeVector %6 2 
                                       %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %22 = OpTypePointer UniformConstant %21 
  UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                       %25 = OpTypeSampler 
                                       %26 = OpTypePointer UniformConstant %25 
              UniformConstant sampler* %27 = OpVariable UniformConstant 
                                       %29 = OpTypeSampledImage %21 
                                       %39 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Private f32_3* %43 = OpVariable Private 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
              UniformConstant sampler* %46 = OpVariable UniformConstant 
                                       %49 = OpTypePointer Input %13 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                          Input f32_4* %55 = OpVariable Input 
                                       %62 = OpTypeStruct %10 %10 %10 
                                       %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                       %65 = OpTypeInt 32 1 
                                   i32 %66 = OpConstant 1 
                                       %67 = OpTypePointer Uniform %10 
                                       %73 = OpTypePointer Private %6 
                          Private f32* %74 = OpVariable Private 
                                       %75 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD5 = OpVariable Input 
                                   i32 %78 = OpConstant 0 
                                       %79 = OpTypeInt 32 0 
                                   u32 %80 = OpConstant 1 
                                       %81 = OpTypePointer Uniform %6 
                                   f32 %87 = OpConstant 3.674022E-40 
                                   u32 %90 = OpConstant 2 
                                   f32 %95 = OpConstant 3.674022E-40 
                                   i32 %98 = OpConstant 2 
                                  u32 %102 = OpConstant 3 
                                      %108 = OpTypePointer Output %10 
                        Output f32_4* %109 = OpVariable Output 
                                      %120 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_4 %14 = OpLoad vs_TEXCOORD2 
                                 f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 f32_4 %16 = OpLoad vs_TEXCOORD2 
                                 f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                 f32_2 %18 = OpFDiv %15 %17 
                                 f32_3 %19 = OpLoad %9 
                                 f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                               OpStore %9 %20 
                   read_only Texture2D %24 = OpLoad %23 
                               sampler %28 = OpLoad %27 
            read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                 f32_3 %31 = OpLoad %9 
                                 f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                 f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                 f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                               OpStore %9 %34 
                                 f32_3 %35 = OpLoad %9 
                                 f32_3 %36 = OpExtInst %1 30 %35 
                                               OpStore %9 %36 
                                 f32_3 %37 = OpLoad %9 
                                 f32_3 %38 = OpFNegate %37 
                                 f32_3 %41 = OpLoad vs_TEXCOORD4 
                                 f32_3 %42 = OpFAdd %38 %41 
                                               OpStore %9 %42 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %47 = OpLoad %46 
            read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                 f32_2 %51 = OpLoad vs_TEXCOORD0 
                                 f32_4 %52 = OpImageSampleImplicitLod %48 %51 
                                 f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                               OpStore %43 %53 
                                 f32_3 %54 = OpLoad %43 
                                 f32_4 %56 = OpLoad %55 
                                 f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                 f32_3 %58 = OpFMul %54 %57 
                                               OpStore %43 %58 
                                 f32_3 %59 = OpLoad %43 
                                 f32_3 %60 = OpLoad %9 
                                 f32_3 %61 = OpFMul %59 %60 
                        Uniform f32_4* %68 = OpAccessChain %64 %66 
                                 f32_4 %69 = OpLoad %68 
                                 f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                 f32_3 %71 = OpFNegate %70 
                                 f32_3 %72 = OpFAdd %61 %71 
                                               OpStore %9 %72 
                                   f32 %77 = OpLoad vs_TEXCOORD5 
                          Uniform f32* %82 = OpAccessChain %64 %78 %80 
                                   f32 %83 = OpLoad %82 
                                   f32 %84 = OpFDiv %77 %83 
                                               OpStore %74 %84 
                                   f32 %85 = OpLoad %74 
                                   f32 %86 = OpFNegate %85 
                                   f32 %88 = OpFAdd %86 %87 
                                               OpStore %74 %88 
                                   f32 %89 = OpLoad %74 
                          Uniform f32* %91 = OpAccessChain %64 %78 %90 
                                   f32 %92 = OpLoad %91 
                                   f32 %93 = OpFMul %89 %92 
                                               OpStore %74 %93 
                                   f32 %94 = OpLoad %74 
                                   f32 %96 = OpExtInst %1 40 %94 %95 
                                               OpStore %74 %96 
                                   f32 %97 = OpLoad %74 
                          Uniform f32* %99 = OpAccessChain %64 %98 %90 
                                  f32 %100 = OpLoad %99 
                                  f32 %101 = OpFMul %97 %100 
                         Uniform f32* %103 = OpAccessChain %64 %98 %102 
                                  f32 %104 = OpLoad %103 
                                  f32 %105 = OpFAdd %101 %104 
                                               OpStore %74 %105 
                                  f32 %106 = OpLoad %74 
                                  f32 %107 = OpExtInst %1 43 %106 %95 %87 
                                               OpStore %74 %107 
                                  f32 %110 = OpLoad %74 
                                f32_3 %111 = OpCompositeConstruct %110 %110 %110 
                                f32_3 %112 = OpLoad %9 
                                f32_3 %113 = OpFMul %111 %112 
                       Uniform f32_4* %114 = OpAccessChain %64 %66 
                                f32_4 %115 = OpLoad %114 
                                f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                f32_3 %117 = OpFAdd %113 %116 
                                f32_4 %118 = OpLoad %109 
                                f32_4 %119 = OpVectorShuffle %118 %117 4 5 6 3 
                                               OpStore %109 %119 
                          Output f32* %121 = OpAccessChain %109 %102 
                                               OpStore %121 %87 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat4 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD4.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 313
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %123 %128 %133 %140 %141 %153 %154 %182 %186 %298 %305 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD1 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpMemberDecorate %92 2 Offset 92 
                                                      OpMemberDecorate %92 3 Offset 92 
                                                      OpMemberDecorate %92 4 Offset 92 
                                                      OpMemberDecorate %92 5 Offset 92 
                                                      OpMemberDecorate %92 6 Offset 92 
                                                      OpMemberDecorate %92 7 Offset 92 
                                                      OpMemberDecorate %92 8 Offset 92 
                                                      OpMemberDecorate %92 9 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %121 0 BuiltIn 121 
                                                      OpMemberDecorate %121 1 BuiltIn 121 
                                                      OpMemberDecorate %121 2 BuiltIn 121 
                                                      OpDecorate %121 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 128 
                                                      OpDecorate vs_TEXCOORD2 Location 133 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate %153 Location 153 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD3 Location 182 
                                                      OpDecorate %186 Location 186 
                                                      OpDecorate vs_TEXCOORD4 Location 298 
                                                      OpDecorate %305 Flat 
                                                      OpDecorate %305 Location 305 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 %24 %91 %24 
                                              %93 = OpTypePointer Uniform %92 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %119 = OpConstant 1 
                                             %120 = OpTypeArray %23 %119 
                                             %121 = OpTypeStruct %24 %23 %120 
                                             %122 = OpTypePointer Output %121 
        Output struct {f32_4; f32; f32[1];}* %123 = OpVariable Output 
                                             %125 = OpTypePointer Output %24 
                                             %127 = OpTypePointer Output %23 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %129 = OpConstant 2 
                                             %130 = OpTypePointer Private %23 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %134 = OpTypeVector %23 2 
                                             %139 = OpTypePointer Output %134 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %141 = OpVariable Input 
                                         i32 %144 = OpConstant 9 
                               Output f32_4* %153 = OpVariable Output 
                                Input f32_4* %154 = OpVariable Input 
                                Private f32* %156 = OpVariable Private 
                                         u32 %159 = OpConstant 0 
                                             %160 = OpTypePointer Uniform %23 
                                         f32 %166 = OpConstant 3.674022E-40 
                                       f32_2 %167 = OpConstantComposite %166 %166 
                                         u32 %173 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_4 %184 = OpConstantComposite %183 %183 %183 %183 
                                             %185 = OpTypePointer Input %75 
                                Input f32_3* %186 = OpVariable Input 
                              Private f32_4* %211 = OpVariable Private 
                                             %250 = OpTypePointer Private %75 
                              Private f32_3* %251 = OpVariable Private 
                                         i32 %252 = OpConstant 4 
                                         i32 %258 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %270 = OpConstant 7 
                                         f32 %281 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %304 = OpTypePointer Output %31 
                                 Output u32* %305 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD1 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %42 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %42 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %42 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %112 = OpAccessChain %94 %42 %21 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpLoad %68 
                                       f32_4 %115 = OpVectorShuffle %114 %114 3 3 3 3 
                                       f32_4 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %26 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %26 %118 
                                       f32_4 %124 = OpLoad %26 
                               Output f32_4* %126 = OpAccessChain %123 %15 
                                                      OpStore %126 %124 
                                Private f32* %131 = OpAccessChain %26 %129 
                                         f32 %132 = OpLoad %131 
                                                      OpStore vs_TEXCOORD5 %132 
                                       f32_4 %135 = OpLoad %26 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpLoad vs_TEXCOORD2 
                                       f32_4 %138 = OpVectorShuffle %137 %136 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %138 
                                       f32_4 %142 = OpLoad %141 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              Uniform f32_4* %145 = OpAccessChain %94 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_2 %148 = OpFMul %143 %147 
                              Uniform f32_4* %149 = OpAccessChain %94 %144 
                                       f32_4 %150 = OpLoad %149 
                                       f32_2 %151 = OpVectorShuffle %150 %150 2 3 
                                       f32_2 %152 = OpFAdd %148 %151 
                                                      OpStore vs_TEXCOORD0 %152 
                                       f32_4 %155 = OpLoad %154 
                                                      OpStore %153 %155 
                                Private f32* %157 = OpAccessChain %26 %119 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %161 = OpAccessChain %94 %15 %159 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %158 %162 
                                                      OpStore %156 %163 
                                       f32_4 %164 = OpLoad %26 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 3 
                                       f32_2 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %26 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 1 5 3 
                                                      OpStore %26 %170 
                                         f32 %171 = OpLoad %156 
                                         f32 %172 = OpFMul %171 %166 
                                Private f32* %174 = OpAccessChain %26 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %26 
                                       f32_2 %176 = OpVectorShuffle %175 %175 2 2 
                                       f32_4 %177 = OpLoad %26 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 3 
                                       f32_2 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad vs_TEXCOORD2 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %181 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_3 %187 = OpLoad %186 
                                         i32 %188 = OpLoad %8 
                                         i32 %189 = OpSDiv %188 %42 
                              Uniform f32_4* %190 = OpAccessChain %40 %15 %189 %44 %15 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %187 %192 
                                Private f32* %194 = OpAccessChain %26 %159 
                                                      OpStore %194 %193 
                                       f32_3 %195 = OpLoad %186 
                                         i32 %196 = OpLoad %8 
                                         i32 %197 = OpSDiv %196 %42 
                              Uniform f32_4* %198 = OpAccessChain %40 %15 %197 %44 %44 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %195 %200 
                                Private f32* %202 = OpAccessChain %26 %119 
                                                      OpStore %202 %201 
                                       f32_3 %203 = OpLoad %186 
                                         i32 %204 = OpLoad %8 
                                         i32 %205 = OpSDiv %204 %42 
                              Uniform f32_4* %206 = OpAccessChain %40 %15 %205 %44 %60 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %203 %208 
                                Private f32* %210 = OpAccessChain %26 %129 
                                                      OpStore %210 %209 
                                       f32_4 %212 = OpLoad %26 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %26 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                         f32 %216 = OpDot %213 %215 
                                Private f32* %217 = OpAccessChain %211 %159 
                                                      OpStore %217 %216 
                                Private f32* %218 = OpAccessChain %211 %159 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 32 %219 
                                Private f32* %221 = OpAccessChain %211 %159 
                                                      OpStore %221 %220 
                                       f32_4 %222 = OpLoad %211 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_4 %224 = OpLoad %26 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %211 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %211 %228 
                                Private f32* %229 = OpAccessChain %211 %119 
                                         f32 %230 = OpLoad %229 
                                Private f32* %231 = OpAccessChain %211 %119 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                Private f32* %234 = OpAccessChain %26 %159 
                                                      OpStore %234 %233 
                                Private f32* %235 = OpAccessChain %211 %159 
                                         f32 %236 = OpLoad %235 
                                Private f32* %237 = OpAccessChain %211 %159 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                Private f32* %240 = OpAccessChain %26 %159 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %239 %242 
                                Private f32* %244 = OpAccessChain %26 %159 
                                                      OpStore %244 %243 
                                       f32_4 %245 = OpLoad %211 
                                       f32_4 %246 = OpVectorShuffle %245 %245 1 2 2 0 
                                       f32_4 %247 = OpLoad %211 
                                       f32_4 %248 = OpVectorShuffle %247 %247 0 1 2 2 
                                       f32_4 %249 = OpFMul %246 %248 
                                                      OpStore %68 %249 
                              Uniform f32_4* %253 = OpAccessChain %94 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_4 %255 = OpLoad %68 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %251 %159 
                                                      OpStore %257 %256 
                              Uniform f32_4* %259 = OpAccessChain %94 %258 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpLoad %68 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %251 %119 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %94 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_4 %267 = OpLoad %68 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %251 %129 
                                                      OpStore %269 %268 
                              Uniform f32_4* %271 = OpAccessChain %94 %270 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_4 %274 = OpLoad %26 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 0 0 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %277 = OpLoad %251 
                                       f32_3 %278 = OpFAdd %276 %277 
                                       f32_4 %279 = OpLoad %26 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %26 %280 
                                Private f32* %282 = OpAccessChain %211 %173 
                                                      OpStore %282 %281 
                              Uniform f32_4* %283 = OpAccessChain %94 %44 
                                       f32_4 %284 = OpLoad %283 
                                       f32_4 %285 = OpLoad %211 
                                         f32 %286 = OpDot %284 %285 
                                Private f32* %287 = OpAccessChain %68 %159 
                                                      OpStore %287 %286 
                              Uniform f32_4* %288 = OpAccessChain %94 %60 
                                       f32_4 %289 = OpLoad %288 
                                       f32_4 %290 = OpLoad %211 
                                         f32 %291 = OpDot %289 %290 
                                Private f32* %292 = OpAccessChain %68 %119 
                                                      OpStore %292 %291 
                              Uniform f32_4* %293 = OpAccessChain %94 %21 
                                       f32_4 %294 = OpLoad %293 
                                       f32_4 %295 = OpLoad %211 
                                         f32 %296 = OpDot %294 %295 
                                Private f32* %297 = OpAccessChain %68 %129 
                                                      OpStore %297 %296 
                                       f32_4 %299 = OpLoad %26 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %68 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_3 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORD4 %303 
                                         i32 %306 = OpLoad %10 
                                         u32 %307 = OpBitcast %306 
                                                      OpStore %305 %307 
                                 Output f32* %308 = OpAccessChain %123 %15 %119 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFNegate %309 
                                 Output f32* %311 = OpAccessChain %123 %15 %119 
                                                      OpStore %311 %310 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 120
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %73 %106 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                               OpDecorate vs_TEXCOORD2 Location 12 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %27 DescriptorSet 27 
                                               OpDecorate %27 Binding 27 
                                               OpDecorate vs_TEXCOORD4 Location 37 
                                               OpDecorate %41 DescriptorSet 41 
                                               OpDecorate %41 Binding 41 
                                               OpDecorate %43 DescriptorSet 43 
                                               OpDecorate %43 Binding 43 
                                               OpDecorate vs_TEXCOORD0 Location 47 
                                               OpDecorate %52 Location 52 
                                               OpMemberDecorate %59 0 Offset 59 
                                               OpMemberDecorate %59 1 Offset 59 
                                               OpMemberDecorate %59 2 Offset 59 
                                               OpDecorate %59 Block 
                                               OpDecorate %61 DescriptorSet 61 
                                               OpDecorate %61 Binding 61 
                                               OpDecorate vs_TEXCOORD5 Location 73 
                                               OpDecorate %106 Location 106 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypePointer Input %10 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                       %13 = OpTypeVector %6 2 
                                       %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %22 = OpTypePointer UniformConstant %21 
  UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                       %25 = OpTypeSampler 
                                       %26 = OpTypePointer UniformConstant %25 
              UniformConstant sampler* %27 = OpVariable UniformConstant 
                                       %29 = OpTypeSampledImage %21 
                                       %36 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Private f32_3* %40 = OpVariable Private 
  UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
              UniformConstant sampler* %43 = OpVariable UniformConstant 
                                       %46 = OpTypePointer Input %13 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                          Input f32_4* %52 = OpVariable Input 
                                       %59 = OpTypeStruct %10 %10 %10 
                                       %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4;}* %61 = OpVariable Uniform 
                                       %62 = OpTypeInt 32 1 
                                   i32 %63 = OpConstant 1 
                                       %64 = OpTypePointer Uniform %10 
                                       %70 = OpTypePointer Private %6 
                          Private f32* %71 = OpVariable Private 
                                       %72 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD5 = OpVariable Input 
                                   i32 %75 = OpConstant 0 
                                       %76 = OpTypeInt 32 0 
                                   u32 %77 = OpConstant 1 
                                       %78 = OpTypePointer Uniform %6 
                                   f32 %84 = OpConstant 3.674022E-40 
                                   u32 %87 = OpConstant 2 
                                   f32 %92 = OpConstant 3.674022E-40 
                                   i32 %95 = OpConstant 2 
                                   u32 %99 = OpConstant 3 
                                      %105 = OpTypePointer Output %10 
                        Output f32_4* %106 = OpVariable Output 
                                      %117 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_4 %14 = OpLoad vs_TEXCOORD2 
                                 f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 f32_4 %16 = OpLoad vs_TEXCOORD2 
                                 f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                 f32_2 %18 = OpFDiv %15 %17 
                                 f32_3 %19 = OpLoad %9 
                                 f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                               OpStore %9 %20 
                   read_only Texture2D %24 = OpLoad %23 
                               sampler %28 = OpLoad %27 
            read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                 f32_3 %31 = OpLoad %9 
                                 f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                 f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                 f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                               OpStore %9 %34 
                                 f32_3 %35 = OpLoad %9 
                                 f32_3 %38 = OpLoad vs_TEXCOORD4 
                                 f32_3 %39 = OpFAdd %35 %38 
                                               OpStore %9 %39 
                   read_only Texture2D %42 = OpLoad %41 
                               sampler %44 = OpLoad %43 
            read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                                 f32_2 %48 = OpLoad vs_TEXCOORD0 
                                 f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                                 f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                               OpStore %40 %50 
                                 f32_3 %51 = OpLoad %40 
                                 f32_4 %53 = OpLoad %52 
                                 f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                 f32_3 %55 = OpFMul %51 %54 
                                               OpStore %40 %55 
                                 f32_3 %56 = OpLoad %40 
                                 f32_3 %57 = OpLoad %9 
                                 f32_3 %58 = OpFMul %56 %57 
                        Uniform f32_4* %65 = OpAccessChain %61 %63 
                                 f32_4 %66 = OpLoad %65 
                                 f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                 f32_3 %68 = OpFNegate %67 
                                 f32_3 %69 = OpFAdd %58 %68 
                                               OpStore %9 %69 
                                   f32 %74 = OpLoad vs_TEXCOORD5 
                          Uniform f32* %79 = OpAccessChain %61 %75 %77 
                                   f32 %80 = OpLoad %79 
                                   f32 %81 = OpFDiv %74 %80 
                                               OpStore %71 %81 
                                   f32 %82 = OpLoad %71 
                                   f32 %83 = OpFNegate %82 
                                   f32 %85 = OpFAdd %83 %84 
                                               OpStore %71 %85 
                                   f32 %86 = OpLoad %71 
                          Uniform f32* %88 = OpAccessChain %61 %75 %87 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpFMul %86 %89 
                                               OpStore %71 %90 
                                   f32 %91 = OpLoad %71 
                                   f32 %93 = OpExtInst %1 40 %91 %92 
                                               OpStore %71 %93 
                                   f32 %94 = OpLoad %71 
                          Uniform f32* %96 = OpAccessChain %61 %95 %87 
                                   f32 %97 = OpLoad %96 
                                   f32 %98 = OpFMul %94 %97 
                         Uniform f32* %100 = OpAccessChain %61 %95 %99 
                                  f32 %101 = OpLoad %100 
                                  f32 %102 = OpFAdd %98 %101 
                                               OpStore %71 %102 
                                  f32 %103 = OpLoad %71 
                                  f32 %104 = OpExtInst %1 43 %103 %92 %84 
                                               OpStore %71 %104 
                                  f32 %107 = OpLoad %71 
                                f32_3 %108 = OpCompositeConstruct %107 %107 %107 
                                f32_3 %109 = OpLoad %9 
                                f32_3 %110 = OpFMul %108 %109 
                       Uniform f32_4* %111 = OpAccessChain %61 %63 
                                f32_4 %112 = OpLoad %111 
                                f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                f32_3 %114 = OpFAdd %110 %113 
                                f32_4 %115 = OpLoad %106 
                                f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                               OpStore %106 %116 
                          Output f32* %118 = OpAccessChain %106 %99 
                                               OpStore %118 %84 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec3 vs_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
float u_xlat8;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD5 = u_xlat1.z;
    vs_TEXCOORD2.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_COLOR0 = in_COLOR0;
    u_xlat8 = u_xlat1.y * _ProjectionParams.x;
    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
    u_xlat1.w = u_xlat8 * 0.5;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat1.xyz = u_xlat4.xxx * u_xlat1.xyz;
    u_xlat4.x = u_xlat1.y * u_xlat1.y;
    u_xlat4.x = u_xlat1.x * u_xlat1.x + (-u_xlat4.x);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    u_xlat4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat4.xxx + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHAbArray, u_xlat1);
    vs_TEXCOORD4.xyz = u_xlat4.xyz + u_xlat2.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + vs_TEXCOORD4.xyz;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    u_xlat6 = vs_TEXCOORD5 * unity_FogParams.z + unity_FogParams.w;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 331
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %127 %132 %137 %144 %145 %156 %157 %185 %189 %317 %323 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD1 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpMemberDecorate %96 2 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %125 0 BuiltIn 125 
                                                      OpMemberDecorate %125 1 BuiltIn 125 
                                                      OpMemberDecorate %125 2 BuiltIn 125 
                                                      OpDecorate %125 Block 
                                                      OpDecorate vs_TEXCOORD5 Location 132 
                                                      OpDecorate vs_TEXCOORD2 Location 137 
                                                      OpDecorate vs_TEXCOORD0 Location 144 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate %157 Location 157 
                                                      OpDecorate vs_TEXCOORD3 Location 185 
                                                      OpDecorate %189 Location 189 
                                                      OpMemberDecorate %255 0 Offset 255 
                                                      OpMemberDecorate %255 1 Offset 255 
                                                      OpMemberDecorate %255 2 Offset 255 
                                                      OpMemberDecorate %255 3 Offset 255 
                                                      OpMemberDecorate %255 4 Offset 255 
                                                      OpMemberDecorate %255 5 Offset 255 
                                                      OpMemberDecorate %255 6 Offset 255 
                                                      OpDecorate %256 ArrayStride 256 
                                                      OpMemberDecorate %257 0 Offset 257 
                                                      OpDecorate %257 Block 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate vs_TEXCOORD4 Location 317 
                                                      OpDecorate %323 Flat 
                                                      OpDecorate %323 Location 323 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %28 %95 %28 
                                              %97 = OpTypePointer Uniform %96 
    Uniform struct {f32_4; f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %123 = OpConstant 1 
                                             %124 = OpTypeArray %27 %123 
                                             %125 = OpTypeStruct %28 %27 %124 
                                             %126 = OpTypePointer Output %125 
        Output struct {f32_4; f32; f32[1];}* %127 = OpVariable Output 
                                             %129 = OpTypePointer Output %28 
                                             %131 = OpTypePointer Output %27 
                         Output f32* vs_TEXCOORD5 = OpVariable Output 
                                         u32 %133 = OpConstant 2 
                                             %134 = OpTypePointer Private %27 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %138 = OpTypeVector %27 2 
                                             %143 = OpTypePointer Output %138 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %145 = OpVariable Input 
                               Output f32_4* %156 = OpVariable Output 
                                Input f32_4* %157 = OpVariable Input 
                                Private f32* %159 = OpVariable Private 
                                         u32 %162 = OpConstant 0 
                                             %163 = OpTypePointer Uniform %27 
                                         f32 %169 = OpConstant 3.674022E-40 
                                       f32_2 %170 = OpConstantComposite %169 %169 
                                         u32 %176 = OpConstant 3 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %186 = OpConstant 3.674022E-40 
                                       f32_4 %187 = OpConstantComposite %186 %186 %186 %186 
                                             %188 = OpTypePointer Input %79 
                                Input f32_3* %189 = OpVariable Input 
                                             %214 = OpTypePointer Private %79 
                              Private f32_3* %215 = OpVariable Private 
                              Private f32_3* %254 = OpVariable Private 
                                             %255 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %256 = OpTypeArray %255 %40 
                                             %257 = OpTypeStruct %256 
                                             %258 = OpTypePointer Uniform %257 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %259 = OpVariable Uniform 
                                         i32 %269 = OpConstant 4 
                                         i32 %277 = OpConstant 5 
                                         i32 %285 = OpConstant 6 
                                         f32 %294 = OpConstant 3.674022E-40 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                             %322 = OpTypePointer Output %35 
                                 Output u32* %323 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD1 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %48 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %48 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %48 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %116 = OpAccessChain %98 %48 %22 
                                       f32_4 %117 = OpLoad %116 
                                       f32_4 %118 = OpLoad %72 
                                       f32_4 %119 = OpVectorShuffle %118 %118 3 3 3 3 
                                       f32_4 %120 = OpFMul %117 %119 
                                       f32_4 %121 = OpLoad %30 
                                       f32_4 %122 = OpFAdd %120 %121 
                                                      OpStore %30 %122 
                                       f32_4 %128 = OpLoad %30 
                               Output f32_4* %130 = OpAccessChain %127 %15 
                                                      OpStore %130 %128 
                                Private f32* %135 = OpAccessChain %30 %133 
                                         f32 %136 = OpLoad %135 
                                                      OpStore vs_TEXCOORD5 %136 
                                       f32_4 %139 = OpLoad %30 
                                       f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                       f32_4 %141 = OpLoad vs_TEXCOORD2 
                                       f32_4 %142 = OpVectorShuffle %141 %140 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %142 
                                       f32_4 %146 = OpLoad %145 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                              Uniform f32_4* %148 = OpAccessChain %98 %64 
                                       f32_4 %149 = OpLoad %148 
                                       f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                       f32_2 %151 = OpFMul %147 %150 
                              Uniform f32_4* %152 = OpAccessChain %98 %64 
                                       f32_4 %153 = OpLoad %152 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                       f32_2 %155 = OpFAdd %151 %154 
                                                      OpStore vs_TEXCOORD0 %155 
                                       f32_4 %158 = OpLoad %157 
                                                      OpStore %156 %158 
                                Private f32* %160 = OpAccessChain %30 %123 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %164 = OpAccessChain %98 %15 %162 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %161 %165 
                                                      OpStore %159 %166 
                                       f32_4 %167 = OpLoad %30 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 3 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %30 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 1 5 3 
                                                      OpStore %30 %173 
                                         f32 %174 = OpLoad %159 
                                         f32 %175 = OpFMul %174 %169 
                                Private f32* %177 = OpAccessChain %30 %176 
                                                      OpStore %177 %175 
                                       f32_4 %178 = OpLoad %30 
                                       f32_2 %179 = OpVectorShuffle %178 %178 2 2 
                                       f32_4 %180 = OpLoad %30 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 3 
                                       f32_2 %182 = OpFAdd %179 %181 
                                       f32_4 %183 = OpLoad vs_TEXCOORD2 
                                       f32_4 %184 = OpVectorShuffle %183 %182 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %184 
                                                      OpStore vs_TEXCOORD3 %187 
                                       f32_3 %190 = OpLoad %189 
                                         i32 %191 = OpLoad %20 
                                         i32 %192 = OpSDiv %191 %46 
                              Uniform f32_4* %193 = OpAccessChain %44 %15 %192 %48 %15 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                         f32 %196 = OpDot %190 %195 
                                Private f32* %197 = OpAccessChain %30 %162 
                                                      OpStore %197 %196 
                                       f32_3 %198 = OpLoad %189 
                                         i32 %199 = OpLoad %20 
                                         i32 %200 = OpSDiv %199 %46 
                              Uniform f32_4* %201 = OpAccessChain %44 %15 %200 %48 %48 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpDot %198 %203 
                                Private f32* %205 = OpAccessChain %30 %123 
                                                      OpStore %205 %204 
                                       f32_3 %206 = OpLoad %189 
                                         i32 %207 = OpLoad %20 
                                         i32 %208 = OpSDiv %207 %46 
                              Uniform f32_4* %209 = OpAccessChain %44 %15 %208 %48 %64 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                         f32 %212 = OpDot %206 %211 
                                Private f32* %213 = OpAccessChain %30 %133 
                                                      OpStore %213 %212 
                                       f32_4 %216 = OpLoad %30 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_4 %218 = OpLoad %30 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %217 %219 
                                Private f32* %221 = OpAccessChain %215 %162 
                                                      OpStore %221 %220 
                                Private f32* %222 = OpAccessChain %215 %162 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 32 %223 
                                Private f32* %225 = OpAccessChain %215 %162 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %215 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 0 0 
                                       f32_4 %228 = OpLoad %30 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %227 %229 
                                       f32_4 %231 = OpLoad %30 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %30 %232 
                                Private f32* %233 = OpAccessChain %30 %123 
                                         f32 %234 = OpLoad %233 
                                Private f32* %235 = OpAccessChain %30 %123 
                                         f32 %236 = OpLoad %235 
                                         f32 %237 = OpFMul %234 %236 
                                Private f32* %238 = OpAccessChain %215 %162 
                                                      OpStore %238 %237 
                                Private f32* %239 = OpAccessChain %30 %162 
                                         f32 %240 = OpLoad %239 
                                Private f32* %241 = OpAccessChain %30 %162 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                Private f32* %244 = OpAccessChain %215 %162 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFAdd %243 %246 
                                Private f32* %248 = OpAccessChain %215 %162 
                                                      OpStore %248 %247 
                                       f32_4 %249 = OpLoad %30 
                                       f32_4 %250 = OpVectorShuffle %249 %249 1 2 2 0 
                                       f32_4 %251 = OpLoad %30 
                                       f32_4 %252 = OpVectorShuffle %251 %251 0 1 2 2 
                                       f32_4 %253 = OpFMul %250 %252 
                                                      OpStore %72 %253 
                                         i32 %260 = OpLoad %8 
                                         i32 %261 = OpSDiv %260 %25 
                              Uniform f32_4* %262 = OpAccessChain %259 %15 %261 %22 
                                       f32_4 %263 = OpLoad %262 
                                       f32_4 %264 = OpLoad %72 
                                         f32 %265 = OpDot %263 %264 
                                Private f32* %266 = OpAccessChain %254 %162 
                                                      OpStore %266 %265 
                                         i32 %267 = OpLoad %8 
                                         i32 %268 = OpSDiv %267 %25 
                              Uniform f32_4* %270 = OpAccessChain %259 %15 %268 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_4 %272 = OpLoad %72 
                                         f32 %273 = OpDot %271 %272 
                                Private f32* %274 = OpAccessChain %254 %123 
                                                      OpStore %274 %273 
                                         i32 %275 = OpLoad %8 
                                         i32 %276 = OpSDiv %275 %25 
                              Uniform f32_4* %278 = OpAccessChain %259 %15 %276 %277 
                                       f32_4 %279 = OpLoad %278 
                                       f32_4 %280 = OpLoad %72 
                                         f32 %281 = OpDot %279 %280 
                                Private f32* %282 = OpAccessChain %254 %133 
                                                      OpStore %282 %281 
                                         i32 %283 = OpLoad %8 
                                         i32 %284 = OpSDiv %283 %25 
                              Uniform f32_4* %286 = OpAccessChain %259 %15 %284 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpLoad %215 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 0 0 
                                       f32_3 %291 = OpFMul %288 %290 
                                       f32_3 %292 = OpLoad %254 
                                       f32_3 %293 = OpFAdd %291 %292 
                                                      OpStore %215 %293 
                                Private f32* %295 = OpAccessChain %30 %176 
                                                      OpStore %295 %294 
                                         i32 %296 = OpLoad %8 
                                         i32 %297 = OpSDiv %296 %25 
                              Uniform f32_4* %298 = OpAccessChain %259 %15 %297 %15 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpLoad %30 
                                         f32 %301 = OpDot %299 %300 
                                Private f32* %302 = OpAccessChain %72 %162 
                                                      OpStore %302 %301 
                                         i32 %303 = OpLoad %8 
                                         i32 %304 = OpSDiv %303 %25 
                              Uniform f32_4* %305 = OpAccessChain %259 %15 %304 %48 
                                       f32_4 %306 = OpLoad %305 
                                       f32_4 %307 = OpLoad %30 
                                         f32 %308 = OpDot %306 %307 
                                Private f32* %309 = OpAccessChain %72 %123 
                                                      OpStore %309 %308 
                                         i32 %310 = OpLoad %8 
                                         i32 %311 = OpSDiv %310 %25 
                              Uniform f32_4* %312 = OpAccessChain %259 %15 %311 %64 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpLoad %30 
                                         f32 %315 = OpDot %313 %314 
                                Private f32* %316 = OpAccessChain %72 %133 
                                                      OpStore %316 %315 
                                       f32_3 %318 = OpLoad %215 
                                       f32_4 %319 = OpLoad %72 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFAdd %318 %320 
                                                      OpStore vs_TEXCOORD4 %321 
                                         i32 %324 = OpLoad %10 
                                         u32 %325 = OpBitcast %324 
                                                      OpStore %323 %325 
                                 Output f32* %326 = OpAccessChain %127 %15 %123 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFNegate %327 
                                 Output f32* %329 = OpAccessChain %127 %15 %123 
                                                      OpStore %329 %328 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 120
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %37 %47 %52 %73 %106 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                               OpDecorate vs_TEXCOORD2 Location 12 
                                               OpDecorate %23 DescriptorSet 23 
                                               OpDecorate %23 Binding 23 
                                               OpDecorate %27 DescriptorSet 27 
                                               OpDecorate %27 Binding 27 
                                               OpDecorate vs_TEXCOORD4 Location 37 
                                               OpDecorate %41 DescriptorSet 41 
                                               OpDecorate %41 Binding 41 
                                               OpDecorate %43 DescriptorSet 43 
                                               OpDecorate %43 Binding 43 
                                               OpDecorate vs_TEXCOORD0 Location 47 
                                               OpDecorate %52 Location 52 
                                               OpMemberDecorate %59 0 Offset 59 
                                               OpMemberDecorate %59 1 Offset 59 
                                               OpMemberDecorate %59 2 Offset 59 
                                               OpDecorate %59 Block 
                                               OpDecorate %61 DescriptorSet 61 
                                               OpDecorate %61 Binding 61 
                                               OpDecorate vs_TEXCOORD5 Location 73 
                                               OpDecorate %106 Location 106 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypePointer Input %10 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                       %13 = OpTypeVector %6 2 
                                       %21 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %22 = OpTypePointer UniformConstant %21 
  UniformConstant read_only Texture2D* %23 = OpVariable UniformConstant 
                                       %25 = OpTypeSampler 
                                       %26 = OpTypePointer UniformConstant %25 
              UniformConstant sampler* %27 = OpVariable UniformConstant 
                                       %29 = OpTypeSampledImage %21 
                                       %36 = OpTypePointer Input %7 
                 Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Private f32_3* %40 = OpVariable Private 
  UniformConstant read_only Texture2D* %41 = OpVariable UniformConstant 
              UniformConstant sampler* %43 = OpVariable UniformConstant 
                                       %46 = OpTypePointer Input %13 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                          Input f32_4* %52 = OpVariable Input 
                                       %59 = OpTypeStruct %10 %10 %10 
                                       %60 = OpTypePointer Uniform %59 
Uniform struct {f32_4; f32_4; f32_4;}* %61 = OpVariable Uniform 
                                       %62 = OpTypeInt 32 1 
                                   i32 %63 = OpConstant 1 
                                       %64 = OpTypePointer Uniform %10 
                                       %70 = OpTypePointer Private %6 
                          Private f32* %71 = OpVariable Private 
                                       %72 = OpTypePointer Input %6 
                   Input f32* vs_TEXCOORD5 = OpVariable Input 
                                   i32 %75 = OpConstant 0 
                                       %76 = OpTypeInt 32 0 
                                   u32 %77 = OpConstant 1 
                                       %78 = OpTypePointer Uniform %6 
                                   f32 %84 = OpConstant 3.674022E-40 
                                   u32 %87 = OpConstant 2 
                                   f32 %92 = OpConstant 3.674022E-40 
                                   i32 %95 = OpConstant 2 
                                   u32 %99 = OpConstant 3 
                                      %105 = OpTypePointer Output %10 
                        Output f32_4* %106 = OpVariable Output 
                                      %117 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_4 %14 = OpLoad vs_TEXCOORD2 
                                 f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                 f32_4 %16 = OpLoad vs_TEXCOORD2 
                                 f32_2 %17 = OpVectorShuffle %16 %16 3 3 
                                 f32_2 %18 = OpFDiv %15 %17 
                                 f32_3 %19 = OpLoad %9 
                                 f32_3 %20 = OpVectorShuffle %19 %18 3 4 2 
                                               OpStore %9 %20 
                   read_only Texture2D %24 = OpLoad %23 
                               sampler %28 = OpLoad %27 
            read_only Texture2DSampled %30 = OpSampledImage %24 %28 
                                 f32_3 %31 = OpLoad %9 
                                 f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                                 f32_4 %33 = OpImageSampleImplicitLod %30 %32 
                                 f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                               OpStore %9 %34 
                                 f32_3 %35 = OpLoad %9 
                                 f32_3 %38 = OpLoad vs_TEXCOORD4 
                                 f32_3 %39 = OpFAdd %35 %38 
                                               OpStore %9 %39 
                   read_only Texture2D %42 = OpLoad %41 
                               sampler %44 = OpLoad %43 
            read_only Texture2DSampled %45 = OpSampledImage %42 %44 
                                 f32_2 %48 = OpLoad vs_TEXCOORD0 
                                 f32_4 %49 = OpImageSampleImplicitLod %45 %48 
                                 f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                               OpStore %40 %50 
                                 f32_3 %51 = OpLoad %40 
                                 f32_4 %53 = OpLoad %52 
                                 f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                 f32_3 %55 = OpFMul %51 %54 
                                               OpStore %40 %55 
                                 f32_3 %56 = OpLoad %40 
                                 f32_3 %57 = OpLoad %9 
                                 f32_3 %58 = OpFMul %56 %57 
                        Uniform f32_4* %65 = OpAccessChain %61 %63 
                                 f32_4 %66 = OpLoad %65 
                                 f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                                 f32_3 %68 = OpFNegate %67 
                                 f32_3 %69 = OpFAdd %58 %68 
                                               OpStore %9 %69 
                                   f32 %74 = OpLoad vs_TEXCOORD5 
                          Uniform f32* %79 = OpAccessChain %61 %75 %77 
                                   f32 %80 = OpLoad %79 
                                   f32 %81 = OpFDiv %74 %80 
                                               OpStore %71 %81 
                                   f32 %82 = OpLoad %71 
                                   f32 %83 = OpFNegate %82 
                                   f32 %85 = OpFAdd %83 %84 
                                               OpStore %71 %85 
                                   f32 %86 = OpLoad %71 
                          Uniform f32* %88 = OpAccessChain %61 %75 %87 
                                   f32 %89 = OpLoad %88 
                                   f32 %90 = OpFMul %86 %89 
                                               OpStore %71 %90 
                                   f32 %91 = OpLoad %71 
                                   f32 %93 = OpExtInst %1 40 %91 %92 
                                               OpStore %71 %93 
                                   f32 %94 = OpLoad %71 
                          Uniform f32* %96 = OpAccessChain %61 %95 %87 
                                   f32 %97 = OpLoad %96 
                                   f32 %98 = OpFMul %94 %97 
                         Uniform f32* %100 = OpAccessChain %61 %95 %99 
                                  f32 %101 = OpLoad %100 
                                  f32 %102 = OpFAdd %98 %101 
                                               OpStore %71 %102 
                                  f32 %103 = OpLoad %71 
                                  f32 %104 = OpExtInst %1 43 %103 %92 %84 
                                               OpStore %71 %104 
                                  f32 %107 = OpLoad %71 
                                f32_3 %108 = OpCompositeConstruct %107 %107 %107 
                                f32_3 %109 = OpLoad %9 
                                f32_3 %110 = OpFMul %108 %109 
                       Uniform f32_4* %111 = OpAccessChain %61 %63 
                                f32_4 %112 = OpLoad %111 
                                f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                f32_3 %114 = OpFAdd %110 %113 
                                f32_4 %115 = OpLoad %106 
                                f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                               OpStore %106 %116 
                          Output f32* %118 = OpAccessChain %106 %99 
                                               OpStore %118 %84 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
}
 Pass {
  Name "DEFERRED"
  LOD 200
  Tags { "LIGHTMODE" = "DEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 273583
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 199
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %184 %186 %190 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate vs_TEXCOORD3 Location 186 
                                                      OpDecorate %190 Flat 
                                                      OpDecorate %190 Location 190 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_4 %188 = OpConstantComposite %187 %187 %187 %187 
                                             %189 = OpTypePointer Output %31 
                                 Output u32* %190 = OpVariable Output 
                                             %193 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                                      OpStore vs_TEXCOORD3 %188 
                                         i32 %191 = OpLoad %10 
                                         u32 %192 = OpBitcast %191 
                                                      OpStore %190 %192 
                                 Output f32* %194 = OpAccessChain %116 %15 %112 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                 Output f32* %197 = OpAccessChain %116 %15 %112 
                                                      OpStore %197 %196 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %31 %42 %45 %47 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %31 Location 31 
                                             OpDecorate %42 Location 42 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypePointer Input %24 
                        Input f32_4* %31 = OpVariable Input 
                                 f32 %37 = OpConstant 3.674022E-40 
                                     %38 = OpTypeInt 32 0 
                                 u32 %39 = OpConstant 3 
                                     %40 = OpTypePointer Output %6 
                       Output f32_4* %42 = OpVariable Output 
                                 f32 %43 = OpConstant 3.674022E-40 
                               f32_4 %44 = OpConstantComposite %43 %43 %43 %43 
                       Output f32_4* %45 = OpVariable Output 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_3 %50 = OpConstantComposite %49 %49 %49 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %37 %37 %37 %37 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %32 = OpLoad %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                               f32_3 %34 = OpFMul %29 %33 
                               f32_4 %35 = OpLoad %28 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %28 %36 
                         Output f32* %41 = OpAccessChain %28 %39 
                                             OpStore %41 %37 
                                             OpStore %42 %44 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                               f32_3 %51 = OpFMul %48 %50 
                               f32_3 %52 = OpFAdd %51 %50 
                               f32_4 %53 = OpLoad %45 
                               f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                             OpStore %45 %54 
                         Output f32* %55 = OpAccessChain %45 %39 
                                             OpStore %55 %37 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %147 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate vs_TEXCOORD3 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_4 %151 = OpConstantComposite %150 %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                       f32_4 %148 = OpLoad %147 
                                                      OpStore %146 %148 
                                                      OpStore vs_TEXCOORD3 %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %85 %23 %81 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %31 %42 %45 %47 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %31 Location 31 
                                             OpDecorate %42 Location 42 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypePointer Input %24 
                        Input f32_4* %31 = OpVariable Input 
                                 f32 %37 = OpConstant 3.674022E-40 
                                     %38 = OpTypeInt 32 0 
                                 u32 %39 = OpConstant 3 
                                     %40 = OpTypePointer Output %6 
                       Output f32_4* %42 = OpVariable Output 
                                 f32 %43 = OpConstant 3.674022E-40 
                               f32_4 %44 = OpConstantComposite %43 %43 %43 %43 
                       Output f32_4* %45 = OpVariable Output 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_3 %50 = OpConstantComposite %49 %49 %49 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %37 %37 %37 %37 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %32 = OpLoad %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                               f32_3 %34 = OpFMul %29 %33 
                               f32_4 %35 = OpLoad %28 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %28 %36 
                         Output f32* %41 = OpAccessChain %28 %39 
                                             OpStore %41 %37 
                                             OpStore %42 %44 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                               f32_3 %51 = OpFMul %48 %50 
                               f32_3 %52 = OpFAdd %51 %50 
                               f32_4 %53 = OpLoad %45 
                               f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                             OpStore %45 %54 
                         Output f32* %55 = OpAccessChain %45 %39 
                                             OpStore %55 %37 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	int unity_BaseInstanceID;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
int u_xlati9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlati9 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAbArray, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD4.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 270
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %192 %193 %195 %248 %261 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpMemberDecorate %220 0 Offset 220 
                                                      OpMemberDecorate %220 1 Offset 220 
                                                      OpMemberDecorate %220 2 Offset 220 
                                                      OpMemberDecorate %220 3 Offset 220 
                                                      OpMemberDecorate %220 4 Offset 220 
                                                      OpMemberDecorate %220 5 Offset 220 
                                                      OpMemberDecorate %220 6 Offset 220 
                                                      OpDecorate %221 ArrayStride 221 
                                                      OpMemberDecorate %222 0 Offset 222 
                                                      OpDecorate %222 Block 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate vs_TEXCOORD4 Location 248 
                                                      OpDecorate %261 Flat 
                                                      OpDecorate %261 Location 261 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
                              Private f32_3* %219 = OpVariable Private 
                                             %220 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %221 = OpTypeArray %220 %40 
                                             %222 = OpTypeStruct %221 
                                             %223 = OpTypePointer Uniform %222 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %224 = OpVariable Uniform 
                                         i32 %234 = OpConstant 4 
                                         i32 %242 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %251 = OpConstant 6 
                                             %260 = OpTypePointer Output %35 
                                 Output u32* %261 = OpVariable Output 
                                             %264 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                                      OpStore vs_TEXCOORD3 %197 
                                Private f32* %198 = OpAccessChain %174 %116 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %174 %116 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                Private f32* %203 = OpAccessChain %30 %153 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %174 %153 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %174 %153 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                Private f32* %209 = OpAccessChain %30 %153 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFNegate %210 
                                         f32 %212 = OpFAdd %208 %211 
                                Private f32* %213 = OpAccessChain %30 %153 
                                                      OpStore %213 %212 
                                       f32_3 %214 = OpLoad %174 
                                       f32_4 %215 = OpVectorShuffle %214 %214 1 2 2 0 
                                       f32_3 %216 = OpLoad %174 
                                       f32_4 %217 = OpVectorShuffle %216 %216 0 1 2 2 
                                       f32_4 %218 = OpFMul %215 %217 
                                                      OpStore %72 %218 
                                         i32 %225 = OpLoad %8 
                                         i32 %226 = OpSDiv %225 %25 
                              Uniform f32_4* %227 = OpAccessChain %224 %15 %226 %22 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %72 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %219 %153 
                                                      OpStore %231 %230 
                                         i32 %232 = OpLoad %8 
                                         i32 %233 = OpSDiv %232 %25 
                              Uniform f32_4* %235 = OpAccessChain %224 %15 %233 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpLoad %72 
                                         f32 %238 = OpDot %236 %237 
                                Private f32* %239 = OpAccessChain %219 %116 
                                                      OpStore %239 %238 
                                         i32 %240 = OpLoad %8 
                                         i32 %241 = OpSDiv %240 %25 
                              Uniform f32_4* %243 = OpAccessChain %224 %15 %241 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %72 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %219 %171 
                                                      OpStore %247 %246 
                                         i32 %249 = OpLoad %8 
                                         i32 %250 = OpSDiv %249 %25 
                              Uniform f32_4* %252 = OpAccessChain %224 %15 %250 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %30 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_3 %258 = OpLoad %219 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore vs_TEXCOORD4 %259 
                                         i32 %262 = OpLoad %10 
                                         u32 %263 = OpBitcast %262 
                                                      OpStore %261 %263 
                                 Output f32* %265 = OpAccessChain %120 %15 %116 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                 Output f32* %268 = OpAccessChain %120 %15 %116 
                                                      OpStore %268 %267 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 140
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %29 %34 %43 %46 %48 %61 %117 %132 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %29 Location 29 
                                                      OpDecorate %34 Location 34 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %46 Location 46 
                                                      OpDecorate vs_TEXCOORD1 Location 48 
                                                      OpDecorate %61 Flat 
                                                      OpDecorate %61 Location 61 
                                                      OpMemberDecorate %64 0 Offset 64 
                                                      OpMemberDecorate %64 1 Offset 64 
                                                      OpDecorate %64 Block 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpMemberDecorate %83 0 Offset 83 
                                                      OpMemberDecorate %83 1 Offset 83 
                                                      OpMemberDecorate %83 2 Offset 83 
                                                      OpMemberDecorate %83 3 Offset 83 
                                                      OpMemberDecorate %83 4 Offset 83 
                                                      OpMemberDecorate %83 5 Offset 83 
                                                      OpMemberDecorate %83 6 Offset 83 
                                                      OpDecorate %84 SpecId 84 
                                                      OpDecorate %85 ArrayStride 85 
                                                      OpMemberDecorate %86 0 Offset 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %88 DescriptorSet 88 
                                                      OpDecorate %88 Binding 88 
                                                      OpDecorate vs_TEXCOORD4 Location 117 
                                                      OpDecorate %132 Location 132 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypePointer Input %24 
                                 Input f32_4* %29 = OpVariable Input 
                                              %33 = OpTypePointer Output %24 
                                Output f32_4* %34 = OpVariable Output 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %39 = OpTypeInt 32 0 
                                          u32 %40 = OpConstant 3 
                                              %41 = OpTypePointer Output %6 
                                Output f32_4* %43 = OpVariable Output 
                                          f32 %44 = OpConstant 3.674022E-40 
                                        f32_4 %45 = OpConstantComposite %44 %44 %44 %44 
                                Output f32_4* %46 = OpVariable Output 
                                              %47 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %50 = OpConstant 3.674022E-40 
                                        f32_3 %51 = OpConstantComposite %50 %50 %50 
                                              %57 = OpTypeInt 32 1 
                                              %58 = OpTypePointer Private %57 
                                 Private i32* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %39 
                                   Input u32* %61 = OpVariable Input 
                                              %64 = OpTypeStruct %57 %57 
                                              %65 = OpTypePointer Uniform %64 
                  Uniform struct {i32; i32;}* %66 = OpVariable Uniform 
                                          i32 %67 = OpConstant 0 
                                              %68 = OpTypePointer Uniform %57 
                                          i32 %73 = OpConstant 7 
                                              %75 = OpTypePointer Private %24 
                               Private f32_4* %76 = OpVariable Private 
                                              %80 = OpTypePointer Private %6 
                               Private f32_3* %82 = OpVariable Private 
                                              %83 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 
                                          i32 %84 = OpSpecConstant 2 
                                              %85 = OpTypeArray %83 %84 
                                              %86 = OpTypeStruct %85 
                                              %87 = OpTypePointer Uniform %86 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %88 = OpVariable Uniform 
                                              %91 = OpTypePointer Uniform %24 
                                          u32 %96 = OpConstant 0 
                                         i32 %100 = OpConstant 1 
                                         u32 %105 = OpConstant 1 
                                         i32 %109 = OpConstant 2 
                                         u32 %114 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                       f32_3 %124 = OpConstantComposite %44 %44 %44 
                               Output f32_4* %132 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_3 %32 = OpFMul %27 %31 
                                                      OpStore %9 %32 
                                        f32_3 %35 = OpLoad %9 
                                        f32_4 %36 = OpLoad %34 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %34 %37 
                                  Output f32* %42 = OpAccessChain %34 %40 
                                                      OpStore %42 %38 
                                                      OpStore %43 %45 
                                        f32_3 %49 = OpLoad vs_TEXCOORD1 
                                        f32_3 %52 = OpFMul %49 %51 
                                        f32_3 %53 = OpFAdd %52 %51 
                                        f32_4 %54 = OpLoad %46 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 6 3 
                                                      OpStore %46 %55 
                                  Output f32* %56 = OpAccessChain %46 %40 
                                                      OpStore %56 %38 
                                          u32 %62 = OpLoad %61 
                                          i32 %63 = OpBitcast %62 
                                 Uniform i32* %69 = OpAccessChain %66 %67 
                                          i32 %70 = OpLoad %69 
                                          i32 %71 = OpIAdd %63 %70 
                                                      OpStore %59 %71 
                                          i32 %72 = OpLoad %59 
                                          i32 %74 = OpIMul %72 %73 
                                                      OpStore %59 %74 
                                        f32_3 %77 = OpLoad vs_TEXCOORD1 
                                        f32_4 %78 = OpLoad %76 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %76 %79 
                                 Private f32* %81 = OpAccessChain %76 %40 
                                                      OpStore %81 %38 
                                          i32 %89 = OpLoad %59 
                                          i32 %90 = OpSDiv %89 %73 
                               Uniform f32_4* %92 = OpAccessChain %88 %67 %90 %67 
                                        f32_4 %93 = OpLoad %92 
                                        f32_4 %94 = OpLoad %76 
                                          f32 %95 = OpDot %93 %94 
                                 Private f32* %97 = OpAccessChain %82 %96 
                                                      OpStore %97 %95 
                                          i32 %98 = OpLoad %59 
                                          i32 %99 = OpSDiv %98 %73 
                              Uniform f32_4* %101 = OpAccessChain %88 %67 %99 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpLoad %76 
                                         f32 %104 = OpDot %102 %103 
                                Private f32* %106 = OpAccessChain %82 %105 
                                                      OpStore %106 %104 
                                         i32 %107 = OpLoad %59 
                                         i32 %108 = OpSDiv %107 %73 
                              Uniform f32_4* %110 = OpAccessChain %88 %67 %108 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %76 
                                         f32 %113 = OpDot %111 %112 
                                Private f32* %115 = OpAccessChain %82 %114 
                                                      OpStore %115 %113 
                                       f32_3 %116 = OpLoad %82 
                                       f32_3 %118 = OpLoad vs_TEXCOORD4 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %125 = OpExtInst %1 40 %123 %124 
                                       f32_4 %126 = OpLoad %76 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                                      OpStore %76 %127 
                                       f32_3 %128 = OpLoad %9 
                                       f32_4 %129 = OpLoad %76 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                                      OpStore %9 %131 
                                       f32_3 %133 = OpLoad %9 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpExtInst %1 29 %134 
                                       f32_4 %136 = OpLoad %132 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %132 %137 
                                 Output f32* %138 = OpAccessChain %132 %40 
                                                      OpStore %138 %38 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 248
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %155 %157 %237 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD3 Location 157 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                Input f32_4* %155 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_4 %159 = OpConstantComposite %158 %158 %158 %158 
                              Private f32_4* %176 = OpVariable Private 
                                             %182 = OpTypePointer Private %51 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %189 = OpConstant 4 
                                         i32 %195 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         u32 %213 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                       f32_3 %240 = OpConstantComposite %158 %158 %158 
                                             %242 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                       f32_4 %156 = OpLoad %155 
                                                      OpStore %154 %156 
                                                      OpStore vs_TEXCOORD3 %159 
                                Private f32* %160 = OpAccessChain %9 %83 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %83 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %45 %120 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %120 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %9 %120 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %45 %120 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                         f32 %174 = OpFAdd %170 %173 
                                Private f32* %175 = OpAccessChain %45 %120 
                                                      OpStore %175 %174 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %176 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %47 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %176 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %183 %120 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %176 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %183 %83 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %176 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %183 %134 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %21 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %45 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %183 
                                       f32_3 %209 = OpFAdd %207 %208 
                                       f32_4 %210 = OpLoad %45 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %45 %211 
                                Private f32* %214 = OpAccessChain %9 %213 
                                                      OpStore %214 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %29 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %9 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %176 %120 
                                                      OpStore %219 %218 
                              Uniform f32_4* %220 = OpAccessChain %21 %24 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %9 
                                         f32 %223 = OpDot %221 %222 
                                Private f32* %224 = OpAccessChain %176 %83 
                                                      OpStore %224 %223 
                              Uniform f32_4* %225 = OpAccessChain %21 %37 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %9 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %176 %134 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_4 %232 = OpLoad %176 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %234 = OpFAdd %231 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %9 %236 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %241 = OpExtInst %1 40 %239 %240 
                                                      OpStore vs_TEXCOORD4 %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFNegate %244 
                                 Output f32* %246 = OpAccessChain %87 %29 %83 
                                                      OpStore %246 %245 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %34 %40 %43 %54 %57 %58 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpDecorate %34 Location 34 
                                             OpDecorate vs_TEXCOORD4 Location 40 
                                             OpDecorate %43 Location 43 
                                             OpDecorate %54 Location 54 
                                             OpDecorate %57 Location 57 
                                             OpDecorate vs_TEXCOORD1 Location 58 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %33 = OpTypePointer Output %24 
                       Output f32_4* %34 = OpVariable Output 
                                     %39 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                       Output f32_4* %43 = OpVariable Output 
                                 f32 %49 = OpConstant 3.674022E-40 
                                     %50 = OpTypeInt 32 0 
                                 u32 %51 = OpConstant 3 
                                     %52 = OpTypePointer Output %6 
                       Output f32_4* %54 = OpVariable Output 
                                 f32 %55 = OpConstant 3.674022E-40 
                               f32_4 %56 = OpConstantComposite %55 %55 %55 %55 
                       Output f32_4* %57 = OpVariable Output 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %60 = OpConstant 3.674022E-40 
                               f32_3 %61 = OpConstantComposite %60 %60 %60 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %35 = OpLoad %9 
                               f32_4 %36 = OpLoad %34 
                               f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                             OpStore %34 %37 
                               f32_3 %38 = OpLoad %9 
                               f32_3 %41 = OpLoad vs_TEXCOORD4 
                               f32_3 %42 = OpFMul %38 %41 
                                             OpStore %9 %42 
                               f32_3 %44 = OpLoad %9 
                               f32_3 %45 = OpFNegate %44 
                               f32_3 %46 = OpExtInst %1 29 %45 
                               f32_4 %47 = OpLoad %43 
                               f32_4 %48 = OpVectorShuffle %47 %46 4 5 6 3 
                                             OpStore %43 %48 
                         Output f32* %53 = OpAccessChain %34 %51 
                                             OpStore %53 %49 
                                             OpStore %54 %56 
                               f32_3 %59 = OpLoad vs_TEXCOORD1 
                               f32_3 %62 = OpFMul %59 %61 
                               f32_3 %63 = OpFAdd %62 %61 
                               f32_4 %64 = OpLoad %57 
                               f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                             OpStore %57 %65 
                         Output f32* %66 = OpAccessChain %57 %51 
                                             OpStore %66 %49 
                         Output f32* %67 = OpAccessChain %43 %51 
                                             OpStore %67 %49 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
flat out uint vs_SV_InstanceID0;
float u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 199
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %28 %77 %116 %128 %129 %141 %177 %183 %184 %186 %190 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %28 Location 28 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpMemberDecorate %35 0 Offset 35 
                                                      OpMemberDecorate %35 1 Offset 35 
                                                      OpDecorate %36 SpecId 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate %91 ArrayStride 91 
                                                      OpMemberDecorate %92 0 Offset 92 
                                                      OpMemberDecorate %92 1 Offset 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate %94 DescriptorSet 94 
                                                      OpDecorate %94 Binding 94 
                                                      OpMemberDecorate %114 0 BuiltIn 114 
                                                      OpMemberDecorate %114 1 BuiltIn 114 
                                                      OpMemberDecorate %114 2 BuiltIn 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 128 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %141 Location 141 
                                                      OpDecorate vs_TEXCOORD1 Location 177 
                                                      OpDecorate %183 Location 183 
                                                      OpDecorate %184 Location 184 
                                                      OpDecorate vs_TEXCOORD3 Location 186 
                                                      OpDecorate %190 Flat 
                                                      OpDecorate %190 Location 190 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                          i32 %21 = OpConstant 3 
                                              %23 = OpTypeFloat 32 
                                              %24 = OpTypeVector %23 4 
                                              %25 = OpTypePointer Private %24 
                               Private f32_4* %26 = OpVariable Private 
                                              %27 = OpTypePointer Input %24 
                                 Input f32_4* %28 = OpVariable Input 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %24 %32 
                                              %34 = OpTypeArray %24 %32 
                                              %35 = OpTypeStruct %33 %34 
                                          i32 %36 = OpSpecConstant 2 
                                              %37 = OpTypeArray %35 %36 
                                              %38 = OpTypeStruct %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %40 = OpVariable Uniform 
                                          i32 %42 = OpConstant 8 
                                          i32 %44 = OpConstant 1 
                                              %45 = OpTypePointer Uniform %24 
                                          i32 %60 = OpConstant 2 
                               Private f32_4* %68 = OpVariable Private 
                                              %75 = OpTypeVector %23 3 
                                              %76 = OpTypePointer Output %75 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %91 = OpTypeArray %24 %32 
                                              %92 = OpTypeStruct %91 %24 
                                              %93 = OpTypePointer Uniform %92 
           Uniform struct {f32_4[4]; f32_4;}* %94 = OpVariable Uniform 
                                         u32 %112 = OpConstant 1 
                                             %113 = OpTypeArray %23 %112 
                                             %114 = OpTypeStruct %24 %23 %113 
                                             %115 = OpTypePointer Output %114 
        Output struct {f32_4; f32; f32[1];}* %116 = OpVariable Output 
                                             %124 = OpTypePointer Output %24 
                                             %126 = OpTypeVector %23 2 
                                             %127 = OpTypePointer Output %126 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %129 = OpVariable Input 
                                             %140 = OpTypePointer Input %75 
                                Input f32_3* %141 = OpVariable Input 
                                         u32 %149 = OpConstant 0 
                                             %150 = OpTypePointer Private %23 
                                         u32 %167 = OpConstant 2 
                                Private f32* %169 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %183 = OpVariable Output 
                                Input f32_4* %184 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %187 = OpConstant 3.674022E-40 
                                       f32_4 %188 = OpConstantComposite %187 %187 %187 %187 
                                             %189 = OpTypePointer Output %31 
                                 Output u32* %190 = OpVariable Output 
                                             %193 = OpTypePointer Output %23 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %20 = OpLoad %8 
                                          i32 %22 = OpShiftLeftLogical %20 %21 
                                                      OpStore %8 %22 
                                        f32_4 %29 = OpLoad %28 
                                        f32_4 %30 = OpVectorShuffle %29 %29 1 1 1 1 
                                          i32 %41 = OpLoad %8 
                                          i32 %43 = OpSDiv %41 %42 
                               Uniform f32_4* %46 = OpAccessChain %40 %15 %43 %15 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFMul %30 %47 
                                                      OpStore %26 %48 
                                          i32 %49 = OpLoad %8 
                                          i32 %50 = OpSDiv %49 %42 
                               Uniform f32_4* %51 = OpAccessChain %40 %15 %50 %15 %15 
                                        f32_4 %52 = OpLoad %51 
                                        f32_4 %53 = OpLoad %28 
                                        f32_4 %54 = OpVectorShuffle %53 %53 0 0 0 0 
                                        f32_4 %55 = OpFMul %52 %54 
                                        f32_4 %56 = OpLoad %26 
                                        f32_4 %57 = OpFAdd %55 %56 
                                                      OpStore %26 %57 
                                          i32 %58 = OpLoad %8 
                                          i32 %59 = OpSDiv %58 %42 
                               Uniform f32_4* %61 = OpAccessChain %40 %15 %59 %15 %60 
                                        f32_4 %62 = OpLoad %61 
                                        f32_4 %63 = OpLoad %28 
                                        f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                        f32_4 %65 = OpFMul %62 %64 
                                        f32_4 %66 = OpLoad %26 
                                        f32_4 %67 = OpFAdd %65 %66 
                                                      OpStore %26 %67 
                                        f32_4 %69 = OpLoad %26 
                                          i32 %70 = OpLoad %8 
                                          i32 %71 = OpSDiv %70 %42 
                               Uniform f32_4* %72 = OpAccessChain %40 %15 %71 %15 %21 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %69 %73 
                                                      OpStore %68 %74 
                                          i32 %78 = OpLoad %8 
                                          i32 %79 = OpSDiv %78 %42 
                               Uniform f32_4* %80 = OpAccessChain %40 %15 %79 %15 %21 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_4 %83 = OpLoad %28 
                                        f32_3 %84 = OpVectorShuffle %83 %83 3 3 3 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %26 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFAdd %85 %87 
                                                      OpStore vs_TEXCOORD2 %88 
                                        f32_4 %89 = OpLoad %68 
                                        f32_4 %90 = OpVectorShuffle %89 %89 1 1 1 1 
                               Uniform f32_4* %95 = OpAccessChain %94 %15 %44 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpFMul %90 %96 
                                                      OpStore %26 %97 
                               Uniform f32_4* %98 = OpAccessChain %94 %15 %15 
                                        f32_4 %99 = OpLoad %98 
                                       f32_4 %100 = OpLoad %68 
                                       f32_4 %101 = OpVectorShuffle %100 %100 0 0 0 0 
                                       f32_4 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %26 
                                       f32_4 %104 = OpFAdd %102 %103 
                                                      OpStore %26 %104 
                              Uniform f32_4* %105 = OpAccessChain %94 %15 %60 
                                       f32_4 %106 = OpLoad %105 
                                       f32_4 %107 = OpLoad %68 
                                       f32_4 %108 = OpVectorShuffle %107 %107 2 2 2 2 
                                       f32_4 %109 = OpFMul %106 %108 
                                       f32_4 %110 = OpLoad %26 
                                       f32_4 %111 = OpFAdd %109 %110 
                                                      OpStore %26 %111 
                              Uniform f32_4* %117 = OpAccessChain %94 %15 %21 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpLoad %68 
                                       f32_4 %120 = OpVectorShuffle %119 %119 3 3 3 3 
                                       f32_4 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %26 
                                       f32_4 %123 = OpFAdd %121 %122 
                               Output f32_4* %125 = OpAccessChain %116 %15 
                                                      OpStore %125 %123 
                                       f32_4 %130 = OpLoad %129 
                                       f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              Uniform f32_4* %132 = OpAccessChain %94 %44 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_2 %135 = OpFMul %131 %134 
                              Uniform f32_4* %136 = OpAccessChain %94 %44 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                                      OpStore vs_TEXCOORD0 %139 
                                       f32_3 %142 = OpLoad %141 
                                         i32 %143 = OpLoad %8 
                                         i32 %144 = OpSDiv %143 %42 
                              Uniform f32_4* %145 = OpAccessChain %40 %15 %144 %44 %15 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %142 %147 
                                Private f32* %151 = OpAccessChain %26 %149 
                                                      OpStore %151 %148 
                                       f32_3 %152 = OpLoad %141 
                                         i32 %153 = OpLoad %8 
                                         i32 %154 = OpSDiv %153 %42 
                              Uniform f32_4* %155 = OpAccessChain %40 %15 %154 %44 %44 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %152 %157 
                                Private f32* %159 = OpAccessChain %26 %112 
                                                      OpStore %159 %158 
                                       f32_3 %160 = OpLoad %141 
                                         i32 %161 = OpLoad %8 
                                         i32 %162 = OpSDiv %161 %42 
                              Uniform f32_4* %163 = OpAccessChain %40 %15 %162 %44 %60 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %160 %165 
                                Private f32* %168 = OpAccessChain %26 %167 
                                                      OpStore %168 %166 
                                       f32_4 %170 = OpLoad %26 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %26 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpDot %171 %173 
                                                      OpStore %169 %174 
                                         f32 %175 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %169 %176 
                                         f32 %178 = OpLoad %169 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %26 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                                      OpStore vs_TEXCOORD1 %182 
                                       f32_4 %185 = OpLoad %184 
                                                      OpStore %183 %185 
                                                      OpStore vs_TEXCOORD3 %188 
                                         i32 %191 = OpLoad %10 
                                         u32 %192 = OpBitcast %191 
                                                      OpStore %190 %192 
                                 Output f32* %194 = OpAccessChain %116 %15 %112 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                 Output f32* %197 = OpAccessChain %116 %15 %112 
                                                      OpStore %197 %196 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %31 %42 %45 %47 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %31 Location 31 
                                             OpDecorate %42 Location 42 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypePointer Input %24 
                        Input f32_4* %31 = OpVariable Input 
                                 f32 %37 = OpConstant 3.674022E-40 
                                     %38 = OpTypeInt 32 0 
                                 u32 %39 = OpConstant 3 
                                     %40 = OpTypePointer Output %6 
                       Output f32_4* %42 = OpVariable Output 
                                 f32 %43 = OpConstant 3.674022E-40 
                               f32_4 %44 = OpConstantComposite %43 %43 %43 %43 
                       Output f32_4* %45 = OpVariable Output 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_3 %50 = OpConstantComposite %49 %49 %49 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %43 %43 %43 %37 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %32 = OpLoad %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                               f32_3 %34 = OpFMul %29 %33 
                               f32_4 %35 = OpLoad %28 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %28 %36 
                         Output f32* %41 = OpAccessChain %28 %39 
                                             OpStore %41 %37 
                                             OpStore %42 %44 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                               f32_3 %51 = OpFMul %48 %50 
                               f32_3 %52 = OpFAdd %51 %50 
                               f32_4 %53 = OpLoad %45 
                               f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                             OpStore %45 %54 
                         Output f32* %55 = OpAccessChain %45 %39 
                                             OpStore %55 %37 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3 = vec4(0.0, 0.0, 0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %52 %85 %97 %98 %110 %140 %146 %147 %149 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 52 
                                                      OpMemberDecorate %83 0 BuiltIn 83 
                                                      OpMemberDecorate %83 1 BuiltIn 83 
                                                      OpMemberDecorate %83 2 BuiltIn 83 
                                                      OpDecorate %83 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 97 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate %110 Location 110 
                                                      OpDecorate vs_TEXCOORD1 Location 140 
                                                      OpDecorate %146 Location 146 
                                                      OpDecorate %147 Location 147 
                                                      OpDecorate vs_TEXCOORD3 Location 149 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 0 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %36 = OpConstant 2 
                               Private f32_4* %44 = OpVariable Private 
                                          i32 %46 = OpConstant 3 
                                              %50 = OpTypeVector %6 3 
                                              %51 = OpTypePointer Output %50 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          u32 %81 = OpConstant 1 
                                              %82 = OpTypeArray %6 %81 
                                              %83 = OpTypeStruct %7 %6 %82 
                                              %84 = OpTypePointer Output %83 
         Output struct {f32_4; f32; f32[1];}* %85 = OpVariable Output 
                                              %93 = OpTypePointer Output %7 
                                              %95 = OpTypeVector %6 2 
                                              %96 = OpTypePointer Output %95 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                 Input f32_4* %98 = OpVariable Input 
                                             %109 = OpTypePointer Input %50 
                                Input f32_3* %110 = OpVariable Input 
                                         u32 %116 = OpConstant 0 
                                             %117 = OpTypePointer Private %6 
                                         u32 %130 = OpConstant 2 
                                Private f32* %132 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %146 = OpVariable Output 
                                Input f32_4* %147 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %150 = OpConstant 3.674022E-40 
                                       f32_4 %151 = OpConstantComposite %150 %150 %150 %150 
                                             %152 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %23 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %45 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %21 %23 %46 
                                        f32_4 %48 = OpLoad %47 
                                        f32_4 %49 = OpFAdd %45 %48 
                                                      OpStore %44 %49 
                               Uniform f32_4* %53 = OpAccessChain %21 %23 %46 
                                        f32_4 %54 = OpLoad %53 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 1 2 
                                        f32_4 %56 = OpLoad %11 
                                        f32_3 %57 = OpVectorShuffle %56 %56 3 3 3 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                                      OpStore vs_TEXCOORD2 %61 
                                        f32_4 %62 = OpLoad %44 
                                        f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               Uniform f32_4* %64 = OpAccessChain %21 %36 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_4 %66 = OpFMul %63 %65 
                                                      OpStore %9 %66 
                               Uniform f32_4* %67 = OpAccessChain %21 %36 %23 
                                        f32_4 %68 = OpLoad %67 
                                        f32_4 %69 = OpLoad %44 
                                        f32_4 %70 = OpVectorShuffle %69 %69 0 0 0 0 
                                        f32_4 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_4 %73 = OpFAdd %71 %72 
                                                      OpStore %9 %73 
                               Uniform f32_4* %74 = OpAccessChain %21 %36 %36 
                                        f32_4 %75 = OpLoad %74 
                                        f32_4 %76 = OpLoad %44 
                                        f32_4 %77 = OpVectorShuffle %76 %76 2 2 2 2 
                                        f32_4 %78 = OpFMul %75 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_4 %80 = OpFAdd %78 %79 
                                                      OpStore %9 %80 
                               Uniform f32_4* %86 = OpAccessChain %21 %36 %46 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpLoad %44 
                                        f32_4 %89 = OpVectorShuffle %88 %88 3 3 3 3 
                                        f32_4 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpFAdd %90 %91 
                                Output f32_4* %94 = OpAccessChain %85 %23 
                                                      OpStore %94 %92 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                              Uniform f32_4* %101 = OpAccessChain %21 %46 
                                       f32_4 %102 = OpLoad %101 
                                       f32_2 %103 = OpVectorShuffle %102 %102 0 1 
                                       f32_2 %104 = OpFMul %100 %103 
                              Uniform f32_4* %105 = OpAccessChain %21 %46 
                                       f32_4 %106 = OpLoad %105 
                                       f32_2 %107 = OpVectorShuffle %106 %106 2 3 
                                       f32_2 %108 = OpFAdd %104 %107 
                                                      OpStore vs_TEXCOORD0 %108 
                                       f32_3 %111 = OpLoad %110 
                              Uniform f32_4* %112 = OpAccessChain %21 %24 %23 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                         f32 %115 = OpDot %111 %114 
                                Private f32* %118 = OpAccessChain %9 %116 
                                                      OpStore %118 %115 
                                       f32_3 %119 = OpLoad %110 
                              Uniform f32_4* %120 = OpAccessChain %21 %24 %24 
                                       f32_4 %121 = OpLoad %120 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                         f32 %123 = OpDot %119 %122 
                                Private f32* %124 = OpAccessChain %9 %81 
                                                      OpStore %124 %123 
                                       f32_3 %125 = OpLoad %110 
                              Uniform f32_4* %126 = OpAccessChain %21 %24 %36 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                                         f32 %129 = OpDot %125 %128 
                                Private f32* %131 = OpAccessChain %9 %130 
                                                      OpStore %131 %129 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %9 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                         f32 %137 = OpDot %134 %136 
                                                      OpStore %132 %137 
                                         f32 %138 = OpLoad %132 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %132 %139 
                                         f32 %141 = OpLoad %132 
                                       f32_3 %142 = OpCompositeConstruct %141 %141 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFMul %142 %144 
                                                      OpStore vs_TEXCOORD1 %145 
                                       f32_4 %148 = OpLoad %147 
                                                      OpStore %146 %148 
                                                      OpStore vs_TEXCOORD3 %151 
                                 Output f32* %153 = OpAccessChain %85 %23 %81 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFNegate %154 
                                 Output f32* %156 = OpAccessChain %85 %23 %81 
                                                      OpStore %156 %155 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 %31 %42 %45 %47 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                             OpDecorate %31 Location 31 
                                             OpDecorate %42 Location 42 
                                             OpDecorate %45 Location 45 
                                             OpDecorate vs_TEXCOORD1 Location 47 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                     %30 = OpTypePointer Input %24 
                        Input f32_4* %31 = OpVariable Input 
                                 f32 %37 = OpConstant 3.674022E-40 
                                     %38 = OpTypeInt 32 0 
                                 u32 %39 = OpConstant 3 
                                     %40 = OpTypePointer Output %6 
                       Output f32_4* %42 = OpVariable Output 
                                 f32 %43 = OpConstant 3.674022E-40 
                               f32_4 %44 = OpConstantComposite %43 %43 %43 %43 
                       Output f32_4* %45 = OpVariable Output 
                                     %46 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %49 = OpConstant 3.674022E-40 
                               f32_3 %50 = OpConstantComposite %49 %49 %49 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %43 %43 %43 %37 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %32 = OpLoad %31 
                               f32_3 %33 = OpVectorShuffle %32 %32 0 1 2 
                               f32_3 %34 = OpFMul %29 %33 
                               f32_4 %35 = OpLoad %28 
                               f32_4 %36 = OpVectorShuffle %35 %34 4 5 6 3 
                                             OpStore %28 %36 
                         Output f32* %41 = OpAccessChain %28 %39 
                                             OpStore %41 %37 
                                             OpStore %42 %44 
                               f32_3 %48 = OpLoad vs_TEXCOORD1 
                               f32_3 %51 = OpFMul %48 %50 
                               f32_3 %52 = OpFAdd %51 %50 
                               f32_4 %53 = OpLoad %45 
                               f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                             OpStore %45 %54 
                         Output f32* %55 = OpAccessChain %45 %39 
                                             OpStore %55 %37 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
flat out uint vs_SV_InstanceID0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
int u_xlati4;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati4 = u_xlati0 << 3;
    u_xlati0 = u_xlati0 * 7;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati4 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat4.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat4.y * u_xlat4.y;
    u_xlat1.x = u_xlat4.x * u_xlat4.x + (-u_xlat1.x);
    u_xlat2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat3.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat2);
    u_xlat3.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat2);
    u_xlat3.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat2);
    vs_TEXCOORD4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat1.xxx + u_xlat3.xyz;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 330
#extension GL_ARB_explicit_attrib_location : require
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	int unity_BaseInstanceID;
struct unity_Builtins2Array_Type {
	vec4 unity_SHArArray;
	vec4 unity_SHAgArray;
	vec4 unity_SHAbArray;
	vec4 unity_SHBrArray;
	vec4 unity_SHBgArray;
	vec4 unity_SHBbArray;
	vec4 unity_SHCArray;
};
UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
	unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
flat in  uint vs_SV_InstanceID0;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
int u_xlati9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    u_xlati9 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati9 = u_xlati9 * 7;
    u_xlat1.xyz = vs_TEXCOORD1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHArArray, u_xlat1);
    u_xlat2.y = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAgArray, u_xlat1);
    u_xlat2.z = dot(unity_Builtins2Array[u_xlati9 / 7].unity_SHAbArray, u_xlat1);
    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD4.xyz;
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 270
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %10 %32 %81 %120 %132 %133 %145 %190 %192 %193 %195 %248 %261 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %10 BuiltIn ViewportIndex 
                                                      OpMemberDecorate %12 0 Offset 12 
                                                      OpMemberDecorate %12 1 Offset 12 
                                                      OpDecorate %12 Block 
                                                      OpDecorate %14 DescriptorSet 14 
                                                      OpDecorate %14 Binding 14 
                                                      OpDecorate %32 Location 32 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpDecorate %40 SpecId 40 
                                                      OpDecorate %41 ArrayStride 41 
                                                      OpMemberDecorate %42 0 Offset 42 
                                                      OpDecorate %42 Block 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate vs_TEXCOORD2 Location 81 
                                                      OpDecorate %95 ArrayStride 95 
                                                      OpMemberDecorate %96 0 Offset 96 
                                                      OpMemberDecorate %96 1 Offset 96 
                                                      OpDecorate %96 Block 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpMemberDecorate %118 0 BuiltIn 118 
                                                      OpMemberDecorate %118 1 BuiltIn 118 
                                                      OpMemberDecorate %118 2 BuiltIn 118 
                                                      OpDecorate %118 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 132 
                                                      OpDecorate %133 Location 133 
                                                      OpDecorate %145 Location 145 
                                                      OpDecorate vs_TEXCOORD1 Location 190 
                                                      OpDecorate %192 Location 192 
                                                      OpDecorate %193 Location 193 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpMemberDecorate %220 0 Offset 220 
                                                      OpMemberDecorate %220 1 Offset 220 
                                                      OpMemberDecorate %220 2 Offset 220 
                                                      OpMemberDecorate %220 3 Offset 220 
                                                      OpMemberDecorate %220 4 Offset 220 
                                                      OpMemberDecorate %220 5 Offset 220 
                                                      OpMemberDecorate %220 6 Offset 220 
                                                      OpDecorate %221 ArrayStride 221 
                                                      OpMemberDecorate %222 0 Offset 222 
                                                      OpDecorate %222 Block 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate vs_TEXCOORD4 Location 248 
                                                      OpDecorate %261 Flat 
                                                      OpDecorate %261 Location 261 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeInt 32 1 
                                               %7 = OpTypePointer Private %6 
                                  Private i32* %8 = OpVariable Private 
                                               %9 = OpTypePointer Input %6 
                                   Input i32* %10 = OpVariable Input 
                                              %12 = OpTypeStruct %6 %6 
                                              %13 = OpTypePointer Uniform %12 
                  Uniform struct {i32; i32;}* %14 = OpVariable Uniform 
                                          i32 %15 = OpConstant 0 
                                              %16 = OpTypePointer Uniform %6 
                                 Private i32* %20 = OpVariable Private 
                                          i32 %22 = OpConstant 3 
                                          i32 %25 = OpConstant 7 
                                              %27 = OpTypeFloat 32 
                                              %28 = OpTypeVector %27 4 
                                              %29 = OpTypePointer Private %28 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypePointer Input %28 
                                 Input f32_4* %32 = OpVariable Input 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 4 
                                              %37 = OpTypeArray %28 %36 
                                              %38 = OpTypeArray %28 %36 
                                              %39 = OpTypeStruct %37 %38 
                                          i32 %40 = OpSpecConstant 2 
                                              %41 = OpTypeArray %39 %40 
                                              %42 = OpTypeStruct %41 
                                              %43 = OpTypePointer Uniform %42 
Uniform struct {struct {f32_4[4]; f32_4[4];}[2];}* %44 = OpVariable Uniform 
                                          i32 %46 = OpConstant 8 
                                          i32 %48 = OpConstant 1 
                                              %49 = OpTypePointer Uniform %28 
                                          i32 %64 = OpConstant 2 
                               Private f32_4* %72 = OpVariable Private 
                                              %79 = OpTypeVector %27 3 
                                              %80 = OpTypePointer Output %79 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                              %95 = OpTypeArray %28 %36 
                                              %96 = OpTypeStruct %95 %28 
                                              %97 = OpTypePointer Uniform %96 
           Uniform struct {f32_4[4]; f32_4;}* %98 = OpVariable Uniform 
                                         u32 %116 = OpConstant 1 
                                             %117 = OpTypeArray %27 %116 
                                             %118 = OpTypeStruct %28 %27 %117 
                                             %119 = OpTypePointer Output %118 
        Output struct {f32_4; f32; f32[1];}* %120 = OpVariable Output 
                                             %128 = OpTypePointer Output %28 
                                             %130 = OpTypeVector %27 2 
                                             %131 = OpTypePointer Output %130 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %133 = OpVariable Input 
                                             %144 = OpTypePointer Input %79 
                                Input f32_3* %145 = OpVariable Input 
                                         u32 %153 = OpConstant 0 
                                             %154 = OpTypePointer Private %27 
                                         u32 %171 = OpConstant 2 
                                             %173 = OpTypePointer Private %79 
                              Private f32_3* %174 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %192 = OpVariable Output 
                                Input f32_4* %193 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_4 %197 = OpConstantComposite %196 %196 %196 %196 
                              Private f32_3* %219 = OpVariable Private 
                                             %220 = OpTypeStruct %28 %28 %28 %28 %28 %28 %28 
                                             %221 = OpTypeArray %220 %40 
                                             %222 = OpTypeStruct %221 
                                             %223 = OpTypePointer Uniform %222 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %224 = OpVariable Uniform 
                                         i32 %234 = OpConstant 4 
                                         i32 %242 = OpConstant 5 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                         i32 %251 = OpConstant 6 
                                             %260 = OpTypePointer Output %35 
                                 Output u32* %261 = OpVariable Output 
                                             %264 = OpTypePointer Output %27 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                          i32 %11 = OpLoad %10 
                                 Uniform i32* %17 = OpAccessChain %14 %15 
                                          i32 %18 = OpLoad %17 
                                          i32 %19 = OpIAdd %11 %18 
                                                      OpStore %8 %19 
                                          i32 %21 = OpLoad %8 
                                          i32 %23 = OpShiftLeftLogical %21 %22 
                                                      OpStore %20 %23 
                                          i32 %24 = OpLoad %8 
                                          i32 %26 = OpIMul %24 %25 
                                                      OpStore %8 %26 
                                        f32_4 %33 = OpLoad %32 
                                        f32_4 %34 = OpVectorShuffle %33 %33 1 1 1 1 
                                          i32 %45 = OpLoad %20 
                                          i32 %47 = OpSDiv %45 %46 
                               Uniform f32_4* %50 = OpAccessChain %44 %15 %47 %15 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_4 %52 = OpFMul %34 %51 
                                                      OpStore %30 %52 
                                          i32 %53 = OpLoad %20 
                                          i32 %54 = OpSDiv %53 %46 
                               Uniform f32_4* %55 = OpAccessChain %44 %15 %54 %15 %15 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %32 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %30 %61 
                                          i32 %62 = OpLoad %20 
                                          i32 %63 = OpSDiv %62 %46 
                               Uniform f32_4* %65 = OpAccessChain %44 %15 %63 %15 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_4 %67 = OpLoad %32 
                                        f32_4 %68 = OpVectorShuffle %67 %67 2 2 2 2 
                                        f32_4 %69 = OpFMul %66 %68 
                                        f32_4 %70 = OpLoad %30 
                                        f32_4 %71 = OpFAdd %69 %70 
                                                      OpStore %30 %71 
                                        f32_4 %73 = OpLoad %30 
                                          i32 %74 = OpLoad %20 
                                          i32 %75 = OpSDiv %74 %46 
                               Uniform f32_4* %76 = OpAccessChain %44 %15 %75 %15 %22 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpFAdd %73 %77 
                                                      OpStore %72 %78 
                                          i32 %82 = OpLoad %20 
                                          i32 %83 = OpSDiv %82 %46 
                               Uniform f32_4* %84 = OpAccessChain %44 %15 %83 %15 %22 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_4 %87 = OpLoad %32 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_4 %90 = OpLoad %30 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpFAdd %89 %91 
                                                      OpStore vs_TEXCOORD2 %92 
                                        f32_4 %93 = OpLoad %72 
                                        f32_4 %94 = OpVectorShuffle %93 %93 1 1 1 1 
                               Uniform f32_4* %99 = OpAccessChain %98 %15 %48 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpFMul %94 %100 
                                                      OpStore %30 %101 
                              Uniform f32_4* %102 = OpAccessChain %98 %15 %15 
                                       f32_4 %103 = OpLoad %102 
                                       f32_4 %104 = OpLoad %72 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 0 0 0 
                                       f32_4 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %30 
                                       f32_4 %108 = OpFAdd %106 %107 
                                                      OpStore %30 %108 
                              Uniform f32_4* %109 = OpAccessChain %98 %15 %64 
                                       f32_4 %110 = OpLoad %109 
                                       f32_4 %111 = OpLoad %72 
                                       f32_4 %112 = OpVectorShuffle %111 %111 2 2 2 2 
                                       f32_4 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %30 
                                       f32_4 %115 = OpFAdd %113 %114 
                                                      OpStore %30 %115 
                              Uniform f32_4* %121 = OpAccessChain %98 %15 %22 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpLoad %72 
                                       f32_4 %124 = OpVectorShuffle %123 %123 3 3 3 3 
                                       f32_4 %125 = OpFMul %122 %124 
                                       f32_4 %126 = OpLoad %30 
                                       f32_4 %127 = OpFAdd %125 %126 
                               Output f32_4* %129 = OpAccessChain %120 %15 
                                                      OpStore %129 %127 
                                       f32_4 %134 = OpLoad %133 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                              Uniform f32_4* %136 = OpAccessChain %98 %48 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 0 1 
                                       f32_2 %139 = OpFMul %135 %138 
                              Uniform f32_4* %140 = OpAccessChain %98 %48 
                                       f32_4 %141 = OpLoad %140 
                                       f32_2 %142 = OpVectorShuffle %141 %141 2 3 
                                       f32_2 %143 = OpFAdd %139 %142 
                                                      OpStore vs_TEXCOORD0 %143 
                                       f32_3 %146 = OpLoad %145 
                                         i32 %147 = OpLoad %20 
                                         i32 %148 = OpSDiv %147 %46 
                              Uniform f32_4* %149 = OpAccessChain %44 %15 %148 %48 %15 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %146 %151 
                                Private f32* %155 = OpAccessChain %30 %153 
                                                      OpStore %155 %152 
                                       f32_3 %156 = OpLoad %145 
                                         i32 %157 = OpLoad %20 
                                         i32 %158 = OpSDiv %157 %46 
                              Uniform f32_4* %159 = OpAccessChain %44 %15 %158 %48 %48 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %156 %161 
                                Private f32* %163 = OpAccessChain %30 %116 
                                                      OpStore %163 %162 
                                       f32_3 %164 = OpLoad %145 
                                         i32 %165 = OpLoad %20 
                                         i32 %166 = OpSDiv %165 %46 
                              Uniform f32_4* %167 = OpAccessChain %44 %15 %166 %48 %64 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                         f32 %170 = OpDot %164 %169 
                                Private f32* %172 = OpAccessChain %30 %171 
                                                      OpStore %172 %170 
                                       f32_4 %175 = OpLoad %30 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %30 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                Private f32* %180 = OpAccessChain %174 %153 
                                                      OpStore %180 %179 
                                Private f32* %181 = OpAccessChain %174 %153 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpExtInst %1 32 %182 
                                Private f32* %184 = OpAccessChain %174 %153 
                                                      OpStore %184 %183 
                                       f32_3 %185 = OpLoad %174 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_4 %187 = OpLoad %30 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 2 
                                       f32_3 %189 = OpFMul %186 %188 
                                                      OpStore %174 %189 
                                       f32_3 %191 = OpLoad %174 
                                                      OpStore vs_TEXCOORD1 %191 
                                       f32_4 %194 = OpLoad %193 
                                                      OpStore %192 %194 
                                                      OpStore vs_TEXCOORD3 %197 
                                Private f32* %198 = OpAccessChain %174 %116 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %174 %116 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                Private f32* %203 = OpAccessChain %30 %153 
                                                      OpStore %203 %202 
                                Private f32* %204 = OpAccessChain %174 %153 
                                         f32 %205 = OpLoad %204 
                                Private f32* %206 = OpAccessChain %174 %153 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %205 %207 
                                Private f32* %209 = OpAccessChain %30 %153 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFNegate %210 
                                         f32 %212 = OpFAdd %208 %211 
                                Private f32* %213 = OpAccessChain %30 %153 
                                                      OpStore %213 %212 
                                       f32_3 %214 = OpLoad %174 
                                       f32_4 %215 = OpVectorShuffle %214 %214 1 2 2 0 
                                       f32_3 %216 = OpLoad %174 
                                       f32_4 %217 = OpVectorShuffle %216 %216 0 1 2 2 
                                       f32_4 %218 = OpFMul %215 %217 
                                                      OpStore %72 %218 
                                         i32 %225 = OpLoad %8 
                                         i32 %226 = OpSDiv %225 %25 
                              Uniform f32_4* %227 = OpAccessChain %224 %15 %226 %22 
                                       f32_4 %228 = OpLoad %227 
                                       f32_4 %229 = OpLoad %72 
                                         f32 %230 = OpDot %228 %229 
                                Private f32* %231 = OpAccessChain %219 %153 
                                                      OpStore %231 %230 
                                         i32 %232 = OpLoad %8 
                                         i32 %233 = OpSDiv %232 %25 
                              Uniform f32_4* %235 = OpAccessChain %224 %15 %233 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_4 %237 = OpLoad %72 
                                         f32 %238 = OpDot %236 %237 
                                Private f32* %239 = OpAccessChain %219 %116 
                                                      OpStore %239 %238 
                                         i32 %240 = OpLoad %8 
                                         i32 %241 = OpSDiv %240 %25 
                              Uniform f32_4* %243 = OpAccessChain %224 %15 %241 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %72 
                                         f32 %246 = OpDot %244 %245 
                                Private f32* %247 = OpAccessChain %219 %171 
                                                      OpStore %247 %246 
                                         i32 %249 = OpLoad %8 
                                         i32 %250 = OpSDiv %249 %25 
                              Uniform f32_4* %252 = OpAccessChain %224 %15 %250 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_4 %255 = OpLoad %30 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_3 %258 = OpLoad %219 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore vs_TEXCOORD4 %259 
                                         i32 %262 = OpLoad %10 
                                         u32 %263 = OpBitcast %262 
                                                      OpStore %261 %263 
                                 Output f32* %265 = OpAccessChain %120 %15 %116 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFNegate %266 
                                 Output f32* %268 = OpAccessChain %120 %15 %116 
                                                      OpStore %268 %267 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 137
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %22 %29 %34 %43 %46 %48 %61 %117 %128 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 22 
                                                      OpDecorate %29 Location 29 
                                                      OpDecorate %34 Location 34 
                                                      OpDecorate %43 Location 43 
                                                      OpDecorate %46 Location 46 
                                                      OpDecorate vs_TEXCOORD1 Location 48 
                                                      OpDecorate %61 Flat 
                                                      OpDecorate %61 Location 61 
                                                      OpMemberDecorate %64 0 Offset 64 
                                                      OpMemberDecorate %64 1 Offset 64 
                                                      OpDecorate %64 Block 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpMemberDecorate %83 0 Offset 83 
                                                      OpMemberDecorate %83 1 Offset 83 
                                                      OpMemberDecorate %83 2 Offset 83 
                                                      OpMemberDecorate %83 3 Offset 83 
                                                      OpMemberDecorate %83 4 Offset 83 
                                                      OpMemberDecorate %83 5 Offset 83 
                                                      OpMemberDecorate %83 6 Offset 83 
                                                      OpDecorate %84 SpecId 84 
                                                      OpDecorate %85 ArrayStride 85 
                                                      OpMemberDecorate %86 0 Offset 86 
                                                      OpDecorate %86 Block 
                                                      OpDecorate %88 DescriptorSet 88 
                                                      OpDecorate %88 Binding 88 
                                                      OpDecorate vs_TEXCOORD4 Location 117 
                                                      OpDecorate %128 Location 128 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypeVector %6 2 
                                              %21 = OpTypePointer Input %20 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %24 = OpTypeVector %6 4 
                                              %28 = OpTypePointer Input %24 
                                 Input f32_4* %29 = OpVariable Input 
                                              %33 = OpTypePointer Output %24 
                                Output f32_4* %34 = OpVariable Output 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %39 = OpTypeInt 32 0 
                                          u32 %40 = OpConstant 3 
                                              %41 = OpTypePointer Output %6 
                                Output f32_4* %43 = OpVariable Output 
                                          f32 %44 = OpConstant 3.674022E-40 
                                        f32_4 %45 = OpConstantComposite %44 %44 %44 %44 
                                Output f32_4* %46 = OpVariable Output 
                                              %47 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                          f32 %50 = OpConstant 3.674022E-40 
                                        f32_3 %51 = OpConstantComposite %50 %50 %50 
                                              %57 = OpTypeInt 32 1 
                                              %58 = OpTypePointer Private %57 
                                 Private i32* %59 = OpVariable Private 
                                              %60 = OpTypePointer Input %39 
                                   Input u32* %61 = OpVariable Input 
                                              %64 = OpTypeStruct %57 %57 
                                              %65 = OpTypePointer Uniform %64 
                  Uniform struct {i32; i32;}* %66 = OpVariable Uniform 
                                          i32 %67 = OpConstant 0 
                                              %68 = OpTypePointer Uniform %57 
                                          i32 %73 = OpConstant 7 
                                              %75 = OpTypePointer Private %24 
                               Private f32_4* %76 = OpVariable Private 
                                              %80 = OpTypePointer Private %6 
                               Private f32_3* %82 = OpVariable Private 
                                              %83 = OpTypeStruct %24 %24 %24 %24 %24 %24 %24 
                                          i32 %84 = OpSpecConstant 2 
                                              %85 = OpTypeArray %83 %84 
                                              %86 = OpTypeStruct %85 
                                              %87 = OpTypePointer Uniform %86 
Uniform struct {struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}[2];}* %88 = OpVariable Uniform 
                                              %91 = OpTypePointer Uniform %24 
                                          u32 %96 = OpConstant 0 
                                         i32 %100 = OpConstant 1 
                                         u32 %105 = OpConstant 1 
                                         i32 %109 = OpConstant 2 
                                         u32 %114 = OpConstant 2 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                       f32_3 %124 = OpConstantComposite %44 %44 %44 
                               Output f32_4* %128 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_2 %23 = OpLoad vs_TEXCOORD0 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                                      OpStore %9 %26 
                                        f32_3 %27 = OpLoad %9 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                                        f32_3 %32 = OpFMul %27 %31 
                                                      OpStore %9 %32 
                                        f32_3 %35 = OpLoad %9 
                                        f32_4 %36 = OpLoad %34 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %34 %37 
                                  Output f32* %42 = OpAccessChain %34 %40 
                                                      OpStore %42 %38 
                                                      OpStore %43 %45 
                                        f32_3 %49 = OpLoad vs_TEXCOORD1 
                                        f32_3 %52 = OpFMul %49 %51 
                                        f32_3 %53 = OpFAdd %52 %51 
                                        f32_4 %54 = OpLoad %46 
                                        f32_4 %55 = OpVectorShuffle %54 %53 4 5 6 3 
                                                      OpStore %46 %55 
                                  Output f32* %56 = OpAccessChain %46 %40 
                                                      OpStore %56 %38 
                                          u32 %62 = OpLoad %61 
                                          i32 %63 = OpBitcast %62 
                                 Uniform i32* %69 = OpAccessChain %66 %67 
                                          i32 %70 = OpLoad %69 
                                          i32 %71 = OpIAdd %63 %70 
                                                      OpStore %59 %71 
                                          i32 %72 = OpLoad %59 
                                          i32 %74 = OpIMul %72 %73 
                                                      OpStore %59 %74 
                                        f32_3 %77 = OpLoad vs_TEXCOORD1 
                                        f32_4 %78 = OpLoad %76 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %76 %79 
                                 Private f32* %81 = OpAccessChain %76 %40 
                                                      OpStore %81 %38 
                                          i32 %89 = OpLoad %59 
                                          i32 %90 = OpSDiv %89 %73 
                               Uniform f32_4* %92 = OpAccessChain %88 %67 %90 %67 
                                        f32_4 %93 = OpLoad %92 
                                        f32_4 %94 = OpLoad %76 
                                          f32 %95 = OpDot %93 %94 
                                 Private f32* %97 = OpAccessChain %82 %96 
                                                      OpStore %97 %95 
                                          i32 %98 = OpLoad %59 
                                          i32 %99 = OpSDiv %98 %73 
                              Uniform f32_4* %101 = OpAccessChain %88 %67 %99 %100 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpLoad %76 
                                         f32 %104 = OpDot %102 %103 
                                Private f32* %106 = OpAccessChain %82 %105 
                                                      OpStore %106 %104 
                                         i32 %107 = OpLoad %59 
                                         i32 %108 = OpSDiv %107 %73 
                              Uniform f32_4* %110 = OpAccessChain %88 %67 %108 %109 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %76 
                                         f32 %113 = OpDot %111 %112 
                                Private f32* %115 = OpAccessChain %82 %114 
                                                      OpStore %115 %113 
                                       f32_3 %116 = OpLoad %82 
                                       f32_3 %118 = OpLoad vs_TEXCOORD4 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %125 = OpExtInst %1 40 %123 %124 
                                       f32_4 %126 = OpLoad %76 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                                      OpStore %76 %127 
                                       f32_3 %129 = OpLoad %9 
                                       f32_4 %130 = OpLoad %76 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %128 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %128 %134 
                                 Output f32* %135 = OpAccessChain %128 %40 
                                                      OpStore %135 %38 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
in  vec4 in_COLOR0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_COLOR0;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 248
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %53 %87 %99 %100 %113 %151 %154 %155 %157 %237 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpMemberDecorate %19 5 Offset 19 
                                                      OpMemberDecorate %19 6 Offset 19 
                                                      OpMemberDecorate %19 7 Offset 19 
                                                      OpMemberDecorate %19 8 Offset 19 
                                                      OpMemberDecorate %19 9 Offset 19 
                                                      OpMemberDecorate %19 10 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate vs_TEXCOORD2 Location 53 
                                                      OpMemberDecorate %85 0 BuiltIn 85 
                                                      OpMemberDecorate %85 1 BuiltIn 85 
                                                      OpMemberDecorate %85 2 BuiltIn 85 
                                                      OpDecorate %85 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 99 
                                                      OpDecorate %100 Location 100 
                                                      OpDecorate %113 Location 113 
                                                      OpDecorate vs_TEXCOORD1 Location 151 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate %155 Location 155 
                                                      OpDecorate vs_TEXCOORD3 Location 157 
                                                      OpDecorate vs_TEXCOORD4 Location 237 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %16 %17 %18 %7 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 7 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %37 = OpConstant 2 
                               Private f32_4* %45 = OpVariable Private 
                                          i32 %47 = OpConstant 3 
                                              %51 = OpTypeVector %6 3 
                                              %52 = OpTypePointer Output %51 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                          i32 %65 = OpConstant 9 
                                          u32 %83 = OpConstant 1 
                                              %84 = OpTypeArray %6 %83 
                                              %85 = OpTypeStruct %7 %6 %84 
                                              %86 = OpTypePointer Output %85 
         Output struct {f32_4; f32; f32[1];}* %87 = OpVariable Output 
                                              %95 = OpTypePointer Output %7 
                                              %97 = OpTypeVector %6 2 
                                              %98 = OpTypePointer Output %97 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_4* %100 = OpVariable Input 
                                         i32 %103 = OpConstant 10 
                                             %112 = OpTypePointer Input %51 
                                Input f32_3* %113 = OpVariable Input 
                                         i32 %115 = OpConstant 8 
                                         u32 %120 = OpConstant 0 
                                             %121 = OpTypePointer Private %6 
                                         u32 %134 = OpConstant 2 
                                Private f32* %136 = OpVariable Private 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                               Output f32_4* %154 = OpVariable Output 
                                Input f32_4* %155 = OpVariable Input 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         f32 %158 = OpConstant 3.674022E-40 
                                       f32_4 %159 = OpConstantComposite %158 %158 %158 %158 
                              Private f32_4* %176 = OpVariable Private 
                                             %182 = OpTypePointer Private %51 
                              Private f32_3* %183 = OpVariable Private 
                                         i32 %189 = OpConstant 4 
                                         i32 %195 = OpConstant 5 
                                         i32 %201 = OpConstant 6 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         u32 %213 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                                       f32_3 %240 = OpConstantComposite %158 %158 %158 
                                             %242 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %38 = OpAccessChain %21 %23 %37 
                                        f32_4 %39 = OpLoad %38 
                                        f32_4 %40 = OpLoad %11 
                                        f32_4 %41 = OpVectorShuffle %40 %40 2 2 2 2 
                                        f32_4 %42 = OpFMul %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpFAdd %42 %43 
                                                      OpStore %9 %44 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %21 %23 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpFAdd %46 %49 
                                                      OpStore %45 %50 
                               Uniform f32_4* %54 = OpAccessChain %21 %23 %47 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                        f32_4 %57 = OpLoad %11 
                                        f32_3 %58 = OpVectorShuffle %57 %57 3 3 3 
                                        f32_3 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                        f32_3 %62 = OpFAdd %59 %61 
                                                      OpStore vs_TEXCOORD2 %62 
                                        f32_4 %63 = OpLoad %45 
                                        f32_4 %64 = OpVectorShuffle %63 %63 1 1 1 1 
                               Uniform f32_4* %66 = OpAccessChain %21 %65 %24 
                                        f32_4 %67 = OpLoad %66 
                                        f32_4 %68 = OpFMul %64 %67 
                                                      OpStore %9 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %65 %29 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %45 
                                        f32_4 %72 = OpVectorShuffle %71 %71 0 0 0 0 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                               Uniform f32_4* %76 = OpAccessChain %21 %65 %37 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %45 
                                        f32_4 %79 = OpVectorShuffle %78 %78 2 2 2 2 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %9 %82 
                               Uniform f32_4* %88 = OpAccessChain %21 %65 %47 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %45 
                                        f32_4 %91 = OpVectorShuffle %90 %90 3 3 3 3 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %9 
                                        f32_4 %94 = OpFAdd %92 %93 
                                Output f32_4* %96 = OpAccessChain %87 %29 
                                                      OpStore %96 %94 
                                       f32_4 %101 = OpLoad %100 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                              Uniform f32_4* %104 = OpAccessChain %21 %103 
                                       f32_4 %105 = OpLoad %104 
                                       f32_2 %106 = OpVectorShuffle %105 %105 0 1 
                                       f32_2 %107 = OpFMul %102 %106 
                              Uniform f32_4* %108 = OpAccessChain %21 %103 
                                       f32_4 %109 = OpLoad %108 
                                       f32_2 %110 = OpVectorShuffle %109 %109 2 3 
                                       f32_2 %111 = OpFAdd %107 %110 
                                                      OpStore vs_TEXCOORD0 %111 
                                       f32_3 %114 = OpLoad %113 
                              Uniform f32_4* %116 = OpAccessChain %21 %115 %29 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                         f32 %119 = OpDot %114 %118 
                                Private f32* %122 = OpAccessChain %9 %120 
                                                      OpStore %122 %119 
                                       f32_3 %123 = OpLoad %113 
                              Uniform f32_4* %124 = OpAccessChain %21 %115 %24 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %9 %83 
                                                      OpStore %128 %127 
                                       f32_3 %129 = OpLoad %113 
                              Uniform f32_4* %130 = OpAccessChain %21 %115 %37 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                         f32 %133 = OpDot %129 %132 
                                Private f32* %135 = OpAccessChain %9 %134 
                                                      OpStore %135 %133 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                                      OpStore %136 %141 
                                         f32 %142 = OpLoad %136 
                                         f32 %143 = OpExtInst %1 32 %142 
                                                      OpStore %136 %143 
                                         f32 %144 = OpLoad %136 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                                      OpStore vs_TEXCOORD1 %153 
                                       f32_4 %156 = OpLoad %155 
                                                      OpStore %154 %156 
                                                      OpStore vs_TEXCOORD3 %159 
                                Private f32* %160 = OpAccessChain %9 %83 
                                         f32 %161 = OpLoad %160 
                                Private f32* %162 = OpAccessChain %9 %83 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %161 %163 
                                Private f32* %165 = OpAccessChain %45 %120 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %120 
                                         f32 %167 = OpLoad %166 
                                Private f32* %168 = OpAccessChain %9 %120 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %45 %120 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                         f32 %174 = OpFAdd %170 %173 
                                Private f32* %175 = OpAccessChain %45 %120 
                                                      OpStore %175 %174 
                                       f32_4 %177 = OpLoad %9 
                                       f32_4 %178 = OpVectorShuffle %177 %177 1 2 2 0 
                                       f32_4 %179 = OpLoad %9 
                                       f32_4 %180 = OpVectorShuffle %179 %179 0 1 2 2 
                                       f32_4 %181 = OpFMul %178 %180 
                                                      OpStore %176 %181 
                              Uniform f32_4* %184 = OpAccessChain %21 %47 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %176 
                                         f32 %187 = OpDot %185 %186 
                                Private f32* %188 = OpAccessChain %183 %120 
                                                      OpStore %188 %187 
                              Uniform f32_4* %190 = OpAccessChain %21 %189 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpLoad %176 
                                         f32 %193 = OpDot %191 %192 
                                Private f32* %194 = OpAccessChain %183 %83 
                                                      OpStore %194 %193 
                              Uniform f32_4* %196 = OpAccessChain %21 %195 
                                       f32_4 %197 = OpLoad %196 
                                       f32_4 %198 = OpLoad %176 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %183 %134 
                                                      OpStore %200 %199 
                              Uniform f32_4* %202 = OpAccessChain %21 %201 
                                       f32_4 %203 = OpLoad %202 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_4 %205 = OpLoad %45 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %183 
                                       f32_3 %209 = OpFAdd %207 %208 
                                       f32_4 %210 = OpLoad %45 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %45 %211 
                                Private f32* %214 = OpAccessChain %9 %213 
                                                      OpStore %214 %212 
                              Uniform f32_4* %215 = OpAccessChain %21 %29 
                                       f32_4 %216 = OpLoad %215 
                                       f32_4 %217 = OpLoad %9 
                                         f32 %218 = OpDot %216 %217 
                                Private f32* %219 = OpAccessChain %176 %120 
                                                      OpStore %219 %218 
                              Uniform f32_4* %220 = OpAccessChain %21 %24 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpLoad %9 
                                         f32 %223 = OpDot %221 %222 
                                Private f32* %224 = OpAccessChain %176 %83 
                                                      OpStore %224 %223 
                              Uniform f32_4* %225 = OpAccessChain %21 %37 
                                       f32_4 %226 = OpLoad %225 
                                       f32_4 %227 = OpLoad %9 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %176 %134 
                                                      OpStore %229 %228 
                                       f32_4 %230 = OpLoad %45 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_4 %232 = OpLoad %176 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %234 = OpFAdd %231 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %9 %236 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %241 = OpExtInst %1 40 %239 %240 
                                                      OpStore vs_TEXCOORD4 %241 
                                 Output f32* %243 = OpAccessChain %87 %29 %83 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFNegate %244 
                                 Output f32* %246 = OpAccessChain %87 %29 %83 
                                                      OpStore %246 %245 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 66
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %34 %38 %41 %51 %54 %55 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpDecorate %34 Location 34 
                                             OpDecorate %38 Location 38 
                                             OpDecorate vs_TEXCOORD4 Location 41 
                                             OpDecorate %51 Location 51 
                                             OpDecorate %54 Location 54 
                                             OpDecorate vs_TEXCOORD1 Location 55 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %33 = OpTypePointer Output %24 
                       Output f32_4* %34 = OpVariable Output 
                       Output f32_4* %38 = OpVariable Output 
                                     %40 = OpTypePointer Input %7 
               Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                                 f32 %46 = OpConstant 3.674022E-40 
                                     %47 = OpTypeInt 32 0 
                                 u32 %48 = OpConstant 3 
                                     %49 = OpTypePointer Output %6 
                       Output f32_4* %51 = OpVariable Output 
                                 f32 %52 = OpConstant 3.674022E-40 
                               f32_4 %53 = OpConstantComposite %52 %52 %52 %52 
                       Output f32_4* %54 = OpVariable Output 
               Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %57 = OpConstant 3.674022E-40 
                               f32_3 %58 = OpConstantComposite %57 %57 %57 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %35 = OpLoad %9 
                               f32_4 %36 = OpLoad %34 
                               f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                             OpStore %34 %37 
                               f32_3 %39 = OpLoad %9 
                               f32_3 %42 = OpLoad vs_TEXCOORD4 
                               f32_3 %43 = OpFMul %39 %42 
                               f32_4 %44 = OpLoad %38 
                               f32_4 %45 = OpVectorShuffle %44 %43 4 5 6 3 
                                             OpStore %38 %45 
                         Output f32* %50 = OpAccessChain %34 %48 
                                             OpStore %50 %46 
                                             OpStore %51 %53 
                               f32_3 %56 = OpLoad vs_TEXCOORD1 
                               f32_3 %59 = OpFMul %56 %58 
                               f32_3 %60 = OpFAdd %59 %58 
                               f32_4 %61 = OpLoad %54 
                               f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                             OpStore %54 %62 
                         Output f32* %63 = OpAccessChain %54 %48 
                                             OpStore %63 %46 
                         Output f32* %64 = OpAccessChain %38 %48 
                                             OpStore %64 %46 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "INSTANCING_ON" "LIGHTPROBE_SH" "UNITY_HDR_ON" }
""
}
}
}
}
SubShader {
 Tags { "RenderType" = "Opaque" }
 Pass {
  Tags { "LIGHTMODE" = "Vertex" "RenderType" = "Opaque" }
  Fog {
   Mode Off
  }
  GpuProgramID 461616
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
int u_xlati12;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat2.xyz = u_xlat1.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat13 = dot(u_xlat0.xyz, unity_LightPosition[u_xlati_loop_1].xyz);
        u_xlat13 = max(u_xlat13, 0.0);
        u_xlat3.xyz = vec3(u_xlat13) * in_COLOR0.xyz;
        u_xlat3.xyz = u_xlat3.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat3.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5);
        u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    }
    u_xlat2.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat2;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 366
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %171 %205 %279 %287 %288 %300 %347 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %171 Location 171 
                                                      OpDecorate %205 Location 205 
                                                      OpDecorate %279 Location 279 
                                                      OpDecorate vs_TEXCOORD0 Location 287 
                                                      OpDecorate %288 Location 288 
                                                      OpDecorate %300 Location 300 
                                                      OpMemberDecorate %345 0 BuiltIn 345 
                                                      OpMemberDecorate %345 1 BuiltIn 345 
                                                      OpMemberDecorate %345 2 BuiltIn 345 
                                                      OpDecorate %345 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                          u32 %14 = OpConstant 4 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %14 
                                              %17 = OpTypeArray %7 %14 
                                              %18 = OpTypeArray %7 %14 
                                              %19 = OpTypeInt 32 1 
                                              %20 = OpTypeVector %19 4 
                                              %21 = OpTypeStruct %12 %13 %15 %16 %7 %17 %18 %20 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; i32_4; f32_4;}* %23 = OpVariable Uniform 
                                          i32 %24 = OpConstant 3 
                                          i32 %25 = OpConstant 1 
                                              %26 = OpTypeVector %6 3 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %31 = OpConstant 5 
                                          i32 %32 = OpConstant 0 
                                          i32 %51 = OpConstant 2 
                               Private f32_4* %76 = OpVariable Private 
                              Private f32_4* %122 = OpVariable Private 
                                             %170 = OpTypePointer Input %26 
                                Input f32_3* %171 = OpVariable Input 
                                         u32 %174 = OpConstant 0 
                                             %175 = OpTypePointer Private %6 
                                         u32 %181 = OpConstant 1 
                                         u32 %187 = OpConstant 2 
                                Private f32* %189 = OpVariable Private 
                                             %204 = OpTypePointer Input %7 
                                Input f32_4* %205 = OpVariable Input 
                                         i32 %208 = OpConstant 4 
                                             %219 = OpTypePointer Function %19 
                                         i32 %227 = OpConstant 7 
                                             %228 = OpTypePointer Uniform %19 
                                             %231 = OpTypeBool 
                                Private f32* %233 = OpVariable Private 
                                         f32 %242 = OpConstant 3.674022E-40 
                                             %244 = OpTypePointer Private %26 
                              Private f32_3* %245 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_3 %259 = OpConstantComposite %258 %258 %258 
                                         f32 %262 = OpConstant 3.674022E-40 
                                       f32_3 %263 = OpConstantComposite %262 %262 %262 
                                         u32 %273 = OpConstant 3 
                                             %274 = OpTypePointer Input %6 
                                             %278 = OpTypePointer Output %7 
                               Output f32_4* %279 = OpVariable Output 
                                             %285 = OpTypeVector %6 2 
                                             %286 = OpTypePointer Output %285 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %288 = OpVariable Input 
                                         i32 %291 = OpConstant 8 
                                Input f32_3* %300 = OpVariable Input 
                                         i32 %326 = OpConstant 6 
                                             %344 = OpTypeArray %6 %181 
                                             %345 = OpTypeStruct %7 %6 %344 
                                             %346 = OpTypePointer Output %345 
        Output struct {f32_4; f32; f32[1];}* %347 = OpVariable Output 
                                             %356 = OpTypePointer Output %6 
                                             %362 = OpTypePointer Private %19 
                                Private i32* %363 = OpVariable Private 
                                             %364 = OpTypePointer Private %231 
                               Private bool* %365 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %220 = OpVariable Function 
                               Uniform f32_4* %28 = OpAccessChain %23 %24 %25 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                               Uniform f32_4* %33 = OpAccessChain %23 %31 %32 
                                        f32_4 %34 = OpLoad %33 
                                        f32_3 %35 = OpVectorShuffle %34 %34 1 1 1 
                                        f32_3 %36 = OpFMul %30 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                               Uniform f32_4* %39 = OpAccessChain %23 %24 %32 
                                        f32_4 %40 = OpLoad %39 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                               Uniform f32_4* %42 = OpAccessChain %23 %31 %32 
                                        f32_4 %43 = OpLoad %42 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 0 0 
                                        f32_3 %45 = OpFMul %41 %44 
                                        f32_4 %46 = OpLoad %9 
                                        f32_3 %47 = OpVectorShuffle %46 %46 0 1 2 
                                        f32_3 %48 = OpFAdd %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_4 %50 = OpVectorShuffle %49 %48 4 5 6 3 
                                                      OpStore %9 %50 
                               Uniform f32_4* %52 = OpAccessChain %23 %24 %51 
                                        f32_4 %53 = OpLoad %52 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               Uniform f32_4* %55 = OpAccessChain %23 %31 %32 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 2 2 2 
                                        f32_3 %58 = OpFMul %54 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                                      OpStore %9 %63 
                               Uniform f32_4* %64 = OpAccessChain %23 %24 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                               Uniform f32_4* %67 = OpAccessChain %23 %31 %32 
                                        f32_4 %68 = OpLoad %67 
                                        f32_3 %69 = OpVectorShuffle %68 %68 3 3 3 
                                        f32_3 %70 = OpFMul %66 %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                                        f32_3 %73 = OpFAdd %70 %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %73 4 5 6 3 
                                                      OpStore %9 %75 
                               Uniform f32_4* %77 = OpAccessChain %23 %24 %25 
                                        f32_4 %78 = OpLoad %77 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                               Uniform f32_4* %80 = OpAccessChain %23 %31 %25 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                                        f32_3 %83 = OpFMul %79 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %76 %85 
                               Uniform f32_4* %86 = OpAccessChain %23 %24 %32 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                               Uniform f32_4* %89 = OpAccessChain %23 %31 %25 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %76 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFAdd %92 %94 
                                        f32_4 %96 = OpLoad %76 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %76 %97 
                               Uniform f32_4* %98 = OpAccessChain %23 %24 %51 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                              Uniform f32_4* %101 = OpAccessChain %23 %31 %25 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 2 2 2 
                                       f32_3 %104 = OpFMul %100 %103 
                                       f32_4 %105 = OpLoad %76 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %76 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %76 %109 
                              Uniform f32_4* %110 = OpAccessChain %23 %24 %24 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                              Uniform f32_4* %113 = OpAccessChain %23 %31 %25 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 3 3 3 
                                       f32_3 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %76 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %76 %121 
                              Uniform f32_4* %123 = OpAccessChain %23 %24 %25 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              Uniform f32_4* %126 = OpAccessChain %23 %31 %51 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 1 1 1 
                                       f32_3 %129 = OpFMul %125 %128 
                                       f32_4 %130 = OpLoad %122 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %122 %131 
                              Uniform f32_4* %132 = OpAccessChain %23 %24 %32 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                              Uniform f32_4* %135 = OpAccessChain %23 %31 %51 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                                       f32_3 %138 = OpFMul %134 %137 
                                       f32_4 %139 = OpLoad %122 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFAdd %138 %140 
                                       f32_4 %142 = OpLoad %122 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %122 %143 
                              Uniform f32_4* %144 = OpAccessChain %23 %24 %51 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_4* %147 = OpAccessChain %23 %31 %51 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 2 2 2 
                                       f32_3 %150 = OpFMul %146 %149 
                                       f32_4 %151 = OpLoad %122 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %122 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %122 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %24 %24 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                              Uniform f32_4* %159 = OpAccessChain %23 %31 %51 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 3 3 3 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_4 %163 = OpLoad %122 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_3 %165 = OpFAdd %162 %164 
                                       f32_4 %166 = OpLoad %122 
                                       f32_4 %167 = OpVectorShuffle %166 %165 4 5 6 3 
                                                      OpStore %122 %167 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %172 = OpLoad %171 
                                         f32 %173 = OpDot %169 %172 
                                Private f32* %176 = OpAccessChain %9 %174 
                                                      OpStore %176 %173 
                                       f32_4 %177 = OpLoad %76 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpLoad %171 
                                         f32 %180 = OpDot %178 %179 
                                Private f32* %182 = OpAccessChain %9 %181 
                                                      OpStore %182 %180 
                                       f32_4 %183 = OpLoad %122 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpLoad %171 
                                         f32 %186 = OpDot %184 %185 
                                Private f32* %188 = OpAccessChain %9 %187 
                                                      OpStore %188 %186 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                         f32 %194 = OpDot %191 %193 
                                                      OpStore %189 %194 
                                         f32 %195 = OpLoad %189 
                                         f32 %196 = OpExtInst %1 32 %195 
                                                      OpStore %189 %196 
                                         f32 %197 = OpLoad %189 
                                       f32_3 %198 = OpCompositeConstruct %197 %197 %197 
                                       f32_4 %199 = OpLoad %9 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                       f32_3 %201 = OpFMul %198 %200 
                                       f32_4 %202 = OpLoad %9 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %9 %203 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                              Uniform f32_4* %209 = OpAccessChain %23 %208 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %212 = OpFMul %207 %211 
                                       f32_4 %213 = OpLoad %76 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %76 %214 
                                       f32_4 %215 = OpLoad %76 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_4 %217 = OpLoad %122 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %122 %218 
                                                      OpStore %220 %32 
                                                      OpBranch %221 
                                             %221 = OpLabel 
                                                      OpLoopMerge %223 %224 None 
                                                      OpBranch %225 
                                             %225 = OpLabel 
                                         i32 %226 = OpLoad %220 
                                Uniform i32* %229 = OpAccessChain %23 %227 %174 
                                         i32 %230 = OpLoad %229 
                                        bool %232 = OpSLessThan %226 %230 
                                                      OpBranchConditional %232 %222 %223 
                                             %222 = OpLabel 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         i32 %236 = OpLoad %220 
                              Uniform f32_4* %237 = OpAccessChain %23 %25 %236 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                         f32 %240 = OpDot %235 %239 
                                                      OpStore %233 %240 
                                         f32 %241 = OpLoad %233 
                                         f32 %243 = OpExtInst %1 40 %241 %242 
                                                      OpStore %233 %243 
                                         f32 %246 = OpLoad %233 
                                       f32_3 %247 = OpCompositeConstruct %246 %246 %246 
                                       f32_4 %248 = OpLoad %205 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                                      OpStore %245 %250 
                                       f32_3 %251 = OpLoad %245 
                                         i32 %252 = OpLoad %220 
                              Uniform f32_4* %253 = OpAccessChain %23 %32 %252 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFMul %251 %255 
                                                      OpStore %245 %256 
                                       f32_3 %257 = OpLoad %245 
                                       f32_3 %260 = OpFMul %257 %259 
                                                      OpStore %245 %260 
                                       f32_3 %261 = OpLoad %245 
                                       f32_3 %264 = OpExtInst %1 37 %261 %263 
                                                      OpStore %245 %264 
                                       f32_4 %265 = OpLoad %122 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpLoad %245 
                                       f32_3 %268 = OpFAdd %266 %267 
                                       f32_4 %269 = OpLoad %122 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %122 %270 
                                                      OpBranch %224 
                                             %224 = OpLabel 
                                         i32 %271 = OpLoad %220 
                                         i32 %272 = OpIAdd %271 %25 
                                                      OpStore %220 %272 
                                                      OpBranch %221 
                                             %223 = OpLabel 
                                  Input f32* %275 = OpAccessChain %205 %273 
                                         f32 %276 = OpLoad %275 
                                Private f32* %277 = OpAccessChain %122 %273 
                                                      OpStore %277 %276 
                                       f32_4 %280 = OpLoad %122 
                                                      OpStore %279 %280 
                                       f32_4 %281 = OpLoad %279 
                                       f32_4 %282 = OpCompositeConstruct %242 %242 %242 %242 
                                       f32_4 %283 = OpCompositeConstruct %262 %262 %262 %262 
                                       f32_4 %284 = OpExtInst %1 43 %281 %282 %283 
                                                      OpStore %279 %284 
                                       f32_3 %289 = OpLoad %288 
                                       f32_2 %290 = OpVectorShuffle %289 %289 0 1 
                              Uniform f32_4* %292 = OpAccessChain %23 %291 
                                       f32_4 %293 = OpLoad %292 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFMul %290 %294 
                              Uniform f32_4* %296 = OpAccessChain %23 %291 
                                       f32_4 %297 = OpLoad %296 
                                       f32_2 %298 = OpVectorShuffle %297 %297 2 3 
                                       f32_2 %299 = OpFAdd %295 %298 
                                                      OpStore vs_TEXCOORD0 %299 
                                       f32_3 %301 = OpLoad %300 
                                       f32_4 %302 = OpVectorShuffle %301 %301 1 1 1 1 
                              Uniform f32_4* %303 = OpAccessChain %23 %51 %25 
                                       f32_4 %304 = OpLoad %303 
                                       f32_4 %305 = OpFMul %302 %304 
                                                      OpStore %9 %305 
                              Uniform f32_4* %306 = OpAccessChain %23 %51 %32 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpLoad %300 
                                       f32_4 %309 = OpVectorShuffle %308 %308 0 0 0 0 
                                       f32_4 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %9 
                                       f32_4 %312 = OpFAdd %310 %311 
                                                      OpStore %9 %312 
                              Uniform f32_4* %313 = OpAccessChain %23 %51 %51 
                                       f32_4 %314 = OpLoad %313 
                                       f32_3 %315 = OpLoad %300 
                                       f32_4 %316 = OpVectorShuffle %315 %315 2 2 2 2 
                                       f32_4 %317 = OpFMul %314 %316 
                                       f32_4 %318 = OpLoad %9 
                                       f32_4 %319 = OpFAdd %317 %318 
                                                      OpStore %9 %319 
                                       f32_4 %320 = OpLoad %9 
                              Uniform f32_4* %321 = OpAccessChain %23 %51 %24 
                                       f32_4 %322 = OpLoad %321 
                                       f32_4 %323 = OpFAdd %320 %322 
                                                      OpStore %9 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_4 %325 = OpVectorShuffle %324 %324 1 1 1 1 
                              Uniform f32_4* %327 = OpAccessChain %23 %326 %25 
                                       f32_4 %328 = OpLoad %327 
                                       f32_4 %329 = OpFMul %325 %328 
                                                      OpStore %76 %329 
                              Uniform f32_4* %330 = OpAccessChain %23 %326 %32 
                                       f32_4 %331 = OpLoad %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %332 0 0 0 0 
                                       f32_4 %334 = OpFMul %331 %333 
                                       f32_4 %335 = OpLoad %76 
                                       f32_4 %336 = OpFAdd %334 %335 
                                                      OpStore %76 %336 
                              Uniform f32_4* %337 = OpAccessChain %23 %326 %51 
                                       f32_4 %338 = OpLoad %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_4 %340 = OpVectorShuffle %339 %339 2 2 2 2 
                                       f32_4 %341 = OpFMul %338 %340 
                                       f32_4 %342 = OpLoad %76 
                                       f32_4 %343 = OpFAdd %341 %342 
                                                      OpStore %76 %343 
                              Uniform f32_4* %348 = OpAccessChain %23 %326 %24 
                                       f32_4 %349 = OpLoad %348 
                                       f32_4 %350 = OpLoad %9 
                                       f32_4 %351 = OpVectorShuffle %350 %350 3 3 3 3 
                                       f32_4 %352 = OpFMul %349 %351 
                                       f32_4 %353 = OpLoad %76 
                                       f32_4 %354 = OpFAdd %352 %353 
                               Output f32_4* %355 = OpAccessChain %347 %32 
                                                      OpStore %355 %354 
                                 Output f32* %357 = OpAccessChain %347 %32 %181 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFNegate %358 
                                 Output f32* %360 = OpAccessChain %347 %32 %181 
                                                      OpStore %360 %359 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 46
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %34 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpDecorate %34 Location 34 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %33 = OpTypePointer Output %24 
                       Output f32_4* %34 = OpVariable Output 
                                 f32 %40 = OpConstant 3.674022E-40 
                                     %41 = OpTypeInt 32 0 
                                 u32 %42 = OpConstant 3 
                                     %43 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpLoad %9 
                               f32_3 %37 = OpFAdd %35 %36 
                               f32_4 %38 = OpLoad %34 
                               f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                             OpStore %34 %39 
                         Output f32* %44 = OpAccessChain %34 %42 
                                             OpStore %44 %40 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat21;
int u_xlati21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb25;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat3.xyz = u_xlat2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat4.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = unity_LightAtten[u_xlati_loop_1].z * u_xlat22 + 1.0;
        u_xlat23 = float(1.0) / u_xlat23;
        u_xlatb25 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb5 = unity_LightAtten[u_xlati_loop_1].w<u_xlat22;
        u_xlatb25 = u_xlatb25 && u_xlatb5;
        u_xlat22 = max(u_xlat22, 9.99999997e-07);
        u_xlat22 = inversesqrt(u_xlat22);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = u_xlat23 * 0.5;
        u_xlat22 = (u_xlatb25) ? 0.0 : u_xlat22;
        u_xlat23 = dot(u_xlat1.xyz, u_xlat4.xyz);
        u_xlat23 = max(u_xlat23, 0.0);
        u_xlat4.xyz = vec3(u_xlat23) * in_COLOR0.xyz;
        u_xlat4.xyz = u_xlat4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat4.xyz = min(u_xlat4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    }
    u_xlat3.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat3;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 588
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %316 %349 %381 %503 %511 %512 %570 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %349 Location 349 
                                                      OpDecorate %381 Location 381 
                                                      OpDecorate %503 Location 503 
                                                      OpDecorate vs_TEXCOORD0 Location 511 
                                                      OpDecorate %512 Location 512 
                                                      OpMemberDecorate %568 0 BuiltIn 568 
                                                      OpMemberDecorate %568 1 BuiltIn 568 
                                                      OpMemberDecorate %568 2 BuiltIn 568 
                                                      OpDecorate %568 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeArray %7 %15 
                                              %21 = OpTypeInt 32 1 
                                              %22 = OpTypeVector %21 4 
                                              %23 = OpTypeStruct %12 %13 %14 %16 %17 %7 %18 %19 %20 %22 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; i32_4; f32_4;}* %25 = OpVariable Uniform 
                                          i32 %26 = OpConstant 3 
                                          i32 %27 = OpConstant 0 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypePointer Uniform %7 
                                          i32 %33 = OpConstant 6 
                                          i32 %34 = OpConstant 1 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %78 = OpVariable Private 
                                             %124 = OpTypePointer Private %28 
                              Private f32_3* %125 = OpVariable Private 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_3* %206 = OpVariable Private 
                                         i32 %207 = OpConstant 4 
                                         i32 %211 = OpConstant 7 
                              Private f32_3* %243 = OpVariable Private 
                              Private f32_3* %278 = OpVariable Private 
                                             %315 = OpTypePointer Input %28 
                                Input f32_3* %316 = OpVariable Input 
                                Input f32_3* %349 = OpVariable Input 
                                         u32 %352 = OpConstant 0 
                                             %353 = OpTypePointer Private %6 
                                         u32 %358 = OpConstant 1 
                                         u32 %363 = OpConstant 2 
                                Private f32* %365 = OpVariable Private 
                                             %380 = OpTypePointer Input %7 
                                Input f32_4* %381 = OpVariable Input 
                                         i32 %384 = OpConstant 5 
                                             %392 = OpTypePointer Function %21 
                                         i32 %400 = OpConstant 9 
                                             %401 = OpTypePointer Uniform %21 
                                             %404 = OpTypeBool 
                                Private f32* %419 = OpVariable Private 
                                Private f32* %423 = OpVariable Private 
                                             %425 = OpTypePointer Uniform %6 
                                         f32 %430 = OpConstant 3.674022E-40 
                                             %434 = OpTypePointer Private %404 
                               Private bool* %435 = OpVariable Private 
                                         f32 %436 = OpConstant 3.674022E-40 
                                         u32 %438 = OpConstant 3 
                               Private bool* %442 = OpVariable Private 
                                         f32 %452 = OpConstant 3.674022E-40 
                                         f32 %461 = OpConstant 3.674022E-40 
                                       f32_3 %488 = OpConstantComposite %430 %430 %430 
                                             %498 = OpTypePointer Input %6 
                                             %502 = OpTypePointer Output %7 
                               Output f32_4* %503 = OpVariable Output 
                                             %509 = OpTypeVector %6 2 
                                             %510 = OpTypePointer Output %509 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %512 = OpVariable Input 
                                         i32 %515 = OpConstant 10 
                                         i32 %549 = OpConstant 8 
                                             %567 = OpTypeArray %6 %358 
                                             %568 = OpTypeStruct %7 %6 %567 
                                             %569 = OpTypePointer Output %568 
        Output struct {f32_4; f32; f32[1];}* %570 = OpVariable Output 
                                             %579 = OpTypePointer Output %6 
                                             %585 = OpTypePointer Private %21 
                                Private i32* %586 = OpVariable Private 
                               Private bool* %587 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %393 = OpVariable Function 
                               Uniform f32_4* %30 = OpAccessChain %25 %26 %27 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 1 1 1 
                               Uniform f32_4* %35 = OpAccessChain %25 %33 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                        f32_3 %38 = OpFMul %32 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                               Uniform f32_4* %41 = OpAccessChain %25 %33 %27 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                               Uniform f32_4* %44 = OpAccessChain %25 %26 %27 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 0 0 
                                        f32_3 %47 = OpFMul %43 %46 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                               Uniform f32_4* %54 = OpAccessChain %25 %33 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                               Uniform f32_4* %57 = OpAccessChain %25 %26 %27 
                                        f32_4 %58 = OpLoad %57 
                                        f32_3 %59 = OpVectorShuffle %58 %58 2 2 2 
                                        f32_3 %60 = OpFMul %56 %59 
                                        f32_4 %61 = OpLoad %9 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %60 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %25 %33 %26 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                               Uniform f32_4* %69 = OpAccessChain %25 %26 %27 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 3 3 3 
                                        f32_3 %72 = OpFMul %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpFAdd %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
                                                      OpStore %9 %77 
                               Uniform f32_4* %79 = OpAccessChain %25 %26 %34 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %25 %33 %34 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %81 %84 
                                        f32_4 %86 = OpLoad %78 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 6 3 
                                                      OpStore %78 %87 
                               Uniform f32_4* %88 = OpAccessChain %25 %33 %27 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                               Uniform f32_4* %91 = OpAccessChain %25 %26 %34 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpFMul %90 %93 
                                        f32_4 %95 = OpLoad %78 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                        f32_4 %98 = OpLoad %78 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %78 %99 
                              Uniform f32_4* %100 = OpAccessChain %25 %33 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                              Uniform f32_4* %103 = OpAccessChain %25 %26 %34 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %78 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %78 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %78 %111 
                              Uniform f32_4* %112 = OpAccessChain %25 %33 %26 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                              Uniform f32_4* %115 = OpAccessChain %25 %26 %34 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 3 3 3 
                                       f32_3 %118 = OpFMul %114 %117 
                                       f32_4 %119 = OpLoad %78 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %78 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %78 %123 
                              Uniform f32_4* %126 = OpAccessChain %25 %26 %53 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 1 1 1 
                              Uniform f32_4* %129 = OpAccessChain %25 %33 %34 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %128 %131 
                                                      OpStore %125 %132 
                              Uniform f32_4* %133 = OpAccessChain %25 %33 %27 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %136 = OpAccessChain %25 %26 %53 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                       f32_3 %139 = OpFMul %135 %138 
                                       f32_3 %140 = OpLoad %125 
                                       f32_3 %141 = OpFAdd %139 %140 
                                                      OpStore %125 %141 
                              Uniform f32_4* %142 = OpAccessChain %25 %33 %53 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                              Uniform f32_4* %145 = OpAccessChain %25 %26 %53 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 2 2 2 
                                       f32_3 %148 = OpFMul %144 %147 
                                       f32_3 %149 = OpLoad %125 
                                       f32_3 %150 = OpFAdd %148 %149 
                                                      OpStore %125 %150 
                              Uniform f32_4* %151 = OpAccessChain %25 %33 %26 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %25 %26 %53 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %153 %156 
                                       f32_3 %158 = OpLoad %125 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %125 %159 
                              Uniform f32_4* %161 = OpAccessChain %25 %26 %26 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %25 %33 %34 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                       f32_4 %168 = OpLoad %160 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
                                                      OpStore %160 %169 
                              Uniform f32_4* %170 = OpAccessChain %25 %33 %27 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %173 = OpAccessChain %25 %26 %26 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 0 0 
                                       f32_3 %176 = OpFMul %172 %175 
                                       f32_4 %177 = OpLoad %160 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad %160 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %160 %181 
                              Uniform f32_4* %182 = OpAccessChain %25 %33 %53 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %185 = OpAccessChain %25 %26 %26 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 2 2 2 
                                       f32_3 %188 = OpFMul %184 %187 
                                       f32_4 %189 = OpLoad %160 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %160 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %160 %193 
                              Uniform f32_4* %194 = OpAccessChain %25 %33 %26 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                              Uniform f32_4* %197 = OpAccessChain %25 %26 %26 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %196 %199 
                                       f32_4 %201 = OpLoad %160 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %160 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %160 %205 
                              Uniform f32_4* %208 = OpAccessChain %25 %207 %34 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                              Uniform f32_4* %212 = OpAccessChain %25 %211 %27 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 1 1 1 
                                       f32_3 %215 = OpFMul %210 %214 
                                                      OpStore %206 %215 
                              Uniform f32_4* %216 = OpAccessChain %25 %207 %27 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_4* %219 = OpAccessChain %25 %211 %27 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 0 0 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_3 %223 = OpLoad %206 
                                       f32_3 %224 = OpFAdd %222 %223 
                                                      OpStore %206 %224 
                              Uniform f32_4* %225 = OpAccessChain %25 %207 %53 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              Uniform f32_4* %228 = OpAccessChain %25 %211 %27 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 2 2 2 
                                       f32_3 %231 = OpFMul %227 %230 
                                       f32_3 %232 = OpLoad %206 
                                       f32_3 %233 = OpFAdd %231 %232 
                                                      OpStore %206 %233 
                              Uniform f32_4* %234 = OpAccessChain %25 %207 %26 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %237 = OpAccessChain %25 %211 %27 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 3 3 3 
                                       f32_3 %240 = OpFMul %236 %239 
                                       f32_3 %241 = OpLoad %206 
                                       f32_3 %242 = OpFAdd %240 %241 
                                                      OpStore %206 %242 
                              Uniform f32_4* %244 = OpAccessChain %25 %207 %34 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                              Uniform f32_4* %247 = OpAccessChain %25 %211 %34 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                                       f32_3 %250 = OpFMul %246 %249 
                                                      OpStore %243 %250 
                              Uniform f32_4* %251 = OpAccessChain %25 %207 %27 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                              Uniform f32_4* %254 = OpAccessChain %25 %211 %34 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %253 %256 
                                       f32_3 %258 = OpLoad %243 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore %243 %259 
                              Uniform f32_4* %260 = OpAccessChain %25 %207 %53 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                              Uniform f32_4* %263 = OpAccessChain %25 %211 %34 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 2 2 2 
                                       f32_3 %266 = OpFMul %262 %265 
                                       f32_3 %267 = OpLoad %243 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %243 %268 
                              Uniform f32_4* %269 = OpAccessChain %25 %207 %26 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                              Uniform f32_4* %272 = OpAccessChain %25 %211 %34 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 3 3 3 
                                       f32_3 %275 = OpFMul %271 %274 
                                       f32_3 %276 = OpLoad %243 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %243 %277 
                              Uniform f32_4* %279 = OpAccessChain %25 %207 %34 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                              Uniform f32_4* %282 = OpAccessChain %25 %211 %53 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                                       f32_3 %285 = OpFMul %281 %284 
                                                      OpStore %278 %285 
                              Uniform f32_4* %286 = OpAccessChain %25 %207 %27 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_4* %289 = OpAccessChain %25 %211 %53 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 0 0 
                                       f32_3 %292 = OpFMul %288 %291 
                                       f32_3 %293 = OpLoad %278 
                                       f32_3 %294 = OpFAdd %292 %293 
                                                      OpStore %278 %294 
                              Uniform f32_4* %295 = OpAccessChain %25 %207 %53 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                              Uniform f32_4* %298 = OpAccessChain %25 %211 %53 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 2 2 2 
                                       f32_3 %301 = OpFMul %297 %300 
                                       f32_3 %302 = OpLoad %278 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %278 %303 
                              Uniform f32_4* %304 = OpAccessChain %25 %207 %26 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_4* %307 = OpAccessChain %25 %211 %53 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 3 3 3 
                                       f32_3 %310 = OpFMul %306 %309 
                                       f32_3 %311 = OpLoad %278 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %278 %312 
                                       f32_4 %313 = OpLoad %78 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 1 1 1 
                                       f32_3 %319 = OpFMul %314 %318 
                                       f32_4 %320 = OpLoad %78 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %78 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %316 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %78 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %9 %331 
                                       f32_3 %332 = OpLoad %125 
                                       f32_3 %333 = OpLoad %316 
                                       f32_3 %334 = OpVectorShuffle %333 %333 2 2 2 
                                       f32_3 %335 = OpFMul %332 %334 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFAdd %335 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %9 %340 
                                       f32_4 %341 = OpLoad %160 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %9 %347 
                                       f32_3 %348 = OpLoad %206 
                                       f32_3 %350 = OpLoad %349 
                                         f32 %351 = OpDot %348 %350 
                                Private f32* %354 = OpAccessChain %78 %352 
                                                      OpStore %354 %351 
                                       f32_3 %355 = OpLoad %243 
                                       f32_3 %356 = OpLoad %349 
                                         f32 %357 = OpDot %355 %356 
                                Private f32* %359 = OpAccessChain %78 %358 
                                                      OpStore %359 %357 
                                       f32_3 %360 = OpLoad %278 
                                       f32_3 %361 = OpLoad %349 
                                         f32 %362 = OpDot %360 %361 
                                Private f32* %364 = OpAccessChain %78 %363 
                                                      OpStore %364 %362 
                                       f32_4 %366 = OpLoad %78 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %78 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %367 %369 
                                                      OpStore %365 %370 
                                         f32 %371 = OpLoad %365 
                                         f32 %372 = OpExtInst %1 32 %371 
                                                      OpStore %365 %372 
                                         f32 %373 = OpLoad %365 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_4 %375 = OpLoad %78 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %78 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %78 %379 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                              Uniform f32_4* %385 = OpAccessChain %25 %384 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFMul %383 %387 
                                                      OpStore %125 %388 
                                       f32_3 %389 = OpLoad %125 
                                       f32_4 %390 = OpLoad %160 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %160 %391 
                                                      OpStore %393 %27 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                                      OpLoopMerge %396 %397 None 
                                                      OpBranch %398 
                                             %398 = OpLabel 
                                         i32 %399 = OpLoad %393 
                                Uniform i32* %402 = OpAccessChain %25 %400 %352 
                                         i32 %403 = OpLoad %402 
                                        bool %405 = OpSLessThan %399 %403 
                                                      OpBranchConditional %405 %395 %396 
                                             %395 = OpLabel 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFNegate %407 
                                         i32 %409 = OpLoad %393 
                              Uniform f32_4* %410 = OpAccessChain %25 %34 %409 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 3 3 3 
                                       f32_3 %413 = OpFMul %408 %412 
                                         i32 %414 = OpLoad %393 
                              Uniform f32_4* %415 = OpAccessChain %25 %34 %414 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_3 %418 = OpFAdd %413 %417 
                                                      OpStore %206 %418 
                                       f32_3 %420 = OpLoad %206 
                                       f32_3 %421 = OpLoad %206 
                                         f32 %422 = OpDot %420 %421 
                                                      OpStore %419 %422 
                                         i32 %424 = OpLoad %393 
                                Uniform f32* %426 = OpAccessChain %25 %53 %424 %363 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFMul %427 %428 
                                         f32 %431 = OpFAdd %429 %430 
                                                      OpStore %423 %431 
                                         f32 %432 = OpLoad %423 
                                         f32 %433 = OpFDiv %430 %432 
                                                      OpStore %423 %433 
                                         i32 %437 = OpLoad %393 
                                Uniform f32* %439 = OpAccessChain %25 %34 %437 %438 
                                         f32 %440 = OpLoad %439 
                                        bool %441 = OpFOrdNotEqual %436 %440 
                                                      OpStore %435 %441 
                                         i32 %443 = OpLoad %393 
                                Uniform f32* %444 = OpAccessChain %25 %53 %443 %438 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpLoad %419 
                                        bool %447 = OpFOrdLessThan %445 %446 
                                                      OpStore %442 %447 
                                        bool %448 = OpLoad %435 
                                        bool %449 = OpLoad %442 
                                        bool %450 = OpLogicalAnd %448 %449 
                                                      OpStore %435 %450 
                                         f32 %451 = OpLoad %419 
                                         f32 %453 = OpExtInst %1 40 %451 %452 
                                                      OpStore %419 %453 
                                         f32 %454 = OpLoad %419 
                                         f32 %455 = OpExtInst %1 32 %454 
                                                      OpStore %419 %455 
                                         f32 %456 = OpLoad %419 
                                       f32_3 %457 = OpCompositeConstruct %456 %456 %456 
                                       f32_3 %458 = OpLoad %206 
                                       f32_3 %459 = OpFMul %457 %458 
                                                      OpStore %206 %459 
                                         f32 %460 = OpLoad %423 
                                         f32 %462 = OpFMul %460 %461 
                                                      OpStore %419 %462 
                                        bool %463 = OpLoad %435 
                                         f32 %464 = OpLoad %419 
                                         f32 %465 = OpSelect %463 %436 %464 
                                                      OpStore %419 %465 
                                       f32_4 %466 = OpLoad %78 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpLoad %206 
                                         f32 %469 = OpDot %467 %468 
                                                      OpStore %423 %469 
                                         f32 %470 = OpLoad %423 
                                         f32 %471 = OpExtInst %1 40 %470 %436 
                                                      OpStore %423 %471 
                                         f32 %472 = OpLoad %423 
                                       f32_3 %473 = OpCompositeConstruct %472 %472 %472 
                                       f32_4 %474 = OpLoad %381 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                       f32_3 %476 = OpFMul %473 %475 
                                                      OpStore %206 %476 
                                       f32_3 %477 = OpLoad %206 
                                         i32 %478 = OpLoad %393 
                              Uniform f32_4* %479 = OpAccessChain %25 %27 %478 
                                       f32_4 %480 = OpLoad %479 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %477 %481 
                                                      OpStore %206 %482 
                                         f32 %483 = OpLoad %419 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_3 %485 = OpLoad %206 
                                       f32_3 %486 = OpFMul %484 %485 
                                                      OpStore %206 %486 
                                       f32_3 %487 = OpLoad %206 
                                       f32_3 %489 = OpExtInst %1 37 %487 %488 
                                                      OpStore %206 %489 
                                       f32_4 %490 = OpLoad %160 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 1 2 
                                       f32_3 %492 = OpLoad %206 
                                       f32_3 %493 = OpFAdd %491 %492 
                                       f32_4 %494 = OpLoad %160 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %160 %495 
                                                      OpBranch %397 
                                             %397 = OpLabel 
                                         i32 %496 = OpLoad %393 
                                         i32 %497 = OpIAdd %496 %34 
                                                      OpStore %393 %497 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                  Input f32* %499 = OpAccessChain %381 %438 
                                         f32 %500 = OpLoad %499 
                                Private f32* %501 = OpAccessChain %160 %438 
                                                      OpStore %501 %500 
                                       f32_4 %504 = OpLoad %160 
                                                      OpStore %503 %504 
                                       f32_4 %505 = OpLoad %503 
                                       f32_4 %506 = OpCompositeConstruct %436 %436 %436 %436 
                                       f32_4 %507 = OpCompositeConstruct %430 %430 %430 %430 
                                       f32_4 %508 = OpExtInst %1 43 %505 %506 %507 
                                                      OpStore %503 %508 
                                       f32_3 %513 = OpLoad %512 
                                       f32_2 %514 = OpVectorShuffle %513 %513 0 1 
                              Uniform f32_4* %516 = OpAccessChain %25 %515 
                                       f32_4 %517 = OpLoad %516 
                                       f32_2 %518 = OpVectorShuffle %517 %517 0 1 
                                       f32_2 %519 = OpFMul %514 %518 
                              Uniform f32_4* %520 = OpAccessChain %25 %515 
                                       f32_4 %521 = OpLoad %520 
                                       f32_2 %522 = OpVectorShuffle %521 %521 2 3 
                                       f32_2 %523 = OpFAdd %519 %522 
                                                      OpStore vs_TEXCOORD0 %523 
                                       f32_3 %524 = OpLoad %316 
                                       f32_4 %525 = OpVectorShuffle %524 %524 1 1 1 1 
                              Uniform f32_4* %526 = OpAccessChain %25 %26 %34 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpFMul %525 %527 
                                                      OpStore %9 %528 
                              Uniform f32_4* %529 = OpAccessChain %25 %26 %27 
                                       f32_4 %530 = OpLoad %529 
                                       f32_3 %531 = OpLoad %316 
                                       f32_4 %532 = OpVectorShuffle %531 %531 0 0 0 0 
                                       f32_4 %533 = OpFMul %530 %532 
                                       f32_4 %534 = OpLoad %9 
                                       f32_4 %535 = OpFAdd %533 %534 
                                                      OpStore %9 %535 
                              Uniform f32_4* %536 = OpAccessChain %25 %26 %53 
                                       f32_4 %537 = OpLoad %536 
                                       f32_3 %538 = OpLoad %316 
                                       f32_4 %539 = OpVectorShuffle %538 %538 2 2 2 2 
                                       f32_4 %540 = OpFMul %537 %539 
                                       f32_4 %541 = OpLoad %9 
                                       f32_4 %542 = OpFAdd %540 %541 
                                                      OpStore %9 %542 
                                       f32_4 %543 = OpLoad %9 
                              Uniform f32_4* %544 = OpAccessChain %25 %26 %26 
                                       f32_4 %545 = OpLoad %544 
                                       f32_4 %546 = OpFAdd %543 %545 
                                                      OpStore %9 %546 
                                       f32_4 %547 = OpLoad %9 
                                       f32_4 %548 = OpVectorShuffle %547 %547 1 1 1 1 
                              Uniform f32_4* %550 = OpAccessChain %25 %549 %34 
                                       f32_4 %551 = OpLoad %550 
                                       f32_4 %552 = OpFMul %548 %551 
                                                      OpStore %78 %552 
                              Uniform f32_4* %553 = OpAccessChain %25 %549 %27 
                                       f32_4 %554 = OpLoad %553 
                                       f32_4 %555 = OpLoad %9 
                                       f32_4 %556 = OpVectorShuffle %555 %555 0 0 0 0 
                                       f32_4 %557 = OpFMul %554 %556 
                                       f32_4 %558 = OpLoad %78 
                                       f32_4 %559 = OpFAdd %557 %558 
                                                      OpStore %78 %559 
                              Uniform f32_4* %560 = OpAccessChain %25 %549 %53 
                                       f32_4 %561 = OpLoad %560 
                                       f32_4 %562 = OpLoad %9 
                                       f32_4 %563 = OpVectorShuffle %562 %562 2 2 2 2 
                                       f32_4 %564 = OpFMul %561 %563 
                                       f32_4 %565 = OpLoad %78 
                                       f32_4 %566 = OpFAdd %564 %565 
                                                      OpStore %78 %566 
                              Uniform f32_4* %571 = OpAccessChain %25 %549 %26 
                                       f32_4 %572 = OpLoad %571 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %573 3 3 3 3 
                                       f32_4 %575 = OpFMul %572 %574 
                                       f32_4 %576 = OpLoad %78 
                                       f32_4 %577 = OpFAdd %575 %576 
                               Output f32_4* %578 = OpAccessChain %570 %27 
                                                      OpStore %578 %577 
                                 Output f32* %580 = OpAccessChain %570 %27 %358 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFNegate %581 
                                 Output f32* %583 = OpAccessChain %570 %27 %358 
                                                      OpStore %583 %582 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 46
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %34 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpDecorate %34 Location 34 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %33 = OpTypePointer Output %24 
                       Output f32_4* %34 = OpVariable Output 
                                 f32 %40 = OpConstant 3.674022E-40 
                                     %41 = OpTypeInt 32 0 
                                 u32 %42 = OpConstant 3 
                                     %43 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpLoad %9 
                               f32_3 %37 = OpFAdd %35 %36 
                               f32_4 %38 = OpLoad %34 
                               f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                             OpStore %34 %39 
                         Output f32* %44 = OpAccessChain %34 %42 
                                             OpStore %44 %40 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat21;
int u_xlati21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb25;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat3.xyz = u_xlat2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat4.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = unity_LightAtten[u_xlati_loop_1].z * u_xlat22 + 1.0;
        u_xlat23 = float(1.0) / u_xlat23;
        u_xlatb25 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb5 = unity_LightAtten[u_xlati_loop_1].w<u_xlat22;
        u_xlatb25 = u_xlatb25 && u_xlatb5;
        u_xlat23 = (u_xlatb25) ? 0.0 : u_xlat23;
        u_xlat22 = max(u_xlat22, 9.99999997e-07);
        u_xlat22 = inversesqrt(u_xlat22);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = dot(u_xlat4.xyz, unity_SpotDirection[u_xlati_loop_1].xyz);
        u_xlat22 = max(u_xlat22, 0.0);
        u_xlat22 = u_xlat22 + (-unity_LightAtten[u_xlati_loop_1].x);
        u_xlat22 = u_xlat22 * unity_LightAtten[u_xlati_loop_1].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat23;
        u_xlat22 = u_xlat22 * 0.5;
        u_xlat23 = dot(u_xlat1.xyz, u_xlat4.xyz);
        u_xlat23 = max(u_xlat23, 0.0);
        u_xlat4.xyz = vec3(u_xlat23) * in_COLOR0.xyz;
        u_xlat4.xyz = u_xlat4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat4.xyz = min(u_xlat4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    }
    u_xlat3.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat3;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 614
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %318 %351 %383 %529 %537 %538 %596 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpMemberDecorate %24 11 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %351 Location 351 
                                                      OpDecorate %383 Location 383 
                                                      OpDecorate %529 Location 529 
                                                      OpDecorate vs_TEXCOORD0 Location 537 
                                                      OpDecorate %538 Location 538 
                                                      OpMemberDecorate %594 0 BuiltIn 594 
                                                      OpMemberDecorate %594 1 BuiltIn 594 
                                                      OpMemberDecorate %594 2 BuiltIn 594 
                                                      OpDecorate %594 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeArray %7 %16 
                                              %22 = OpTypeInt 32 1 
                                              %23 = OpTypeVector %22 4 
                                              %24 = OpTypeStruct %12 %13 %14 %15 %17 %18 %7 %19 %20 %21 %23 %7 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; i32_4; f32_4;}* %26 = OpVariable Uniform 
                                          i32 %27 = OpConstant 4 
                                          i32 %28 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Uniform %7 
                                          i32 %34 = OpConstant 7 
                                          i32 %35 = OpConstant 1 
                                          i32 %54 = OpConstant 2 
                                          i32 %67 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                             %126 = OpTypePointer Private %29 
                              Private f32_3* %127 = OpVariable Private 
                              Private f32_4* %162 = OpVariable Private 
                              Private f32_3* %208 = OpVariable Private 
                                         i32 %209 = OpConstant 5 
                                         i32 %213 = OpConstant 8 
                              Private f32_3* %245 = OpVariable Private 
                              Private f32_3* %280 = OpVariable Private 
                                             %317 = OpTypePointer Input %29 
                                Input f32_3* %318 = OpVariable Input 
                                Input f32_3* %351 = OpVariable Input 
                                         u32 %354 = OpConstant 0 
                                             %355 = OpTypePointer Private %6 
                                         u32 %360 = OpConstant 1 
                                         u32 %365 = OpConstant 2 
                                Private f32* %367 = OpVariable Private 
                                             %382 = OpTypePointer Input %7 
                                Input f32_4* %383 = OpVariable Input 
                                         i32 %386 = OpConstant 6 
                                             %394 = OpTypePointer Function %22 
                                         i32 %402 = OpConstant 10 
                                             %403 = OpTypePointer Uniform %22 
                                             %406 = OpTypeBool 
                                Private f32* %421 = OpVariable Private 
                                Private f32* %425 = OpVariable Private 
                                             %427 = OpTypePointer Uniform %6 
                                         f32 %432 = OpConstant 3.674022E-40 
                                             %436 = OpTypePointer Private %406 
                               Private bool* %437 = OpVariable Private 
                                         f32 %438 = OpConstant 3.674022E-40 
                                         u32 %440 = OpConstant 3 
                               Private bool* %444 = OpVariable Private 
                                         f32 %457 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %432 %432 %432 
                                             %524 = OpTypePointer Input %6 
                                             %528 = OpTypePointer Output %7 
                               Output f32_4* %529 = OpVariable Output 
                                             %535 = OpTypeVector %6 2 
                                             %536 = OpTypePointer Output %535 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %538 = OpVariable Input 
                                         i32 %541 = OpConstant 11 
                                         i32 %575 = OpConstant 9 
                                             %593 = OpTypeArray %6 %360 
                                             %594 = OpTypeStruct %7 %6 %593 
                                             %595 = OpTypePointer Output %594 
        Output struct {f32_4; f32; f32[1];}* %596 = OpVariable Output 
                                             %605 = OpTypePointer Output %6 
                                             %611 = OpTypePointer Private %22 
                                Private i32* %612 = OpVariable Private 
                               Private bool* %613 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %395 = OpVariable Function 
                               Uniform f32_4* %31 = OpAccessChain %26 %27 %28 
                                        f32_4 %32 = OpLoad %31 
                                        f32_3 %33 = OpVectorShuffle %32 %32 1 1 1 
                               Uniform f32_4* %36 = OpAccessChain %26 %34 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                                        f32_3 %39 = OpFMul %33 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                                      OpStore %9 %41 
                               Uniform f32_4* %42 = OpAccessChain %26 %34 %28 
                                        f32_4 %43 = OpLoad %42 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                               Uniform f32_4* %45 = OpAccessChain %26 %27 %28 
                                        f32_4 %46 = OpLoad %45 
                                        f32_3 %47 = OpVectorShuffle %46 %46 0 0 0 
                                        f32_3 %48 = OpFMul %44 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %9 %53 
                               Uniform f32_4* %55 = OpAccessChain %26 %34 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               Uniform f32_4* %58 = OpAccessChain %26 %27 %28 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 2 2 2 
                                        f32_3 %61 = OpFMul %57 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFAdd %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %9 %66 
                               Uniform f32_4* %68 = OpAccessChain %26 %34 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               Uniform f32_4* %71 = OpAccessChain %26 %27 %28 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %70 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %9 %79 
                               Uniform f32_4* %81 = OpAccessChain %26 %27 %35 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %26 %34 %35 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %83 %86 
                                        f32_4 %88 = OpLoad %80 
                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                                      OpStore %80 %89 
                               Uniform f32_4* %90 = OpAccessChain %26 %34 %28 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                               Uniform f32_4* %93 = OpAccessChain %26 %27 %35 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %92 %95 
                                        f32_4 %97 = OpLoad %80 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %80 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %80 %101 
                              Uniform f32_4* %102 = OpAccessChain %26 %34 %54 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                              Uniform f32_4* %105 = OpAccessChain %26 %27 %35 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %80 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %80 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %80 %113 
                              Uniform f32_4* %114 = OpAccessChain %26 %34 %67 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              Uniform f32_4* %117 = OpAccessChain %26 %27 %35 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 3 3 3 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %80 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %80 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 6 3 
                                                      OpStore %80 %125 
                              Uniform f32_4* %128 = OpAccessChain %26 %27 %54 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 1 1 1 
                              Uniform f32_4* %131 = OpAccessChain %26 %34 %35 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %130 %133 
                                                      OpStore %127 %134 
                              Uniform f32_4* %135 = OpAccessChain %26 %34 %28 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                              Uniform f32_4* %138 = OpAccessChain %26 %27 %54 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 0 0 
                                       f32_3 %141 = OpFMul %137 %140 
                                       f32_3 %142 = OpLoad %127 
                                       f32_3 %143 = OpFAdd %141 %142 
                                                      OpStore %127 %143 
                              Uniform f32_4* %144 = OpAccessChain %26 %34 %54 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_4* %147 = OpAccessChain %26 %27 %54 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 2 2 2 
                                       f32_3 %150 = OpFMul %146 %149 
                                       f32_3 %151 = OpLoad %127 
                                       f32_3 %152 = OpFAdd %150 %151 
                                                      OpStore %127 %152 
                              Uniform f32_4* %153 = OpAccessChain %26 %34 %67 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                              Uniform f32_4* %156 = OpAccessChain %26 %27 %54 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_3 %159 = OpFMul %155 %158 
                                       f32_3 %160 = OpLoad %127 
                                       f32_3 %161 = OpFAdd %159 %160 
                                                      OpStore %127 %161 
                              Uniform f32_4* %163 = OpAccessChain %26 %27 %67 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 1 1 1 
                              Uniform f32_4* %166 = OpAccessChain %26 %34 %35 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad %162 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %162 %171 
                              Uniform f32_4* %172 = OpAccessChain %26 %34 %28 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %26 %27 %67 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %174 %177 
                                       f32_4 %179 = OpLoad %162 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFAdd %178 %180 
                                       f32_4 %182 = OpLoad %162 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %162 %183 
                              Uniform f32_4* %184 = OpAccessChain %26 %34 %54 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %26 %27 %67 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 2 2 2 
                                       f32_3 %190 = OpFMul %186 %189 
                                       f32_4 %191 = OpLoad %162 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFAdd %190 %192 
                                       f32_4 %194 = OpLoad %162 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %162 %195 
                              Uniform f32_4* %196 = OpAccessChain %26 %34 %67 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %199 = OpAccessChain %26 %27 %67 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %198 %201 
                                       f32_4 %203 = OpLoad %162 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %162 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %162 %207 
                              Uniform f32_4* %210 = OpAccessChain %26 %209 %35 
                                       f32_4 %211 = OpLoad %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %214 = OpAccessChain %26 %213 %28 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                                       f32_3 %217 = OpFMul %212 %216 
                                                      OpStore %208 %217 
                              Uniform f32_4* %218 = OpAccessChain %26 %209 %28 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %26 %213 %28 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_3 %225 = OpLoad %208 
                                       f32_3 %226 = OpFAdd %224 %225 
                                                      OpStore %208 %226 
                              Uniform f32_4* %227 = OpAccessChain %26 %209 %54 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                              Uniform f32_4* %230 = OpAccessChain %26 %213 %28 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 2 2 2 
                                       f32_3 %233 = OpFMul %229 %232 
                                       f32_3 %234 = OpLoad %208 
                                       f32_3 %235 = OpFAdd %233 %234 
                                                      OpStore %208 %235 
                              Uniform f32_4* %236 = OpAccessChain %26 %209 %67 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                              Uniform f32_4* %239 = OpAccessChain %26 %213 %28 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 3 3 
                                       f32_3 %242 = OpFMul %238 %241 
                                       f32_3 %243 = OpLoad %208 
                                       f32_3 %244 = OpFAdd %242 %243 
                                                      OpStore %208 %244 
                              Uniform f32_4* %246 = OpAccessChain %26 %209 %35 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                              Uniform f32_4* %249 = OpAccessChain %26 %213 %35 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                                       f32_3 %252 = OpFMul %248 %251 
                                                      OpStore %245 %252 
                              Uniform f32_4* %253 = OpAccessChain %26 %209 %28 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                              Uniform f32_4* %256 = OpAccessChain %26 %213 %35 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %255 %258 
                                       f32_3 %260 = OpLoad %245 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %245 %261 
                              Uniform f32_4* %262 = OpAccessChain %26 %209 %54 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                              Uniform f32_4* %265 = OpAccessChain %26 %213 %35 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 2 2 
                                       f32_3 %268 = OpFMul %264 %267 
                                       f32_3 %269 = OpLoad %245 
                                       f32_3 %270 = OpFAdd %268 %269 
                                                      OpStore %245 %270 
                              Uniform f32_4* %271 = OpAccessChain %26 %209 %67 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %274 = OpAccessChain %26 %213 %35 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_3 %278 = OpLoad %245 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %245 %279 
                              Uniform f32_4* %281 = OpAccessChain %26 %209 %35 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %284 = OpAccessChain %26 %213 %54 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 1 1 1 
                                       f32_3 %287 = OpFMul %283 %286 
                                                      OpStore %280 %287 
                              Uniform f32_4* %288 = OpAccessChain %26 %209 %28 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %26 %213 %54 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %290 %293 
                                       f32_3 %295 = OpLoad %280 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %280 %296 
                              Uniform f32_4* %297 = OpAccessChain %26 %209 %54 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_4* %300 = OpAccessChain %26 %213 %54 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 2 2 2 
                                       f32_3 %303 = OpFMul %299 %302 
                                       f32_3 %304 = OpLoad %280 
                                       f32_3 %305 = OpFAdd %303 %304 
                                                      OpStore %280 %305 
                              Uniform f32_4* %306 = OpAccessChain %26 %209 %67 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                              Uniform f32_4* %309 = OpAccessChain %26 %213 %54 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 3 3 3 
                                       f32_3 %312 = OpFMul %308 %311 
                                       f32_3 %313 = OpLoad %280 
                                       f32_3 %314 = OpFAdd %312 %313 
                                                      OpStore %280 %314 
                                       f32_4 %315 = OpLoad %80 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 1 1 1 
                                       f32_3 %321 = OpFMul %316 %320 
                                       f32_4 %322 = OpLoad %80 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %80 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpLoad %318 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 0 0 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %80 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %9 %333 
                                       f32_3 %334 = OpLoad %127 
                                       f32_3 %335 = OpLoad %318 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                                       f32_4 %343 = OpLoad %162 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpFAdd %344 %346 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
                                                      OpStore %9 %349 
                                       f32_3 %350 = OpLoad %208 
                                       f32_3 %352 = OpLoad %351 
                                         f32 %353 = OpDot %350 %352 
                                Private f32* %356 = OpAccessChain %80 %354 
                                                      OpStore %356 %353 
                                       f32_3 %357 = OpLoad %245 
                                       f32_3 %358 = OpLoad %351 
                                         f32 %359 = OpDot %357 %358 
                                Private f32* %361 = OpAccessChain %80 %360 
                                                      OpStore %361 %359 
                                       f32_3 %362 = OpLoad %280 
                                       f32_3 %363 = OpLoad %351 
                                         f32 %364 = OpDot %362 %363 
                                Private f32* %366 = OpAccessChain %80 %365 
                                                      OpStore %366 %364 
                                       f32_4 %368 = OpLoad %80 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %80 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                                      OpStore %367 %372 
                                         f32 %373 = OpLoad %367 
                                         f32 %374 = OpExtInst %1 32 %373 
                                                      OpStore %367 %374 
                                         f32 %375 = OpLoad %367 
                                       f32_3 %376 = OpCompositeConstruct %375 %375 %375 
                                       f32_4 %377 = OpLoad %80 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %80 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %80 %381 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                              Uniform f32_4* %387 = OpAccessChain %26 %386 
                                       f32_4 %388 = OpLoad %387 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFMul %385 %389 
                                                      OpStore %127 %390 
                                       f32_3 %391 = OpLoad %127 
                                       f32_4 %392 = OpLoad %162 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %162 %393 
                                                      OpStore %395 %28 
                                                      OpBranch %396 
                                             %396 = OpLabel 
                                                      OpLoopMerge %398 %399 None 
                                                      OpBranch %400 
                                             %400 = OpLabel 
                                         i32 %401 = OpLoad %395 
                                Uniform i32* %404 = OpAccessChain %26 %402 %354 
                                         i32 %405 = OpLoad %404 
                                        bool %407 = OpSLessThan %401 %405 
                                                      OpBranchConditional %407 %397 %398 
                                             %397 = OpLabel 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFNegate %409 
                                         i32 %411 = OpLoad %395 
                              Uniform f32_4* %412 = OpAccessChain %26 %35 %411 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 3 3 3 
                                       f32_3 %415 = OpFMul %410 %414 
                                         i32 %416 = OpLoad %395 
                              Uniform f32_4* %417 = OpAccessChain %26 %35 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %415 %419 
                                                      OpStore %208 %420 
                                       f32_3 %422 = OpLoad %208 
                                       f32_3 %423 = OpLoad %208 
                                         f32 %424 = OpDot %422 %423 
                                                      OpStore %421 %424 
                                         i32 %426 = OpLoad %395 
                                Uniform f32* %428 = OpAccessChain %26 %54 %426 %365 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpLoad %421 
                                         f32 %431 = OpFMul %429 %430 
                                         f32 %433 = OpFAdd %431 %432 
                                                      OpStore %425 %433 
                                         f32 %434 = OpLoad %425 
                                         f32 %435 = OpFDiv %432 %434 
                                                      OpStore %425 %435 
                                         i32 %439 = OpLoad %395 
                                Uniform f32* %441 = OpAccessChain %26 %35 %439 %440 
                                         f32 %442 = OpLoad %441 
                                        bool %443 = OpFOrdNotEqual %438 %442 
                                                      OpStore %437 %443 
                                         i32 %445 = OpLoad %395 
                                Uniform f32* %446 = OpAccessChain %26 %54 %445 %440 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpLoad %421 
                                        bool %449 = OpFOrdLessThan %447 %448 
                                                      OpStore %444 %449 
                                        bool %450 = OpLoad %437 
                                        bool %451 = OpLoad %444 
                                        bool %452 = OpLogicalAnd %450 %451 
                                                      OpStore %437 %452 
                                        bool %453 = OpLoad %437 
                                         f32 %454 = OpLoad %425 
                                         f32 %455 = OpSelect %453 %438 %454 
                                                      OpStore %425 %455 
                                         f32 %456 = OpLoad %421 
                                         f32 %458 = OpExtInst %1 40 %456 %457 
                                                      OpStore %421 %458 
                                         f32 %459 = OpLoad %421 
                                         f32 %460 = OpExtInst %1 32 %459 
                                                      OpStore %421 %460 
                                         f32 %461 = OpLoad %421 
                                       f32_3 %462 = OpCompositeConstruct %461 %461 %461 
                                       f32_3 %463 = OpLoad %208 
                                       f32_3 %464 = OpFMul %462 %463 
                                                      OpStore %208 %464 
                                       f32_3 %465 = OpLoad %208 
                                         i32 %466 = OpLoad %395 
                              Uniform f32_4* %467 = OpAccessChain %26 %67 %466 
                                       f32_4 %468 = OpLoad %467 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %465 %469 
                                                      OpStore %421 %470 
                                         f32 %471 = OpLoad %421 
                                         f32 %472 = OpExtInst %1 40 %471 %438 
                                                      OpStore %421 %472 
                                         f32 %473 = OpLoad %421 
                                         i32 %474 = OpLoad %395 
                                Uniform f32* %475 = OpAccessChain %26 %54 %474 %354 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %478 = OpFAdd %473 %477 
                                                      OpStore %421 %478 
                                         f32 %479 = OpLoad %421 
                                         i32 %480 = OpLoad %395 
                                Uniform f32* %481 = OpAccessChain %26 %54 %480 %360 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %479 %482 
                                                      OpStore %421 %483 
                                         f32 %484 = OpLoad %421 
                                         f32 %485 = OpExtInst %1 43 %484 %438 %432 
                                                      OpStore %421 %485 
                                         f32 %486 = OpLoad %421 
                                         f32 %487 = OpLoad %425 
                                         f32 %488 = OpFMul %486 %487 
                                                      OpStore %421 %488 
                                         f32 %489 = OpLoad %421 
                                         f32 %491 = OpFMul %489 %490 
                                                      OpStore %421 %491 
                                       f32_4 %492 = OpLoad %80 
                                       f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                                       f32_3 %494 = OpLoad %208 
                                         f32 %495 = OpDot %493 %494 
                                                      OpStore %425 %495 
                                         f32 %496 = OpLoad %425 
                                         f32 %497 = OpExtInst %1 40 %496 %438 
                                                      OpStore %425 %497 
                                         f32 %498 = OpLoad %425 
                                       f32_3 %499 = OpCompositeConstruct %498 %498 %498 
                                       f32_4 %500 = OpLoad %383 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_3 %502 = OpFMul %499 %501 
                                                      OpStore %208 %502 
                                       f32_3 %503 = OpLoad %208 
                                         i32 %504 = OpLoad %395 
                              Uniform f32_4* %505 = OpAccessChain %26 %28 %504 
                                       f32_4 %506 = OpLoad %505 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFMul %503 %507 
                                                      OpStore %208 %508 
                                         f32 %509 = OpLoad %421 
                                       f32_3 %510 = OpCompositeConstruct %509 %509 %509 
                                       f32_3 %511 = OpLoad %208 
                                       f32_3 %512 = OpFMul %510 %511 
                                                      OpStore %208 %512 
                                       f32_3 %513 = OpLoad %208 
                                       f32_3 %515 = OpExtInst %1 37 %513 %514 
                                                      OpStore %208 %515 
                                       f32_4 %516 = OpLoad %162 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpLoad %208 
                                       f32_3 %519 = OpFAdd %517 %518 
                                       f32_4 %520 = OpLoad %162 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 6 3 
                                                      OpStore %162 %521 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         i32 %522 = OpLoad %395 
                                         i32 %523 = OpIAdd %522 %35 
                                                      OpStore %395 %523 
                                                      OpBranch %396 
                                             %398 = OpLabel 
                                  Input f32* %525 = OpAccessChain %383 %440 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %162 %440 
                                                      OpStore %527 %526 
                                       f32_4 %530 = OpLoad %162 
                                                      OpStore %529 %530 
                                       f32_4 %531 = OpLoad %529 
                                       f32_4 %532 = OpCompositeConstruct %438 %438 %438 %438 
                                       f32_4 %533 = OpCompositeConstruct %432 %432 %432 %432 
                                       f32_4 %534 = OpExtInst %1 43 %531 %532 %533 
                                                      OpStore %529 %534 
                                       f32_3 %539 = OpLoad %538 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 1 
                              Uniform f32_4* %542 = OpAccessChain %26 %541 
                                       f32_4 %543 = OpLoad %542 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpFMul %540 %544 
                              Uniform f32_4* %546 = OpAccessChain %26 %541 
                                       f32_4 %547 = OpLoad %546 
                                       f32_2 %548 = OpVectorShuffle %547 %547 2 3 
                                       f32_2 %549 = OpFAdd %545 %548 
                                                      OpStore vs_TEXCOORD0 %549 
                                       f32_3 %550 = OpLoad %318 
                                       f32_4 %551 = OpVectorShuffle %550 %550 1 1 1 1 
                              Uniform f32_4* %552 = OpAccessChain %26 %27 %35 
                                       f32_4 %553 = OpLoad %552 
                                       f32_4 %554 = OpFMul %551 %553 
                                                      OpStore %9 %554 
                              Uniform f32_4* %555 = OpAccessChain %26 %27 %28 
                                       f32_4 %556 = OpLoad %555 
                                       f32_3 %557 = OpLoad %318 
                                       f32_4 %558 = OpVectorShuffle %557 %557 0 0 0 0 
                                       f32_4 %559 = OpFMul %556 %558 
                                       f32_4 %560 = OpLoad %9 
                                       f32_4 %561 = OpFAdd %559 %560 
                                                      OpStore %9 %561 
                              Uniform f32_4* %562 = OpAccessChain %26 %27 %54 
                                       f32_4 %563 = OpLoad %562 
                                       f32_3 %564 = OpLoad %318 
                                       f32_4 %565 = OpVectorShuffle %564 %564 2 2 2 2 
                                       f32_4 %566 = OpFMul %563 %565 
                                       f32_4 %567 = OpLoad %9 
                                       f32_4 %568 = OpFAdd %566 %567 
                                                      OpStore %9 %568 
                                       f32_4 %569 = OpLoad %9 
                              Uniform f32_4* %570 = OpAccessChain %26 %27 %67 
                                       f32_4 %571 = OpLoad %570 
                                       f32_4 %572 = OpFAdd %569 %571 
                                                      OpStore %9 %572 
                                       f32_4 %573 = OpLoad %9 
                                       f32_4 %574 = OpVectorShuffle %573 %573 1 1 1 1 
                              Uniform f32_4* %576 = OpAccessChain %26 %575 %35 
                                       f32_4 %577 = OpLoad %576 
                                       f32_4 %578 = OpFMul %574 %577 
                                                      OpStore %80 %578 
                              Uniform f32_4* %579 = OpAccessChain %26 %575 %28 
                                       f32_4 %580 = OpLoad %579 
                                       f32_4 %581 = OpLoad %9 
                                       f32_4 %582 = OpVectorShuffle %581 %581 0 0 0 0 
                                       f32_4 %583 = OpFMul %580 %582 
                                       f32_4 %584 = OpLoad %80 
                                       f32_4 %585 = OpFAdd %583 %584 
                                                      OpStore %80 %585 
                              Uniform f32_4* %586 = OpAccessChain %26 %575 %54 
                                       f32_4 %587 = OpLoad %586 
                                       f32_4 %588 = OpLoad %9 
                                       f32_4 %589 = OpVectorShuffle %588 %588 2 2 2 2 
                                       f32_4 %590 = OpFMul %587 %589 
                                       f32_4 %591 = OpLoad %80 
                                       f32_4 %592 = OpFAdd %590 %591 
                                                      OpStore %80 %592 
                              Uniform f32_4* %597 = OpAccessChain %26 %575 %67 
                                       f32_4 %598 = OpLoad %597 
                                       f32_4 %599 = OpLoad %9 
                                       f32_4 %600 = OpVectorShuffle %599 %599 3 3 3 3 
                                       f32_4 %601 = OpFMul %598 %600 
                                       f32_4 %602 = OpLoad %80 
                                       f32_4 %603 = OpFAdd %601 %602 
                               Output f32_4* %604 = OpAccessChain %596 %28 
                                                      OpStore %604 %603 
                                 Output f32* %606 = OpAccessChain %596 %28 %360 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpFNegate %607 
                                 Output f32* %609 = OpAccessChain %596 %28 %360 
                                                      OpStore %609 %608 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 46
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %34 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpDecorate %34 Location 34 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                     %33 = OpTypePointer Output %24 
                       Output f32_4* %34 = OpVariable Output 
                                 f32 %40 = OpConstant 3.674022E-40 
                                     %41 = OpTypeInt 32 0 
                                 u32 %42 = OpConstant 3 
                                     %43 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %35 = OpLoad %9 
                               f32_3 %36 = OpLoad %9 
                               f32_3 %37 = OpFAdd %35 %36 
                               f32_4 %38 = OpLoad %34 
                               f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                             OpStore %34 %39 
                         Output f32* %44 = OpAccessChain %34 %42 
                                             OpStore %44 %40 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
float u_xlat21;
int u_xlati21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat3.xyz = u_xlat2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat22 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);
        u_xlat22 = max(u_xlat22, 0.0);
        u_xlat4.xyz = vec3(u_xlat22) * in_COLOR0.xyz;
        u_xlat4.xyz = u_xlat4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5);
        u_xlat4.xyz = min(u_xlat4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    }
    u_xlat3.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat3;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    vs_TEXCOORD1 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 557
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %314 %347 %379 %448 %456 %457 %480 %539 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %314 Location 314 
                                                      OpDecorate %347 Location 347 
                                                      OpDecorate %379 Location 379 
                                                      OpDecorate %448 Location 448 
                                                      OpDecorate vs_TEXCOORD0 Location 456 
                                                      OpDecorate %457 Location 457 
                                                      OpDecorate vs_TEXCOORD1 Location 480 
                                                      OpMemberDecorate %537 0 BuiltIn 537 
                                                      OpMemberDecorate %537 1 BuiltIn 537 
                                                      OpMemberDecorate %537 2 BuiltIn 537 
                                                      OpDecorate %537 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                          u32 %14 = OpConstant 4 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %14 
                                              %17 = OpTypeArray %7 %14 
                                              %18 = OpTypeArray %7 %14 
                                              %19 = OpTypeArray %7 %14 
                                              %20 = OpTypeInt 32 1 
                                              %21 = OpTypeVector %20 4 
                                              %22 = OpTypeStruct %12 %13 %15 %16 %7 %17 %18 %19 %7 %21 %7 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; i32_4; f32_4;}* %24 = OpVariable Uniform 
                                          i32 %25 = OpConstant 2 
                                          i32 %26 = OpConstant 0 
                                              %27 = OpTypeVector %6 3 
                                              %28 = OpTypePointer Uniform %7 
                                          i32 %32 = OpConstant 5 
                                          i32 %33 = OpConstant 1 
                                          i32 %64 = OpConstant 3 
                               Private f32_4* %77 = OpVariable Private 
                                             %123 = OpTypePointer Private %27 
                              Private f32_3* %124 = OpVariable Private 
                              Private f32_4* %159 = OpVariable Private 
                              Private f32_3* %205 = OpVariable Private 
                                         i32 %209 = OpConstant 6 
                              Private f32_3* %241 = OpVariable Private 
                              Private f32_3* %276 = OpVariable Private 
                                             %313 = OpTypePointer Input %27 
                                Input f32_3* %314 = OpVariable Input 
                                Input f32_3* %347 = OpVariable Input 
                                         u32 %350 = OpConstant 0 
                                             %351 = OpTypePointer Private %6 
                                         u32 %356 = OpConstant 1 
                                         u32 %361 = OpConstant 2 
                                Private f32* %363 = OpVariable Private 
                                             %378 = OpTypePointer Input %7 
                                Input f32_4* %379 = OpVariable Input 
                                         i32 %382 = OpConstant 4 
                                             %390 = OpTypePointer Function %20 
                                         i32 %398 = OpConstant 9 
                                             %399 = OpTypePointer Uniform %20 
                                             %402 = OpTypeBool 
                                Private f32* %404 = OpVariable Private 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         f32 %427 = OpConstant 3.674022E-40 
                                       f32_3 %428 = OpConstantComposite %427 %427 %427 
                                         f32 %431 = OpConstant 3.674022E-40 
                                       f32_3 %432 = OpConstantComposite %431 %431 %431 
                                         u32 %442 = OpConstant 3 
                                             %443 = OpTypePointer Input %6 
                                             %447 = OpTypePointer Output %7 
                               Output f32_4* %448 = OpVariable Output 
                                             %454 = OpTypeVector %6 2 
                                             %455 = OpTypePointer Output %454 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %457 = OpVariable Input 
                                         i32 %460 = OpConstant 10 
                                             %479 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %483 = OpConstant 8 
                                             %484 = OpTypePointer Uniform %6 
                                         i32 %518 = OpConstant 7 
                                             %536 = OpTypeArray %6 %356 
                                             %537 = OpTypeStruct %7 %6 %536 
                                             %538 = OpTypePointer Output %537 
        Output struct {f32_4; f32; f32[1];}* %539 = OpVariable Output 
                                             %553 = OpTypePointer Private %20 
                                Private i32* %554 = OpVariable Private 
                                             %555 = OpTypePointer Private %402 
                               Private bool* %556 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %391 = OpVariable Function 
                               Uniform f32_4* %29 = OpAccessChain %24 %25 %26 
                                        f32_4 %30 = OpLoad %29 
                                        f32_3 %31 = OpVectorShuffle %30 %30 1 1 1 
                               Uniform f32_4* %34 = OpAccessChain %24 %32 %33 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_3 %37 = OpFMul %31 %36 
                                        f32_4 %38 = OpLoad %9 
                                        f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                                      OpStore %9 %39 
                               Uniform f32_4* %40 = OpAccessChain %24 %32 %26 
                                        f32_4 %41 = OpLoad %40 
                                        f32_3 %42 = OpVectorShuffle %41 %41 0 1 2 
                               Uniform f32_4* %43 = OpAccessChain %24 %25 %26 
                                        f32_4 %44 = OpLoad %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 0 0 
                                        f32_3 %46 = OpFMul %42 %45 
                                        f32_4 %47 = OpLoad %9 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_3 %49 = OpFAdd %46 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 6 3 
                                                      OpStore %9 %51 
                               Uniform f32_4* %52 = OpAccessChain %24 %32 %25 
                                        f32_4 %53 = OpLoad %52 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               Uniform f32_4* %55 = OpAccessChain %24 %25 %26 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 2 2 2 
                                        f32_3 %58 = OpFMul %54 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                                        f32_3 %61 = OpFAdd %58 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_4 %63 = OpVectorShuffle %62 %61 4 5 6 3 
                                                      OpStore %9 %63 
                               Uniform f32_4* %65 = OpAccessChain %24 %32 %64 
                                        f32_4 %66 = OpLoad %65 
                                        f32_3 %67 = OpVectorShuffle %66 %66 0 1 2 
                               Uniform f32_4* %68 = OpAccessChain %24 %25 %26 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %67 %70 
                                        f32_4 %72 = OpLoad %9 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %9 %76 
                               Uniform f32_4* %78 = OpAccessChain %24 %25 %33 
                                        f32_4 %79 = OpLoad %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %24 %32 %33 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %77 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %77 %86 
                               Uniform f32_4* %87 = OpAccessChain %24 %32 %26 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               Uniform f32_4* %90 = OpAccessChain %24 %25 %33 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpFMul %89 %92 
                                        f32_4 %94 = OpLoad %77 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFAdd %93 %95 
                                        f32_4 %97 = OpLoad %77 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %77 %98 
                               Uniform f32_4* %99 = OpAccessChain %24 %32 %25 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                              Uniform f32_4* %102 = OpAccessChain %24 %25 %33 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %101 %104 
                                       f32_4 %106 = OpLoad %77 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %77 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %77 %110 
                              Uniform f32_4* %111 = OpAccessChain %24 %32 %64 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                              Uniform f32_4* %114 = OpAccessChain %24 %25 %33 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 3 3 3 
                                       f32_3 %117 = OpFMul %113 %116 
                                       f32_4 %118 = OpLoad %77 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %77 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %77 %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %25 %25 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 1 1 1 
                              Uniform f32_4* %128 = OpAccessChain %24 %32 %33 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %127 %130 
                                                      OpStore %124 %131 
                              Uniform f32_4* %132 = OpAccessChain %24 %32 %26 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                              Uniform f32_4* %135 = OpAccessChain %24 %25 %25 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 0 0 
                                       f32_3 %138 = OpFMul %134 %137 
                                       f32_3 %139 = OpLoad %124 
                                       f32_3 %140 = OpFAdd %138 %139 
                                                      OpStore %124 %140 
                              Uniform f32_4* %141 = OpAccessChain %24 %32 %25 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                              Uniform f32_4* %144 = OpAccessChain %24 %25 %25 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 2 2 2 
                                       f32_3 %147 = OpFMul %143 %146 
                                       f32_3 %148 = OpLoad %124 
                                       f32_3 %149 = OpFAdd %147 %148 
                                                      OpStore %124 %149 
                              Uniform f32_4* %150 = OpAccessChain %24 %32 %64 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                              Uniform f32_4* %153 = OpAccessChain %24 %25 %25 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 3 3 3 
                                       f32_3 %156 = OpFMul %152 %155 
                                       f32_3 %157 = OpLoad %124 
                                       f32_3 %158 = OpFAdd %156 %157 
                                                      OpStore %124 %158 
                              Uniform f32_4* %160 = OpAccessChain %24 %25 %64 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 1 1 1 
                              Uniform f32_4* %163 = OpAccessChain %24 %32 %33 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFMul %162 %165 
                                       f32_4 %167 = OpLoad %159 
                                       f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                                      OpStore %159 %168 
                              Uniform f32_4* %169 = OpAccessChain %24 %32 %26 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                              Uniform f32_4* %172 = OpAccessChain %24 %25 %64 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 0 0 
                                       f32_3 %175 = OpFMul %171 %174 
                                       f32_4 %176 = OpLoad %159 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFAdd %175 %177 
                                       f32_4 %179 = OpLoad %159 
                                       f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                      OpStore %159 %180 
                              Uniform f32_4* %181 = OpAccessChain %24 %32 %25 
                                       f32_4 %182 = OpLoad %181 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                              Uniform f32_4* %184 = OpAccessChain %24 %25 %64 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 2 2 2 
                                       f32_3 %187 = OpFMul %183 %186 
                                       f32_4 %188 = OpLoad %159 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %190 = OpFAdd %187 %189 
                                       f32_4 %191 = OpLoad %159 
                                       f32_4 %192 = OpVectorShuffle %191 %190 4 5 6 3 
                                                      OpStore %159 %192 
                              Uniform f32_4* %193 = OpAccessChain %24 %32 %64 
                                       f32_4 %194 = OpLoad %193 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                              Uniform f32_4* %196 = OpAccessChain %24 %25 %64 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                       f32_3 %199 = OpFMul %195 %198 
                                       f32_4 %200 = OpLoad %159 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                       f32_4 %203 = OpLoad %159 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %159 %204 
                              Uniform f32_4* %206 = OpAccessChain %24 %64 %33 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              Uniform f32_4* %210 = OpAccessChain %24 %209 %26 
                                       f32_4 %211 = OpLoad %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 1 1 1 
                                       f32_3 %213 = OpFMul %208 %212 
                                                      OpStore %205 %213 
                              Uniform f32_4* %214 = OpAccessChain %24 %64 %26 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %24 %209 %26 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 0 0 
                                       f32_3 %220 = OpFMul %216 %219 
                                       f32_3 %221 = OpLoad %205 
                                       f32_3 %222 = OpFAdd %220 %221 
                                                      OpStore %205 %222 
                              Uniform f32_4* %223 = OpAccessChain %24 %64 %25 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                              Uniform f32_4* %226 = OpAccessChain %24 %209 %26 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 2 2 2 
                                       f32_3 %229 = OpFMul %225 %228 
                                       f32_3 %230 = OpLoad %205 
                                       f32_3 %231 = OpFAdd %229 %230 
                                                      OpStore %205 %231 
                              Uniform f32_4* %232 = OpAccessChain %24 %64 %64 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                              Uniform f32_4* %235 = OpAccessChain %24 %209 %26 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 3 3 3 
                                       f32_3 %238 = OpFMul %234 %237 
                                       f32_3 %239 = OpLoad %205 
                                       f32_3 %240 = OpFAdd %238 %239 
                                                      OpStore %205 %240 
                              Uniform f32_4* %242 = OpAccessChain %24 %64 %33 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                              Uniform f32_4* %245 = OpAccessChain %24 %209 %33 
                                       f32_4 %246 = OpLoad %245 
                                       f32_3 %247 = OpVectorShuffle %246 %246 1 1 1 
                                       f32_3 %248 = OpFMul %244 %247 
                                                      OpStore %241 %248 
                              Uniform f32_4* %249 = OpAccessChain %24 %64 %26 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                              Uniform f32_4* %252 = OpAccessChain %24 %209 %33 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_3 %255 = OpFMul %251 %254 
                                       f32_3 %256 = OpLoad %241 
                                       f32_3 %257 = OpFAdd %255 %256 
                                                      OpStore %241 %257 
                              Uniform f32_4* %258 = OpAccessChain %24 %64 %25 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                              Uniform f32_4* %261 = OpAccessChain %24 %209 %33 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 2 2 2 
                                       f32_3 %264 = OpFMul %260 %263 
                                       f32_3 %265 = OpLoad %241 
                                       f32_3 %266 = OpFAdd %264 %265 
                                                      OpStore %241 %266 
                              Uniform f32_4* %267 = OpAccessChain %24 %64 %64 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                              Uniform f32_4* %270 = OpAccessChain %24 %209 %33 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 3 3 3 
                                       f32_3 %273 = OpFMul %269 %272 
                                       f32_3 %274 = OpLoad %241 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %241 %275 
                              Uniform f32_4* %277 = OpAccessChain %24 %64 %33 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                              Uniform f32_4* %280 = OpAccessChain %24 %209 %25 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 1 1 1 
                                       f32_3 %283 = OpFMul %279 %282 
                                                      OpStore %276 %283 
                              Uniform f32_4* %284 = OpAccessChain %24 %64 %26 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                              Uniform f32_4* %287 = OpAccessChain %24 %209 %25 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 0 0 
                                       f32_3 %290 = OpFMul %286 %289 
                                       f32_3 %291 = OpLoad %276 
                                       f32_3 %292 = OpFAdd %290 %291 
                                                      OpStore %276 %292 
                              Uniform f32_4* %293 = OpAccessChain %24 %64 %25 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                              Uniform f32_4* %296 = OpAccessChain %24 %209 %25 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 2 2 2 
                                       f32_3 %299 = OpFMul %295 %298 
                                       f32_3 %300 = OpLoad %276 
                                       f32_3 %301 = OpFAdd %299 %300 
                                                      OpStore %276 %301 
                              Uniform f32_4* %302 = OpAccessChain %24 %64 %64 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                              Uniform f32_4* %305 = OpAccessChain %24 %209 %25 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 3 3 3 
                                       f32_3 %308 = OpFMul %304 %307 
                                       f32_3 %309 = OpLoad %276 
                                       f32_3 %310 = OpFAdd %308 %309 
                                                      OpStore %276 %310 
                                       f32_4 %311 = OpLoad %77 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpLoad %314 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 1 1 
                                       f32_3 %317 = OpFMul %312 %316 
                                       f32_4 %318 = OpLoad %77 
                                       f32_4 %319 = OpVectorShuffle %318 %317 4 5 6 3 
                                                      OpStore %77 %319 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpLoad %314 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 0 0 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %77 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFAdd %324 %326 
                                       f32_4 %328 = OpLoad %9 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %9 %329 
                                       f32_3 %330 = OpLoad %124 
                                       f32_3 %331 = OpLoad %314 
                                       f32_3 %332 = OpVectorShuffle %331 %331 2 2 2 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 1 2 
                                       f32_3 %336 = OpFAdd %333 %335 
                                       f32_4 %337 = OpLoad %9 
                                       f32_4 %338 = OpVectorShuffle %337 %336 4 5 6 3 
                                                      OpStore %9 %338 
                                       f32_4 %339 = OpLoad %159 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %9 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFAdd %340 %342 
                                       f32_4 %344 = OpLoad %9 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 6 3 
                                                      OpStore %9 %345 
                                       f32_3 %346 = OpLoad %205 
                                       f32_3 %348 = OpLoad %347 
                                         f32 %349 = OpDot %346 %348 
                                Private f32* %352 = OpAccessChain %77 %350 
                                                      OpStore %352 %349 
                                       f32_3 %353 = OpLoad %241 
                                       f32_3 %354 = OpLoad %347 
                                         f32 %355 = OpDot %353 %354 
                                Private f32* %357 = OpAccessChain %77 %356 
                                                      OpStore %357 %355 
                                       f32_3 %358 = OpLoad %276 
                                       f32_3 %359 = OpLoad %347 
                                         f32 %360 = OpDot %358 %359 
                                Private f32* %362 = OpAccessChain %77 %361 
                                                      OpStore %362 %360 
                                       f32_4 %364 = OpLoad %77 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_4 %366 = OpLoad %77 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                         f32 %368 = OpDot %365 %367 
                                                      OpStore %363 %368 
                                         f32 %369 = OpLoad %363 
                                         f32 %370 = OpExtInst %1 32 %369 
                                                      OpStore %363 %370 
                                         f32 %371 = OpLoad %363 
                                       f32_3 %372 = OpCompositeConstruct %371 %371 %371 
                                       f32_4 %373 = OpLoad %77 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %77 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %77 %377 
                                       f32_4 %380 = OpLoad %379 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                              Uniform f32_4* %383 = OpAccessChain %24 %382 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFMul %381 %385 
                                                      OpStore %124 %386 
                                       f32_3 %387 = OpLoad %124 
                                       f32_4 %388 = OpLoad %159 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %159 %389 
                                                      OpStore %391 %26 
                                                      OpBranch %392 
                                             %392 = OpLabel 
                                                      OpLoopMerge %394 %395 None 
                                                      OpBranch %396 
                                             %396 = OpLabel 
                                         i32 %397 = OpLoad %391 
                                Uniform i32* %400 = OpAccessChain %24 %398 %350 
                                         i32 %401 = OpLoad %400 
                                        bool %403 = OpSLessThan %397 %401 
                                                      OpBranchConditional %403 %393 %394 
                                             %393 = OpLabel 
                                       f32_4 %405 = OpLoad %77 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                         i32 %407 = OpLoad %391 
                              Uniform f32_4* %408 = OpAccessChain %24 %33 %407 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                         f32 %411 = OpDot %406 %410 
                                                      OpStore %404 %411 
                                         f32 %412 = OpLoad %404 
                                         f32 %414 = OpExtInst %1 40 %412 %413 
                                                      OpStore %404 %414 
                                         f32 %415 = OpLoad %404 
                                       f32_3 %416 = OpCompositeConstruct %415 %415 %415 
                                       f32_4 %417 = OpLoad %379 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFMul %416 %418 
                                                      OpStore %205 %419 
                                       f32_3 %420 = OpLoad %205 
                                         i32 %421 = OpLoad %391 
                              Uniform f32_4* %422 = OpAccessChain %24 %26 %421 
                                       f32_4 %423 = OpLoad %422 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_3 %425 = OpFMul %420 %424 
                                                      OpStore %205 %425 
                                       f32_3 %426 = OpLoad %205 
                                       f32_3 %429 = OpFMul %426 %428 
                                                      OpStore %205 %429 
                                       f32_3 %430 = OpLoad %205 
                                       f32_3 %433 = OpExtInst %1 37 %430 %432 
                                                      OpStore %205 %433 
                                       f32_4 %434 = OpLoad %159 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpLoad %205 
                                       f32_3 %437 = OpFAdd %435 %436 
                                       f32_4 %438 = OpLoad %159 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %159 %439 
                                                      OpBranch %395 
                                             %395 = OpLabel 
                                         i32 %440 = OpLoad %391 
                                         i32 %441 = OpIAdd %440 %33 
                                                      OpStore %391 %441 
                                                      OpBranch %392 
                                             %394 = OpLabel 
                                  Input f32* %444 = OpAccessChain %379 %442 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %159 %442 
                                                      OpStore %446 %445 
                                       f32_4 %449 = OpLoad %159 
                                                      OpStore %448 %449 
                                       f32_4 %450 = OpLoad %448 
                                       f32_4 %451 = OpCompositeConstruct %413 %413 %413 %413 
                                       f32_4 %452 = OpCompositeConstruct %431 %431 %431 %431 
                                       f32_4 %453 = OpExtInst %1 43 %450 %451 %452 
                                                      OpStore %448 %453 
                                       f32_3 %458 = OpLoad %457 
                                       f32_2 %459 = OpVectorShuffle %458 %458 0 1 
                              Uniform f32_4* %461 = OpAccessChain %24 %460 
                                       f32_4 %462 = OpLoad %461 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFMul %459 %463 
                              Uniform f32_4* %465 = OpAccessChain %24 %460 
                                       f32_4 %466 = OpLoad %465 
                                       f32_2 %467 = OpVectorShuffle %466 %466 2 3 
                                       f32_2 %468 = OpFAdd %464 %467 
                                                      OpStore vs_TEXCOORD0 %468 
                                       f32_4 %469 = OpLoad %9 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpDot %470 %472 
                                Private f32* %474 = OpAccessChain %9 %350 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %350 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpExtInst %1 31 %476 
                                Private f32* %478 = OpAccessChain %9 %350 
                                                      OpStore %478 %477 
                                Private f32* %481 = OpAccessChain %9 %350 
                                         f32 %482 = OpLoad %481 
                                Uniform f32* %485 = OpAccessChain %24 %483 %361 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpFMul %482 %486 
                                Uniform f32* %488 = OpAccessChain %24 %483 %442 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFAdd %487 %489 
                                                      OpStore vs_TEXCOORD1 %490 
                                         f32 %491 = OpLoad vs_TEXCOORD1 
                                         f32 %492 = OpExtInst %1 43 %491 %413 %431 
                                                      OpStore vs_TEXCOORD1 %492 
                                       f32_3 %493 = OpLoad %314 
                                       f32_4 %494 = OpVectorShuffle %493 %493 1 1 1 1 
                              Uniform f32_4* %495 = OpAccessChain %24 %25 %33 
                                       f32_4 %496 = OpLoad %495 
                                       f32_4 %497 = OpFMul %494 %496 
                                                      OpStore %9 %497 
                              Uniform f32_4* %498 = OpAccessChain %24 %25 %26 
                                       f32_4 %499 = OpLoad %498 
                                       f32_3 %500 = OpLoad %314 
                                       f32_4 %501 = OpVectorShuffle %500 %500 0 0 0 0 
                                       f32_4 %502 = OpFMul %499 %501 
                                       f32_4 %503 = OpLoad %9 
                                       f32_4 %504 = OpFAdd %502 %503 
                                                      OpStore %9 %504 
                              Uniform f32_4* %505 = OpAccessChain %24 %25 %25 
                                       f32_4 %506 = OpLoad %505 
                                       f32_3 %507 = OpLoad %314 
                                       f32_4 %508 = OpVectorShuffle %507 %507 2 2 2 2 
                                       f32_4 %509 = OpFMul %506 %508 
                                       f32_4 %510 = OpLoad %9 
                                       f32_4 %511 = OpFAdd %509 %510 
                                                      OpStore %9 %511 
                                       f32_4 %512 = OpLoad %9 
                              Uniform f32_4* %513 = OpAccessChain %24 %25 %64 
                                       f32_4 %514 = OpLoad %513 
                                       f32_4 %515 = OpFAdd %512 %514 
                                                      OpStore %9 %515 
                                       f32_4 %516 = OpLoad %9 
                                       f32_4 %517 = OpVectorShuffle %516 %516 1 1 1 1 
                              Uniform f32_4* %519 = OpAccessChain %24 %518 %33 
                                       f32_4 %520 = OpLoad %519 
                                       f32_4 %521 = OpFMul %517 %520 
                                                      OpStore %77 %521 
                              Uniform f32_4* %522 = OpAccessChain %24 %518 %26 
                                       f32_4 %523 = OpLoad %522 
                                       f32_4 %524 = OpLoad %9 
                                       f32_4 %525 = OpVectorShuffle %524 %524 0 0 0 0 
                                       f32_4 %526 = OpFMul %523 %525 
                                       f32_4 %527 = OpLoad %77 
                                       f32_4 %528 = OpFAdd %526 %527 
                                                      OpStore %77 %528 
                              Uniform f32_4* %529 = OpAccessChain %24 %518 %25 
                                       f32_4 %530 = OpLoad %529 
                                       f32_4 %531 = OpLoad %9 
                                       f32_4 %532 = OpVectorShuffle %531 %531 2 2 2 2 
                                       f32_4 %533 = OpFMul %530 %532 
                                       f32_4 %534 = OpLoad %77 
                                       f32_4 %535 = OpFAdd %533 %534 
                                                      OpStore %77 %535 
                              Uniform f32_4* %540 = OpAccessChain %24 %518 %64 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %9 
                                       f32_4 %543 = OpVectorShuffle %542 %542 3 3 3 3 
                                       f32_4 %544 = OpFMul %541 %543 
                                       f32_4 %545 = OpLoad %77 
                                       f32_4 %546 = OpFAdd %544 %545 
                               Output f32_4* %547 = OpAccessChain %539 %26 
                                                      OpStore %547 %546 
                                 Output f32* %548 = OpAccessChain %539 %26 %356 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFNegate %549 
                                 Output f32* %551 = OpAccessChain %539 %26 %356 
                                                      OpStore %551 %550 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %49 %51 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %37 0 Offset 37 
                                             OpDecorate %37 Block 
                                             OpDecorate %39 DescriptorSet 39 
                                             OpDecorate %39 Binding 39 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 51 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                 f32 %34 = OpConstant 3.674022E-40 
                               f32_3 %35 = OpConstantComposite %34 %34 %34 
                                     %37 = OpTypeStruct %24 
                                     %38 = OpTypePointer Uniform %37 
            Uniform struct {f32_4;}* %39 = OpVariable Uniform 
                                     %40 = OpTypeInt 32 1 
                                 i32 %41 = OpConstant 0 
                                     %42 = OpTypePointer Uniform %24 
                                     %48 = OpTypePointer Output %24 
                       Output f32_4* %49 = OpVariable Output 
                                     %50 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %62 = OpConstant 3.674022E-40 
                                     %63 = OpTypeInt 32 0 
                                 u32 %64 = OpConstant 3 
                                     %65 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                               f32_3 %36 = OpFMul %33 %35 
                      Uniform f32_4* %43 = OpAccessChain %39 %41 
                               f32_4 %44 = OpLoad %43 
                               f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                               f32_3 %46 = OpFNegate %45 
                               f32_3 %47 = OpFAdd %36 %46 
                                             OpStore %9 %47 
                                 f32 %52 = OpLoad vs_TEXCOORD1 
                               f32_3 %53 = OpCompositeConstruct %52 %52 %52 
                               f32_3 %54 = OpLoad %9 
                               f32_3 %55 = OpFMul %53 %54 
                      Uniform f32_4* %56 = OpAccessChain %39 %41 
                               f32_4 %57 = OpLoad %56 
                               f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               f32_3 %59 = OpFAdd %55 %58 
                               f32_4 %60 = OpLoad %49 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %49 %61 
                         Output f32* %66 = OpAccessChain %49 %64 
                                             OpStore %66 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat21;
int u_xlati21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb25;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat3.xyz = u_xlat2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat4.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = unity_LightAtten[u_xlati_loop_1].z * u_xlat22 + 1.0;
        u_xlat23 = float(1.0) / u_xlat23;
        u_xlatb25 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb5 = unity_LightAtten[u_xlati_loop_1].w<u_xlat22;
        u_xlatb25 = u_xlatb25 && u_xlatb5;
        u_xlat22 = max(u_xlat22, 9.99999997e-07);
        u_xlat22 = inversesqrt(u_xlat22);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = u_xlat23 * 0.5;
        u_xlat22 = (u_xlatb25) ? 0.0 : u_xlat22;
        u_xlat23 = dot(u_xlat1.xyz, u_xlat4.xyz);
        u_xlat23 = max(u_xlat23, 0.0);
        u_xlat4.xyz = vec3(u_xlat23) * in_COLOR0.xyz;
        u_xlat4.xyz = u_xlat4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat4.xyz = min(u_xlat4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    }
    u_xlat3.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat3;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    vs_TEXCOORD1 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 610
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %316 %349 %381 %503 %511 %512 %535 %593 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %23 0 Offset 23 
                                                      OpMemberDecorate %23 1 Offset 23 
                                                      OpMemberDecorate %23 2 Offset 23 
                                                      OpMemberDecorate %23 3 Offset 23 
                                                      OpMemberDecorate %23 4 Offset 23 
                                                      OpMemberDecorate %23 5 Offset 23 
                                                      OpMemberDecorate %23 6 Offset 23 
                                                      OpMemberDecorate %23 7 Offset 23 
                                                      OpMemberDecorate %23 8 Offset 23 
                                                      OpMemberDecorate %23 9 Offset 23 
                                                      OpMemberDecorate %23 10 Offset 23 
                                                      OpMemberDecorate %23 11 Offset 23 
                                                      OpDecorate %23 Block 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %316 Location 316 
                                                      OpDecorate %349 Location 349 
                                                      OpDecorate %381 Location 381 
                                                      OpDecorate %503 Location 503 
                                                      OpDecorate vs_TEXCOORD0 Location 511 
                                                      OpDecorate %512 Location 512 
                                                      OpDecorate vs_TEXCOORD1 Location 535 
                                                      OpMemberDecorate %591 0 BuiltIn 591 
                                                      OpMemberDecorate %591 1 BuiltIn 591 
                                                      OpMemberDecorate %591 2 BuiltIn 591 
                                                      OpDecorate %591 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeArray %7 %15 
                                              %20 = OpTypeArray %7 %15 
                                              %21 = OpTypeInt 32 1 
                                              %22 = OpTypeVector %21 4 
                                              %23 = OpTypeStruct %12 %13 %14 %16 %17 %7 %18 %19 %20 %7 %22 %7 
                                              %24 = OpTypePointer Uniform %23 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; i32_4; f32_4;}* %25 = OpVariable Uniform 
                                          i32 %26 = OpConstant 3 
                                          i32 %27 = OpConstant 0 
                                              %28 = OpTypeVector %6 3 
                                              %29 = OpTypePointer Uniform %7 
                                          i32 %33 = OpConstant 6 
                                          i32 %34 = OpConstant 1 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %78 = OpVariable Private 
                                             %124 = OpTypePointer Private %28 
                              Private f32_3* %125 = OpVariable Private 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_3* %206 = OpVariable Private 
                                         i32 %207 = OpConstant 4 
                                         i32 %211 = OpConstant 7 
                              Private f32_3* %243 = OpVariable Private 
                              Private f32_3* %278 = OpVariable Private 
                                             %315 = OpTypePointer Input %28 
                                Input f32_3* %316 = OpVariable Input 
                                Input f32_3* %349 = OpVariable Input 
                                         u32 %352 = OpConstant 0 
                                             %353 = OpTypePointer Private %6 
                                         u32 %358 = OpConstant 1 
                                         u32 %363 = OpConstant 2 
                                Private f32* %365 = OpVariable Private 
                                             %380 = OpTypePointer Input %7 
                                Input f32_4* %381 = OpVariable Input 
                                         i32 %384 = OpConstant 5 
                                             %392 = OpTypePointer Function %21 
                                         i32 %400 = OpConstant 10 
                                             %401 = OpTypePointer Uniform %21 
                                             %404 = OpTypeBool 
                                Private f32* %419 = OpVariable Private 
                                Private f32* %423 = OpVariable Private 
                                             %425 = OpTypePointer Uniform %6 
                                         f32 %430 = OpConstant 3.674022E-40 
                                             %434 = OpTypePointer Private %404 
                               Private bool* %435 = OpVariable Private 
                                         f32 %436 = OpConstant 3.674022E-40 
                                         u32 %438 = OpConstant 3 
                               Private bool* %442 = OpVariable Private 
                                         f32 %452 = OpConstant 3.674022E-40 
                                         f32 %461 = OpConstant 3.674022E-40 
                                       f32_3 %488 = OpConstantComposite %430 %430 %430 
                                             %498 = OpTypePointer Input %6 
                                             %502 = OpTypePointer Output %7 
                               Output f32_4* %503 = OpVariable Output 
                                             %509 = OpTypeVector %6 2 
                                             %510 = OpTypePointer Output %509 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %512 = OpVariable Input 
                                         i32 %515 = OpConstant 11 
                                             %534 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %538 = OpConstant 9 
                                         i32 %572 = OpConstant 8 
                                             %590 = OpTypeArray %6 %358 
                                             %591 = OpTypeStruct %7 %6 %590 
                                             %592 = OpTypePointer Output %591 
        Output struct {f32_4; f32; f32[1];}* %593 = OpVariable Output 
                                             %607 = OpTypePointer Private %21 
                                Private i32* %608 = OpVariable Private 
                               Private bool* %609 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %393 = OpVariable Function 
                               Uniform f32_4* %30 = OpAccessChain %25 %26 %27 
                                        f32_4 %31 = OpLoad %30 
                                        f32_3 %32 = OpVectorShuffle %31 %31 1 1 1 
                               Uniform f32_4* %35 = OpAccessChain %25 %33 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_3 %37 = OpVectorShuffle %36 %36 0 1 2 
                                        f32_3 %38 = OpFMul %32 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                               Uniform f32_4* %41 = OpAccessChain %25 %33 %27 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                               Uniform f32_4* %44 = OpAccessChain %25 %26 %27 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 0 0 
                                        f32_3 %47 = OpFMul %43 %46 
                                        f32_4 %48 = OpLoad %9 
                                        f32_3 %49 = OpVectorShuffle %48 %48 0 1 2 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                               Uniform f32_4* %54 = OpAccessChain %25 %33 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                               Uniform f32_4* %57 = OpAccessChain %25 %26 %27 
                                        f32_4 %58 = OpLoad %57 
                                        f32_3 %59 = OpVectorShuffle %58 %58 2 2 2 
                                        f32_3 %60 = OpFMul %56 %59 
                                        f32_4 %61 = OpLoad %9 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %60 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_4* %66 = OpAccessChain %25 %33 %26 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                               Uniform f32_4* %69 = OpAccessChain %25 %26 %27 
                                        f32_4 %70 = OpLoad %69 
                                        f32_3 %71 = OpVectorShuffle %70 %70 3 3 3 
                                        f32_3 %72 = OpFMul %68 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpFAdd %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
                                                      OpStore %9 %77 
                               Uniform f32_4* %79 = OpAccessChain %25 %26 %34 
                                        f32_4 %80 = OpLoad %79 
                                        f32_3 %81 = OpVectorShuffle %80 %80 1 1 1 
                               Uniform f32_4* %82 = OpAccessChain %25 %33 %34 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %81 %84 
                                        f32_4 %86 = OpLoad %78 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 6 3 
                                                      OpStore %78 %87 
                               Uniform f32_4* %88 = OpAccessChain %25 %33 %27 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                               Uniform f32_4* %91 = OpAccessChain %25 %26 %34 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpFMul %90 %93 
                                        f32_4 %95 = OpLoad %78 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_3 %97 = OpFAdd %94 %96 
                                        f32_4 %98 = OpLoad %78 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                      OpStore %78 %99 
                              Uniform f32_4* %100 = OpAccessChain %25 %33 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                              Uniform f32_4* %103 = OpAccessChain %25 %26 %34 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 2 2 2 
                                       f32_3 %106 = OpFMul %102 %105 
                                       f32_4 %107 = OpLoad %78 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %78 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %78 %111 
                              Uniform f32_4* %112 = OpAccessChain %25 %33 %26 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                              Uniform f32_4* %115 = OpAccessChain %25 %26 %34 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 3 3 3 
                                       f32_3 %118 = OpFMul %114 %117 
                                       f32_4 %119 = OpLoad %78 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %118 %120 
                                       f32_4 %122 = OpLoad %78 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %78 %123 
                              Uniform f32_4* %126 = OpAccessChain %25 %26 %53 
                                       f32_4 %127 = OpLoad %126 
                                       f32_3 %128 = OpVectorShuffle %127 %127 1 1 1 
                              Uniform f32_4* %129 = OpAccessChain %25 %33 %34 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %128 %131 
                                                      OpStore %125 %132 
                              Uniform f32_4* %133 = OpAccessChain %25 %33 %27 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %136 = OpAccessChain %25 %26 %53 
                                       f32_4 %137 = OpLoad %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                       f32_3 %139 = OpFMul %135 %138 
                                       f32_3 %140 = OpLoad %125 
                                       f32_3 %141 = OpFAdd %139 %140 
                                                      OpStore %125 %141 
                              Uniform f32_4* %142 = OpAccessChain %25 %33 %53 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                              Uniform f32_4* %145 = OpAccessChain %25 %26 %53 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 2 2 2 
                                       f32_3 %148 = OpFMul %144 %147 
                                       f32_3 %149 = OpLoad %125 
                                       f32_3 %150 = OpFAdd %148 %149 
                                                      OpStore %125 %150 
                              Uniform f32_4* %151 = OpAccessChain %25 %33 %26 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %25 %26 %53 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %153 %156 
                                       f32_3 %158 = OpLoad %125 
                                       f32_3 %159 = OpFAdd %157 %158 
                                                      OpStore %125 %159 
                              Uniform f32_4* %161 = OpAccessChain %25 %26 %26 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %25 %33 %34 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                       f32_4 %168 = OpLoad %160 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
                                                      OpStore %160 %169 
                              Uniform f32_4* %170 = OpAccessChain %25 %33 %27 
                                       f32_4 %171 = OpLoad %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %173 = OpAccessChain %25 %26 %26 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 0 0 
                                       f32_3 %176 = OpFMul %172 %175 
                                       f32_4 %177 = OpLoad %160 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFAdd %176 %178 
                                       f32_4 %180 = OpLoad %160 
                                       f32_4 %181 = OpVectorShuffle %180 %179 4 5 6 3 
                                                      OpStore %160 %181 
                              Uniform f32_4* %182 = OpAccessChain %25 %33 %53 
                                       f32_4 %183 = OpLoad %182 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                              Uniform f32_4* %185 = OpAccessChain %25 %26 %26 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 2 2 2 
                                       f32_3 %188 = OpFMul %184 %187 
                                       f32_4 %189 = OpLoad %160 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFAdd %188 %190 
                                       f32_4 %192 = OpLoad %160 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %160 %193 
                              Uniform f32_4* %194 = OpAccessChain %25 %33 %26 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                              Uniform f32_4* %197 = OpAccessChain %25 %26 %26 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                       f32_3 %200 = OpFMul %196 %199 
                                       f32_4 %201 = OpLoad %160 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %160 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %160 %205 
                              Uniform f32_4* %208 = OpAccessChain %25 %207 %34 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                              Uniform f32_4* %212 = OpAccessChain %25 %211 %27 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 1 1 1 
                                       f32_3 %215 = OpFMul %210 %214 
                                                      OpStore %206 %215 
                              Uniform f32_4* %216 = OpAccessChain %25 %207 %27 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_4* %219 = OpAccessChain %25 %211 %27 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 0 0 
                                       f32_3 %222 = OpFMul %218 %221 
                                       f32_3 %223 = OpLoad %206 
                                       f32_3 %224 = OpFAdd %222 %223 
                                                      OpStore %206 %224 
                              Uniform f32_4* %225 = OpAccessChain %25 %207 %53 
                                       f32_4 %226 = OpLoad %225 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                              Uniform f32_4* %228 = OpAccessChain %25 %211 %27 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 2 2 2 
                                       f32_3 %231 = OpFMul %227 %230 
                                       f32_3 %232 = OpLoad %206 
                                       f32_3 %233 = OpFAdd %231 %232 
                                                      OpStore %206 %233 
                              Uniform f32_4* %234 = OpAccessChain %25 %207 %26 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                              Uniform f32_4* %237 = OpAccessChain %25 %211 %27 
                                       f32_4 %238 = OpLoad %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 3 3 3 
                                       f32_3 %240 = OpFMul %236 %239 
                                       f32_3 %241 = OpLoad %206 
                                       f32_3 %242 = OpFAdd %240 %241 
                                                      OpStore %206 %242 
                              Uniform f32_4* %244 = OpAccessChain %25 %207 %34 
                                       f32_4 %245 = OpLoad %244 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                              Uniform f32_4* %247 = OpAccessChain %25 %211 %34 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 1 1 1 
                                       f32_3 %250 = OpFMul %246 %249 
                                                      OpStore %243 %250 
                              Uniform f32_4* %251 = OpAccessChain %25 %207 %27 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                              Uniform f32_4* %254 = OpAccessChain %25 %211 %34 
                                       f32_4 %255 = OpLoad %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 0 0 
                                       f32_3 %257 = OpFMul %253 %256 
                                       f32_3 %258 = OpLoad %243 
                                       f32_3 %259 = OpFAdd %257 %258 
                                                      OpStore %243 %259 
                              Uniform f32_4* %260 = OpAccessChain %25 %207 %53 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                              Uniform f32_4* %263 = OpAccessChain %25 %211 %34 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 2 2 2 
                                       f32_3 %266 = OpFMul %262 %265 
                                       f32_3 %267 = OpLoad %243 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %243 %268 
                              Uniform f32_4* %269 = OpAccessChain %25 %207 %26 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                              Uniform f32_4* %272 = OpAccessChain %25 %211 %34 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 3 3 3 
                                       f32_3 %275 = OpFMul %271 %274 
                                       f32_3 %276 = OpLoad %243 
                                       f32_3 %277 = OpFAdd %275 %276 
                                                      OpStore %243 %277 
                              Uniform f32_4* %279 = OpAccessChain %25 %207 %34 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                              Uniform f32_4* %282 = OpAccessChain %25 %211 %53 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                                       f32_3 %285 = OpFMul %281 %284 
                                                      OpStore %278 %285 
                              Uniform f32_4* %286 = OpAccessChain %25 %207 %27 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              Uniform f32_4* %289 = OpAccessChain %25 %211 %53 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 0 0 
                                       f32_3 %292 = OpFMul %288 %291 
                                       f32_3 %293 = OpLoad %278 
                                       f32_3 %294 = OpFAdd %292 %293 
                                                      OpStore %278 %294 
                              Uniform f32_4* %295 = OpAccessChain %25 %207 %53 
                                       f32_4 %296 = OpLoad %295 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                              Uniform f32_4* %298 = OpAccessChain %25 %211 %53 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 2 2 2 
                                       f32_3 %301 = OpFMul %297 %300 
                                       f32_3 %302 = OpLoad %278 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %278 %303 
                              Uniform f32_4* %304 = OpAccessChain %25 %207 %26 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                              Uniform f32_4* %307 = OpAccessChain %25 %211 %53 
                                       f32_4 %308 = OpLoad %307 
                                       f32_3 %309 = OpVectorShuffle %308 %308 3 3 3 
                                       f32_3 %310 = OpFMul %306 %309 
                                       f32_3 %311 = OpLoad %278 
                                       f32_3 %312 = OpFAdd %310 %311 
                                                      OpStore %278 %312 
                                       f32_4 %313 = OpLoad %78 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 1 1 1 
                                       f32_3 %319 = OpFMul %314 %318 
                                       f32_4 %320 = OpLoad %78 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %78 %321 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpLoad %316 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %78 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %9 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %9 %331 
                                       f32_3 %332 = OpLoad %125 
                                       f32_3 %333 = OpLoad %316 
                                       f32_3 %334 = OpVectorShuffle %333 %333 2 2 2 
                                       f32_3 %335 = OpFMul %332 %334 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFAdd %335 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %9 %340 
                                       f32_4 %341 = OpLoad %160 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %9 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFAdd %342 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %9 %347 
                                       f32_3 %348 = OpLoad %206 
                                       f32_3 %350 = OpLoad %349 
                                         f32 %351 = OpDot %348 %350 
                                Private f32* %354 = OpAccessChain %78 %352 
                                                      OpStore %354 %351 
                                       f32_3 %355 = OpLoad %243 
                                       f32_3 %356 = OpLoad %349 
                                         f32 %357 = OpDot %355 %356 
                                Private f32* %359 = OpAccessChain %78 %358 
                                                      OpStore %359 %357 
                                       f32_3 %360 = OpLoad %278 
                                       f32_3 %361 = OpLoad %349 
                                         f32 %362 = OpDot %360 %361 
                                Private f32* %364 = OpAccessChain %78 %363 
                                                      OpStore %364 %362 
                                       f32_4 %366 = OpLoad %78 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %78 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                         f32 %370 = OpDot %367 %369 
                                                      OpStore %365 %370 
                                         f32 %371 = OpLoad %365 
                                         f32 %372 = OpExtInst %1 32 %371 
                                                      OpStore %365 %372 
                                         f32 %373 = OpLoad %365 
                                       f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                                       f32_4 %375 = OpLoad %78 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %78 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %78 %379 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                              Uniform f32_4* %385 = OpAccessChain %25 %384 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFMul %383 %387 
                                                      OpStore %125 %388 
                                       f32_3 %389 = OpLoad %125 
                                       f32_4 %390 = OpLoad %160 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %160 %391 
                                                      OpStore %393 %27 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                                      OpLoopMerge %396 %397 None 
                                                      OpBranch %398 
                                             %398 = OpLabel 
                                         i32 %399 = OpLoad %393 
                                Uniform i32* %402 = OpAccessChain %25 %400 %352 
                                         i32 %403 = OpLoad %402 
                                        bool %405 = OpSLessThan %399 %403 
                                                      OpBranchConditional %405 %395 %396 
                                             %395 = OpLabel 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFNegate %407 
                                         i32 %409 = OpLoad %393 
                              Uniform f32_4* %410 = OpAccessChain %25 %34 %409 
                                       f32_4 %411 = OpLoad %410 
                                       f32_3 %412 = OpVectorShuffle %411 %411 3 3 3 
                                       f32_3 %413 = OpFMul %408 %412 
                                         i32 %414 = OpLoad %393 
                              Uniform f32_4* %415 = OpAccessChain %25 %34 %414 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_3 %418 = OpFAdd %413 %417 
                                                      OpStore %206 %418 
                                       f32_3 %420 = OpLoad %206 
                                       f32_3 %421 = OpLoad %206 
                                         f32 %422 = OpDot %420 %421 
                                                      OpStore %419 %422 
                                         i32 %424 = OpLoad %393 
                                Uniform f32* %426 = OpAccessChain %25 %53 %424 %363 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpLoad %419 
                                         f32 %429 = OpFMul %427 %428 
                                         f32 %431 = OpFAdd %429 %430 
                                                      OpStore %423 %431 
                                         f32 %432 = OpLoad %423 
                                         f32 %433 = OpFDiv %430 %432 
                                                      OpStore %423 %433 
                                         i32 %437 = OpLoad %393 
                                Uniform f32* %439 = OpAccessChain %25 %34 %437 %438 
                                         f32 %440 = OpLoad %439 
                                        bool %441 = OpFOrdNotEqual %436 %440 
                                                      OpStore %435 %441 
                                         i32 %443 = OpLoad %393 
                                Uniform f32* %444 = OpAccessChain %25 %53 %443 %438 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpLoad %419 
                                        bool %447 = OpFOrdLessThan %445 %446 
                                                      OpStore %442 %447 
                                        bool %448 = OpLoad %435 
                                        bool %449 = OpLoad %442 
                                        bool %450 = OpLogicalAnd %448 %449 
                                                      OpStore %435 %450 
                                         f32 %451 = OpLoad %419 
                                         f32 %453 = OpExtInst %1 40 %451 %452 
                                                      OpStore %419 %453 
                                         f32 %454 = OpLoad %419 
                                         f32 %455 = OpExtInst %1 32 %454 
                                                      OpStore %419 %455 
                                         f32 %456 = OpLoad %419 
                                       f32_3 %457 = OpCompositeConstruct %456 %456 %456 
                                       f32_3 %458 = OpLoad %206 
                                       f32_3 %459 = OpFMul %457 %458 
                                                      OpStore %206 %459 
                                         f32 %460 = OpLoad %423 
                                         f32 %462 = OpFMul %460 %461 
                                                      OpStore %419 %462 
                                        bool %463 = OpLoad %435 
                                         f32 %464 = OpLoad %419 
                                         f32 %465 = OpSelect %463 %436 %464 
                                                      OpStore %419 %465 
                                       f32_4 %466 = OpLoad %78 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpLoad %206 
                                         f32 %469 = OpDot %467 %468 
                                                      OpStore %423 %469 
                                         f32 %470 = OpLoad %423 
                                         f32 %471 = OpExtInst %1 40 %470 %436 
                                                      OpStore %423 %471 
                                         f32 %472 = OpLoad %423 
                                       f32_3 %473 = OpCompositeConstruct %472 %472 %472 
                                       f32_4 %474 = OpLoad %381 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                       f32_3 %476 = OpFMul %473 %475 
                                                      OpStore %206 %476 
                                       f32_3 %477 = OpLoad %206 
                                         i32 %478 = OpLoad %393 
                              Uniform f32_4* %479 = OpAccessChain %25 %27 %478 
                                       f32_4 %480 = OpLoad %479 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_3 %482 = OpFMul %477 %481 
                                                      OpStore %206 %482 
                                         f32 %483 = OpLoad %419 
                                       f32_3 %484 = OpCompositeConstruct %483 %483 %483 
                                       f32_3 %485 = OpLoad %206 
                                       f32_3 %486 = OpFMul %484 %485 
                                                      OpStore %206 %486 
                                       f32_3 %487 = OpLoad %206 
                                       f32_3 %489 = OpExtInst %1 37 %487 %488 
                                                      OpStore %206 %489 
                                       f32_4 %490 = OpLoad %160 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 1 2 
                                       f32_3 %492 = OpLoad %206 
                                       f32_3 %493 = OpFAdd %491 %492 
                                       f32_4 %494 = OpLoad %160 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                      OpStore %160 %495 
                                                      OpBranch %397 
                                             %397 = OpLabel 
                                         i32 %496 = OpLoad %393 
                                         i32 %497 = OpIAdd %496 %34 
                                                      OpStore %393 %497 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                  Input f32* %499 = OpAccessChain %381 %438 
                                         f32 %500 = OpLoad %499 
                                Private f32* %501 = OpAccessChain %160 %438 
                                                      OpStore %501 %500 
                                       f32_4 %504 = OpLoad %160 
                                                      OpStore %503 %504 
                                       f32_4 %505 = OpLoad %503 
                                       f32_4 %506 = OpCompositeConstruct %436 %436 %436 %436 
                                       f32_4 %507 = OpCompositeConstruct %430 %430 %430 %430 
                                       f32_4 %508 = OpExtInst %1 43 %505 %506 %507 
                                                      OpStore %503 %508 
                                       f32_3 %513 = OpLoad %512 
                                       f32_2 %514 = OpVectorShuffle %513 %513 0 1 
                              Uniform f32_4* %516 = OpAccessChain %25 %515 
                                       f32_4 %517 = OpLoad %516 
                                       f32_2 %518 = OpVectorShuffle %517 %517 0 1 
                                       f32_2 %519 = OpFMul %514 %518 
                              Uniform f32_4* %520 = OpAccessChain %25 %515 
                                       f32_4 %521 = OpLoad %520 
                                       f32_2 %522 = OpVectorShuffle %521 %521 2 3 
                                       f32_2 %523 = OpFAdd %519 %522 
                                                      OpStore vs_TEXCOORD0 %523 
                                       f32_4 %524 = OpLoad %9 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_4 %526 = OpLoad %9 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %525 %527 
                                Private f32* %529 = OpAccessChain %9 %352 
                                                      OpStore %529 %528 
                                Private f32* %530 = OpAccessChain %9 %352 
                                         f32 %531 = OpLoad %530 
                                         f32 %532 = OpExtInst %1 31 %531 
                                Private f32* %533 = OpAccessChain %9 %352 
                                                      OpStore %533 %532 
                                Private f32* %536 = OpAccessChain %9 %352 
                                         f32 %537 = OpLoad %536 
                                Uniform f32* %539 = OpAccessChain %25 %538 %363 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %537 %540 
                                Uniform f32* %542 = OpAccessChain %25 %538 %438 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                                      OpStore vs_TEXCOORD1 %544 
                                         f32 %545 = OpLoad vs_TEXCOORD1 
                                         f32 %546 = OpExtInst %1 43 %545 %436 %430 
                                                      OpStore vs_TEXCOORD1 %546 
                                       f32_3 %547 = OpLoad %316 
                                       f32_4 %548 = OpVectorShuffle %547 %547 1 1 1 1 
                              Uniform f32_4* %549 = OpAccessChain %25 %26 %34 
                                       f32_4 %550 = OpLoad %549 
                                       f32_4 %551 = OpFMul %548 %550 
                                                      OpStore %9 %551 
                              Uniform f32_4* %552 = OpAccessChain %25 %26 %27 
                                       f32_4 %553 = OpLoad %552 
                                       f32_3 %554 = OpLoad %316 
                                       f32_4 %555 = OpVectorShuffle %554 %554 0 0 0 0 
                                       f32_4 %556 = OpFMul %553 %555 
                                       f32_4 %557 = OpLoad %9 
                                       f32_4 %558 = OpFAdd %556 %557 
                                                      OpStore %9 %558 
                              Uniform f32_4* %559 = OpAccessChain %25 %26 %53 
                                       f32_4 %560 = OpLoad %559 
                                       f32_3 %561 = OpLoad %316 
                                       f32_4 %562 = OpVectorShuffle %561 %561 2 2 2 2 
                                       f32_4 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %9 
                                       f32_4 %565 = OpFAdd %563 %564 
                                                      OpStore %9 %565 
                                       f32_4 %566 = OpLoad %9 
                              Uniform f32_4* %567 = OpAccessChain %25 %26 %26 
                                       f32_4 %568 = OpLoad %567 
                                       f32_4 %569 = OpFAdd %566 %568 
                                                      OpStore %9 %569 
                                       f32_4 %570 = OpLoad %9 
                                       f32_4 %571 = OpVectorShuffle %570 %570 1 1 1 1 
                              Uniform f32_4* %573 = OpAccessChain %25 %572 %34 
                                       f32_4 %574 = OpLoad %573 
                                       f32_4 %575 = OpFMul %571 %574 
                                                      OpStore %78 %575 
                              Uniform f32_4* %576 = OpAccessChain %25 %572 %27 
                                       f32_4 %577 = OpLoad %576 
                                       f32_4 %578 = OpLoad %9 
                                       f32_4 %579 = OpVectorShuffle %578 %578 0 0 0 0 
                                       f32_4 %580 = OpFMul %577 %579 
                                       f32_4 %581 = OpLoad %78 
                                       f32_4 %582 = OpFAdd %580 %581 
                                                      OpStore %78 %582 
                              Uniform f32_4* %583 = OpAccessChain %25 %572 %53 
                                       f32_4 %584 = OpLoad %583 
                                       f32_4 %585 = OpLoad %9 
                                       f32_4 %586 = OpVectorShuffle %585 %585 2 2 2 2 
                                       f32_4 %587 = OpFMul %584 %586 
                                       f32_4 %588 = OpLoad %78 
                                       f32_4 %589 = OpFAdd %587 %588 
                                                      OpStore %78 %589 
                              Uniform f32_4* %594 = OpAccessChain %25 %572 %26 
                                       f32_4 %595 = OpLoad %594 
                                       f32_4 %596 = OpLoad %9 
                                       f32_4 %597 = OpVectorShuffle %596 %596 3 3 3 3 
                                       f32_4 %598 = OpFMul %595 %597 
                                       f32_4 %599 = OpLoad %78 
                                       f32_4 %600 = OpFAdd %598 %599 
                               Output f32_4* %601 = OpAccessChain %593 %27 
                                                      OpStore %601 %600 
                                 Output f32* %602 = OpAccessChain %593 %27 %358 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFNegate %603 
                                 Output f32* %605 = OpAccessChain %593 %27 %358 
                                                      OpStore %605 %604 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %49 %51 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %37 0 Offset 37 
                                             OpDecorate %37 Block 
                                             OpDecorate %39 DescriptorSet 39 
                                             OpDecorate %39 Binding 39 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 51 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                 f32 %34 = OpConstant 3.674022E-40 
                               f32_3 %35 = OpConstantComposite %34 %34 %34 
                                     %37 = OpTypeStruct %24 
                                     %38 = OpTypePointer Uniform %37 
            Uniform struct {f32_4;}* %39 = OpVariable Uniform 
                                     %40 = OpTypeInt 32 1 
                                 i32 %41 = OpConstant 0 
                                     %42 = OpTypePointer Uniform %24 
                                     %48 = OpTypePointer Output %24 
                       Output f32_4* %49 = OpVariable Output 
                                     %50 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %62 = OpConstant 3.674022E-40 
                                     %63 = OpTypeInt 32 0 
                                 u32 %64 = OpConstant 3 
                                     %65 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                               f32_3 %36 = OpFMul %33 %35 
                      Uniform f32_4* %43 = OpAccessChain %39 %41 
                               f32_4 %44 = OpLoad %43 
                               f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                               f32_3 %46 = OpFNegate %45 
                               f32_3 %47 = OpFAdd %36 %46 
                                             OpStore %9 %47 
                                 f32 %52 = OpLoad vs_TEXCOORD1 
                               f32_3 %53 = OpCompositeConstruct %52 %52 %52 
                               f32_3 %54 = OpLoad %9 
                               f32_3 %55 = OpFMul %53 %54 
                      Uniform f32_4* %56 = OpAccessChain %39 %41 
                               f32_4 %57 = OpLoad %56 
                               f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               f32_3 %59 = OpFAdd %55 %58 
                               f32_4 %60 = OpLoad %49 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %49 %61 
                         Output f32* %66 = OpAccessChain %49 %64 
                                             OpStore %66 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat21;
int u_xlati21;
float u_xlat22;
bool u_xlatb22;
float u_xlat23;
bool u_xlatb25;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = in_COLOR0.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat3.xyz = u_xlat2.xyz;
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat4.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = unity_LightAtten[u_xlati_loop_1].z * u_xlat22 + 1.0;
        u_xlat23 = float(1.0) / u_xlat23;
        u_xlatb25 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb5 = unity_LightAtten[u_xlati_loop_1].w<u_xlat22;
        u_xlatb25 = u_xlatb25 && u_xlatb5;
        u_xlat23 = (u_xlatb25) ? 0.0 : u_xlat23;
        u_xlat22 = max(u_xlat22, 9.99999997e-07);
        u_xlat22 = inversesqrt(u_xlat22);
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat22 = dot(u_xlat4.xyz, unity_SpotDirection[u_xlati_loop_1].xyz);
        u_xlat22 = max(u_xlat22, 0.0);
        u_xlat22 = u_xlat22 + (-unity_LightAtten[u_xlati_loop_1].x);
        u_xlat22 = u_xlat22 * unity_LightAtten[u_xlati_loop_1].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat23;
        u_xlat22 = u_xlat22 * 0.5;
        u_xlat23 = dot(u_xlat1.xyz, u_xlat4.xyz);
        u_xlat23 = max(u_xlat23, 0.0);
        u_xlat4.xyz = vec3(u_xlat23) * in_COLOR0.xyz;
        u_xlat4.xyz = u_xlat4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
        u_xlat4.xyz = min(u_xlat4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
    }
    u_xlat3.w = in_COLOR0.w;
    vs_COLOR0 = u_xlat3;
    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    vs_TEXCOORD1 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 636
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %318 %351 %383 %529 %537 %538 %561 %619 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 ArrayStride 12 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %24 0 Offset 24 
                                                      OpMemberDecorate %24 1 Offset 24 
                                                      OpMemberDecorate %24 2 Offset 24 
                                                      OpMemberDecorate %24 3 Offset 24 
                                                      OpMemberDecorate %24 4 Offset 24 
                                                      OpMemberDecorate %24 5 Offset 24 
                                                      OpMemberDecorate %24 6 Offset 24 
                                                      OpMemberDecorate %24 7 Offset 24 
                                                      OpMemberDecorate %24 8 Offset 24 
                                                      OpMemberDecorate %24 9 Offset 24 
                                                      OpMemberDecorate %24 10 Offset 24 
                                                      OpMemberDecorate %24 11 Offset 24 
                                                      OpMemberDecorate %24 12 Offset 24 
                                                      OpDecorate %24 Block 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %318 Location 318 
                                                      OpDecorate %351 Location 351 
                                                      OpDecorate %383 Location 383 
                                                      OpDecorate %529 Location 529 
                                                      OpDecorate vs_TEXCOORD0 Location 537 
                                                      OpDecorate %538 Location 538 
                                                      OpDecorate vs_TEXCOORD1 Location 561 
                                                      OpMemberDecorate %617 0 BuiltIn 617 
                                                      OpMemberDecorate %617 1 BuiltIn 617 
                                                      OpMemberDecorate %617 2 BuiltIn 617 
                                                      OpDecorate %617 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeInt 32 0 
                                          u32 %11 = OpConstant 8 
                                              %12 = OpTypeArray %7 %11 
                                              %13 = OpTypeArray %7 %11 
                                              %14 = OpTypeArray %7 %11 
                                              %15 = OpTypeArray %7 %11 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeArray %7 %16 
                                              %22 = OpTypeInt 32 1 
                                              %23 = OpTypeVector %22 4 
                                              %24 = OpTypeStruct %12 %13 %14 %15 %17 %18 %7 %19 %20 %21 %7 %23 %7 
                                              %25 = OpTypePointer Uniform %24 
Uniform struct {f32_4[8]; f32_4[8]; f32_4[8]; f32_4[8]; f32_4[4]; f32_4[4]; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; i32_4; f32_4;}* %26 = OpVariable Uniform 
                                          i32 %27 = OpConstant 4 
                                          i32 %28 = OpConstant 0 
                                              %29 = OpTypeVector %6 3 
                                              %30 = OpTypePointer Uniform %7 
                                          i32 %34 = OpConstant 7 
                                          i32 %35 = OpConstant 1 
                                          i32 %54 = OpConstant 2 
                                          i32 %67 = OpConstant 3 
                               Private f32_4* %80 = OpVariable Private 
                                             %126 = OpTypePointer Private %29 
                              Private f32_3* %127 = OpVariable Private 
                              Private f32_4* %162 = OpVariable Private 
                              Private f32_3* %208 = OpVariable Private 
                                         i32 %209 = OpConstant 5 
                                         i32 %213 = OpConstant 8 
                              Private f32_3* %245 = OpVariable Private 
                              Private f32_3* %280 = OpVariable Private 
                                             %317 = OpTypePointer Input %29 
                                Input f32_3* %318 = OpVariable Input 
                                Input f32_3* %351 = OpVariable Input 
                                         u32 %354 = OpConstant 0 
                                             %355 = OpTypePointer Private %6 
                                         u32 %360 = OpConstant 1 
                                         u32 %365 = OpConstant 2 
                                Private f32* %367 = OpVariable Private 
                                             %382 = OpTypePointer Input %7 
                                Input f32_4* %383 = OpVariable Input 
                                         i32 %386 = OpConstant 6 
                                             %394 = OpTypePointer Function %22 
                                         i32 %402 = OpConstant 11 
                                             %403 = OpTypePointer Uniform %22 
                                             %406 = OpTypeBool 
                                Private f32* %421 = OpVariable Private 
                                Private f32* %425 = OpVariable Private 
                                             %427 = OpTypePointer Uniform %6 
                                         f32 %432 = OpConstant 3.674022E-40 
                                             %436 = OpTypePointer Private %406 
                               Private bool* %437 = OpVariable Private 
                                         f32 %438 = OpConstant 3.674022E-40 
                                         u32 %440 = OpConstant 3 
                               Private bool* %444 = OpVariable Private 
                                         f32 %457 = OpConstant 3.674022E-40 
                                         f32 %490 = OpConstant 3.674022E-40 
                                       f32_3 %514 = OpConstantComposite %432 %432 %432 
                                             %524 = OpTypePointer Input %6 
                                             %528 = OpTypePointer Output %7 
                               Output f32_4* %529 = OpVariable Output 
                                             %535 = OpTypeVector %6 2 
                                             %536 = OpTypePointer Output %535 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_3* %538 = OpVariable Input 
                                         i32 %541 = OpConstant 12 
                                             %560 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %564 = OpConstant 10 
                                         i32 %598 = OpConstant 9 
                                             %616 = OpTypeArray %6 %360 
                                             %617 = OpTypeStruct %7 %6 %616 
                                             %618 = OpTypePointer Output %617 
        Output struct {f32_4; f32; f32[1];}* %619 = OpVariable Output 
                                             %633 = OpTypePointer Private %22 
                                Private i32* %634 = OpVariable Private 
                               Private bool* %635 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function i32* %395 = OpVariable Function 
                               Uniform f32_4* %31 = OpAccessChain %26 %27 %28 
                                        f32_4 %32 = OpLoad %31 
                                        f32_3 %33 = OpVectorShuffle %32 %32 1 1 1 
                               Uniform f32_4* %36 = OpAccessChain %26 %34 %35 
                                        f32_4 %37 = OpLoad %36 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 1 2 
                                        f32_3 %39 = OpFMul %33 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 6 3 
                                                      OpStore %9 %41 
                               Uniform f32_4* %42 = OpAccessChain %26 %34 %28 
                                        f32_4 %43 = OpLoad %42 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                               Uniform f32_4* %45 = OpAccessChain %26 %27 %28 
                                        f32_4 %46 = OpLoad %45 
                                        f32_3 %47 = OpVectorShuffle %46 %46 0 0 0 
                                        f32_3 %48 = OpFMul %44 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFAdd %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %9 %53 
                               Uniform f32_4* %55 = OpAccessChain %26 %34 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                               Uniform f32_4* %58 = OpAccessChain %26 %27 %28 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpVectorShuffle %59 %59 2 2 2 
                                        f32_3 %61 = OpFMul %57 %60 
                                        f32_4 %62 = OpLoad %9 
                                        f32_3 %63 = OpVectorShuffle %62 %62 0 1 2 
                                        f32_3 %64 = OpFAdd %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_4 %66 = OpVectorShuffle %65 %64 4 5 6 3 
                                                      OpStore %9 %66 
                               Uniform f32_4* %68 = OpAccessChain %26 %34 %67 
                                        f32_4 %69 = OpLoad %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               Uniform f32_4* %71 = OpAccessChain %26 %27 %28 
                                        f32_4 %72 = OpLoad %71 
                                        f32_3 %73 = OpVectorShuffle %72 %72 3 3 3 
                                        f32_3 %74 = OpFMul %70 %73 
                                        f32_4 %75 = OpLoad %9 
                                        f32_3 %76 = OpVectorShuffle %75 %75 0 1 2 
                                        f32_3 %77 = OpFAdd %74 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %9 %79 
                               Uniform f32_4* %81 = OpAccessChain %26 %27 %35 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 1 1 1 
                               Uniform f32_4* %84 = OpAccessChain %26 %34 %35 
                                        f32_4 %85 = OpLoad %84 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 1 2 
                                        f32_3 %87 = OpFMul %83 %86 
                                        f32_4 %88 = OpLoad %80 
                                        f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                                      OpStore %80 %89 
                               Uniform f32_4* %90 = OpAccessChain %26 %34 %28 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                               Uniform f32_4* %93 = OpAccessChain %26 %27 %35 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpFMul %92 %95 
                                        f32_4 %97 = OpLoad %80 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFAdd %96 %98 
                                       f32_4 %100 = OpLoad %80 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %80 %101 
                              Uniform f32_4* %102 = OpAccessChain %26 %34 %54 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                              Uniform f32_4* %105 = OpAccessChain %26 %27 %35 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                       f32_4 %109 = OpLoad %80 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %80 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %80 %113 
                              Uniform f32_4* %114 = OpAccessChain %26 %34 %67 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              Uniform f32_4* %117 = OpAccessChain %26 %27 %35 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 3 3 3 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %80 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                                       f32_3 %123 = OpFAdd %120 %122 
                                       f32_4 %124 = OpLoad %80 
                                       f32_4 %125 = OpVectorShuffle %124 %123 4 5 6 3 
                                                      OpStore %80 %125 
                              Uniform f32_4* %128 = OpAccessChain %26 %27 %54 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 1 1 1 
                              Uniform f32_4* %131 = OpAccessChain %26 %34 %35 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %130 %133 
                                                      OpStore %127 %134 
                              Uniform f32_4* %135 = OpAccessChain %26 %34 %28 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                              Uniform f32_4* %138 = OpAccessChain %26 %27 %54 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 0 0 
                                       f32_3 %141 = OpFMul %137 %140 
                                       f32_3 %142 = OpLoad %127 
                                       f32_3 %143 = OpFAdd %141 %142 
                                                      OpStore %127 %143 
                              Uniform f32_4* %144 = OpAccessChain %26 %34 %54 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              Uniform f32_4* %147 = OpAccessChain %26 %27 %54 
                                       f32_4 %148 = OpLoad %147 
                                       f32_3 %149 = OpVectorShuffle %148 %148 2 2 2 
                                       f32_3 %150 = OpFMul %146 %149 
                                       f32_3 %151 = OpLoad %127 
                                       f32_3 %152 = OpFAdd %150 %151 
                                                      OpStore %127 %152 
                              Uniform f32_4* %153 = OpAccessChain %26 %34 %67 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                              Uniform f32_4* %156 = OpAccessChain %26 %27 %54 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_3 %159 = OpFMul %155 %158 
                                       f32_3 %160 = OpLoad %127 
                                       f32_3 %161 = OpFAdd %159 %160 
                                                      OpStore %127 %161 
                              Uniform f32_4* %163 = OpAccessChain %26 %27 %67 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 1 1 1 
                              Uniform f32_4* %166 = OpAccessChain %26 %34 %35 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFMul %165 %168 
                                       f32_4 %170 = OpLoad %162 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %162 %171 
                              Uniform f32_4* %172 = OpAccessChain %26 %34 %28 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                              Uniform f32_4* %175 = OpAccessChain %26 %27 %67 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %174 %177 
                                       f32_4 %179 = OpLoad %162 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFAdd %178 %180 
                                       f32_4 %182 = OpLoad %162 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %162 %183 
                              Uniform f32_4* %184 = OpAccessChain %26 %34 %54 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                              Uniform f32_4* %187 = OpAccessChain %26 %27 %67 
                                       f32_4 %188 = OpLoad %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 2 2 2 
                                       f32_3 %190 = OpFMul %186 %189 
                                       f32_4 %191 = OpLoad %162 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFAdd %190 %192 
                                       f32_4 %194 = OpLoad %162 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                      OpStore %162 %195 
                              Uniform f32_4* %196 = OpAccessChain %26 %34 %67 
                                       f32_4 %197 = OpLoad %196 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                              Uniform f32_4* %199 = OpAccessChain %26 %27 %67 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_3 %202 = OpFMul %198 %201 
                                       f32_4 %203 = OpLoad %162 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFAdd %202 %204 
                                       f32_4 %206 = OpLoad %162 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 6 3 
                                                      OpStore %162 %207 
                              Uniform f32_4* %210 = OpAccessChain %26 %209 %35 
                                       f32_4 %211 = OpLoad %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %214 = OpAccessChain %26 %213 %28 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 1 1 
                                       f32_3 %217 = OpFMul %212 %216 
                                                      OpStore %208 %217 
                              Uniform f32_4* %218 = OpAccessChain %26 %209 %28 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %26 %213 %28 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_3 %225 = OpLoad %208 
                                       f32_3 %226 = OpFAdd %224 %225 
                                                      OpStore %208 %226 
                              Uniform f32_4* %227 = OpAccessChain %26 %209 %54 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                              Uniform f32_4* %230 = OpAccessChain %26 %213 %28 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 2 2 2 
                                       f32_3 %233 = OpFMul %229 %232 
                                       f32_3 %234 = OpLoad %208 
                                       f32_3 %235 = OpFAdd %233 %234 
                                                      OpStore %208 %235 
                              Uniform f32_4* %236 = OpAccessChain %26 %209 %67 
                                       f32_4 %237 = OpLoad %236 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                              Uniform f32_4* %239 = OpAccessChain %26 %213 %28 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 3 3 3 
                                       f32_3 %242 = OpFMul %238 %241 
                                       f32_3 %243 = OpLoad %208 
                                       f32_3 %244 = OpFAdd %242 %243 
                                                      OpStore %208 %244 
                              Uniform f32_4* %246 = OpAccessChain %26 %209 %35 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                              Uniform f32_4* %249 = OpAccessChain %26 %213 %35 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 1 1 1 
                                       f32_3 %252 = OpFMul %248 %251 
                                                      OpStore %245 %252 
                              Uniform f32_4* %253 = OpAccessChain %26 %209 %28 
                                       f32_4 %254 = OpLoad %253 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                              Uniform f32_4* %256 = OpAccessChain %26 %213 %35 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %255 %258 
                                       f32_3 %260 = OpLoad %245 
                                       f32_3 %261 = OpFAdd %259 %260 
                                                      OpStore %245 %261 
                              Uniform f32_4* %262 = OpAccessChain %26 %209 %54 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                              Uniform f32_4* %265 = OpAccessChain %26 %213 %35 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 2 2 2 
                                       f32_3 %268 = OpFMul %264 %267 
                                       f32_3 %269 = OpLoad %245 
                                       f32_3 %270 = OpFAdd %268 %269 
                                                      OpStore %245 %270 
                              Uniform f32_4* %271 = OpAccessChain %26 %209 %67 
                                       f32_4 %272 = OpLoad %271 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                              Uniform f32_4* %274 = OpAccessChain %26 %213 %35 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %273 %276 
                                       f32_3 %278 = OpLoad %245 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %245 %279 
                              Uniform f32_4* %281 = OpAccessChain %26 %209 %35 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              Uniform f32_4* %284 = OpAccessChain %26 %213 %54 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 1 1 1 
                                       f32_3 %287 = OpFMul %283 %286 
                                                      OpStore %280 %287 
                              Uniform f32_4* %288 = OpAccessChain %26 %209 %28 
                                       f32_4 %289 = OpLoad %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %26 %213 %54 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %290 %293 
                                       f32_3 %295 = OpLoad %280 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %280 %296 
                              Uniform f32_4* %297 = OpAccessChain %26 %209 %54 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              Uniform f32_4* %300 = OpAccessChain %26 %213 %54 
                                       f32_4 %301 = OpLoad %300 
                                       f32_3 %302 = OpVectorShuffle %301 %301 2 2 2 
                                       f32_3 %303 = OpFMul %299 %302 
                                       f32_3 %304 = OpLoad %280 
                                       f32_3 %305 = OpFAdd %303 %304 
                                                      OpStore %280 %305 
                              Uniform f32_4* %306 = OpAccessChain %26 %209 %67 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                              Uniform f32_4* %309 = OpAccessChain %26 %213 %54 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 3 3 3 
                                       f32_3 %312 = OpFMul %308 %311 
                                       f32_3 %313 = OpLoad %280 
                                       f32_3 %314 = OpFAdd %312 %313 
                                                      OpStore %280 %314 
                                       f32_4 %315 = OpLoad %80 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_3 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 1 1 1 
                                       f32_3 %321 = OpFMul %316 %320 
                                       f32_4 %322 = OpLoad %80 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %80 %323 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpLoad %318 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 0 0 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_4 %329 = OpLoad %80 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %9 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %9 %333 
                                       f32_3 %334 = OpLoad %127 
                                       f32_3 %335 = OpLoad %318 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                       f32_3 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %9 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 6 3 
                                                      OpStore %9 %342 
                                       f32_4 %343 = OpLoad %162 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_3 %347 = OpFAdd %344 %346 
                                       f32_4 %348 = OpLoad %9 
                                       f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
                                                      OpStore %9 %349 
                                       f32_3 %350 = OpLoad %208 
                                       f32_3 %352 = OpLoad %351 
                                         f32 %353 = OpDot %350 %352 
                                Private f32* %356 = OpAccessChain %80 %354 
                                                      OpStore %356 %353 
                                       f32_3 %357 = OpLoad %245 
                                       f32_3 %358 = OpLoad %351 
                                         f32 %359 = OpDot %357 %358 
                                Private f32* %361 = OpAccessChain %80 %360 
                                                      OpStore %361 %359 
                                       f32_3 %362 = OpLoad %280 
                                       f32_3 %363 = OpLoad %351 
                                         f32 %364 = OpDot %362 %363 
                                Private f32* %366 = OpAccessChain %80 %365 
                                                      OpStore %366 %364 
                                       f32_4 %368 = OpLoad %80 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %80 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                                      OpStore %367 %372 
                                         f32 %373 = OpLoad %367 
                                         f32 %374 = OpExtInst %1 32 %373 
                                                      OpStore %367 %374 
                                         f32 %375 = OpLoad %367 
                                       f32_3 %376 = OpCompositeConstruct %375 %375 %375 
                                       f32_4 %377 = OpLoad %80 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                       f32_3 %379 = OpFMul %376 %378 
                                       f32_4 %380 = OpLoad %80 
                                       f32_4 %381 = OpVectorShuffle %380 %379 4 5 6 3 
                                                      OpStore %80 %381 
                                       f32_4 %384 = OpLoad %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                              Uniform f32_4* %387 = OpAccessChain %26 %386 
                                       f32_4 %388 = OpLoad %387 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFMul %385 %389 
                                                      OpStore %127 %390 
                                       f32_3 %391 = OpLoad %127 
                                       f32_4 %392 = OpLoad %162 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %162 %393 
                                                      OpStore %395 %28 
                                                      OpBranch %396 
                                             %396 = OpLabel 
                                                      OpLoopMerge %398 %399 None 
                                                      OpBranch %400 
                                             %400 = OpLabel 
                                         i32 %401 = OpLoad %395 
                                Uniform i32* %404 = OpAccessChain %26 %402 %354 
                                         i32 %405 = OpLoad %404 
                                        bool %407 = OpSLessThan %401 %405 
                                                      OpBranchConditional %407 %397 %398 
                                             %397 = OpLabel 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFNegate %409 
                                         i32 %411 = OpLoad %395 
                              Uniform f32_4* %412 = OpAccessChain %26 %35 %411 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 3 3 3 
                                       f32_3 %415 = OpFMul %410 %414 
                                         i32 %416 = OpLoad %395 
                              Uniform f32_4* %417 = OpAccessChain %26 %35 %416 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %415 %419 
                                                      OpStore %208 %420 
                                       f32_3 %422 = OpLoad %208 
                                       f32_3 %423 = OpLoad %208 
                                         f32 %424 = OpDot %422 %423 
                                                      OpStore %421 %424 
                                         i32 %426 = OpLoad %395 
                                Uniform f32* %428 = OpAccessChain %26 %54 %426 %365 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpLoad %421 
                                         f32 %431 = OpFMul %429 %430 
                                         f32 %433 = OpFAdd %431 %432 
                                                      OpStore %425 %433 
                                         f32 %434 = OpLoad %425 
                                         f32 %435 = OpFDiv %432 %434 
                                                      OpStore %425 %435 
                                         i32 %439 = OpLoad %395 
                                Uniform f32* %441 = OpAccessChain %26 %35 %439 %440 
                                         f32 %442 = OpLoad %441 
                                        bool %443 = OpFOrdNotEqual %438 %442 
                                                      OpStore %437 %443 
                                         i32 %445 = OpLoad %395 
                                Uniform f32* %446 = OpAccessChain %26 %54 %445 %440 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpLoad %421 
                                        bool %449 = OpFOrdLessThan %447 %448 
                                                      OpStore %444 %449 
                                        bool %450 = OpLoad %437 
                                        bool %451 = OpLoad %444 
                                        bool %452 = OpLogicalAnd %450 %451 
                                                      OpStore %437 %452 
                                        bool %453 = OpLoad %437 
                                         f32 %454 = OpLoad %425 
                                         f32 %455 = OpSelect %453 %438 %454 
                                                      OpStore %425 %455 
                                         f32 %456 = OpLoad %421 
                                         f32 %458 = OpExtInst %1 40 %456 %457 
                                                      OpStore %421 %458 
                                         f32 %459 = OpLoad %421 
                                         f32 %460 = OpExtInst %1 32 %459 
                                                      OpStore %421 %460 
                                         f32 %461 = OpLoad %421 
                                       f32_3 %462 = OpCompositeConstruct %461 %461 %461 
                                       f32_3 %463 = OpLoad %208 
                                       f32_3 %464 = OpFMul %462 %463 
                                                      OpStore %208 %464 
                                       f32_3 %465 = OpLoad %208 
                                         i32 %466 = OpLoad %395 
                              Uniform f32_4* %467 = OpAccessChain %26 %67 %466 
                                       f32_4 %468 = OpLoad %467 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %465 %469 
                                                      OpStore %421 %470 
                                         f32 %471 = OpLoad %421 
                                         f32 %472 = OpExtInst %1 40 %471 %438 
                                                      OpStore %421 %472 
                                         f32 %473 = OpLoad %421 
                                         i32 %474 = OpLoad %395 
                                Uniform f32* %475 = OpAccessChain %26 %54 %474 %354 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %478 = OpFAdd %473 %477 
                                                      OpStore %421 %478 
                                         f32 %479 = OpLoad %421 
                                         i32 %480 = OpLoad %395 
                                Uniform f32* %481 = OpAccessChain %26 %54 %480 %360 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %479 %482 
                                                      OpStore %421 %483 
                                         f32 %484 = OpLoad %421 
                                         f32 %485 = OpExtInst %1 43 %484 %438 %432 
                                                      OpStore %421 %485 
                                         f32 %486 = OpLoad %421 
                                         f32 %487 = OpLoad %425 
                                         f32 %488 = OpFMul %486 %487 
                                                      OpStore %421 %488 
                                         f32 %489 = OpLoad %421 
                                         f32 %491 = OpFMul %489 %490 
                                                      OpStore %421 %491 
                                       f32_4 %492 = OpLoad %80 
                                       f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                                       f32_3 %494 = OpLoad %208 
                                         f32 %495 = OpDot %493 %494 
                                                      OpStore %425 %495 
                                         f32 %496 = OpLoad %425 
                                         f32 %497 = OpExtInst %1 40 %496 %438 
                                                      OpStore %425 %497 
                                         f32 %498 = OpLoad %425 
                                       f32_3 %499 = OpCompositeConstruct %498 %498 %498 
                                       f32_4 %500 = OpLoad %383 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_3 %502 = OpFMul %499 %501 
                                                      OpStore %208 %502 
                                       f32_3 %503 = OpLoad %208 
                                         i32 %504 = OpLoad %395 
                              Uniform f32_4* %505 = OpAccessChain %26 %28 %504 
                                       f32_4 %506 = OpLoad %505 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFMul %503 %507 
                                                      OpStore %208 %508 
                                         f32 %509 = OpLoad %421 
                                       f32_3 %510 = OpCompositeConstruct %509 %509 %509 
                                       f32_3 %511 = OpLoad %208 
                                       f32_3 %512 = OpFMul %510 %511 
                                                      OpStore %208 %512 
                                       f32_3 %513 = OpLoad %208 
                                       f32_3 %515 = OpExtInst %1 37 %513 %514 
                                                      OpStore %208 %515 
                                       f32_4 %516 = OpLoad %162 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpLoad %208 
                                       f32_3 %519 = OpFAdd %517 %518 
                                       f32_4 %520 = OpLoad %162 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 6 3 
                                                      OpStore %162 %521 
                                                      OpBranch %399 
                                             %399 = OpLabel 
                                         i32 %522 = OpLoad %395 
                                         i32 %523 = OpIAdd %522 %35 
                                                      OpStore %395 %523 
                                                      OpBranch %396 
                                             %398 = OpLabel 
                                  Input f32* %525 = OpAccessChain %383 %440 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %162 %440 
                                                      OpStore %527 %526 
                                       f32_4 %530 = OpLoad %162 
                                                      OpStore %529 %530 
                                       f32_4 %531 = OpLoad %529 
                                       f32_4 %532 = OpCompositeConstruct %438 %438 %438 %438 
                                       f32_4 %533 = OpCompositeConstruct %432 %432 %432 %432 
                                       f32_4 %534 = OpExtInst %1 43 %531 %532 %533 
                                                      OpStore %529 %534 
                                       f32_3 %539 = OpLoad %538 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 1 
                              Uniform f32_4* %542 = OpAccessChain %26 %541 
                                       f32_4 %543 = OpLoad %542 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpFMul %540 %544 
                              Uniform f32_4* %546 = OpAccessChain %26 %541 
                                       f32_4 %547 = OpLoad %546 
                                       f32_2 %548 = OpVectorShuffle %547 %547 2 3 
                                       f32_2 %549 = OpFAdd %545 %548 
                                                      OpStore vs_TEXCOORD0 %549 
                                       f32_4 %550 = OpLoad %9 
                                       f32_3 %551 = OpVectorShuffle %550 %550 0 1 2 
                                       f32_4 %552 = OpLoad %9 
                                       f32_3 %553 = OpVectorShuffle %552 %552 0 1 2 
                                         f32 %554 = OpDot %551 %553 
                                Private f32* %555 = OpAccessChain %9 %354 
                                                      OpStore %555 %554 
                                Private f32* %556 = OpAccessChain %9 %354 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpExtInst %1 31 %557 
                                Private f32* %559 = OpAccessChain %9 %354 
                                                      OpStore %559 %558 
                                Private f32* %562 = OpAccessChain %9 %354 
                                         f32 %563 = OpLoad %562 
                                Uniform f32* %565 = OpAccessChain %26 %564 %365 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                Uniform f32* %568 = OpAccessChain %26 %564 %440 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpFAdd %567 %569 
                                                      OpStore vs_TEXCOORD1 %570 
                                         f32 %571 = OpLoad vs_TEXCOORD1 
                                         f32 %572 = OpExtInst %1 43 %571 %438 %432 
                                                      OpStore vs_TEXCOORD1 %572 
                                       f32_3 %573 = OpLoad %318 
                                       f32_4 %574 = OpVectorShuffle %573 %573 1 1 1 1 
                              Uniform f32_4* %575 = OpAccessChain %26 %27 %35 
                                       f32_4 %576 = OpLoad %575 
                                       f32_4 %577 = OpFMul %574 %576 
                                                      OpStore %9 %577 
                              Uniform f32_4* %578 = OpAccessChain %26 %27 %28 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpLoad %318 
                                       f32_4 %581 = OpVectorShuffle %580 %580 0 0 0 0 
                                       f32_4 %582 = OpFMul %579 %581 
                                       f32_4 %583 = OpLoad %9 
                                       f32_4 %584 = OpFAdd %582 %583 
                                                      OpStore %9 %584 
                              Uniform f32_4* %585 = OpAccessChain %26 %27 %54 
                                       f32_4 %586 = OpLoad %585 
                                       f32_3 %587 = OpLoad %318 
                                       f32_4 %588 = OpVectorShuffle %587 %587 2 2 2 2 
                                       f32_4 %589 = OpFMul %586 %588 
                                       f32_4 %590 = OpLoad %9 
                                       f32_4 %591 = OpFAdd %589 %590 
                                                      OpStore %9 %591 
                                       f32_4 %592 = OpLoad %9 
                              Uniform f32_4* %593 = OpAccessChain %26 %27 %67 
                                       f32_4 %594 = OpLoad %593 
                                       f32_4 %595 = OpFAdd %592 %594 
                                                      OpStore %9 %595 
                                       f32_4 %596 = OpLoad %9 
                                       f32_4 %597 = OpVectorShuffle %596 %596 1 1 1 1 
                              Uniform f32_4* %599 = OpAccessChain %26 %598 %35 
                                       f32_4 %600 = OpLoad %599 
                                       f32_4 %601 = OpFMul %597 %600 
                                                      OpStore %80 %601 
                              Uniform f32_4* %602 = OpAccessChain %26 %598 %28 
                                       f32_4 %603 = OpLoad %602 
                                       f32_4 %604 = OpLoad %9 
                                       f32_4 %605 = OpVectorShuffle %604 %604 0 0 0 0 
                                       f32_4 %606 = OpFMul %603 %605 
                                       f32_4 %607 = OpLoad %80 
                                       f32_4 %608 = OpFAdd %606 %607 
                                                      OpStore %80 %608 
                              Uniform f32_4* %609 = OpAccessChain %26 %598 %54 
                                       f32_4 %610 = OpLoad %609 
                                       f32_4 %611 = OpLoad %9 
                                       f32_4 %612 = OpVectorShuffle %611 %611 2 2 2 2 
                                       f32_4 %613 = OpFMul %610 %612 
                                       f32_4 %614 = OpLoad %80 
                                       f32_4 %615 = OpFAdd %613 %614 
                                                      OpStore %80 %615 
                              Uniform f32_4* %620 = OpAccessChain %26 %598 %67 
                                       f32_4 %621 = OpLoad %620 
                                       f32_4 %622 = OpLoad %9 
                                       f32_4 %623 = OpVectorShuffle %622 %622 3 3 3 3 
                                       f32_4 %624 = OpFMul %621 %623 
                                       f32_4 %625 = OpLoad %80 
                                       f32_4 %626 = OpFAdd %624 %625 
                               Output f32_4* %627 = OpAccessChain %619 %28 
                                                      OpStore %627 %626 
                                 Output f32* %628 = OpAccessChain %619 %28 %360 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFNegate %629 
                                 Output f32* %631 = OpAccessChain %619 %28 %360 
                                                      OpStore %631 %630 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %29 %49 %51 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %29 Location 29 
                                             OpMemberDecorate %37 0 Offset 37 
                                             OpDecorate %37 Block 
                                             OpDecorate %39 DescriptorSet 39 
                                             OpDecorate %39 Binding 39 
                                             OpDecorate %49 Location 49 
                                             OpDecorate vs_TEXCOORD1 Location 51 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %24 
                        Input f32_4* %29 = OpVariable Input 
                                 f32 %34 = OpConstant 3.674022E-40 
                               f32_3 %35 = OpConstantComposite %34 %34 %34 
                                     %37 = OpTypeStruct %24 
                                     %38 = OpTypePointer Uniform %37 
            Uniform struct {f32_4;}* %39 = OpVariable Uniform 
                                     %40 = OpTypeInt 32 1 
                                 i32 %41 = OpConstant 0 
                                     %42 = OpTypePointer Uniform %24 
                                     %48 = OpTypePointer Output %24 
                       Output f32_4* %49 = OpVariable Output 
                                     %50 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %62 = OpConstant 3.674022E-40 
                                     %63 = OpTypeInt 32 0 
                                 u32 %64 = OpConstant 3 
                                     %65 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %27 = OpLoad %9 
                               f32_4 %30 = OpLoad %29 
                               f32_3 %31 = OpVectorShuffle %30 %30 0 1 2 
                               f32_3 %32 = OpFMul %27 %31 
                                             OpStore %9 %32 
                               f32_3 %33 = OpLoad %9 
                               f32_3 %36 = OpFMul %33 %35 
                      Uniform f32_4* %43 = OpAccessChain %39 %41 
                               f32_4 %44 = OpLoad %43 
                               f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                               f32_3 %46 = OpFNegate %45 
                               f32_3 %47 = OpFAdd %36 %46 
                                             OpStore %9 %47 
                                 f32 %52 = OpLoad vs_TEXCOORD1 
                               f32_3 %53 = OpCompositeConstruct %52 %52 %52 
                               f32_3 %54 = OpLoad %9 
                               f32_3 %55 = OpFMul %53 %54 
                      Uniform f32_4* %56 = OpAccessChain %39 %41 
                               f32_4 %57 = OpLoad %56 
                               f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               f32_3 %59 = OpFAdd %55 %58 
                               f32_4 %60 = OpLoad %49 
                               f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                             OpStore %49 %61 
                         Output f32* %66 = OpAccessChain %49 %64 
                                             OpStore %66 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "SPOT" }
""
}
}
}
 Pass {
  Tags { "LIGHTMODE" = "VertexLM" "RenderType" = "Opaque" }
  GpuProgramID 405951
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_TEXCOORD1;
in  vec3 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_Lightmap_HDR;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D unity_Lightmap;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);
    u_xlat6 = log2(u_xlat0.w);
    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
    u_xlat6 = exp2(u_xlat6);
    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 115
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %9 %12 %34 %35 %49 %99 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 9 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpMemberDecorate %20 0 Offset 20 
                                                      OpMemberDecorate %20 1 Offset 20 
                                                      OpMemberDecorate %20 2 Offset 20 
                                                      OpMemberDecorate %20 3 Offset 20 
                                                      OpDecorate %20 Block 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate vs_TEXCOORD1 Location 34 
                                                      OpDecorate %35 Location 35 
                                                      OpDecorate %49 Location 49 
                                                      OpMemberDecorate %97 0 BuiltIn 97 
                                                      OpMemberDecorate %97 1 BuiltIn 97 
                                                      OpMemberDecorate %97 2 BuiltIn 97 
                                                      OpDecorate %97 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeArray %15 %17 
                                              %20 = OpTypeStruct %18 %19 %15 %15 
                                              %21 = OpTypePointer Uniform %20 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4;}* %22 = OpVariable Uniform 
                                              %23 = OpTypeInt 32 1 
                                          i32 %24 = OpConstant 2 
                                              %25 = OpTypePointer Uniform %15 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                 Input f32_3* %35 = OpVariable Input 
                                          i32 %38 = OpConstant 3 
                                              %47 = OpTypePointer Private %15 
                               Private f32_4* %48 = OpVariable Private 
                                 Input f32_3* %49 = OpVariable Input 
                                          i32 %52 = OpConstant 0 
                                          i32 %53 = OpConstant 1 
                               Private f32_4* %75 = OpVariable Private 
                                          u32 %95 = OpConstant 1 
                                              %96 = OpTypeArray %6 %95 
                                              %97 = OpTypeStruct %15 %6 %96 
                                              %98 = OpTypePointer Output %97 
         Output struct {f32_4; f32; f32[1];}* %99 = OpVariable Output 
                                             %107 = OpTypePointer Output %15 
                                             %109 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                               Uniform f32_4* %26 = OpAccessChain %22 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_2 %28 = OpVectorShuffle %27 %27 0 1 
                                        f32_2 %29 = OpFMul %14 %28 
                               Uniform f32_4* %30 = OpAccessChain %22 %24 
                                        f32_4 %31 = OpLoad %30 
                                        f32_2 %32 = OpVectorShuffle %31 %31 2 3 
                                        f32_2 %33 = OpFAdd %29 %32 
                                                      OpStore vs_TEXCOORD0 %33 
                                        f32_3 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                               Uniform f32_4* %39 = OpAccessChain %22 %38 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_2 %42 = OpFMul %37 %41 
                               Uniform f32_4* %43 = OpAccessChain %22 %38 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 2 3 
                                        f32_2 %46 = OpFAdd %42 %45 
                                                      OpStore vs_TEXCOORD1 %46 
                                        f32_3 %50 = OpLoad %49 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %54 = OpAccessChain %22 %52 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpFMul %51 %55 
                                                      OpStore %48 %56 
                               Uniform f32_4* %57 = OpAccessChain %22 %52 %52 
                                        f32_4 %58 = OpLoad %57 
                                        f32_3 %59 = OpLoad %49 
                                        f32_4 %60 = OpVectorShuffle %59 %59 0 0 0 0 
                                        f32_4 %61 = OpFMul %58 %60 
                                        f32_4 %62 = OpLoad %48 
                                        f32_4 %63 = OpFAdd %61 %62 
                                                      OpStore %48 %63 
                               Uniform f32_4* %64 = OpAccessChain %22 %52 %24 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpLoad %49 
                                        f32_4 %67 = OpVectorShuffle %66 %66 2 2 2 2 
                                        f32_4 %68 = OpFMul %65 %67 
                                        f32_4 %69 = OpLoad %48 
                                        f32_4 %70 = OpFAdd %68 %69 
                                                      OpStore %48 %70 
                                        f32_4 %71 = OpLoad %48 
                               Uniform f32_4* %72 = OpAccessChain %22 %52 %38 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpFAdd %71 %73 
                                                      OpStore %48 %74 
                                        f32_4 %76 = OpLoad %48 
                                        f32_4 %77 = OpVectorShuffle %76 %76 1 1 1 1 
                               Uniform f32_4* %78 = OpAccessChain %22 %53 %53 
                                        f32_4 %79 = OpLoad %78 
                                        f32_4 %80 = OpFMul %77 %79 
                                                      OpStore %75 %80 
                               Uniform f32_4* %81 = OpAccessChain %22 %53 %52 
                                        f32_4 %82 = OpLoad %81 
                                        f32_4 %83 = OpLoad %48 
                                        f32_4 %84 = OpVectorShuffle %83 %83 0 0 0 0 
                                        f32_4 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %75 
                                        f32_4 %87 = OpFAdd %85 %86 
                                                      OpStore %75 %87 
                               Uniform f32_4* %88 = OpAccessChain %22 %53 %24 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpLoad %48 
                                        f32_4 %91 = OpVectorShuffle %90 %90 2 2 2 2 
                                        f32_4 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %75 
                                        f32_4 %94 = OpFAdd %92 %93 
                                                      OpStore %75 %94 
                              Uniform f32_4* %100 = OpAccessChain %22 %53 %38 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %48 
                                       f32_4 %103 = OpVectorShuffle %102 %102 3 3 3 3 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %75 
                                       f32_4 %106 = OpFAdd %104 %105 
                               Output f32_4* %108 = OpAccessChain %99 %52 
                                                      OpStore %108 %106 
                                 Output f32* %110 = OpAccessChain %99 %52 %95 
                                         f32 %111 = OpLoad %110 
                                         f32 %112 = OpFNegate %111 
                                 Output f32* %113 = OpAccessChain %99 %52 %95 
                                                      OpStore %113 %112 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %65 %70 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpMemberDecorate %33 0 Offset 33 
                                             OpDecorate %33 Block 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %60 DescriptorSet 60 
                                             OpDecorate %60 Binding 60 
                                             OpDecorate %62 DescriptorSet 62 
                                             OpDecorate %62 Binding 62 
                                             OpDecorate vs_TEXCOORD1 Location 65 
                                             OpDecorate %70 Location 70 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Private %6 
                        Private f32* %26 = OpVariable Private 
                                     %27 = OpTypeInt 32 0 
                                 u32 %28 = OpConstant 3 
                                     %33 = OpTypeStruct %7 
                                     %34 = OpTypePointer Uniform %33 
            Uniform struct {f32_4;}* %35 = OpVariable Uniform 
                                     %36 = OpTypeInt 32 1 
                                 i32 %37 = OpConstant 0 
                                 u32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %6 
                                 u32 %46 = OpConstant 0 
                                     %50 = OpTypeVector %6 3 
                                     %58 = OpTypePointer Private %50 
                      Private f32_3* %59 = OpVariable Private 
UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
            UniformConstant sampler* %62 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                     %69 = OpTypePointer Output %7 
                       Output f32_4* %70 = OpVariable Output 
                                 f32 %77 = OpConstant 3.674022E-40 
                                     %78 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                        Private f32* %29 = OpAccessChain %9 %28 
                                 f32 %30 = OpLoad %29 
                                 f32 %31 = OpExtInst %1 30 %30 
                                             OpStore %26 %31 
                                 f32 %32 = OpLoad %26 
                        Uniform f32* %40 = OpAccessChain %35 %37 %38 
                                 f32 %41 = OpLoad %40 
                                 f32 %42 = OpFMul %32 %41 
                                             OpStore %26 %42 
                                 f32 %43 = OpLoad %26 
                                 f32 %44 = OpExtInst %1 29 %43 
                                             OpStore %26 %44 
                                 f32 %45 = OpLoad %26 
                        Uniform f32* %47 = OpAccessChain %35 %37 %46 
                                 f32 %48 = OpLoad %47 
                                 f32 %49 = OpFMul %45 %48 
                                             OpStore %26 %49 
                               f32_4 %51 = OpLoad %9 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpLoad %26 
                               f32_3 %54 = OpCompositeConstruct %53 %53 %53 
                               f32_3 %55 = OpFMul %52 %54 
                               f32_4 %56 = OpLoad %9 
                               f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                             OpStore %9 %57 
                 read_only Texture2D %61 = OpLoad %60 
                             sampler %63 = OpLoad %62 
          read_only Texture2DSampled %64 = OpSampledImage %61 %63 
                               f32_2 %66 = OpLoad vs_TEXCOORD1 
                               f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                               f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                             OpStore %59 %68 
                               f32_4 %71 = OpLoad %9 
                               f32_3 %72 = OpVectorShuffle %71 %71 0 1 2 
                               f32_3 %73 = OpLoad %59 
                               f32_3 %74 = OpFMul %72 %73 
                               f32_4 %75 = OpLoad %70 
                               f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                             OpStore %70 %76 
                         Output f32* %79 = OpAccessChain %70 %28 
                                             OpStore %79 %77 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_TEXCOORD1;
in  vec3 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD1;
out float vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    vs_TEXCOORD2 = u_xlat1.x * unity_FogParams.z + unity_FogParams.w;
    vs_TEXCOORD2 = clamp(vs_TEXCOORD2, 0.0, 1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_Lightmap_HDR;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D unity_Lightmap;
in  vec2 vs_TEXCOORD0;
in  vec2 vs_TEXCOORD1;
in  float vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);
    u_xlat6 = log2(u_xlat0.w);
    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
    u_xlat6 = exp2(u_xlat6);
    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(vs_TEXCOORD2) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 187
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %9 %12 %35 %36 %50 %133 %172 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpDecorate vs_TEXCOORD0 Location 9 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate vs_TEXCOORD1 Location 35 
                                                      OpDecorate %36 Location 36 
                                                      OpDecorate %50 Location 50 
                                                      OpDecorate vs_TEXCOORD2 Location 133 
                                                      OpMemberDecorate %170 0 BuiltIn 170 
                                                      OpMemberDecorate %170 1 BuiltIn 170 
                                                      OpMemberDecorate %170 2 BuiltIn 170 
                                                      OpDecorate %170 Block 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_3* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 4 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %15 %17 
                                              %19 = OpTypeArray %15 %17 
                                              %20 = OpTypeArray %15 %17 
                                              %21 = OpTypeStruct %18 %19 %20 %15 %15 %15 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 4 
                                              %26 = OpTypePointer Uniform %15 
                       Output f32_2* vs_TEXCOORD1 = OpVariable Output 
                                 Input f32_3* %36 = OpVariable Input 
                                          i32 %39 = OpConstant 5 
                                              %48 = OpTypePointer Private %15 
                               Private f32_4* %49 = OpVariable Private 
                                 Input f32_3* %50 = OpVariable Input 
                                          i32 %53 = OpConstant 0 
                                          i32 %54 = OpConstant 1 
                                          i32 %65 = OpConstant 2 
                                          i32 %74 = OpConstant 3 
                               Private f32_4* %78 = OpVariable Private 
                                         u32 %125 = OpConstant 0 
                                             %126 = OpTypePointer Private %6 
                                             %132 = OpTypePointer Output %6 
                         Output f32* vs_TEXCOORD2 = OpVariable Output 
                                         u32 %136 = OpConstant 2 
                                             %137 = OpTypePointer Uniform %6 
                                         u32 %141 = OpConstant 3 
                                         f32 %146 = OpConstant 3.674022E-40 
                                         f32 %147 = OpConstant 3.674022E-40 
                                         u32 %168 = OpConstant 1 
                                             %169 = OpTypeArray %6 %168 
                                             %170 = OpTypeStruct %15 %6 %169 
                                             %171 = OpTypePointer Output %170 
        Output struct {f32_4; f32; f32[1];}* %172 = OpVariable Output 
                                             %180 = OpTypePointer Output %15 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                               Uniform f32_4* %27 = OpAccessChain %23 %25 
                                        f32_4 %28 = OpLoad %27 
                                        f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                                        f32_2 %30 = OpFMul %14 %29 
                               Uniform f32_4* %31 = OpAccessChain %23 %25 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 2 3 
                                        f32_2 %34 = OpFAdd %30 %33 
                                                      OpStore vs_TEXCOORD0 %34 
                                        f32_3 %37 = OpLoad %36 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                               Uniform f32_4* %40 = OpAccessChain %23 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_2 %43 = OpFMul %38 %42 
                               Uniform f32_4* %44 = OpAccessChain %23 %39 
                                        f32_4 %45 = OpLoad %44 
                                        f32_2 %46 = OpVectorShuffle %45 %45 2 3 
                                        f32_2 %47 = OpFAdd %43 %46 
                                                      OpStore vs_TEXCOORD1 %47 
                                        f32_3 %51 = OpLoad %50 
                                        f32_4 %52 = OpVectorShuffle %51 %51 1 1 1 1 
                               Uniform f32_4* %55 = OpAccessChain %23 %53 %54 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpFMul %52 %56 
                                                      OpStore %49 %57 
                               Uniform f32_4* %58 = OpAccessChain %23 %53 %53 
                                        f32_4 %59 = OpLoad %58 
                                        f32_3 %60 = OpLoad %50 
                                        f32_4 %61 = OpVectorShuffle %60 %60 0 0 0 0 
                                        f32_4 %62 = OpFMul %59 %61 
                                        f32_4 %63 = OpLoad %49 
                                        f32_4 %64 = OpFAdd %62 %63 
                                                      OpStore %49 %64 
                               Uniform f32_4* %66 = OpAccessChain %23 %53 %65 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %50 
                                        f32_4 %69 = OpVectorShuffle %68 %68 2 2 2 2 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %49 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %49 %72 
                                        f32_4 %73 = OpLoad %49 
                               Uniform f32_4* %75 = OpAccessChain %23 %53 %74 
                                        f32_4 %76 = OpLoad %75 
                                        f32_4 %77 = OpFAdd %73 %76 
                                                      OpStore %49 %77 
                                        f32_4 %79 = OpLoad %49 
                                        f32_3 %80 = OpVectorShuffle %79 %79 1 1 1 
                               Uniform f32_4* %81 = OpAccessChain %23 %54 %54 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %78 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %78 %86 
                               Uniform f32_4* %87 = OpAccessChain %23 %54 %53 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_4 %90 = OpLoad %49 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %89 %91 
                                        f32_4 %93 = OpLoad %78 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFAdd %92 %94 
                                        f32_4 %96 = OpLoad %78 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %78 %97 
                               Uniform f32_4* %98 = OpAccessChain %23 %54 %65 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %49 
                                       f32_3 %102 = OpVectorShuffle %101 %101 2 2 2 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_4 %104 = OpLoad %78 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_3 %106 = OpFAdd %103 %105 
                                       f32_4 %107 = OpLoad %78 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %78 %108 
                              Uniform f32_4* %109 = OpAccessChain %23 %54 %74 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %49 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_4 %115 = OpLoad %78 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpFAdd %114 %116 
                                       f32_4 %118 = OpLoad %78 
                                       f32_4 %119 = OpVectorShuffle %118 %117 4 5 6 3 
                                                      OpStore %78 %119 
                                       f32_4 %120 = OpLoad %78 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %78 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                Private f32* %127 = OpAccessChain %78 %125 
                                                      OpStore %127 %124 
                                Private f32* %128 = OpAccessChain %78 %125 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 31 %129 
                                Private f32* %131 = OpAccessChain %78 %125 
                                                      OpStore %131 %130 
                                Private f32* %134 = OpAccessChain %78 %125 
                                         f32 %135 = OpLoad %134 
                                Uniform f32* %138 = OpAccessChain %23 %74 %136 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %135 %139 
                                Uniform f32* %142 = OpAccessChain %23 %74 %141 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFAdd %140 %143 
                                                      OpStore vs_TEXCOORD2 %144 
                                         f32 %145 = OpLoad vs_TEXCOORD2 
                                         f32 %148 = OpExtInst %1 43 %145 %146 %147 
                                                      OpStore vs_TEXCOORD2 %148 
                                       f32_4 %149 = OpLoad %49 
                                       f32_4 %150 = OpVectorShuffle %149 %149 1 1 1 1 
                              Uniform f32_4* %151 = OpAccessChain %23 %65 %54 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpFMul %150 %152 
                                                      OpStore %78 %153 
                              Uniform f32_4* %154 = OpAccessChain %23 %65 %53 
                                       f32_4 %155 = OpLoad %154 
                                       f32_4 %156 = OpLoad %49 
                                       f32_4 %157 = OpVectorShuffle %156 %156 0 0 0 0 
                                       f32_4 %158 = OpFMul %155 %157 
                                       f32_4 %159 = OpLoad %78 
                                       f32_4 %160 = OpFAdd %158 %159 
                                                      OpStore %78 %160 
                              Uniform f32_4* %161 = OpAccessChain %23 %65 %65 
                                       f32_4 %162 = OpLoad %161 
                                       f32_4 %163 = OpLoad %49 
                                       f32_4 %164 = OpVectorShuffle %163 %163 2 2 2 2 
                                       f32_4 %165 = OpFMul %162 %164 
                                       f32_4 %166 = OpLoad %78 
                                       f32_4 %167 = OpFAdd %165 %166 
                                                      OpStore %78 %167 
                              Uniform f32_4* %173 = OpAccessChain %23 %65 %74 
                                       f32_4 %174 = OpLoad %173 
                                       f32_4 %175 = OpLoad %49 
                                       f32_4 %176 = OpVectorShuffle %175 %175 3 3 3 3 
                                       f32_4 %177 = OpFMul %174 %176 
                                       f32_4 %178 = OpLoad %78 
                                       f32_4 %179 = OpFAdd %177 %178 
                               Output f32_4* %181 = OpAccessChain %172 %53 
                                                      OpStore %181 %179 
                                 Output f32* %182 = OpAccessChain %172 %53 %168 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFNegate %183 
                                 Output f32* %185 = OpAccessChain %172 %53 %168 
                                                      OpStore %185 %184 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 101
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %65 %83 %85 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpMemberDecorate %33 0 Offset 33 
                                             OpMemberDecorate %33 1 Offset 33 
                                             OpDecorate %33 Block 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate %60 DescriptorSet 60 
                                             OpDecorate %60 Binding 60 
                                             OpDecorate %62 DescriptorSet 62 
                                             OpDecorate %62 Binding 62 
                                             OpDecorate vs_TEXCOORD1 Location 65 
                                             OpDecorate %83 Location 83 
                                             OpDecorate vs_TEXCOORD2 Location 85 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypePointer Private %6 
                        Private f32* %26 = OpVariable Private 
                                     %27 = OpTypeInt 32 0 
                                 u32 %28 = OpConstant 3 
                                     %33 = OpTypeStruct %7 %7 
                                     %34 = OpTypePointer Uniform %33 
     Uniform struct {f32_4; f32_4;}* %35 = OpVariable Uniform 
                                     %36 = OpTypeInt 32 1 
                                 i32 %37 = OpConstant 1 
                                 u32 %38 = OpConstant 1 
                                     %39 = OpTypePointer Uniform %6 
                                 u32 %46 = OpConstant 0 
                                     %50 = OpTypeVector %6 3 
                                     %58 = OpTypePointer Private %50 
                      Private f32_3* %59 = OpVariable Private 
UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
            UniformConstant sampler* %62 = OpVariable UniformConstant 
               Input f32_2* vs_TEXCOORD1 = OpVariable Input 
                                 i32 %73 = OpConstant 0 
                                     %74 = OpTypePointer Uniform %7 
                                     %82 = OpTypePointer Output %7 
                       Output f32_4* %83 = OpVariable Output 
                                     %84 = OpTypePointer Input %6 
                 Input f32* vs_TEXCOORD2 = OpVariable Input 
                                 f32 %97 = OpConstant 3.674022E-40 
                                     %98 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                        Private f32* %29 = OpAccessChain %9 %28 
                                 f32 %30 = OpLoad %29 
                                 f32 %31 = OpExtInst %1 30 %30 
                                             OpStore %26 %31 
                                 f32 %32 = OpLoad %26 
                        Uniform f32* %40 = OpAccessChain %35 %37 %38 
                                 f32 %41 = OpLoad %40 
                                 f32 %42 = OpFMul %32 %41 
                                             OpStore %26 %42 
                                 f32 %43 = OpLoad %26 
                                 f32 %44 = OpExtInst %1 29 %43 
                                             OpStore %26 %44 
                                 f32 %45 = OpLoad %26 
                        Uniform f32* %47 = OpAccessChain %35 %37 %46 
                                 f32 %48 = OpLoad %47 
                                 f32 %49 = OpFMul %45 %48 
                                             OpStore %26 %49 
                               f32_4 %51 = OpLoad %9 
                               f32_3 %52 = OpVectorShuffle %51 %51 0 1 2 
                                 f32 %53 = OpLoad %26 
                               f32_3 %54 = OpCompositeConstruct %53 %53 %53 
                               f32_3 %55 = OpFMul %52 %54 
                               f32_4 %56 = OpLoad %9 
                               f32_4 %57 = OpVectorShuffle %56 %55 4 5 6 3 
                                             OpStore %9 %57 
                 read_only Texture2D %61 = OpLoad %60 
                             sampler %63 = OpLoad %62 
          read_only Texture2DSampled %64 = OpSampledImage %61 %63 
                               f32_2 %66 = OpLoad vs_TEXCOORD1 
                               f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                               f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                             OpStore %59 %68 
                               f32_3 %69 = OpLoad %59 
                               f32_4 %70 = OpLoad %9 
                               f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                               f32_3 %72 = OpFMul %69 %71 
                      Uniform f32_4* %75 = OpAccessChain %35 %73 
                               f32_4 %76 = OpLoad %75 
                               f32_3 %77 = OpVectorShuffle %76 %76 0 1 2 
                               f32_3 %78 = OpFNegate %77 
                               f32_3 %79 = OpFAdd %72 %78 
                               f32_4 %80 = OpLoad %9 
                               f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                             OpStore %9 %81 
                                 f32 %86 = OpLoad vs_TEXCOORD2 
                               f32_3 %87 = OpCompositeConstruct %86 %86 %86 
                               f32_4 %88 = OpLoad %9 
                               f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                               f32_3 %90 = OpFMul %87 %89 
                      Uniform f32_4* %91 = OpAccessChain %35 %73 
                               f32_4 %92 = OpLoad %91 
                               f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                               f32_3 %94 = OpFAdd %90 %93 
                               f32_4 %95 = OpLoad %83 
                               f32_4 %96 = OpVectorShuffle %95 %94 4 5 6 3 
                                             OpStore %83 %96 
                         Output f32* %99 = OpAccessChain %83 %28 
                                             OpStore %99 %97 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
""
}
}
}
}
Fallback "VertexLit"
}