//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-PrePassLighting" {
Properties {
_LightTexture0 ("", any) = "" { }
_LightTextureB0 ("", 2D) = "" { }
_ShadowMapTexture ("", any) = "" { }
}
SubShader {
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend DstColor Zero, DstColor Zero
  ZWrite Off
  GpuProgramID 28712
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat11;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = inversesqrt(u_xlat11);
    u_xlat11 = u_xlat11 * _LightPos.w;
    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
    u_xlat7.xyz = vec3(u_xlat16) * u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-u_xlat7.xyz);
    u_xlat3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xxx;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat6.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = u_xlat1.xxxx * u_xlat3;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 374
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %369 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate vs_TEXCOORD1 Location 91 
                                                      OpDecorate %236 DescriptorSet 236 
                                                      OpDecorate %236 Binding 236 
                                                      OpDecorate %238 DescriptorSet 238 
                                                      OpDecorate %238 Binding 238 
                                                      OpDecorate %369 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %7 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 8 
                                              %48 = OpTypePointer Uniform %7 
                               Private f32_4* %59 = OpVariable Private 
         UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                     UniformConstant sampler* %62 = OpVariable UniformConstant 
                                          i32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %74 = OpConstant 1 
                                          f32 %79 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %40 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %86 = OpConstant 1 
                                          u32 %87 = OpConstant 2 
                                              %90 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %92 = OpTypePointer Input %6 
                              Private f32_4* %101 = OpVariable Private 
                              Private f32_3* %108 = OpVariable Private 
                                         i32 %111 = OpConstant 3 
                                         i32 %116 = OpConstant 0 
                                             %148 = OpTypePointer Uniform %40 
                              Private f32_3* %161 = OpVariable Private 
                                         i32 %164 = OpConstant 5 
                                         i32 %172 = OpConstant 4 
                                         u32 %196 = OpConstant 3 
                                         i32 %208 = OpConstant 7 
                                         f32 %223 = OpConstant 3.674022E-40 
                                Private f32* %229 = OpVariable Private 
        UniformConstant read_only Texture2D* %236 = OpVariable UniformConstant 
                    UniformConstant sampler* %238 = OpVariable UniformConstant 
                                         f32 %274 = OpConstant 3.674022E-40 
                                       f32_3 %275 = OpConstantComposite %274 %274 %274 
                                         f32 %277 = OpConstant 3.674022E-40 
                                       f32_3 %278 = OpConstantComposite %277 %277 %277 
                                         f32 %284 = OpConstant 3.674022E-40 
                                         i32 %326 = OpConstant 6 
                                         f32 %354 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                                       f32_3 %357 = OpConstantComposite %354 %355 %356 
                                             %368 = OpTypePointer Output %7 
                               Output f32_4* %369 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %49 = OpAccessChain %45 %47 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_2 %52 = OpFMul %39 %51 
                               Uniform f32_4* %53 = OpAccessChain %45 %47 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 2 3 
                                        f32_2 %56 = OpFAdd %52 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                          read_only Texture2D %61 = OpLoad %60 
                                      sampler %63 = OpLoad %62 
                   read_only Texture2DSampled %64 = OpSampledImage %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %59 %67 
                                 Uniform f32* %70 = OpAccessChain %45 %68 %36 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpLoad %21 
                                          f32 %73 = OpFMul %71 %72 
                                 Uniform f32* %75 = OpAccessChain %45 %68 %74 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %73 %76 
                                 Private f32* %78 = OpAccessChain %9 %36 
                                                      OpStore %78 %77 
                                 Private f32* %80 = OpAccessChain %9 %36 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %79 %81 
                                 Private f32* %83 = OpAccessChain %9 %36 
                                                      OpStore %83 %82 
                                 Uniform f32* %88 = OpAccessChain %45 %86 %87 
                                          f32 %89 = OpLoad %88 
                                   Input f32* %93 = OpAccessChain vs_TEXCOORD1 %87 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFDiv %89 %94 
                                 Private f32* %96 = OpAccessChain %85 %36 
                                                      OpStore %96 %95 
                                        f32_3 %97 = OpLoad %85 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad vs_TEXCOORD1 
                                       f32_3 %100 = OpFMul %98 %99 
                                                      OpStore %85 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad %85 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_4 %106 = OpLoad %101 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %101 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_3 %110 = OpVectorShuffle %109 %109 1 1 1 
                              Uniform f32_4* %112 = OpAccessChain %45 %111 %86 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFMul %110 %114 
                                                      OpStore %108 %115 
                              Uniform f32_4* %117 = OpAccessChain %45 %111 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_4 %120 = OpLoad %101 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
                                       f32_3 %122 = OpFMul %119 %121 
                                       f32_3 %123 = OpLoad %108 
                                       f32_3 %124 = OpFAdd %122 %123 
                                       f32_4 %125 = OpLoad %101 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %101 %126 
                              Uniform f32_4* %127 = OpAccessChain %45 %111 %68 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %101 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %101 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %101 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %101 %137 
                                       f32_4 %138 = OpLoad %101 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %140 = OpAccessChain %45 %111 %111 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %101 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 6 
                                                      OpStore %101 %145 
                                       f32_4 %146 = OpLoad %101 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 3 
                              Uniform f32_3* %149 = OpAccessChain %45 %116 
                                       f32_3 %150 = OpLoad %149 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %147 %151 
                                                      OpStore %108 %152 
                                       f32_3 %153 = OpLoad %108 
                                       f32_3 %154 = OpLoad %108 
                                         f32 %155 = OpDot %153 %154 
                                Private f32* %156 = OpAccessChain %85 %36 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %85 %36 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpExtInst %1 32 %158 
                                Private f32* %160 = OpAccessChain %85 %36 
                                                      OpStore %160 %159 
                                       f32_4 %162 = OpLoad %101 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 3 
                              Uniform f32_4* %165 = OpAccessChain %45 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %163 %168 
                                                      OpStore %161 %169 
                                       f32_4 %170 = OpLoad %101 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 3 
                              Uniform f32_4* %173 = OpAccessChain %45 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFNegate %175 
                                       f32_3 %177 = OpFAdd %171 %176 
                                       f32_4 %178 = OpLoad %101 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 6 
                                                      OpStore %101 %179 
                                       f32_4 %180 = OpLoad %101 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 3 
                                       f32_4 %182 = OpLoad %101 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 3 
                                         f32 %184 = OpDot %181 %183 
                                                      OpStore %21 %184 
                                         f32 %185 = OpLoad %21 
                                         f32 %186 = OpExtInst %1 31 %185 
                                                      OpStore %21 %186 
                                Private f32* %187 = OpAccessChain %85 %87 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                Private f32* %190 = OpAccessChain %9 %36 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFMul %189 %191 
                                         f32 %193 = OpLoad %21 
                                         f32 %194 = OpFAdd %192 %193 
                                Private f32* %195 = OpAccessChain %9 %36 
                                                      OpStore %195 %194 
                                Uniform f32* %197 = OpAccessChain %45 %172 %196 
                                         f32 %198 = OpLoad %197 
                                Private f32* %199 = OpAccessChain %9 %36 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFMul %198 %200 
                                Private f32* %202 = OpAccessChain %101 %87 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                Private f32* %205 = OpAccessChain %9 %36 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %9 %36 
                                         f32 %207 = OpLoad %206 
                                Uniform f32* %209 = OpAccessChain %45 %208 %87 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %207 %210 
                                Uniform f32* %212 = OpAccessChain %45 %208 %196 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFAdd %211 %213 
                                Private f32* %215 = OpAccessChain %9 %36 
                                                      OpStore %215 %214 
                                Private f32* %216 = OpAccessChain %9 %36 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpFNegate %217 
                                         f32 %219 = OpFAdd %218 %79 
                                Private f32* %220 = OpAccessChain %9 %36 
                                                      OpStore %220 %219 
                                Private f32* %221 = OpAccessChain %9 %36 
                                         f32 %222 = OpLoad %221 
                                         f32 %224 = OpExtInst %1 43 %222 %223 %79 
                                Private f32* %225 = OpAccessChain %9 %36 
                                                      OpStore %225 %224 
                                       f32_3 %226 = OpLoad %161 
                                       f32_3 %227 = OpLoad %161 
                                         f32 %228 = OpDot %226 %227 
                                                      OpStore %21 %228 
                                         f32 %230 = OpLoad %21 
                                         f32 %231 = OpExtInst %1 32 %230 
                                                      OpStore %229 %231 
                                         f32 %232 = OpLoad %21 
                                Uniform f32* %233 = OpAccessChain %45 %164 %196 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                                      OpStore %21 %235 
                         read_only Texture2D %237 = OpLoad %236 
                                     sampler %239 = OpLoad %238 
                  read_only Texture2DSampled %240 = OpSampledImage %237 %239 
                                         f32 %241 = OpLoad %21 
                                       f32_2 %242 = OpCompositeConstruct %241 %241 
                                       f32_4 %243 = OpImageSampleImplicitLod %240 %242 
                                         f32 %244 = OpCompositeExtract %243 0 
                                                      OpStore %21 %244 
                                         f32 %245 = OpLoad %229 
                                       f32_3 %246 = OpCompositeConstruct %245 %245 %245 
                                       f32_3 %247 = OpLoad %161 
                                       f32_3 %248 = OpFMul %246 %247 
                                       f32_4 %249 = OpLoad %101 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %101 %250 
                                       f32_3 %251 = OpLoad %108 
                                       f32_3 %252 = OpFNegate %251 
                                       f32_3 %253 = OpLoad %85 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 0 0 
                                       f32_3 %255 = OpFMul %252 %254 
                                       f32_4 %256 = OpLoad %101 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFNegate %257 
                                       f32_3 %259 = OpFAdd %255 %258 
                                                      OpStore %108 %259 
                                       f32_3 %260 = OpLoad %108 
                                       f32_3 %261 = OpLoad %108 
                                         f32 %262 = OpDot %260 %261 
                                Private f32* %263 = OpAccessChain %85 %36 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %85 %36 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpExtInst %1 32 %265 
                                Private f32* %267 = OpAccessChain %85 %36 
                                                      OpStore %267 %266 
                                       f32_3 %268 = OpLoad %85 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 0 0 
                                       f32_3 %270 = OpLoad %108 
                                       f32_3 %271 = OpFMul %269 %270 
                                                      OpStore %108 %271 
                                       f32_4 %272 = OpLoad %59 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %276 = OpFMul %273 %275 
                                       f32_3 %279 = OpFAdd %276 %278 
                                       f32_4 %280 = OpLoad %59 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %59 %281 
                                Private f32* %282 = OpAccessChain %59 %196 
                                         f32 %283 = OpLoad %282 
                                         f32 %285 = OpFMul %283 %284 
                                Private f32* %286 = OpAccessChain %85 %36 
                                                      OpStore %286 %285 
                                       f32_4 %287 = OpLoad %59 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_4 %289 = OpLoad %59 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                         f32 %291 = OpDot %288 %290 
                                                      OpStore %229 %291 
                                         f32 %292 = OpLoad %229 
                                         f32 %293 = OpExtInst %1 32 %292 
                                                      OpStore %229 %293 
                                         f32 %294 = OpLoad %229 
                                       f32_3 %295 = OpCompositeConstruct %294 %294 %294 
                                       f32_4 %296 = OpLoad %59 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %59 
                                       f32_4 %300 = OpVectorShuffle %299 %298 4 5 6 3 
                                                      OpStore %59 %300 
                                       f32_3 %301 = OpLoad %108 
                                       f32_4 %302 = OpLoad %59 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                         f32 %304 = OpDot %301 %303 
                                                      OpStore %229 %304 
                                       f32_4 %305 = OpLoad %101 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFNegate %306 
                                       f32_4 %308 = OpLoad %59 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                         f32 %310 = OpDot %307 %309 
                                Private f32* %311 = OpAccessChain %59 %36 
                                                      OpStore %311 %310 
                                Private f32* %312 = OpAccessChain %59 %36 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpExtInst %1 40 %313 %223 
                                Private f32* %315 = OpAccessChain %59 %36 
                                                      OpStore %315 %314 
                                         f32 %316 = OpLoad %21 
                                Private f32* %317 = OpAccessChain %59 %36 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFMul %316 %318 
                                Private f32* %320 = OpAccessChain %59 %36 
                                                      OpStore %320 %319 
                                         f32 %321 = OpLoad %21 
                                                      OpStore %21 %321 
                                         f32 %322 = OpLoad %21 
                                         f32 %323 = OpExtInst %1 43 %322 %223 %79 
                                                      OpStore %21 %323 
                                       f32_4 %324 = OpLoad %59 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 0 0 
                              Uniform f32_4* %327 = OpAccessChain %45 %326 
                                       f32_4 %328 = OpLoad %327 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFMul %325 %329 
                                       f32_4 %331 = OpLoad %59 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %59 %332 
                                         f32 %333 = OpLoad %229 
                                         f32 %334 = OpExtInst %1 40 %333 %223 
                                                      OpStore %229 %334 
                                         f32 %335 = OpLoad %229 
                                         f32 %336 = OpExtInst %1 30 %335 
                                                      OpStore %229 %336 
                                         f32 %337 = OpLoad %229 
                                Private f32* %338 = OpAccessChain %85 %36 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFMul %337 %339 
                                Private f32* %341 = OpAccessChain %85 %36 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %85 %36 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 29 %343 
                                Private f32* %345 = OpAccessChain %85 %36 
                                                      OpStore %345 %344 
                                         f32 %346 = OpLoad %21 
                                Private f32* %347 = OpAccessChain %85 %36 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                Private f32* %350 = OpAccessChain %85 %36 
                                                      OpStore %350 %349 
                              Uniform f32_4* %351 = OpAccessChain %45 %326 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %358 = OpDot %353 %357 
                                                      OpStore %21 %358 
                                         f32 %359 = OpLoad %21 
                                Private f32* %360 = OpAccessChain %85 %36 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                Private f32* %363 = OpAccessChain %59 %196 
                                                      OpStore %363 %362 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 0 0 0 0 
                                       f32_4 %366 = OpLoad %59 
                                       f32_4 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpFNegate %370 
                                       f32_4 %372 = OpExtInst %1 29 %371 
                                                      OpStore %369 %372 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1.x = (-u_xlat5.z) * u_xlat1.x + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = (-u_xlat2.xyw) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat0.w * 128.0;
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat5.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat4 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    u_xlat0 = u_xlat1.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 341
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate vs_TEXCOORD1 Location 91 
                                                      OpDecorate %336 Location 336 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %7 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 8 
                                              %48 = OpTypePointer Uniform %7 
                               Private f32_4* %59 = OpVariable Private 
         UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                     UniformConstant sampler* %62 = OpVariable UniformConstant 
                                          i32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %74 = OpConstant 1 
                                          f32 %79 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %40 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %86 = OpConstant 1 
                                          u32 %87 = OpConstant 2 
                                              %90 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %92 = OpTypePointer Input %6 
                              Private f32_4* %101 = OpVariable Private 
                              Private f32_3* %108 = OpVariable Private 
                                         i32 %111 = OpConstant 3 
                                         i32 %116 = OpConstant 0 
                                         i32 %148 = OpConstant 4 
                                             %156 = OpTypePointer Uniform %40 
                                         u32 %181 = OpConstant 3 
                                         i32 %193 = OpConstant 7 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         i32 %227 = OpConstant 5 
                                         f32 %247 = OpConstant 3.674022E-40 
                                       f32_3 %248 = OpConstantComposite %247 %247 %247 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                Private f32* %255 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %208 %208 
                                         i32 %298 = OpConstant 6 
                                         f32 %321 = OpConstant 3.674022E-40 
                                         f32 %322 = OpConstant 3.674022E-40 
                                         f32 %323 = OpConstant 3.674022E-40 
                                       f32_3 %324 = OpConstantComposite %321 %322 %323 
                                             %335 = OpTypePointer Output %7 
                               Output f32_4* %336 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %49 = OpAccessChain %45 %47 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_2 %52 = OpFMul %39 %51 
                               Uniform f32_4* %53 = OpAccessChain %45 %47 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 2 3 
                                        f32_2 %56 = OpFAdd %52 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                          read_only Texture2D %61 = OpLoad %60 
                                      sampler %63 = OpLoad %62 
                   read_only Texture2DSampled %64 = OpSampledImage %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %59 %67 
                                 Uniform f32* %70 = OpAccessChain %45 %68 %36 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpLoad %21 
                                          f32 %73 = OpFMul %71 %72 
                                 Uniform f32* %75 = OpAccessChain %45 %68 %74 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %73 %76 
                                 Private f32* %78 = OpAccessChain %9 %36 
                                                      OpStore %78 %77 
                                 Private f32* %80 = OpAccessChain %9 %36 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %79 %81 
                                 Private f32* %83 = OpAccessChain %9 %36 
                                                      OpStore %83 %82 
                                 Uniform f32* %88 = OpAccessChain %45 %86 %87 
                                          f32 %89 = OpLoad %88 
                                   Input f32* %93 = OpAccessChain vs_TEXCOORD1 %87 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFDiv %89 %94 
                                 Private f32* %96 = OpAccessChain %85 %36 
                                                      OpStore %96 %95 
                                        f32_3 %97 = OpLoad %85 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad vs_TEXCOORD1 
                                       f32_3 %100 = OpFMul %98 %99 
                                                      OpStore %85 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad %85 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_4 %106 = OpLoad %101 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %101 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_3 %110 = OpVectorShuffle %109 %109 1 1 1 
                              Uniform f32_4* %112 = OpAccessChain %45 %111 %86 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFMul %110 %114 
                                                      OpStore %108 %115 
                              Uniform f32_4* %117 = OpAccessChain %45 %111 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_4 %120 = OpLoad %101 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
                                       f32_3 %122 = OpFMul %119 %121 
                                       f32_3 %123 = OpLoad %108 
                                       f32_3 %124 = OpFAdd %122 %123 
                                       f32_4 %125 = OpLoad %101 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %101 %126 
                              Uniform f32_4* %127 = OpAccessChain %45 %111 %68 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %101 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %101 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %101 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %101 %137 
                                       f32_4 %138 = OpLoad %101 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %140 = OpAccessChain %45 %111 %111 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %101 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 6 
                                                      OpStore %101 %145 
                                       f32_4 %146 = OpLoad %101 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 3 
                              Uniform f32_4* %149 = OpAccessChain %45 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %147 %152 
                                                      OpStore %108 %153 
                                       f32_4 %154 = OpLoad %101 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 3 
                              Uniform f32_3* %157 = OpAccessChain %45 %116 
                                       f32_3 %158 = OpLoad %157 
                                       f32_3 %159 = OpFNegate %158 
                                       f32_3 %160 = OpFAdd %155 %159 
                                       f32_4 %161 = OpLoad %101 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 2 6 
                                                      OpStore %101 %162 
                                       f32_3 %163 = OpLoad %108 
                                       f32_3 %164 = OpLoad %108 
                                         f32 %165 = OpDot %163 %164 
                                Private f32* %166 = OpAccessChain %85 %36 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %85 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpExtInst %1 31 %168 
                                Private f32* %170 = OpAccessChain %85 %36 
                                                      OpStore %170 %169 
                                Private f32* %171 = OpAccessChain %85 %87 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFNegate %172 
                                Private f32* %174 = OpAccessChain %9 %36 
                                         f32 %175 = OpLoad %174 
                                         f32 %176 = OpFMul %173 %175 
                                Private f32* %177 = OpAccessChain %85 %36 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFAdd %176 %178 
                                Private f32* %180 = OpAccessChain %9 %36 
                                                      OpStore %180 %179 
                                Uniform f32* %182 = OpAccessChain %45 %148 %181 
                                         f32 %183 = OpLoad %182 
                                Private f32* %184 = OpAccessChain %9 %36 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %183 %185 
                                Private f32* %187 = OpAccessChain %101 %87 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFAdd %186 %188 
                                Private f32* %190 = OpAccessChain %9 %36 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %9 %36 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %45 %193 %87 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %197 = OpAccessChain %45 %193 %181 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %9 %36 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %9 %36 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                         f32 %204 = OpFAdd %203 %79 
                                Private f32* %205 = OpAccessChain %9 %36 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %9 %36 
                                         f32 %207 = OpLoad %206 
                                         f32 %209 = OpExtInst %1 43 %207 %208 %79 
                                Private f32* %210 = OpAccessChain %9 %36 
                                                      OpStore %210 %209 
                                       f32_4 %211 = OpLoad %101 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 3 
                                       f32_4 %213 = OpLoad %101 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 3 
                                         f32 %215 = OpDot %212 %214 
                                Private f32* %216 = OpAccessChain %85 %36 
                                                      OpStore %216 %215 
                                Private f32* %217 = OpAccessChain %85 %36 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 32 %218 
                                Private f32* %220 = OpAccessChain %85 %36 
                                                      OpStore %220 %219 
                                       f32_4 %221 = OpLoad %101 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 3 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpLoad %85 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpFMul %223 %225 
                              Uniform f32_4* %228 = OpAccessChain %45 %227 
                                       f32_4 %229 = OpLoad %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFNegate %230 
                                       f32_3 %232 = OpFAdd %226 %231 
                                                      OpStore %85 %232 
                                       f32_3 %233 = OpLoad %85 
                                       f32_3 %234 = OpLoad %85 
                                         f32 %235 = OpDot %233 %234 
                                Private f32* %236 = OpAccessChain %101 %36 
                                                      OpStore %236 %235 
                                Private f32* %237 = OpAccessChain %101 %36 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpExtInst %1 32 %238 
                                Private f32* %240 = OpAccessChain %101 %36 
                                                      OpStore %240 %239 
                                       f32_3 %241 = OpLoad %85 
                                       f32_4 %242 = OpLoad %101 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                                      OpStore %85 %244 
                                       f32_4 %245 = OpLoad %59 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %59 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %59 %254 
                                Private f32* %256 = OpAccessChain %59 %181 
                                         f32 %257 = OpLoad %256 
                                         f32 %259 = OpFMul %257 %258 
                                                      OpStore %255 %259 
                                       f32_4 %260 = OpLoad %59 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                       f32_4 %262 = OpLoad %59 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                Private f32* %265 = OpAccessChain %101 %36 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %101 %36 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 32 %267 
                                Private f32* %269 = OpAccessChain %101 %36 
                                                      OpStore %269 %268 
                                       f32_4 %270 = OpLoad %59 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %101 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 0 0 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %59 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %59 %276 
                                       f32_3 %277 = OpLoad %85 
                                       f32_4 %278 = OpLoad %59 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                         f32 %280 = OpDot %277 %279 
                                Private f32* %281 = OpAccessChain %85 %36 
                                                      OpStore %281 %280 
                              Uniform f32_4* %282 = OpAccessChain %45 %227 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_4 %286 = OpLoad %59 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                         f32 %288 = OpDot %285 %287 
                                Private f32* %289 = OpAccessChain %85 %74 
                                                      OpStore %289 %288 
                                       f32_3 %290 = OpLoad %85 
                                       f32_2 %291 = OpVectorShuffle %290 %290 0 1 
                                       f32_2 %293 = OpExtInst %1 40 %291 %292 
                                       f32_3 %294 = OpLoad %85 
                                       f32_3 %295 = OpVectorShuffle %294 %293 3 4 2 
                                                      OpStore %85 %295 
                                       f32_3 %296 = OpLoad %85 
                                       f32_3 %297 = OpVectorShuffle %296 %296 1 1 1 
                              Uniform f32_4* %299 = OpAccessChain %45 %298 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_3 %302 = OpFMul %297 %301 
                                       f32_4 %303 = OpLoad %101 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                                      OpStore %101 %304 
                                Private f32* %305 = OpAccessChain %85 %36 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpExtInst %1 30 %306 
                                Private f32* %308 = OpAccessChain %85 %36 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %85 %36 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpLoad %255 
                                         f32 %312 = OpFMul %310 %311 
                                Private f32* %313 = OpAccessChain %85 %36 
                                                      OpStore %313 %312 
                                Private f32* %314 = OpAccessChain %85 %36 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpExtInst %1 29 %315 
                                Private f32* %317 = OpAccessChain %85 %36 
                                                      OpStore %317 %316 
                              Uniform f32_4* %318 = OpAccessChain %45 %298 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                         f32 %325 = OpDot %320 %324 
                                                      OpStore %21 %325 
                                         f32 %326 = OpLoad %21 
                                Private f32* %327 = OpAccessChain %85 %36 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                Private f32* %330 = OpAccessChain %101 %181 
                                                      OpStore %330 %329 
                                       f32_4 %331 = OpLoad %9 
                                       f32_4 %332 = OpVectorShuffle %331 %331 0 0 0 0 
                                       f32_4 %333 = OpLoad %101 
                                       f32_4 %334 = OpFMul %332 %333 
                                                      OpStore %9 %334 
                                       f32_4 %337 = OpLoad %9 
                                       f32_4 %338 = OpFNegate %337 
                                       f32_4 %339 = OpExtInst %1 29 %338 
                                                      OpStore %336 %339 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + u_xlat4.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = u_xlat0.w * 128.0;
    u_xlat7.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xxx;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb18 = u_xlat1.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy, -8.0);
    u_xlat18 = u_xlat18 * u_xlat1.w;
    u_xlat18 = u_xlat5.x * u_xlat18;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat12) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 440
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %92 %435 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate vs_TEXCOORD1 Location 92 
                                                      OpDecorate %182 DescriptorSet 182 
                                                      OpDecorate %182 Binding 182 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %378 DescriptorSet 378 
                                                      OpDecorate %378 Binding 378 
                                                      OpDecorate %380 DescriptorSet 380 
                                                      OpDecorate %380 Binding 380 
                                                      OpDecorate %435 Location 435 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %43 %7 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 9 
                                              %49 = OpTypePointer Uniform %7 
                               Private f32_4* %60 = OpVariable Private 
         UniformConstant read_only Texture2D* %61 = OpVariable UniformConstant 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                          i32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %75 = OpConstant 1 
                                          f32 %80 = OpConstant 3.674022E-40 
                                              %85 = OpTypePointer Private %40 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %87 = OpConstant 1 
                                          u32 %88 = OpConstant 2 
                                              %91 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %93 = OpTypePointer Input %6 
                              Private f32_4* %102 = OpVariable Private 
                              Private f32_3* %109 = OpVariable Private 
                                         i32 %112 = OpConstant 3 
                                         i32 %117 = OpConstant 0 
                                             %149 = OpTypePointer Uniform %40 
                              Private f32_3* %162 = OpVariable Private 
                                         i32 %166 = OpConstant 5 
                                Private f32* %174 = OpVariable Private 
                                         u32 %178 = OpConstant 3 
        UniformConstant read_only Texture2D* %182 = OpVariable UniformConstant 
                    UniformConstant sampler* %184 = OpVariable UniformConstant 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_3 %217 = OpConstantComposite %216 %216 %216 
                                         f32 %219 = OpConstant 3.674022E-40 
                                       f32_3 %220 = OpConstantComposite %219 %219 %219 
                                         f32 %226 = OpConstant 3.674022E-40 
                                Private f32* %229 = OpVariable Private 
                                         f32 %256 = OpConstant 3.674022E-40 
                                       f32_2 %257 = OpConstantComposite %256 %256 
                              Private f32_3* %261 = OpVariable Private 
                                         i32 %278 = OpConstant 8 
                                         i32 %301 = OpConstant 4 
                                         i32 %340 = OpConstant 7 
                                             %369 = OpTypeBool 
                                             %370 = OpTypePointer Private %369 
                               Private bool* %371 = OpVariable Private 
                                Private f32* %375 = OpVariable Private 
        UniformConstant read_only Texture2D* %378 = OpVariable UniformConstant 
                    UniformConstant sampler* %380 = OpVariable UniformConstant 
                                         f32 %385 = OpConstant 3.674022E-40 
                                         i32 %405 = OpConstant 6 
                                         f32 %420 = OpConstant 3.674022E-40 
                                         f32 %421 = OpConstant 3.674022E-40 
                                         f32 %422 = OpConstant 3.674022E-40 
                                       f32_3 %423 = OpConstantComposite %420 %421 %422 
                                             %434 = OpTypePointer Output %7 
                               Output f32_4* %435 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %50 = OpAccessChain %46 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_2 %53 = OpFMul %39 %52 
                               Uniform f32_4* %54 = OpAccessChain %46 %48 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 2 3 
                                        f32_2 %57 = OpFAdd %53 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                          read_only Texture2D %62 = OpLoad %61 
                                      sampler %64 = OpLoad %63 
                   read_only Texture2DSampled %65 = OpSampledImage %62 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %60 %68 
                                 Uniform f32* %71 = OpAccessChain %46 %69 %36 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpLoad %21 
                                          f32 %74 = OpFMul %72 %73 
                                 Uniform f32* %76 = OpAccessChain %46 %69 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFAdd %74 %77 
                                 Private f32* %79 = OpAccessChain %9 %36 
                                                      OpStore %79 %78 
                                 Private f32* %81 = OpAccessChain %9 %36 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %36 
                                                      OpStore %84 %83 
                                 Uniform f32* %89 = OpAccessChain %46 %87 %88 
                                          f32 %90 = OpLoad %89 
                                   Input f32* %94 = OpAccessChain vs_TEXCOORD1 %88 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFDiv %90 %95 
                                 Private f32* %97 = OpAccessChain %86 %36 
                                                      OpStore %97 %96 
                                        f32_3 %98 = OpLoad %86 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_3 %101 = OpFMul %99 %100 
                                                      OpStore %86 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpLoad %86 
                                       f32_3 %106 = OpFMul %104 %105 
                                       f32_4 %107 = OpLoad %102 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %102 %108 
                                       f32_4 %110 = OpLoad %102 
                                       f32_3 %111 = OpVectorShuffle %110 %110 1 1 1 
                              Uniform f32_4* %113 = OpAccessChain %46 %112 %87 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFMul %111 %115 
                                                      OpStore %109 %116 
                              Uniform f32_4* %118 = OpAccessChain %46 %112 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %102 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 0 0 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %109 
                                       f32_3 %125 = OpFAdd %123 %124 
                                       f32_4 %126 = OpLoad %102 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 6 
                                                      OpStore %102 %127 
                              Uniform f32_4* %128 = OpAccessChain %46 %112 %69 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_4 %131 = OpLoad %102 
                                       f32_3 %132 = OpVectorShuffle %131 %131 2 2 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %102 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                                       f32_3 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %102 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %102 %138 
                                       f32_4 %139 = OpLoad %102 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %46 %112 %112 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %140 %143 
                                       f32_4 %145 = OpLoad %102 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 2 6 
                                                      OpStore %102 %146 
                                       f32_4 %147 = OpLoad %102 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 3 
                              Uniform f32_3* %150 = OpAccessChain %46 %117 
                                       f32_3 %151 = OpLoad %150 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %109 %153 
                                       f32_3 %154 = OpLoad %109 
                                       f32_3 %155 = OpLoad %109 
                                         f32 %156 = OpDot %154 %155 
                                Private f32* %157 = OpAccessChain %86 %36 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %86 %36 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 32 %159 
                                Private f32* %161 = OpAccessChain %86 %36 
                                                      OpStore %161 %160 
                                       f32_4 %163 = OpLoad %102 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 3 
                                       f32_3 %165 = OpFNegate %164 
                              Uniform f32_4* %167 = OpAccessChain %46 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %165 %169 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %162 
                                       f32_3 %172 = OpLoad %162 
                                         f32 %173 = OpDot %171 %172 
                                                      OpStore %21 %173 
                                         f32 %175 = OpLoad %21 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %174 %176 
                                         f32 %177 = OpLoad %21 
                                Uniform f32* %179 = OpAccessChain %46 %166 %178 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %177 %180 
                                                      OpStore %21 %181 
                         read_only Texture2D %183 = OpLoad %182 
                                     sampler %185 = OpLoad %184 
                  read_only Texture2DSampled %186 = OpSampledImage %183 %185 
                                         f32 %187 = OpLoad %21 
                                       f32_2 %188 = OpCompositeConstruct %187 %187 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                         f32 %190 = OpCompositeExtract %189 0 
                                                      OpStore %21 %190 
                                         f32 %191 = OpLoad %174 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %162 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %162 %194 
                                       f32_3 %195 = OpLoad %109 
                                       f32_3 %196 = OpFNegate %195 
                                       f32_3 %197 = OpLoad %86 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %162 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %109 %201 
                                       f32_3 %202 = OpLoad %109 
                                       f32_3 %203 = OpLoad %109 
                                         f32 %204 = OpDot %202 %203 
                                Private f32* %205 = OpAccessChain %86 %36 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %86 %36 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 32 %207 
                                Private f32* %209 = OpAccessChain %86 %36 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %86 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 0 0 
                                       f32_3 %212 = OpLoad %109 
                                       f32_3 %213 = OpFMul %211 %212 
                                                      OpStore %109 %213 
                                       f32_4 %214 = OpLoad %60 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_3 %221 = OpFAdd %218 %220 
                                       f32_4 %222 = OpLoad %60 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %60 %223 
                                Private f32* %224 = OpAccessChain %60 %178 
                                         f32 %225 = OpLoad %224 
                                         f32 %227 = OpFMul %225 %226 
                                Private f32* %228 = OpAccessChain %86 %36 
                                                      OpStore %228 %227 
                                       f32_4 %230 = OpLoad %60 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_4 %232 = OpLoad %60 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                         f32 %234 = OpDot %231 %233 
                                                      OpStore %229 %234 
                                         f32 %235 = OpLoad %229 
                                         f32 %236 = OpExtInst %1 32 %235 
                                                      OpStore %229 %236 
                                         f32 %237 = OpLoad %229 
                                       f32_3 %238 = OpCompositeConstruct %237 %237 %237 
                                       f32_4 %239 = OpLoad %60 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_4 %242 = OpLoad %60 
                                       f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                      OpStore %60 %243 
                                       f32_3 %244 = OpLoad %109 
                                       f32_4 %245 = OpLoad %60 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                         f32 %247 = OpDot %244 %246 
                                Private f32* %248 = OpAccessChain %60 %178 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %162 
                                       f32_4 %250 = OpLoad %60 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                         f32 %252 = OpDot %249 %251 
                                Private f32* %253 = OpAccessChain %60 %36 
                                                      OpStore %253 %252 
                                       f32_4 %254 = OpLoad %60 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 3 
                                       f32_2 %258 = OpExtInst %1 40 %255 %257 
                                       f32_4 %259 = OpLoad %60 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 2 3 
                                                      OpStore %60 %260 
                                Private f32* %262 = OpAccessChain %60 %75 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpExtInst %1 30 %263 
                                Private f32* %265 = OpAccessChain %261 %36 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %86 %36 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %261 %36 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFMul %267 %269 
                                Private f32* %271 = OpAccessChain %86 %36 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %86 %36 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 29 %273 
                                Private f32* %275 = OpAccessChain %86 %36 
                                                      OpStore %275 %274 
                                       f32_4 %276 = OpLoad %102 
                                       f32_3 %277 = OpVectorShuffle %276 %276 1 1 1 
                              Uniform f32_4* %279 = OpAccessChain %46 %278 %87 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 3 
                                       f32_3 %282 = OpFMul %277 %281 
                                                      OpStore %261 %282 
                              Uniform f32_4* %283 = OpAccessChain %46 %278 %117 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 3 
                                       f32_4 %286 = OpLoad %102 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_3 %289 = OpLoad %261 
                                       f32_3 %290 = OpFAdd %288 %289 
                                                      OpStore %261 %290 
                              Uniform f32_4* %291 = OpAccessChain %46 %278 %69 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 3 
                                       f32_4 %294 = OpLoad %102 
                                       f32_3 %295 = OpVectorShuffle %294 %294 3 3 3 
                                       f32_3 %296 = OpFMul %293 %295 
                                       f32_3 %297 = OpLoad %261 
                                       f32_3 %298 = OpFAdd %296 %297 
                                                      OpStore %261 %298 
                                       f32_4 %299 = OpLoad %102 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                              Uniform f32_4* %302 = OpAccessChain %46 %301 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_3 %305 = OpFNegate %304 
                                       f32_3 %306 = OpFAdd %300 %305 
                                       f32_4 %307 = OpLoad %102 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 2 6 
                                                      OpStore %102 %308 
                                       f32_4 %309 = OpLoad %102 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 3 
                                       f32_4 %311 = OpLoad %102 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 3 
                                         f32 %313 = OpDot %310 %312 
                                Private f32* %314 = OpAccessChain %102 %36 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %102 %36 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpExtInst %1 31 %316 
                                Private f32* %318 = OpAccessChain %102 %36 
                                                      OpStore %318 %317 
                                Private f32* %319 = OpAccessChain %86 %88 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                Private f32* %322 = OpAccessChain %9 %36 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFMul %321 %323 
                                Private f32* %325 = OpAccessChain %102 %36 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFAdd %324 %326 
                                Private f32* %328 = OpAccessChain %9 %36 
                                                      OpStore %328 %327 
                                Uniform f32* %329 = OpAccessChain %46 %301 %178 
                                         f32 %330 = OpLoad %329 
                                Private f32* %331 = OpAccessChain %9 %36 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %102 %88 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFAdd %333 %335 
                                Private f32* %337 = OpAccessChain %9 %36 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %9 %36 
                                         f32 %339 = OpLoad %338 
                                Uniform f32* %341 = OpAccessChain %46 %340 %88 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %339 %342 
                                Uniform f32* %344 = OpAccessChain %46 %340 %178 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFAdd %343 %345 
                                Private f32* %347 = OpAccessChain %9 %36 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %9 %36 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFNegate %349 
                                         f32 %351 = OpFAdd %350 %80 
                                Private f32* %352 = OpAccessChain %9 %36 
                                                      OpStore %352 %351 
                                Private f32* %353 = OpAccessChain %9 %36 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 43 %354 %256 %80 
                                Private f32* %356 = OpAccessChain %9 %36 
                                                      OpStore %356 %355 
                                       f32_3 %357 = OpLoad %261 
                              Uniform f32_4* %358 = OpAccessChain %46 %278 %112 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 3 
                                       f32_3 %361 = OpFAdd %357 %360 
                                                      OpStore %261 %361 
                                       f32_3 %362 = OpLoad %261 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 1 
                                       f32_3 %364 = OpLoad %261 
                                       f32_2 %365 = OpVectorShuffle %364 %364 2 2 
                                       f32_2 %366 = OpFDiv %363 %365 
                                       f32_3 %367 = OpLoad %261 
                                       f32_3 %368 = OpVectorShuffle %367 %366 3 4 2 
                                                      OpStore %261 %368 
                                Private f32* %372 = OpAccessChain %261 %88 
                                         f32 %373 = OpLoad %372 
                                        bool %374 = OpFOrdLessThan %373 %256 
                                                      OpStore %371 %374 
                                        bool %376 = OpLoad %371 
                                         f32 %377 = OpSelect %376 %80 %256 
                                                      OpStore %375 %377 
                         read_only Texture2D %379 = OpLoad %378 
                                     sampler %381 = OpLoad %380 
                  read_only Texture2DSampled %382 = OpSampledImage %379 %381 
                                       f32_3 %383 = OpLoad %261 
                                       f32_2 %384 = OpVectorShuffle %383 %383 0 1 
                                       f32_4 %386 = OpImageSampleImplicitLod %382 %384 Bias %7 
                                         f32 %387 = OpCompositeExtract %386 3 
                                Private f32* %388 = OpAccessChain %261 %36 
                                                      OpStore %388 %387 
                                         f32 %389 = OpLoad %375 
                                Private f32* %390 = OpAccessChain %261 %36 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                                      OpStore %375 %392 
                                         f32 %393 = OpLoad %21 
                                         f32 %394 = OpLoad %375 
                                         f32 %395 = OpFMul %393 %394 
                                                      OpStore %21 %395 
                                         f32 %396 = OpLoad %21 
                                                      OpStore %375 %396 
                                         f32 %397 = OpLoad %375 
                                         f32 %398 = OpExtInst %1 43 %397 %256 %80 
                                                      OpStore %375 %398 
                                         f32 %399 = OpLoad %21 
                                Private f32* %400 = OpAccessChain %60 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpFMul %399 %401 
                                                      OpStore %21 %402 
                                         f32 %403 = OpLoad %21 
                                       f32_3 %404 = OpCompositeConstruct %403 %403 %403 
                              Uniform f32_4* %406 = OpAccessChain %46 %405 
                                       f32_4 %407 = OpLoad %406 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFMul %404 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %60 %411 
                                         f32 %412 = OpLoad %375 
                                Private f32* %413 = OpAccessChain %86 %36 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFMul %412 %414 
                                Private f32* %416 = OpAccessChain %86 %36 
                                                      OpStore %416 %415 
                              Uniform f32_4* %417 = OpAccessChain %46 %405 
                                       f32_4 %418 = OpLoad %417 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                         f32 %424 = OpDot %419 %423 
                                                      OpStore %21 %424 
                                         f32 %425 = OpLoad %21 
                                Private f32* %426 = OpAccessChain %86 %36 
                                         f32 %427 = OpLoad %426 
                                         f32 %428 = OpFMul %425 %427 
                                Private f32* %429 = OpAccessChain %60 %178 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_4 %431 = OpVectorShuffle %430 %430 0 0 0 0 
                                       f32_4 %432 = OpLoad %60 
                                       f32_4 %433 = OpFMul %431 %432 
                                                      OpStore %9 %433 
                                       f32_4 %436 = OpLoad %9 
                                       f32_4 %437 = OpFNegate %436 
                                       f32_4 %438 = OpExtInst %1 29 %437 
                                                      OpStore %435 %438 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + (-u_xlat4.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = u_xlat0.w * 128.0;
    u_xlat7.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xxx;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz, -8.0);
    u_xlat18 = u_xlat1.w * u_xlat5.x;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    u_xlat0 = vec4(u_xlat12) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 424
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %92 %419 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate vs_TEXCOORD1 Location 92 
                                                      OpDecorate %182 DescriptorSet 182 
                                                      OpDecorate %182 Binding 182 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %367 DescriptorSet 367 
                                                      OpDecorate %367 Binding 367 
                                                      OpDecorate %369 DescriptorSet 369 
                                                      OpDecorate %369 Binding 369 
                                                      OpDecorate %419 Location 419 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %43 %7 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 9 
                                              %49 = OpTypePointer Uniform %7 
                               Private f32_4* %60 = OpVariable Private 
         UniformConstant read_only Texture2D* %61 = OpVariable UniformConstant 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                          i32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %75 = OpConstant 1 
                                          f32 %80 = OpConstant 3.674022E-40 
                                              %85 = OpTypePointer Private %40 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %87 = OpConstant 1 
                                          u32 %88 = OpConstant 2 
                                              %91 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %93 = OpTypePointer Input %6 
                              Private f32_4* %102 = OpVariable Private 
                              Private f32_3* %109 = OpVariable Private 
                                         i32 %112 = OpConstant 3 
                                         i32 %117 = OpConstant 0 
                                             %149 = OpTypePointer Uniform %40 
                              Private f32_3* %162 = OpVariable Private 
                                         i32 %165 = OpConstant 5 
                                Private f32* %174 = OpVariable Private 
                                         u32 %178 = OpConstant 3 
        UniformConstant read_only Texture2D* %182 = OpVariable UniformConstant 
                    UniformConstant sampler* %184 = OpVariable UniformConstant 
                                         f32 %217 = OpConstant 3.674022E-40 
                                       f32_3 %218 = OpConstantComposite %217 %217 %217 
                                         f32 %220 = OpConstant 3.674022E-40 
                                       f32_3 %221 = OpConstantComposite %220 %220 %220 
                                         f32 %227 = OpConstant 3.674022E-40 
                                Private f32* %230 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_2 %259 = OpConstantComposite %258 %258 
                              Private f32_3* %263 = OpVariable Private 
                                         i32 %280 = OpConstant 8 
                                         i32 %303 = OpConstant 4 
                                         i32 %342 = OpConstant 7 
                                Private f32* %364 = OpVariable Private 
                                             %365 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %366 = OpTypePointer UniformConstant %365 
      UniformConstant read_only TextureCube* %367 = OpVariable UniformConstant 
                    UniformConstant sampler* %369 = OpVariable UniformConstant 
                                             %371 = OpTypeSampledImage %365 
                                         f32 %374 = OpConstant 3.674022E-40 
                                         i32 %389 = OpConstant 6 
                                         f32 %404 = OpConstant 3.674022E-40 
                                         f32 %405 = OpConstant 3.674022E-40 
                                         f32 %406 = OpConstant 3.674022E-40 
                                       f32_3 %407 = OpConstantComposite %404 %405 %406 
                                             %418 = OpTypePointer Output %7 
                               Output f32_4* %419 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %50 = OpAccessChain %46 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_2 %53 = OpFMul %39 %52 
                               Uniform f32_4* %54 = OpAccessChain %46 %48 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 2 3 
                                        f32_2 %57 = OpFAdd %53 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                          read_only Texture2D %62 = OpLoad %61 
                                      sampler %64 = OpLoad %63 
                   read_only Texture2DSampled %65 = OpSampledImage %62 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %60 %68 
                                 Uniform f32* %71 = OpAccessChain %46 %69 %36 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpLoad %21 
                                          f32 %74 = OpFMul %72 %73 
                                 Uniform f32* %76 = OpAccessChain %46 %69 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFAdd %74 %77 
                                 Private f32* %79 = OpAccessChain %9 %36 
                                                      OpStore %79 %78 
                                 Private f32* %81 = OpAccessChain %9 %36 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %36 
                                                      OpStore %84 %83 
                                 Uniform f32* %89 = OpAccessChain %46 %87 %88 
                                          f32 %90 = OpLoad %89 
                                   Input f32* %94 = OpAccessChain vs_TEXCOORD1 %88 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFDiv %90 %95 
                                 Private f32* %97 = OpAccessChain %86 %36 
                                                      OpStore %97 %96 
                                        f32_3 %98 = OpLoad %86 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_3 %101 = OpFMul %99 %100 
                                                      OpStore %86 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpLoad %86 
                                       f32_3 %106 = OpFMul %104 %105 
                                       f32_4 %107 = OpLoad %102 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %102 %108 
                                       f32_4 %110 = OpLoad %102 
                                       f32_3 %111 = OpVectorShuffle %110 %110 1 1 1 
                              Uniform f32_4* %113 = OpAccessChain %46 %112 %87 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFMul %111 %115 
                                                      OpStore %109 %116 
                              Uniform f32_4* %118 = OpAccessChain %46 %112 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %102 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 0 0 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %109 
                                       f32_3 %125 = OpFAdd %123 %124 
                                       f32_4 %126 = OpLoad %102 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 6 
                                                      OpStore %102 %127 
                              Uniform f32_4* %128 = OpAccessChain %46 %112 %69 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_4 %131 = OpLoad %102 
                                       f32_3 %132 = OpVectorShuffle %131 %131 2 2 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %102 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                                       f32_3 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %102 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %102 %138 
                                       f32_4 %139 = OpLoad %102 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %46 %112 %112 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %140 %143 
                                       f32_4 %145 = OpLoad %102 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 2 6 
                                                      OpStore %102 %146 
                                       f32_4 %147 = OpLoad %102 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 3 
                              Uniform f32_3* %150 = OpAccessChain %46 %117 
                                       f32_3 %151 = OpLoad %150 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %148 %152 
                                                      OpStore %109 %153 
                                       f32_3 %154 = OpLoad %109 
                                       f32_3 %155 = OpLoad %109 
                                         f32 %156 = OpDot %154 %155 
                                Private f32* %157 = OpAccessChain %86 %36 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %86 %36 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 32 %159 
                                Private f32* %161 = OpAccessChain %86 %36 
                                                      OpStore %161 %160 
                                       f32_4 %163 = OpLoad %102 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 3 
                              Uniform f32_4* %166 = OpAccessChain %46 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFNegate %168 
                                       f32_3 %170 = OpFAdd %164 %169 
                                                      OpStore %162 %170 
                                       f32_3 %171 = OpLoad %162 
                                       f32_3 %172 = OpLoad %162 
                                         f32 %173 = OpDot %171 %172 
                                                      OpStore %21 %173 
                                         f32 %175 = OpLoad %21 
                                         f32 %176 = OpExtInst %1 32 %175 
                                                      OpStore %174 %176 
                                         f32 %177 = OpLoad %21 
                                Uniform f32* %179 = OpAccessChain %46 %165 %178 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %177 %180 
                                                      OpStore %21 %181 
                         read_only Texture2D %183 = OpLoad %182 
                                     sampler %185 = OpLoad %184 
                  read_only Texture2DSampled %186 = OpSampledImage %183 %185 
                                         f32 %187 = OpLoad %21 
                                       f32_2 %188 = OpCompositeConstruct %187 %187 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                         f32 %190 = OpCompositeExtract %189 0 
                                                      OpStore %21 %190 
                                         f32 %191 = OpLoad %174 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %162 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %162 %194 
                                       f32_3 %195 = OpLoad %109 
                                       f32_3 %196 = OpFNegate %195 
                                       f32_3 %197 = OpLoad %86 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %162 
                                       f32_3 %201 = OpFNegate %200 
                                       f32_3 %202 = OpFAdd %199 %201 
                                                      OpStore %109 %202 
                                       f32_3 %203 = OpLoad %109 
                                       f32_3 %204 = OpLoad %109 
                                         f32 %205 = OpDot %203 %204 
                                Private f32* %206 = OpAccessChain %86 %36 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %86 %36 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 32 %208 
                                Private f32* %210 = OpAccessChain %86 %36 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %86 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 0 0 
                                       f32_3 %213 = OpLoad %109 
                                       f32_3 %214 = OpFMul %212 %213 
                                                      OpStore %109 %214 
                                       f32_4 %215 = OpLoad %60 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %219 = OpFMul %216 %218 
                                       f32_3 %222 = OpFAdd %219 %221 
                                       f32_4 %223 = OpLoad %60 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %60 %224 
                                Private f32* %225 = OpAccessChain %60 %178 
                                         f32 %226 = OpLoad %225 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %86 %36 
                                                      OpStore %229 %228 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %60 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %230 %235 
                                         f32 %236 = OpLoad %230 
                                         f32 %237 = OpExtInst %1 32 %236 
                                                      OpStore %230 %237 
                                         f32 %238 = OpLoad %230 
                                       f32_3 %239 = OpCompositeConstruct %238 %238 %238 
                                       f32_4 %240 = OpLoad %60 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %60 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %60 %244 
                                       f32_3 %245 = OpLoad %109 
                                       f32_4 %246 = OpLoad %60 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %245 %247 
                                Private f32* %249 = OpAccessChain %60 %178 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %162 
                                       f32_3 %251 = OpFNegate %250 
                                       f32_4 %252 = OpLoad %60 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %251 %253 
                                Private f32* %255 = OpAccessChain %60 %36 
                                                      OpStore %255 %254 
                                       f32_4 %256 = OpLoad %60 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 3 
                                       f32_2 %260 = OpExtInst %1 40 %257 %259 
                                       f32_4 %261 = OpLoad %60 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 2 3 
                                                      OpStore %60 %262 
                                Private f32* %264 = OpAccessChain %60 %75 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpExtInst %1 30 %265 
                                Private f32* %267 = OpAccessChain %263 %36 
                                                      OpStore %267 %266 
                                Private f32* %268 = OpAccessChain %86 %36 
                                         f32 %269 = OpLoad %268 
                                Private f32* %270 = OpAccessChain %263 %36 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                Private f32* %273 = OpAccessChain %86 %36 
                                                      OpStore %273 %272 
                                Private f32* %274 = OpAccessChain %86 %36 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpExtInst %1 29 %275 
                                Private f32* %277 = OpAccessChain %86 %36 
                                                      OpStore %277 %276 
                                       f32_4 %278 = OpLoad %102 
                                       f32_3 %279 = OpVectorShuffle %278 %278 1 1 1 
                              Uniform f32_4* %281 = OpAccessChain %46 %280 %87 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFMul %279 %283 
                                                      OpStore %263 %284 
                              Uniform f32_4* %285 = OpAccessChain %46 %280 %117 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_4 %288 = OpLoad %102 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 0 0 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_3 %291 = OpLoad %263 
                                       f32_3 %292 = OpFAdd %290 %291 
                                                      OpStore %263 %292 
                              Uniform f32_4* %293 = OpAccessChain %46 %280 %69 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %102 
                                       f32_3 %297 = OpVectorShuffle %296 %296 3 3 3 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %263 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %263 %300 
                                       f32_4 %301 = OpLoad %102 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 3 
                              Uniform f32_4* %304 = OpAccessChain %46 %303 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFNegate %306 
                                       f32_3 %308 = OpFAdd %302 %307 
                                       f32_4 %309 = OpLoad %102 
                                       f32_4 %310 = OpVectorShuffle %309 %308 4 5 2 6 
                                                      OpStore %102 %310 
                                       f32_4 %311 = OpLoad %102 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 3 
                                       f32_4 %313 = OpLoad %102 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 3 
                                         f32 %315 = OpDot %312 %314 
                                Private f32* %316 = OpAccessChain %102 %36 
                                                      OpStore %316 %315 
                                Private f32* %317 = OpAccessChain %102 %36 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpExtInst %1 31 %318 
                                Private f32* %320 = OpAccessChain %102 %36 
                                                      OpStore %320 %319 
                                Private f32* %321 = OpAccessChain %86 %88 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                Private f32* %324 = OpAccessChain %9 %36 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %102 %36 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFAdd %326 %328 
                                Private f32* %330 = OpAccessChain %9 %36 
                                                      OpStore %330 %329 
                                Uniform f32* %331 = OpAccessChain %46 %303 %178 
                                         f32 %332 = OpLoad %331 
                                Private f32* %333 = OpAccessChain %9 %36 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                Private f32* %336 = OpAccessChain %102 %88 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                Private f32* %339 = OpAccessChain %9 %36 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %9 %36 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %343 = OpAccessChain %46 %342 %88 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %341 %344 
                                Uniform f32* %346 = OpAccessChain %46 %342 %178 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFAdd %345 %347 
                                Private f32* %349 = OpAccessChain %9 %36 
                                                      OpStore %349 %348 
                                Private f32* %350 = OpAccessChain %9 %36 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %80 
                                Private f32* %354 = OpAccessChain %9 %36 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %9 %36 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpExtInst %1 43 %356 %258 %80 
                                Private f32* %358 = OpAccessChain %9 %36 
                                                      OpStore %358 %357 
                                       f32_3 %359 = OpLoad %263 
                              Uniform f32_4* %360 = OpAccessChain %46 %280 %112 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_3 %363 = OpFAdd %359 %362 
                                                      OpStore %263 %363 
                       read_only TextureCube %368 = OpLoad %367 
                                     sampler %370 = OpLoad %369 
                read_only TextureCubeSampled %372 = OpSampledImage %368 %370 
                                       f32_3 %373 = OpLoad %263 
                                       f32_4 %375 = OpImageSampleImplicitLod %372 %373 Bias %7 
                                         f32 %376 = OpCompositeExtract %375 3 
                                                      OpStore %364 %376 
                                         f32 %377 = OpLoad %364 
                                         f32 %378 = OpLoad %21 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %21 %379 
                                         f32 %380 = OpLoad %21 
                                                      OpStore %364 %380 
                                         f32 %381 = OpLoad %364 
                                         f32 %382 = OpExtInst %1 43 %381 %258 %80 
                                                      OpStore %364 %382 
                                         f32 %383 = OpLoad %21 
                                Private f32* %384 = OpAccessChain %60 %36 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                                      OpStore %21 %386 
                                         f32 %387 = OpLoad %21 
                                       f32_3 %388 = OpCompositeConstruct %387 %387 %387 
                              Uniform f32_4* %390 = OpAccessChain %46 %389 
                                       f32_4 %391 = OpLoad %390 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_3 %393 = OpFMul %388 %392 
                                       f32_4 %394 = OpLoad %60 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                      OpStore %60 %395 
                                         f32 %396 = OpLoad %364 
                                Private f32* %397 = OpAccessChain %86 %36 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                Private f32* %400 = OpAccessChain %86 %36 
                                                      OpStore %400 %399 
                              Uniform f32_4* %401 = OpAccessChain %46 %389 
                                       f32_4 %402 = OpLoad %401 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                         f32 %408 = OpDot %403 %407 
                                                      OpStore %21 %408 
                                         f32 %409 = OpLoad %21 
                                Private f32* %410 = OpAccessChain %86 %36 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpFMul %409 %411 
                                Private f32* %413 = OpAccessChain %60 %178 
                                                      OpStore %413 %412 
                                       f32_4 %414 = OpLoad %9 
                                       f32_4 %415 = OpVectorShuffle %414 %414 0 0 0 0 
                                       f32_4 %416 = OpLoad %60 
                                       f32_4 %417 = OpFMul %415 %416 
                                                      OpStore %9 %417 
                                       f32_4 %420 = OpLoad %9 
                                       f32_4 %421 = OpFNegate %420 
                                       f32_4 %422 = OpExtInst %1 29 %421 
                                                      OpStore %419 %422 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec2 u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = u_xlat5.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat0.w * 128.0;
    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4 = max(u_xlat5.x, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1.x = (-u_xlat5.z) * u_xlat1.x + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat2 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat8.x = u_xlat2.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat2.w;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat8.x * u_xlat4;
    u_xlat4 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    u_xlat0 = u_xlat1.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 404
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %95 %399 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpDecorate %45 ArrayStride 45 
                                                      OpMemberDecorate %46 0 Offset 46 
                                                      OpMemberDecorate %46 1 Offset 46 
                                                      OpMemberDecorate %46 2 Offset 46 
                                                      OpMemberDecorate %46 3 Offset 46 
                                                      OpMemberDecorate %46 4 Offset 46 
                                                      OpMemberDecorate %46 5 Offset 46 
                                                      OpMemberDecorate %46 6 Offset 46 
                                                      OpMemberDecorate %46 7 Offset 46 
                                                      OpMemberDecorate %46 8 Offset 46 
                                                      OpMemberDecorate %46 9 Offset 46 
                                                      OpDecorate %46 Block 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %65 DescriptorSet 65 
                                                      OpDecorate %65 Binding 65 
                                                      OpDecorate vs_TEXCOORD1 Location 95 
                                                      OpDecorate %344 DescriptorSet 344 
                                                      OpDecorate %344 Binding 344 
                                                      OpDecorate %346 DescriptorSet 346 
                                                      OpDecorate %346 Binding 346 
                                                      OpDecorate %399 Location 399 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %12 
                               Private f32_2* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %38 = OpTypePointer Private %6 
                                              %42 = OpTypeVector %6 3 
                                          u32 %43 = OpConstant 4 
                                              %44 = OpTypeArray %7 %43 
                                              %45 = OpTypeArray %7 %43 
                                              %46 = OpTypeStruct %42 %7 %7 %44 %7 %7 %7 %7 %45 %7 
                                              %47 = OpTypePointer Uniform %46 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %48 = OpVariable Uniform 
                                              %49 = OpTypeInt 32 1 
                                          i32 %50 = OpConstant 9 
                                              %51 = OpTypePointer Uniform %7 
                               Private f32_4* %62 = OpVariable Private 
         UniformConstant read_only Texture2D* %63 = OpVariable UniformConstant 
                     UniformConstant sampler* %65 = OpVariable UniformConstant 
                                          i32 %71 = OpConstant 2 
                                              %72 = OpTypePointer Uniform %6 
                                          u32 %78 = OpConstant 1 
                                          f32 %83 = OpConstant 3.674022E-40 
                                              %88 = OpTypePointer Private %42 
                               Private f32_3* %89 = OpVariable Private 
                                          i32 %90 = OpConstant 1 
                                          u32 %91 = OpConstant 2 
                                              %94 = OpTypePointer Input %42 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %96 = OpTypePointer Input %6 
                              Private f32_4* %105 = OpVariable Private 
                              Private f32_3* %112 = OpVariable Private 
                                         i32 %115 = OpConstant 3 
                                         i32 %120 = OpConstant 0 
                                             %152 = OpTypePointer Uniform %42 
                                         i32 %170 = OpConstant 5 
                                         f32 %190 = OpConstant 3.674022E-40 
                                       f32_3 %191 = OpConstantComposite %190 %190 %190 
                                         f32 %193 = OpConstant 3.674022E-40 
                                       f32_3 %194 = OpConstantComposite %193 %193 %193 
                                         u32 %198 = OpConstant 3 
                                         f32 %201 = OpConstant 3.674022E-40 
                                         f32 %236 = OpConstant 3.674022E-40 
                              Private f32_2* %257 = OpVariable Private 
                                         i32 %260 = OpConstant 8 
                                         i32 %283 = OpConstant 4 
                                         i32 %322 = OpConstant 7 
        UniformConstant read_only Texture2D* %344 = OpVariable UniformConstant 
                    UniformConstant sampler* %346 = OpVariable UniformConstant 
                                         f32 %350 = OpConstant 3.674022E-40 
                                Private f32* %354 = OpVariable Private 
                                         i32 %367 = OpConstant 6 
                                         f32 %382 = OpConstant 3.674022E-40 
                                         f32 %383 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                                       f32_3 %385 = OpConstantComposite %382 %383 %384 
                                             %398 = OpTypePointer Output %7 
                               Output f32_4* %399 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                 Private f32* %39 = OpAccessChain %21 %36 
                                                      OpStore %39 %37 
                                        f32_4 %40 = OpLoad %9 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                               Uniform f32_4* %52 = OpAccessChain %48 %50 
                                        f32_4 %53 = OpLoad %52 
                                        f32_2 %54 = OpVectorShuffle %53 %53 0 1 
                                        f32_2 %55 = OpFMul %41 %54 
                               Uniform f32_4* %56 = OpAccessChain %48 %50 
                                        f32_4 %57 = OpLoad %56 
                                        f32_2 %58 = OpVectorShuffle %57 %57 2 3 
                                        f32_2 %59 = OpFAdd %55 %58 
                                        f32_4 %60 = OpLoad %9 
                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 2 3 
                                                      OpStore %9 %61 
                          read_only Texture2D %64 = OpLoad %63 
                                      sampler %66 = OpLoad %65 
                   read_only Texture2DSampled %67 = OpSampledImage %64 %66 
                                        f32_4 %68 = OpLoad %9 
                                        f32_2 %69 = OpVectorShuffle %68 %68 0 1 
                                        f32_4 %70 = OpImageSampleImplicitLod %67 %69 
                                                      OpStore %62 %70 
                                 Uniform f32* %73 = OpAccessChain %48 %71 %36 
                                          f32 %74 = OpLoad %73 
                                 Private f32* %75 = OpAccessChain %21 %36 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFMul %74 %76 
                                 Uniform f32* %79 = OpAccessChain %48 %71 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %77 %80 
                                 Private f32* %82 = OpAccessChain %9 %36 
                                                      OpStore %82 %81 
                                 Private f32* %84 = OpAccessChain %9 %36 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFDiv %83 %85 
                                 Private f32* %87 = OpAccessChain %9 %36 
                                                      OpStore %87 %86 
                                 Uniform f32* %92 = OpAccessChain %48 %90 %91 
                                          f32 %93 = OpLoad %92 
                                   Input f32* %97 = OpAccessChain vs_TEXCOORD1 %91 
                                          f32 %98 = OpLoad %97 
                                          f32 %99 = OpFDiv %93 %98 
                                Private f32* %100 = OpAccessChain %89 %36 
                                                      OpStore %100 %99 
                                       f32_3 %101 = OpLoad %89 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 0 0 
                                       f32_3 %103 = OpLoad vs_TEXCOORD1 
                                       f32_3 %104 = OpFMul %102 %103 
                                                      OpStore %89 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_3 %108 = OpLoad %89 
                                       f32_3 %109 = OpFMul %107 %108 
                                       f32_4 %110 = OpLoad %105 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 5 6 3 
                                                      OpStore %105 %111 
                                       f32_4 %113 = OpLoad %105 
                                       f32_3 %114 = OpVectorShuffle %113 %113 1 1 1 
                              Uniform f32_4* %116 = OpAccessChain %48 %115 %90 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFMul %114 %118 
                                                      OpStore %112 %119 
                              Uniform f32_4* %121 = OpAccessChain %48 %115 %120 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %105 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 0 0 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_3 %127 = OpLoad %112 
                                       f32_3 %128 = OpFAdd %126 %127 
                                       f32_4 %129 = OpLoad %105 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 2 6 
                                                      OpStore %105 %130 
                              Uniform f32_4* %131 = OpAccessChain %48 %115 %71 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %105 
                                       f32_3 %135 = OpVectorShuffle %134 %134 2 2 2 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_4 %137 = OpLoad %105 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 3 
                                       f32_3 %139 = OpFAdd %136 %138 
                                       f32_4 %140 = OpLoad %105 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 6 
                                                      OpStore %105 %141 
                                       f32_4 %142 = OpLoad %105 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 3 
                              Uniform f32_4* %144 = OpAccessChain %48 %115 %115 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %105 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 2 6 
                                                      OpStore %105 %149 
                                       f32_4 %150 = OpLoad %105 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 3 
                              Uniform f32_3* %153 = OpAccessChain %48 %120 
                                       f32_3 %154 = OpLoad %153 
                                       f32_3 %155 = OpFNegate %154 
                                       f32_3 %156 = OpFAdd %151 %155 
                                                      OpStore %112 %156 
                                       f32_3 %157 = OpLoad %112 
                                       f32_3 %158 = OpLoad %112 
                                         f32 %159 = OpDot %157 %158 
                                Private f32* %160 = OpAccessChain %89 %36 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %89 %36 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 32 %162 
                                Private f32* %164 = OpAccessChain %89 %36 
                                                      OpStore %164 %163 
                                       f32_3 %165 = OpLoad %112 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpLoad %89 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 0 0 
                                       f32_3 %169 = OpFMul %166 %168 
                              Uniform f32_4* %171 = OpAccessChain %48 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFNegate %173 
                                       f32_3 %175 = OpFAdd %169 %174 
                                                      OpStore %112 %175 
                                       f32_3 %176 = OpLoad %112 
                                       f32_3 %177 = OpLoad %112 
                                         f32 %178 = OpDot %176 %177 
                                Private f32* %179 = OpAccessChain %89 %36 
                                                      OpStore %179 %178 
                                Private f32* %180 = OpAccessChain %89 %36 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpExtInst %1 32 %181 
                                Private f32* %183 = OpAccessChain %89 %36 
                                                      OpStore %183 %182 
                                       f32_3 %184 = OpLoad %89 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 0 0 
                                       f32_3 %186 = OpLoad %112 
                                       f32_3 %187 = OpFMul %185 %186 
                                                      OpStore %112 %187 
                                       f32_4 %188 = OpLoad %62 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %195 = OpFAdd %192 %194 
                                       f32_4 %196 = OpLoad %62 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %62 %197 
                                Private f32* %199 = OpAccessChain %62 %198 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpFMul %200 %201 
                                Private f32* %203 = OpAccessChain %89 %36 
                                                      OpStore %203 %202 
                                       f32_4 %204 = OpLoad %62 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_4 %206 = OpLoad %62 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %205 %207 
                                Private f32* %209 = OpAccessChain %21 %36 
                                                      OpStore %209 %208 
                                Private f32* %210 = OpAccessChain %21 %36 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpExtInst %1 32 %211 
                                Private f32* %213 = OpAccessChain %21 %36 
                                                      OpStore %213 %212 
                                       f32_2 %214 = OpLoad %21 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 0 0 
                                       f32_4 %216 = OpLoad %62 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %62 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %62 %220 
                                       f32_3 %221 = OpLoad %112 
                                       f32_4 %222 = OpLoad %62 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                         f32 %224 = OpDot %221 %223 
                                Private f32* %225 = OpAccessChain %21 %36 
                                                      OpStore %225 %224 
                              Uniform f32_4* %226 = OpAccessChain %48 %170 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFNegate %228 
                                       f32_4 %230 = OpLoad %62 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                         f32 %232 = OpDot %229 %231 
                                Private f32* %233 = OpAccessChain %62 %36 
                                                      OpStore %233 %232 
                                Private f32* %234 = OpAccessChain %62 %36 
                                         f32 %235 = OpLoad %234 
                                         f32 %237 = OpExtInst %1 40 %235 %236 
                                Private f32* %238 = OpAccessChain %62 %36 
                                                      OpStore %238 %237 
                                Private f32* %239 = OpAccessChain %21 %36 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpExtInst %1 40 %240 %236 
                                Private f32* %242 = OpAccessChain %21 %36 
                                                      OpStore %242 %241 
                                Private f32* %243 = OpAccessChain %21 %36 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpExtInst %1 30 %244 
                                Private f32* %246 = OpAccessChain %21 %36 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %21 %36 
                                         f32 %248 = OpLoad %247 
                                Private f32* %249 = OpAccessChain %89 %36 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                Private f32* %252 = OpAccessChain %89 %36 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %89 %36 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpExtInst %1 29 %254 
                                Private f32* %256 = OpAccessChain %89 %36 
                                                      OpStore %256 %255 
                                       f32_4 %258 = OpLoad %105 
                                       f32_2 %259 = OpVectorShuffle %258 %258 1 1 
                              Uniform f32_4* %261 = OpAccessChain %48 %260 %90 
                                       f32_4 %262 = OpLoad %261 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %264 = OpFMul %259 %263 
                                                      OpStore %257 %264 
                              Uniform f32_4* %265 = OpAccessChain %48 %260 %120 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_4 %268 = OpLoad %105 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 0 
                                       f32_2 %270 = OpFMul %267 %269 
                                       f32_2 %271 = OpLoad %257 
                                       f32_2 %272 = OpFAdd %270 %271 
                                                      OpStore %257 %272 
                              Uniform f32_4* %273 = OpAccessChain %48 %260 %71 
                                       f32_4 %274 = OpLoad %273 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_4 %276 = OpLoad %105 
                                       f32_2 %277 = OpVectorShuffle %276 %276 3 3 
                                       f32_2 %278 = OpFMul %275 %277 
                                       f32_2 %279 = OpLoad %257 
                                       f32_2 %280 = OpFAdd %278 %279 
                                                      OpStore %257 %280 
                                       f32_4 %281 = OpLoad %105 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 3 
                              Uniform f32_4* %284 = OpAccessChain %48 %283 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFNegate %286 
                                       f32_3 %288 = OpFAdd %282 %287 
                                       f32_4 %289 = OpLoad %105 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 2 6 
                                                      OpStore %105 %290 
                                       f32_4 %291 = OpLoad %105 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 3 
                                       f32_4 %293 = OpLoad %105 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                                         f32 %295 = OpDot %292 %294 
                                Private f32* %296 = OpAccessChain %21 %36 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %21 %36 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpExtInst %1 31 %298 
                                Private f32* %300 = OpAccessChain %21 %36 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %89 %91 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                Private f32* %304 = OpAccessChain %9 %36 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                Private f32* %307 = OpAccessChain %21 %36 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFAdd %306 %308 
                                Private f32* %310 = OpAccessChain %9 %36 
                                                      OpStore %310 %309 
                                Uniform f32* %311 = OpAccessChain %48 %283 %198 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %9 %36 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %105 %91 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFAdd %315 %317 
                                Private f32* %319 = OpAccessChain %9 %36 
                                                      OpStore %319 %318 
                                Private f32* %320 = OpAccessChain %9 %36 
                                         f32 %321 = OpLoad %320 
                                Uniform f32* %323 = OpAccessChain %48 %322 %91 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %321 %324 
                                Uniform f32* %326 = OpAccessChain %48 %322 %198 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFAdd %325 %327 
                                Private f32* %329 = OpAccessChain %9 %36 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %9 %36 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %83 
                                Private f32* %334 = OpAccessChain %9 %36 
                                                      OpStore %334 %333 
                                Private f32* %335 = OpAccessChain %9 %36 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 43 %336 %236 %83 
                                Private f32* %338 = OpAccessChain %9 %36 
                                                      OpStore %338 %337 
                                       f32_2 %339 = OpLoad %257 
                              Uniform f32_4* %340 = OpAccessChain %48 %260 %115 
                                       f32_4 %341 = OpLoad %340 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFAdd %339 %342 
                                                      OpStore %21 %343 
                         read_only Texture2D %345 = OpLoad %344 
                                     sampler %347 = OpLoad %346 
                  read_only Texture2DSampled %348 = OpSampledImage %345 %347 
                                       f32_2 %349 = OpLoad %21 
                                       f32_4 %351 = OpImageSampleImplicitLod %348 %349 Bias %7 
                                         f32 %352 = OpCompositeExtract %351 3 
                                Private f32* %353 = OpAccessChain %21 %36 
                                                      OpStore %353 %352 
                                Private f32* %355 = OpAccessChain %21 %36 
                                         f32 %356 = OpLoad %355 
                                                      OpStore %354 %356 
                                         f32 %357 = OpLoad %354 
                                         f32 %358 = OpExtInst %1 43 %357 %236 %83 
                                                      OpStore %354 %358 
                                Private f32* %359 = OpAccessChain %21 %36 
                                         f32 %360 = OpLoad %359 
                                Private f32* %361 = OpAccessChain %62 %36 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %360 %362 
                                Private f32* %364 = OpAccessChain %21 %36 
                                                      OpStore %364 %363 
                                       f32_2 %365 = OpLoad %21 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                              Uniform f32_4* %368 = OpAccessChain %48 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %366 %370 
                                       f32_4 %372 = OpLoad %62 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %62 %373 
                                         f32 %374 = OpLoad %354 
                                Private f32* %375 = OpAccessChain %89 %36 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %89 %36 
                                                      OpStore %378 %377 
                              Uniform f32_4* %379 = OpAccessChain %48 %367 
                                       f32_4 %380 = OpLoad %379 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                         f32 %386 = OpDot %381 %385 
                                Private f32* %387 = OpAccessChain %21 %36 
                                                      OpStore %387 %386 
                                Private f32* %388 = OpAccessChain %21 %36 
                                         f32 %389 = OpLoad %388 
                                Private f32* %390 = OpAccessChain %89 %36 
                                         f32 %391 = OpLoad %390 
                                         f32 %392 = OpFMul %389 %391 
                                Private f32* %393 = OpAccessChain %62 %198 
                                                      OpStore %393 %392 
                                       f32_4 %394 = OpLoad %9 
                                       f32_4 %395 = OpVectorShuffle %394 %394 0 0 0 0 
                                       f32_4 %396 = OpLoad %62 
                                       f32_4 %397 = OpFMul %395 %396 
                                                      OpStore %9 %397 
                                       f32_4 %400 = OpLoad %9 
                                       f32_4 %401 = OpFNegate %400 
                                       f32_4 %402 = OpExtInst %1 29 %401 
                                                      OpStore %399 %402 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(5) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat5;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat5.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat2 = texture(_CameraNormalsTexture, u_xlat5.xy);
    u_xlat5.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = u_xlat10.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0.x = u_xlat10.x * u_xlat0.x + _LightShadowData.x;
    u_xlat10.x = (-u_xlat0.x) + 1.0;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat5.x = (-u_xlat1.z) * u_xlat5.x + u_xlat15;
    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.w;
    u_xlat15 = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat5.x = u_xlat5.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat0.x = u_xlat15 * u_xlat10.x + u_xlat0.x;
    u_xlat1.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat10.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb1 = u_xlat1.z<0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat4 = texture(_LightTexture0, u_xlat10.xy, -8.0);
    u_xlat10.x = u_xlat1.x * u_xlat4.w;
    u_xlat1.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat10.x = u_xlat10.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat10.x;
    u_xlat10.x = u_xlat0.x;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat2.w * 128.0;
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat10.x * u_xlat0.x;
    u_xlat10.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat10.x * u_xlat0.x;
    u_xlat0 = u_xlat5.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 541
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %35 %94 %536 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD0 Location 35 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %48 DescriptorSet 48 
                                                      OpDecorate %48 Binding 48 
                                                      OpDecorate %67 DescriptorSet 67 
                                                      OpDecorate %67 Binding 67 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %339 DescriptorSet 339 
                                                      OpDecorate %339 Binding 339 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %536 Location 536 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 2 
                                              %32 = OpTypePointer Private %31 
                               Private f32_2* %33 = OpVariable Private 
                                              %34 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %41 = OpVariable Private 
                                              %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %43 = OpTypePointer UniformConstant %42 
         UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                              %46 = OpTypeSampler 
                                              %47 = OpTypePointer UniformConstant %46 
                     UniformConstant sampler* %48 = OpVariable UniformConstant 
                                              %50 = OpTypeSampledImage %42 
                                          i32 %56 = OpConstant 11 
                                              %57 = OpTypePointer Uniform %7 
                               Private f32_4* %66 = OpVariable Private 
         UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
                     UniformConstant sampler* %69 = OpVariable UniformConstant 
                                          i32 %74 = OpConstant 2 
                                          u32 %79 = OpConstant 1 
                               Private f32_2* %88 = OpVariable Private 
                                          i32 %89 = OpConstant 1 
                                          u32 %90 = OpConstant 2 
                                              %93 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %95 = OpTypePointer Input %6 
                              Private f32_4* %100 = OpVariable Private 
                                             %114 = OpTypePointer Private %10 
                              Private f32_3* %115 = OpVariable Private 
                                         i32 %118 = OpConstant 3 
                                         i32 %123 = OpConstant 0 
                              Private f32_4* %145 = OpVariable Private 
                                         i32 %148 = OpConstant 4 
                                             %177 = OpTypePointer Function %10 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                             %190 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %191 = OpTypeSampledImage %190 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         i32 %213 = OpConstant 6 
                                         u32 %237 = OpConstant 3 
                                         i32 %259 = OpConstant 9 
                                         i32 %286 = OpConstant 10 
                                             %328 = OpTypeBool 
                                             %329 = OpTypePointer Private %328 
                               Private bool* %330 = OpVariable Private 
        UniformConstant read_only Texture2D* %337 = OpVariable UniformConstant 
                    UniformConstant sampler* %339 = OpVariable UniformConstant 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         i32 %355 = OpConstant 7 
                                             %363 = OpTypePointer Uniform %10 
                                Private f32* %373 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
                                         f32 %438 = OpConstant 3.674022E-40 
                                       f32_3 %439 = OpConstantComposite %438 %438 %438 
                                         f32 %441 = OpConstant 3.674022E-40 
                                       f32_3 %442 = OpConstantComposite %441 %441 %441 
                                         f32 %448 = OpConstant 3.674022E-40 
                                Private f32* %450 = OpVariable Private 
                                         i32 %487 = OpConstant 8 
                                         f32 %519 = OpConstant 3.674022E-40 
                                         f32 %520 = OpConstant 3.674022E-40 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_3 %522 = OpConstantComposite %519 %520 %521 
                                             %535 = OpTypePointer Output %7 
                               Output f32_4* %536 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %178 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                 Private f32* %30 = OpAccessChain %9 %22 
                                                      OpStore %30 %28 
                                        f32_4 %36 = OpLoad vs_TEXCOORD0 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 3 3 
                                        f32_2 %40 = OpFDiv %37 %39 
                                                      OpStore %33 %40 
                          read_only Texture2D %45 = OpLoad %44 
                                      sampler %49 = OpLoad %48 
                   read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                        f32_2 %52 = OpLoad %33 
                                        f32_4 %53 = OpImageSampleImplicitLod %51 %52 
                                          f32 %54 = OpCompositeExtract %53 0 
                                                      OpStore %41 %54 
                                        f32_2 %55 = OpLoad %33 
                               Uniform f32_4* %58 = OpAccessChain %19 %56 
                                        f32_4 %59 = OpLoad %58 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_2 %61 = OpFMul %55 %60 
                               Uniform f32_4* %62 = OpAccessChain %19 %56 
                                        f32_4 %63 = OpLoad %62 
                                        f32_2 %64 = OpVectorShuffle %63 %63 2 3 
                                        f32_2 %65 = OpFAdd %61 %64 
                                                      OpStore %33 %65 
                          read_only Texture2D %68 = OpLoad %67 
                                      sampler %70 = OpLoad %69 
                   read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                                        f32_2 %72 = OpLoad %33 
                                        f32_4 %73 = OpImageSampleImplicitLod %71 %72 
                                                      OpStore %66 %73 
                                 Uniform f32* %75 = OpAccessChain %19 %74 %22 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpLoad %41 
                                          f32 %78 = OpFMul %76 %77 
                                 Uniform f32* %80 = OpAccessChain %19 %74 %79 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFAdd %78 %81 
                                 Private f32* %83 = OpAccessChain %33 %22 
                                                      OpStore %83 %82 
                                 Private f32* %84 = OpAccessChain %33 %22 
                                          f32 %85 = OpLoad %84 
                                          f32 %86 = OpFDiv %27 %85 
                                 Private f32* %87 = OpAccessChain %33 %22 
                                                      OpStore %87 %86 
                                 Uniform f32* %91 = OpAccessChain %19 %89 %90 
                                          f32 %92 = OpLoad %91 
                                   Input f32* %96 = OpAccessChain vs_TEXCOORD1 %90 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpFDiv %92 %97 
                                 Private f32* %99 = OpAccessChain %88 %22 
                                                      OpStore %99 %98 
                                       f32_2 %101 = OpLoad %88 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 0 0 
                                       f32_3 %103 = OpLoad vs_TEXCOORD1 
                                       f32_3 %104 = OpFMul %102 %103 
                                       f32_4 %105 = OpLoad %100 
                                       f32_4 %106 = OpVectorShuffle %105 %104 4 5 6 3 
                                                      OpStore %100 %106 
                                       f32_2 %107 = OpLoad %33 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 0 0 
                                       f32_4 %109 = OpLoad %100 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %100 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %100 %113 
                                       f32_4 %116 = OpLoad %100 
                                       f32_3 %117 = OpVectorShuffle %116 %116 1 1 1 
                              Uniform f32_4* %119 = OpAccessChain %19 %118 %89 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFMul %117 %121 
                                                      OpStore %115 %122 
                              Uniform f32_4* %124 = OpAccessChain %19 %118 %123 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %100 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_3 %130 = OpLoad %115 
                                       f32_3 %131 = OpFAdd %129 %130 
                                                      OpStore %115 %131 
                              Uniform f32_4* %132 = OpAccessChain %19 %118 %74 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_4 %135 = OpLoad %100 
                                       f32_3 %136 = OpVectorShuffle %135 %135 3 3 3 
                                       f32_3 %137 = OpFMul %134 %136 
                                       f32_3 %138 = OpLoad %115 
                                       f32_3 %139 = OpFAdd %137 %138 
                                                      OpStore %115 %139 
                                       f32_3 %140 = OpLoad %115 
                              Uniform f32_4* %141 = OpAccessChain %19 %118 %118 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %140 %143 
                                                      OpStore %115 %144 
                                       f32_3 %146 = OpLoad %115 
                                       f32_4 %147 = OpVectorShuffle %146 %146 1 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %19 %148 %89 
                                       f32_4 %150 = OpLoad %149 
                                       f32_4 %151 = OpFMul %147 %150 
                                                      OpStore %145 %151 
                              Uniform f32_4* %152 = OpAccessChain %19 %148 %123 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpLoad %115 
                                       f32_4 %155 = OpVectorShuffle %154 %154 0 0 0 0 
                                       f32_4 %156 = OpFMul %153 %155 
                                       f32_4 %157 = OpLoad %145 
                                       f32_4 %158 = OpFAdd %156 %157 
                                                      OpStore %145 %158 
                              Uniform f32_4* %159 = OpAccessChain %19 %148 %74 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpLoad %115 
                                       f32_4 %162 = OpVectorShuffle %161 %161 2 2 2 2 
                                       f32_4 %163 = OpFMul %160 %162 
                                       f32_4 %164 = OpLoad %145 
                                       f32_4 %165 = OpFAdd %163 %164 
                                                      OpStore %145 %165 
                                       f32_4 %166 = OpLoad %145 
                              Uniform f32_4* %167 = OpAccessChain %19 %148 %118 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpFAdd %166 %168 
                                                      OpStore %145 %169 
                                       f32_4 %170 = OpLoad %145 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                       f32_4 %172 = OpLoad %145 
                                       f32_3 %173 = OpVectorShuffle %172 %172 3 3 3 
                                       f32_3 %174 = OpFDiv %171 %173 
                                       f32_4 %175 = OpLoad %145 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %145 %176 
                                       f32_4 %179 = OpLoad %145 
                                       f32_2 %180 = OpVectorShuffle %179 %179 0 1 
                                Private f32* %181 = OpAccessChain %145 %90 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpCompositeExtract %180 0 
                                         f32 %184 = OpCompositeExtract %180 1 
                                       f32_3 %185 = OpCompositeConstruct %183 %184 %182 
                                                      OpStore %178 %185 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %192 = OpSampledImage %187 %189 
                                       f32_3 %193 = OpLoad %178 
                                         f32 %195 = OpCompositeExtract %193 2 
                                         f32 %196 = OpImageSampleDrefExplicitLod %192 %193 %195 Lod %6 
                                Private f32* %197 = OpAccessChain %88 %22 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %88 %22 
                                         f32 %199 = OpLoad %198 
                                Private f32* %200 = OpAccessChain %9 %22 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %199 %201 
                                Uniform f32* %203 = OpAccessChain %19 %21 %22 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %202 %204 
                                Private f32* %206 = OpAccessChain %9 %22 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %9 %22 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %209 %27 
                                Private f32* %211 = OpAccessChain %88 %22 
                                                      OpStore %211 %210 
                                       f32_3 %212 = OpLoad %115 
                              Uniform f32_4* %214 = OpAccessChain %19 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %212 %217 
                                       f32_4 %219 = OpLoad %145 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %145 %220 
                                       f32_4 %221 = OpLoad %145 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %145 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %41 %225 
                                         f32 %226 = OpLoad %41 
                                         f32 %227 = OpExtInst %1 31 %226 
                                                      OpStore %41 %227 
                                Private f32* %228 = OpAccessChain %100 %90 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                Private f32* %231 = OpAccessChain %33 %22 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpFMul %230 %232 
                                         f32 %234 = OpLoad %41 
                                         f32 %235 = OpFAdd %233 %234 
                                Private f32* %236 = OpAccessChain %33 %22 
                                                      OpStore %236 %235 
                                Uniform f32* %238 = OpAccessChain %19 %213 %237 
                                         f32 %239 = OpLoad %238 
                                Private f32* %240 = OpAccessChain %33 %22 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                Private f32* %243 = OpAccessChain %100 %237 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFAdd %242 %244 
                                Private f32* %246 = OpAccessChain %33 %22 
                                                      OpStore %246 %245 
                                Private f32* %247 = OpAccessChain %33 %22 
                                         f32 %248 = OpLoad %247 
                                Uniform f32* %249 = OpAccessChain %19 %21 %90 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                Uniform f32* %252 = OpAccessChain %19 %21 %237 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFAdd %251 %253 
                                                      OpStore %41 %254 
                                         f32 %255 = OpLoad %41 
                                         f32 %256 = OpExtInst %1 43 %255 %194 %27 
                                                      OpStore %41 %256 
                                Private f32* %257 = OpAccessChain %33 %22 
                                         f32 %258 = OpLoad %257 
                                Uniform f32* %260 = OpAccessChain %19 %259 %90 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpFMul %258 %261 
                                Uniform f32* %263 = OpAccessChain %19 %259 %237 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFAdd %262 %264 
                                Private f32* %266 = OpAccessChain %33 %22 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %33 %22 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFNegate %268 
                                         f32 %270 = OpFAdd %269 %27 
                                Private f32* %271 = OpAccessChain %33 %22 
                                                      OpStore %271 %270 
                                Private f32* %272 = OpAccessChain %33 %22 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpExtInst %1 43 %273 %194 %27 
                                Private f32* %275 = OpAccessChain %33 %22 
                                                      OpStore %275 %274 
                                         f32 %276 = OpLoad %41 
                                Private f32* %277 = OpAccessChain %88 %22 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %276 %278 
                                Private f32* %280 = OpAccessChain %9 %22 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFAdd %279 %281 
                                Private f32* %283 = OpAccessChain %9 %22 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %115 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                              Uniform f32_4* %287 = OpAccessChain %19 %286 %89 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 3 
                                       f32_3 %290 = OpFMul %285 %289 
                                       f32_4 %291 = OpLoad %100 
                                       f32_4 %292 = OpVectorShuffle %291 %290 4 5 6 3 
                                                      OpStore %100 %292 
                              Uniform f32_4* %293 = OpAccessChain %19 %286 %123 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 3 
                                       f32_3 %296 = OpLoad %115 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %100 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFAdd %298 %300 
                                       f32_4 %302 = OpLoad %100 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %100 %303 
                              Uniform f32_4* %304 = OpAccessChain %19 %286 %74 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 3 
                                       f32_3 %307 = OpLoad %115 
                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %100 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFAdd %309 %311 
                                       f32_4 %313 = OpLoad %100 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %100 %314 
                                       f32_4 %315 = OpLoad %100 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                              Uniform f32_4* %317 = OpAccessChain %19 %286 %118 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 3 
                                       f32_3 %320 = OpFAdd %316 %319 
                                       f32_4 %321 = OpLoad %100 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %100 %322 
                                       f32_4 %323 = OpLoad %100 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                                       f32_4 %325 = OpLoad %100 
                                       f32_2 %326 = OpVectorShuffle %325 %325 2 2 
                                       f32_2 %327 = OpFDiv %324 %326 
                                                      OpStore %88 %327 
                                Private f32* %331 = OpAccessChain %100 %90 
                                         f32 %332 = OpLoad %331 
                                        bool %333 = OpFOrdLessThan %332 %194 
                                                      OpStore %330 %333 
                                        bool %334 = OpLoad %330 
                                         f32 %335 = OpSelect %334 %27 %194 
                                Private f32* %336 = OpAccessChain %100 %22 
                                                      OpStore %336 %335 
                         read_only Texture2D %338 = OpLoad %337 
                                     sampler %340 = OpLoad %339 
                  read_only Texture2DSampled %341 = OpSampledImage %338 %340 
                                       f32_2 %342 = OpLoad %88 
                                       f32_4 %344 = OpImageSampleImplicitLod %341 %342 Bias %7 
                                         f32 %345 = OpCompositeExtract %344 3 
                                Private f32* %346 = OpAccessChain %88 %22 
                                                      OpStore %346 %345 
                                Private f32* %347 = OpAccessChain %100 %22 
                                         f32 %348 = OpLoad %347 
                                Private f32* %349 = OpAccessChain %88 %22 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFMul %348 %350 
                                Private f32* %352 = OpAccessChain %88 %22 
                                                      OpStore %352 %351 
                                       f32_3 %353 = OpLoad %115 
                                       f32_3 %354 = OpFNegate %353 
                              Uniform f32_4* %356 = OpAccessChain %19 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFAdd %354 %358 
                                       f32_4 %360 = OpLoad %100 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %100 %361 
                                       f32_3 %362 = OpLoad %115 
                              Uniform f32_3* %364 = OpAccessChain %19 %123 
                                       f32_3 %365 = OpLoad %364 
                                       f32_3 %366 = OpFNegate %365 
                                       f32_3 %367 = OpFAdd %362 %366 
                                                      OpStore %115 %367 
                                       f32_4 %368 = OpLoad %100 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_4 %370 = OpLoad %100 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                         f32 %372 = OpDot %369 %371 
                                                      OpStore %41 %372 
                                         f32 %374 = OpLoad %41 
                                Uniform f32* %375 = OpAccessChain %19 %355 %237 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %373 %377 
                                         f32 %378 = OpLoad %41 
                                         f32 %379 = OpExtInst %1 32 %378 
                                                      OpStore %41 %379 
                                         f32 %380 = OpLoad %41 
                                       f32_3 %381 = OpCompositeConstruct %380 %380 %380 
                                       f32_4 %382 = OpLoad %100 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %100 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %100 %386 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %391 = OpSampledImage %388 %390 
                                         f32 %392 = OpLoad %373 
                                       f32_2 %393 = OpCompositeConstruct %392 %392 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                         f32 %395 = OpCompositeExtract %394 0 
                                                      OpStore %41 %395 
                                         f32 %396 = OpLoad %41 
                                Private f32* %397 = OpAccessChain %88 %22 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                Private f32* %400 = OpAccessChain %88 %22 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %9 %22 
                                         f32 %402 = OpLoad %401 
                                Private f32* %403 = OpAccessChain %88 %22 
                                         f32 %404 = OpLoad %403 
                                         f32 %405 = OpFMul %402 %404 
                                Private f32* %406 = OpAccessChain %9 %22 
                                                      OpStore %406 %405 
                                Private f32* %407 = OpAccessChain %9 %22 
                                         f32 %408 = OpLoad %407 
                                Private f32* %409 = OpAccessChain %88 %22 
                                                      OpStore %409 %408 
                                Private f32* %410 = OpAccessChain %88 %22 
                                         f32 %411 = OpLoad %410 
                                         f32 %412 = OpExtInst %1 43 %411 %194 %27 
                                Private f32* %413 = OpAccessChain %88 %22 
                                                      OpStore %413 %412 
                                       f32_3 %414 = OpLoad %115 
                                       f32_3 %415 = OpLoad %115 
                                         f32 %416 = OpDot %414 %415 
                                                      OpStore %41 %416 
                                         f32 %417 = OpLoad %41 
                                         f32 %418 = OpExtInst %1 32 %417 
                                                      OpStore %41 %418 
                                       f32_3 %419 = OpLoad %115 
                                       f32_3 %420 = OpFNegate %419 
                                         f32 %421 = OpLoad %41 
                                       f32_3 %422 = OpCompositeConstruct %421 %421 %421 
                                       f32_3 %423 = OpFMul %420 %422 
                                       f32_4 %424 = OpLoad %100 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_3 %426 = OpFAdd %423 %425 
                                                      OpStore %115 %426 
                                       f32_3 %427 = OpLoad %115 
                                       f32_3 %428 = OpLoad %115 
                                         f32 %429 = OpDot %427 %428 
                                                      OpStore %41 %429 
                                         f32 %430 = OpLoad %41 
                                         f32 %431 = OpExtInst %1 32 %430 
                                                      OpStore %41 %431 
                                         f32 %432 = OpLoad %41 
                                       f32_3 %433 = OpCompositeConstruct %432 %432 %432 
                                       f32_3 %434 = OpLoad %115 
                                       f32_3 %435 = OpFMul %433 %434 
                                                      OpStore %115 %435 
                                       f32_4 %436 = OpLoad %66 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %440 = OpFMul %437 %439 
                                       f32_3 %443 = OpFAdd %440 %442 
                                       f32_4 %444 = OpLoad %66 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %66 %445 
                                Private f32* %446 = OpAccessChain %66 %237 
                                         f32 %447 = OpLoad %446 
                                         f32 %449 = OpFMul %447 %448 
                                                      OpStore %41 %449 
                                       f32_4 %451 = OpLoad %66 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                       f32_4 %453 = OpLoad %66 
                                       f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                                         f32 %455 = OpDot %452 %454 
                                                      OpStore %450 %455 
                                         f32 %456 = OpLoad %450 
                                         f32 %457 = OpExtInst %1 32 %456 
                                                      OpStore %450 %457 
                                         f32 %458 = OpLoad %450 
                                       f32_3 %459 = OpCompositeConstruct %458 %458 %458 
                                       f32_4 %460 = OpLoad %66 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_4 %463 = OpLoad %66 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 6 3 
                                                      OpStore %66 %464 
                                       f32_3 %465 = OpLoad %115 
                                       f32_4 %466 = OpLoad %66 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %450 %468 
                                       f32_4 %469 = OpLoad %100 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_4 %471 = OpLoad %66 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                         f32 %473 = OpDot %470 %472 
                                Private f32* %474 = OpAccessChain %66 %22 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %66 %22 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpExtInst %1 40 %476 %194 
                                Private f32* %478 = OpAccessChain %66 %22 
                                                      OpStore %478 %477 
                                Private f32* %479 = OpAccessChain %9 %22 
                                         f32 %480 = OpLoad %479 
                                Private f32* %481 = OpAccessChain %66 %22 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                Private f32* %484 = OpAccessChain %9 %22 
                                                      OpStore %484 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 0 0 
                              Uniform f32_4* %488 = OpAccessChain %19 %487 
                                       f32_4 %489 = OpLoad %488 
                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                       f32_3 %491 = OpFMul %486 %490 
                                       f32_4 %492 = OpLoad %100 
                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 6 3 
                                                      OpStore %100 %493 
                                         f32 %494 = OpLoad %450 
                                         f32 %495 = OpExtInst %1 40 %494 %194 
                                Private f32* %496 = OpAccessChain %9 %22 
                                                      OpStore %496 %495 
                                Private f32* %497 = OpAccessChain %9 %22 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpExtInst %1 30 %498 
                                Private f32* %500 = OpAccessChain %9 %22 
                                                      OpStore %500 %499 
                                Private f32* %501 = OpAccessChain %9 %22 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpLoad %41 
                                         f32 %504 = OpFMul %502 %503 
                                Private f32* %505 = OpAccessChain %9 %22 
                                                      OpStore %505 %504 
                                Private f32* %506 = OpAccessChain %9 %22 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpExtInst %1 29 %507 
                                Private f32* %509 = OpAccessChain %9 %22 
                                                      OpStore %509 %508 
                                Private f32* %510 = OpAccessChain %88 %22 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %9 %22 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                Private f32* %515 = OpAccessChain %9 %22 
                                                      OpStore %515 %514 
                              Uniform f32_4* %516 = OpAccessChain %19 %487 
                                       f32_4 %517 = OpLoad %516 
                                       f32_3 %518 = OpVectorShuffle %517 %517 0 1 2 
                                         f32 %523 = OpDot %518 %522 
                                Private f32* %524 = OpAccessChain %88 %22 
                                                      OpStore %524 %523 
                                Private f32* %525 = OpAccessChain %88 %22 
                                         f32 %526 = OpLoad %525 
                                Private f32* %527 = OpAccessChain %9 %22 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFMul %526 %528 
                                Private f32* %530 = OpAccessChain %100 %237 
                                                      OpStore %530 %529 
                                       f32_2 %531 = OpLoad %33 
                                       f32_4 %532 = OpVectorShuffle %531 %531 0 0 0 0 
                                       f32_4 %533 = OpLoad %100 
                                       f32_4 %534 = OpFMul %532 %533 
                                                      OpStore %9 %534 
                                       f32_4 %537 = OpLoad %9 
                                       f32_4 %538 = OpFNegate %537 
                                       f32_4 %539 = OpExtInst %1 29 %538 
                                                      OpStore %536 %539 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(5) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
vec2 u_xlat22;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat4 = texture(_LightTexture0, u_xlat3.xy, -8.0);
    u_xlatb28 = u_xlat3.z<0.0;
    u_xlat28 = u_xlatb28 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat4.w;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat19 = u_xlat28 * u_xlat3.x;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
        u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
        u_xlat4.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat4.xy = floor(u_xlat4.xy);
        u_xlat3.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat4.xy);
        u_xlat5 = u_xlat3.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat6.xw = u_xlat5.xz * u_xlat5.xz;
        u_xlat22.xy = u_xlat6.xw * vec2(0.5, 0.5) + (-u_xlat3.xy);
        u_xlat5.xz = (-u_xlat3.xy) + vec2(1.0, 1.0);
        u_xlat7.xy = min(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat5.xz = (-u_xlat7.xy) * u_xlat7.xy + u_xlat5.xz;
        u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat5.yw;
        u_xlat7.x = u_xlat22.x;
        u_xlat7.y = u_xlat5.x;
        u_xlat7.z = u_xlat3.x;
        u_xlat7.w = u_xlat6.x;
        u_xlat7 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6.x = u_xlat22.y;
        u_xlat6.y = u_xlat5.z;
        u_xlat6.z = u_xlat3.y;
        u_xlat5 = u_xlat6 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6 = u_xlat7.ywyw + u_xlat7.xzxz;
        u_xlat8 = u_xlat5.yyww + u_xlat5.xxzz;
        u_xlat3.xy = u_xlat7.yw / u_xlat6.zw;
        u_xlat3.xy = u_xlat3.xy + vec2(-1.5, 0.5);
        u_xlat22.xy = u_xlat5.yw / u_xlat8.yw;
        u_xlat22.xy = u_xlat22.xy + vec2(-1.5, 0.5);
        u_xlat5.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat5.zw = u_xlat22.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat6 = u_xlat6 * u_xlat8;
        u_xlat7 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xzyz;
        vec3 txVec0 = vec3(u_xlat7.xy,u_xlat3.z);
        u_xlat20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat7.zw,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat3.x = u_xlat3.x * u_xlat6.y;
        u_xlat20 = u_xlat6.x * u_xlat20 + u_xlat3.x;
        u_xlat4 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwyw;
        vec3 txVec2 = vec3(u_xlat4.xy,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat20 = u_xlat6.z * u_xlat3.x + u_xlat20;
        vec3 txVec3 = vec3(u_xlat4.zw,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat20 = u_xlat6.w * u_xlat3.x + u_xlat20;
        u_xlat3.x = (-_LightShadowData.x) + 1.0;
        u_xlat20 = u_xlat20 * u_xlat3.x + _LightShadowData.x;
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat3.x = (-u_xlat20) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat3.x + u_xlat20;
    u_xlat19 = u_xlat28 * u_xlat19;
    u_xlat1.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat3 = texture(_CameraNormalsTexture, u_xlat1.xy);
    u_xlat1.xyw = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat20);
    u_xlat20 = dot(u_xlat9.xyz, u_xlat1.xyw);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = (-u_xlat2.xyw) * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat1.xyw);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlat18 = u_xlat3.w * 128.0;
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat18 = u_xlat19;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat9.x = u_xlat18 * u_xlat9.x;
    u_xlat18 = u_xlat19 * u_xlat20;
    u_xlat1.xyz = vec3(u_xlat18) * _LightColor.xyz;
    u_xlat18 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat18 * u_xlat9.x;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 807
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %43 %802 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 43 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %235 DescriptorSet 235 
                                                      OpDecorate %235 Binding 235 
                                                      OpDecorate %237 DescriptorSet 237 
                                                      OpDecorate %237 Binding 237 
                                                      OpDecorate %262 DescriptorSet 262 
                                                      OpDecorate %262 Binding 262 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %511 DescriptorSet 511 
                                                      OpDecorate %511 Binding 511 
                                                      OpDecorate %513 DescriptorSet 513 
                                                      OpDecorate %513 Binding 513 
                                                      OpDecorate %641 DescriptorSet 641 
                                                      OpDecorate %641 Binding 641 
                                                      OpDecorate %643 DescriptorSet 643 
                                                      OpDecorate %643 Binding 643 
                                                      OpDecorate %802 Location 802 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %7 %16 %7 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                               Private f32_4* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %44 = OpTypeVector %6 2 
                                 Private f32* %52 = OpVariable Private 
                                              %53 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %54 = OpTypePointer UniformConstant %53 
         UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampler 
                                              %58 = OpTypePointer UniformConstant %57 
                     UniformConstant sampler* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampledImage %53 
                                          i32 %67 = OpConstant 2 
                                          u32 %72 = OpConstant 1 
                                          f32 %76 = OpConstant 3.674022E-40 
                               Private f32_4* %79 = OpVariable Private 
                               Private f32_4* %87 = OpVariable Private 
                                          i32 %90 = OpConstant 3 
                                              %91 = OpTypePointer Uniform %7 
                                          i32 %98 = OpConstant 0 
                                         i32 %131 = OpConstant 6 
                                         u32 %158 = OpConstant 3 
                                             %168 = OpTypePointer Private %10 
                              Private f32_3* %169 = OpVariable Private 
                                         i32 %173 = OpConstant 7 
                                Private f32* %178 = OpVariable Private 
                                Private f32* %182 = OpVariable Private 
                                         i32 %191 = OpConstant 10 
        UniformConstant read_only Texture2D* %235 = OpVariable UniformConstant 
                    UniformConstant sampler* %237 = OpVariable UniformConstant 
                                         f32 %242 = OpConstant 3.674022E-40 
                                             %245 = OpTypeBool 
                                             %246 = OpTypePointer Private %245 
                               Private bool* %247 = OpVariable Private 
                                         f32 %250 = OpConstant 3.674022E-40 
                                Private f32* %252 = OpVariable Private 
        UniformConstant read_only Texture2D* %262 = OpVariable UniformConstant 
                    UniformConstant sampler* %264 = OpVariable UniformConstant 
                                         i32 %276 = OpConstant 5 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 4 
                              Private f32_4* %322 = OpVariable Private 
                                         i32 %325 = OpConstant 11 
                                         f32 %330 = OpConstant 3.674022E-40 
                                       f32_2 %331 = OpConstantComposite %330 %330 
                              Private f32_4* %352 = OpVariable Private 
                                       f32_4 %355 = OpConstantComposite %330 %76 %330 %76 
                              Private f32_4* %357 = OpVariable Private 
                                             %365 = OpTypePointer Private %44 
                              Private f32_2* %366 = OpVariable Private 
                                       f32_2 %377 = OpConstantComposite %76 %76 
                              Private f32_4* %381 = OpVariable Private 
                                       f32_2 %384 = OpConstantComposite %250 %250 
                                         f32 %428 = OpConstant 3.674022E-40 
                                         f32 %429 = OpConstant 3.674022E-40 
                                       f32_4 %430 = OpConstantComposite %428 %428 %428 %429 
                              Private f32_4* %448 = OpVariable Private 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_2 %464 = OpConstantComposite %463 %330 
                                             %502 = OpTypePointer Function %10 
        UniformConstant read_only Texture2D* %511 = OpVariable UniformConstant 
                    UniformConstant sampler* %513 = OpVariable UniformConstant 
                                             %515 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %516 = OpTypeSampledImage %515 
                                         i32 %630 = OpConstant 12 
        UniformConstant read_only Texture2D* %641 = OpVariable UniformConstant 
                    UniformConstant sampler* %643 = OpVariable UniformConstant 
                                         f32 %651 = OpConstant 3.674022E-40 
                                       f32_3 %652 = OpConstantComposite %651 %651 %651 
                                         f32 %654 = OpConstant 3.674022E-40 
                                       f32_3 %655 = OpConstantComposite %654 %654 %654 
                                             %681 = OpTypePointer Uniform %10 
                                Private f32* %727 = OpVariable Private 
                                         f32 %730 = OpConstant 3.674022E-40 
                                         i32 %758 = OpConstant 8 
                                         f32 %768 = OpConstant 3.674022E-40 
                                         f32 %769 = OpConstant 3.674022E-40 
                                         f32 %770 = OpConstant 3.674022E-40 
                                       f32_3 %771 = OpConstantComposite %768 %769 %770 
                                         i32 %780 = OpConstant 9 
                                             %801 = OpTypePointer Output %7 
                               Output f32_4* %802 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %503 = OpVariable Function 
                             Function f32_3* %521 = OpVariable Function 
                             Function f32_3* %558 = OpVariable Function 
                             Function f32_3* %580 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_4 %47 = OpLoad vs_TEXCOORD0 
                                        f32_2 %48 = OpVectorShuffle %47 %47 3 3 
                                        f32_2 %49 = OpFDiv %46 %48 
                                        f32_4 %50 = OpLoad %41 
                                        f32_4 %51 = OpVectorShuffle %50 %49 4 5 2 3 
                                                      OpStore %41 %51 
                          read_only Texture2D %56 = OpLoad %55 
                                      sampler %60 = OpLoad %59 
                   read_only Texture2DSampled %62 = OpSampledImage %56 %60 
                                        f32_4 %63 = OpLoad %41 
                                        f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                                        f32_4 %65 = OpImageSampleImplicitLod %62 %64 
                                          f32 %66 = OpCompositeExtract %65 0 
                                                      OpStore %52 %66 
                                 Uniform f32* %68 = OpAccessChain %19 %67 %32 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpLoad %52 
                                          f32 %71 = OpFMul %69 %70 
                                 Uniform f32* %73 = OpAccessChain %19 %67 %72 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %71 %74 
                                                      OpStore %52 %75 
                                          f32 %77 = OpLoad %52 
                                          f32 %78 = OpFDiv %76 %77 
                                                      OpStore %52 %78 
                                          f32 %80 = OpLoad %52 
                                        f32_3 %81 = OpCompositeConstruct %80 %80 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                                        f32_3 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %79 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %79 %86 
                                        f32_4 %88 = OpLoad %79 
                                        f32_3 %89 = OpVectorShuffle %88 %88 1 1 1 
                               Uniform f32_4* %92 = OpAccessChain %19 %90 %21 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %89 %94 
                                        f32_4 %96 = OpLoad %87 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %87 %97 
                               Uniform f32_4* %99 = OpAccessChain %19 %90 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_4 %102 = OpLoad %79 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %87 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                       f32_3 %107 = OpFAdd %104 %106 
                                       f32_4 %108 = OpLoad %79 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 2 6 
                                                      OpStore %79 %109 
                              Uniform f32_4* %110 = OpAccessChain %19 %90 %67 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                       f32_4 %113 = OpLoad %79 
                                       f32_3 %114 = OpVectorShuffle %113 %113 2 2 2 
                                       f32_3 %115 = OpFMul %112 %114 
                                       f32_4 %116 = OpLoad %79 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                                       f32_3 %118 = OpFAdd %115 %117 
                                       f32_4 %119 = OpLoad %79 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %79 %120 
                                       f32_4 %121 = OpLoad %79 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 3 
                              Uniform f32_4* %123 = OpAccessChain %19 %90 %90 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %122 %125 
                                       f32_4 %127 = OpLoad %79 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 2 6 
                                                      OpStore %79 %128 
                                       f32_4 %129 = OpLoad %79 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %19 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFNegate %134 
                                       f32_3 %136 = OpFAdd %130 %135 
                                       f32_4 %137 = OpLoad %87 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 6 3 
                                                      OpStore %87 %138 
                                       f32_4 %139 = OpLoad %87 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %87 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                Private f32* %144 = OpAccessChain %9 %32 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %9 %32 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 31 %146 
                                Private f32* %148 = OpAccessChain %9 %32 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %9 %22 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %152 = OpLoad %52 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %154 = OpAccessChain %9 %32 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %153 %155 
                                Private f32* %157 = OpAccessChain %9 %32 
                                                      OpStore %157 %156 
                                Uniform f32* %159 = OpAccessChain %19 %131 %158 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %32 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %79 %22 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %32 
                                                      OpStore %167 %166 
                                       f32_4 %170 = OpLoad %79 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 3 
                                       f32_3 %172 = OpFNegate %171 
                              Uniform f32_4* %174 = OpAccessChain %19 %173 
                                       f32_4 %175 = OpLoad %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_3 %177 = OpFAdd %172 %176 
                                                      OpStore %169 %177 
                                       f32_3 %179 = OpLoad %169 
                                       f32_3 %180 = OpLoad %169 
                                         f32 %181 = OpDot %179 %180 
                                                      OpStore %178 %181 
                                         f32 %183 = OpLoad %178 
                                         f32 %184 = OpExtInst %1 32 %183 
                                                      OpStore %182 %184 
                                       f32_3 %185 = OpLoad %169 
                                         f32 %186 = OpLoad %182 
                                       f32_3 %187 = OpCompositeConstruct %186 %186 %186 
                                       f32_3 %188 = OpFMul %185 %187 
                                                      OpStore %169 %188 
                                       f32_4 %189 = OpLoad %79 
                                       f32_3 %190 = OpVectorShuffle %189 %189 1 1 1 
                              Uniform f32_4* %192 = OpAccessChain %19 %191 %21 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 3 
                                       f32_3 %195 = OpFMul %190 %194 
                                       f32_4 %196 = OpLoad %87 
                                       f32_4 %197 = OpVectorShuffle %196 %195 4 5 6 3 
                                                      OpStore %87 %197 
                              Uniform f32_4* %198 = OpAccessChain %19 %191 %98 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 3 
                                       f32_4 %201 = OpLoad %79 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 0 0 
                                       f32_3 %203 = OpFMul %200 %202 
                                       f32_4 %204 = OpLoad %87 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                       f32_3 %206 = OpFAdd %203 %205 
                                       f32_4 %207 = OpLoad %87 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %87 %208 
                              Uniform f32_4* %209 = OpAccessChain %19 %191 %67 
                                       f32_4 %210 = OpLoad %209 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 3 
                                       f32_4 %212 = OpLoad %79 
                                       f32_3 %213 = OpVectorShuffle %212 %212 3 3 3 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_4 %215 = OpLoad %87 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %87 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %87 %219 
                                       f32_4 %220 = OpLoad %87 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              Uniform f32_4* %222 = OpAccessChain %19 %191 %90 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 3 
                                       f32_3 %225 = OpFAdd %221 %224 
                                       f32_4 %226 = OpLoad %87 
                                       f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                                      OpStore %87 %227 
                                       f32_4 %228 = OpLoad %87 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_4 %230 = OpLoad %87 
                                       f32_2 %231 = OpVectorShuffle %230 %230 2 2 
                                       f32_2 %232 = OpFDiv %229 %231 
                                       f32_4 %233 = OpLoad %87 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 2 3 
                                                      OpStore %87 %234 
                         read_only Texture2D %236 = OpLoad %235 
                                     sampler %238 = OpLoad %237 
                  read_only Texture2DSampled %239 = OpSampledImage %236 %238 
                                       f32_4 %240 = OpLoad %87 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_4 %243 = OpImageSampleImplicitLod %239 %241 Bias %7 
                                         f32 %244 = OpCompositeExtract %243 3 
                                                      OpStore %182 %244 
                                Private f32* %248 = OpAccessChain %87 %22 
                                         f32 %249 = OpLoad %248 
                                        bool %251 = OpFOrdLessThan %249 %250 
                                                      OpStore %247 %251 
                                        bool %253 = OpLoad %247 
                                         f32 %254 = OpSelect %253 %76 %250 
                                                      OpStore %252 %254 
                                         f32 %255 = OpLoad %182 
                                         f32 %256 = OpLoad %252 
                                         f32 %257 = OpFMul %255 %256 
                                                      OpStore %182 %257 
                                         f32 %258 = OpLoad %178 
                                Uniform f32* %259 = OpAccessChain %19 %173 %158 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFMul %258 %260 
                                                      OpStore %178 %261 
                         read_only Texture2D %263 = OpLoad %262 
                                     sampler %265 = OpLoad %264 
                  read_only Texture2DSampled %266 = OpSampledImage %263 %265 
                                         f32 %267 = OpLoad %178 
                                       f32_2 %268 = OpCompositeConstruct %267 %267 
                                       f32_4 %269 = OpImageSampleImplicitLod %266 %268 
                                         f32 %270 = OpCompositeExtract %269 0 
                                                      OpStore %178 %270 
                                         f32 %271 = OpLoad %178 
                                         f32 %272 = OpLoad %182 
                                         f32 %273 = OpFMul %271 %272 
                                                      OpStore %178 %273 
                                Private f32* %274 = OpAccessChain %9 %32 
                                         f32 %275 = OpLoad %274 
                                Uniform f32* %277 = OpAccessChain %19 %276 %22 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFMul %275 %278 
                                Uniform f32* %280 = OpAccessChain %19 %276 %158 
                                         f32 %281 = OpLoad %280 
                                         f32 %282 = OpFAdd %279 %281 
                                                      OpStore %182 %282 
                                         f32 %283 = OpLoad %182 
                                         f32 %284 = OpExtInst %1 43 %283 %250 %76 
                                                      OpStore %182 %284 
                                         f32 %285 = OpLoad %182 
                                        bool %287 = OpFOrdLessThan %285 %286 
                                                      OpStore %247 %287 
                                        bool %288 = OpLoad %247 
                                                      OpSelectionMerge %290 None 
                                                      OpBranchConditional %288 %289 %614 
                                             %289 = OpLabel 
                                       f32_4 %291 = OpLoad %79 
                                       f32_4 %292 = OpVectorShuffle %291 %291 1 1 1 1 
                              Uniform f32_4* %294 = OpAccessChain %19 %293 %21 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpFMul %292 %295 
                                                      OpStore %87 %296 
                              Uniform f32_4* %297 = OpAccessChain %19 %293 %98 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpLoad %79 
                                       f32_4 %300 = OpVectorShuffle %299 %299 0 0 0 0 
                                       f32_4 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %87 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %87 %303 
                              Uniform f32_4* %304 = OpAccessChain %19 %293 %67 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %79 
                                       f32_4 %307 = OpVectorShuffle %306 %306 3 3 3 3 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %87 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %87 %310 
                                       f32_4 %311 = OpLoad %87 
                              Uniform f32_4* %312 = OpAccessChain %19 %293 %90 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpFAdd %311 %313 
                                                      OpStore %87 %314 
                                       f32_4 %315 = OpLoad %87 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_4 %317 = OpLoad %87 
                                       f32_3 %318 = OpVectorShuffle %317 %317 3 3 3 
                                       f32_3 %319 = OpFDiv %316 %318 
                                       f32_4 %320 = OpLoad %87 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %87 %321 
                                       f32_4 %323 = OpLoad %87 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                              Uniform f32_4* %326 = OpAccessChain %19 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_2 %328 = OpVectorShuffle %327 %327 2 3 
                                       f32_2 %329 = OpFMul %324 %328 
                                       f32_2 %332 = OpFAdd %329 %331 
                                       f32_4 %333 = OpLoad %322 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 2 3 
                                                      OpStore %322 %334 
                                       f32_4 %335 = OpLoad %322 
                                       f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                                       f32_2 %337 = OpExtInst %1 8 %336 
                                       f32_4 %338 = OpLoad %322 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 2 3 
                                                      OpStore %322 %339 
                                       f32_4 %340 = OpLoad %87 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 1 
                              Uniform f32_4* %342 = OpAccessChain %19 %325 
                                       f32_4 %343 = OpLoad %342 
                                       f32_2 %344 = OpVectorShuffle %343 %343 2 3 
                                       f32_2 %345 = OpFMul %341 %344 
                                       f32_4 %346 = OpLoad %322 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 1 
                                       f32_2 %348 = OpFNegate %347 
                                       f32_2 %349 = OpFAdd %345 %348 
                                       f32_4 %350 = OpLoad %87 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 2 3 
                                                      OpStore %87 %351 
                                       f32_4 %353 = OpLoad %87 
                                       f32_4 %354 = OpVectorShuffle %353 %353 0 0 1 1 
                                       f32_4 %356 = OpFAdd %354 %355 
                                                      OpStore %352 %356 
                                       f32_4 %358 = OpLoad %352 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 2 
                                       f32_4 %360 = OpLoad %352 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_2 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %357 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 1 2 5 
                                                      OpStore %357 %364 
                                       f32_4 %367 = OpLoad %357 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 3 
                                       f32_2 %369 = OpFMul %368 %331 
                                       f32_4 %370 = OpLoad %87 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 1 
                                       f32_2 %372 = OpFNegate %371 
                                       f32_2 %373 = OpFAdd %369 %372 
                                                      OpStore %366 %373 
                                       f32_4 %374 = OpLoad %87 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_2 %376 = OpFNegate %375 
                                       f32_2 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %352 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 1 5 3 
                                                      OpStore %352 %380 
                                       f32_4 %382 = OpLoad %87 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %385 = OpExtInst %1 37 %383 %384 
                                       f32_4 %386 = OpLoad %381 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 2 3 
                                                      OpStore %381 %387 
                                       f32_4 %388 = OpLoad %381 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_2 %390 = OpFNegate %389 
                                       f32_4 %391 = OpLoad %381 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_2 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %352 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 2 
                                       f32_2 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %352 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 5 3 
                                                      OpStore %352 %398 
                                       f32_4 %399 = OpLoad %87 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                       f32_2 %401 = OpExtInst %1 40 %400 %384 
                                       f32_4 %402 = OpLoad %87 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 2 3 
                                                      OpStore %87 %403 
                                       f32_4 %404 = OpLoad %87 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_2 %406 = OpFNegate %405 
                                       f32_4 %407 = OpLoad %87 
                                       f32_2 %408 = OpVectorShuffle %407 %407 0 1 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %352 
                                       f32_2 %411 = OpVectorShuffle %410 %410 1 3 
                                       f32_2 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %87 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 2 3 
                                                      OpStore %87 %414 
                                Private f32* %415 = OpAccessChain %366 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %381 %32 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %352 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %381 %72 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %87 %32 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %381 %22 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %357 %32 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %381 %158 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %381 
                                       f32_4 %431 = OpFMul %427 %430 
                                                      OpStore %381 %431 
                                Private f32* %432 = OpAccessChain %366 %72 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %357 %32 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %352 %22 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %357 %72 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %87 %72 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %357 %22 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %357 
                                       f32_4 %442 = OpFMul %441 %430 
                                                      OpStore %352 %442 
                                       f32_4 %443 = OpLoad %381 
                                       f32_4 %444 = OpVectorShuffle %443 %443 1 3 1 3 
                                       f32_4 %445 = OpLoad %381 
                                       f32_4 %446 = OpVectorShuffle %445 %445 0 2 0 2 
                                       f32_4 %447 = OpFAdd %444 %446 
                                                      OpStore %357 %447 
                                       f32_4 %449 = OpLoad %352 
                                       f32_4 %450 = OpVectorShuffle %449 %449 1 1 3 3 
                                       f32_4 %451 = OpLoad %352 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 2 2 
                                       f32_4 %453 = OpFAdd %450 %452 
                                                      OpStore %448 %453 
                                       f32_4 %454 = OpLoad %381 
                                       f32_2 %455 = OpVectorShuffle %454 %454 1 3 
                                       f32_4 %456 = OpLoad %357 
                                       f32_2 %457 = OpVectorShuffle %456 %456 2 3 
                                       f32_2 %458 = OpFDiv %455 %457 
                                       f32_4 %459 = OpLoad %87 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 2 3 
                                                      OpStore %87 %460 
                                       f32_4 %461 = OpLoad %87 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 1 
                                       f32_2 %465 = OpFAdd %462 %464 
                                       f32_4 %466 = OpLoad %87 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 2 3 
                                                      OpStore %87 %467 
                                       f32_4 %468 = OpLoad %352 
                                       f32_2 %469 = OpVectorShuffle %468 %468 1 3 
                                       f32_4 %470 = OpLoad %448 
                                       f32_2 %471 = OpVectorShuffle %470 %470 1 3 
                                       f32_2 %472 = OpFDiv %469 %471 
                                                      OpStore %366 %472 
                                       f32_2 %473 = OpLoad %366 
                                       f32_2 %474 = OpFAdd %473 %464 
                                                      OpStore %366 %474 
                                       f32_4 %475 = OpLoad %87 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                              Uniform f32_4* %477 = OpAccessChain %19 %325 
                                       f32_4 %478 = OpLoad %477 
                                       f32_2 %479 = OpVectorShuffle %478 %478 0 0 
                                       f32_2 %480 = OpFMul %476 %479 
                                       f32_4 %481 = OpLoad %352 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 2 3 
                                                      OpStore %352 %482 
                                       f32_2 %483 = OpLoad %366 
                              Uniform f32_4* %484 = OpAccessChain %19 %325 
                                       f32_4 %485 = OpLoad %484 
                                       f32_2 %486 = OpVectorShuffle %485 %485 1 1 
                                       f32_2 %487 = OpFMul %483 %486 
                                       f32_4 %488 = OpLoad %352 
                                       f32_4 %489 = OpVectorShuffle %488 %487 0 1 4 5 
                                                      OpStore %352 %489 
                                       f32_4 %490 = OpLoad %357 
                                       f32_4 %491 = OpLoad %448 
                                       f32_4 %492 = OpFMul %490 %491 
                                                      OpStore %357 %492 
                                       f32_4 %493 = OpLoad %322 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 1 0 1 
                              Uniform f32_4* %495 = OpAccessChain %19 %325 
                                       f32_4 %496 = OpLoad %495 
                                       f32_4 %497 = OpVectorShuffle %496 %496 0 1 0 1 
                                       f32_4 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %352 
                                       f32_4 %500 = OpVectorShuffle %499 %499 0 2 1 2 
                                       f32_4 %501 = OpFAdd %498 %500 
                                                      OpStore %381 %501 
                                       f32_4 %504 = OpLoad %381 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                                Private f32* %506 = OpAccessChain %87 %22 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpCompositeExtract %505 0 
                                         f32 %509 = OpCompositeExtract %505 1 
                                       f32_3 %510 = OpCompositeConstruct %508 %509 %507 
                                                      OpStore %503 %510 
                         read_only Texture2D %512 = OpLoad %511 
                                     sampler %514 = OpLoad %513 
                  read_only Texture2DSampled %517 = OpSampledImage %512 %514 
                                       f32_3 %518 = OpLoad %503 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %252 %520 
                                       f32_4 %522 = OpLoad %381 
                                       f32_2 %523 = OpVectorShuffle %522 %522 2 3 
                                Private f32* %524 = OpAccessChain %87 %22 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpCompositeExtract %523 0 
                                         f32 %527 = OpCompositeExtract %523 1 
                                       f32_3 %528 = OpCompositeConstruct %526 %527 %525 
                                                      OpStore %521 %528 
                         read_only Texture2D %529 = OpLoad %511 
                                     sampler %530 = OpLoad %513 
                  read_only Texture2DSampled %531 = OpSampledImage %529 %530 
                                       f32_3 %532 = OpLoad %521 
                                         f32 %533 = OpCompositeExtract %532 2 
                                         f32 %534 = OpImageSampleDrefExplicitLod %531 %532 %533 Lod %6 
                                Private f32* %535 = OpAccessChain %87 %32 
                                                      OpStore %535 %534 
                                Private f32* %536 = OpAccessChain %87 %32 
                                         f32 %537 = OpLoad %536 
                                Private f32* %538 = OpAccessChain %357 %72 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpFMul %537 %539 
                                Private f32* %541 = OpAccessChain %87 %32 
                                                      OpStore %541 %540 
                                Private f32* %542 = OpAccessChain %357 %32 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpLoad %252 
                                         f32 %545 = OpFMul %543 %544 
                                Private f32* %546 = OpAccessChain %87 %32 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                                      OpStore %252 %548 
                                       f32_4 %549 = OpLoad %322 
                                       f32_4 %550 = OpVectorShuffle %549 %549 0 1 0 1 
                              Uniform f32_4* %551 = OpAccessChain %19 %325 
                                       f32_4 %552 = OpLoad %551 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 1 0 1 
                                       f32_4 %554 = OpFMul %550 %553 
                                       f32_4 %555 = OpLoad %352 
                                       f32_4 %556 = OpVectorShuffle %555 %555 0 3 1 3 
                                       f32_4 %557 = OpFAdd %554 %556 
                                                      OpStore %322 %557 
                                       f32_4 %559 = OpLoad %322 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 1 
                                Private f32* %561 = OpAccessChain %87 %22 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpCompositeExtract %560 0 
                                         f32 %564 = OpCompositeExtract %560 1 
                                       f32_3 %565 = OpCompositeConstruct %563 %564 %562 
                                                      OpStore %558 %565 
                         read_only Texture2D %566 = OpLoad %511 
                                     sampler %567 = OpLoad %513 
                  read_only Texture2DSampled %568 = OpSampledImage %566 %567 
                                       f32_3 %569 = OpLoad %558 
                                         f32 %570 = OpCompositeExtract %569 2 
                                         f32 %571 = OpImageSampleDrefExplicitLod %568 %569 %570 Lod %6 
                                Private f32* %572 = OpAccessChain %87 %32 
                                                      OpStore %572 %571 
                                Private f32* %573 = OpAccessChain %357 %22 
                                         f32 %574 = OpLoad %573 
                                Private f32* %575 = OpAccessChain %87 %32 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFMul %574 %576 
                                         f32 %578 = OpLoad %252 
                                         f32 %579 = OpFAdd %577 %578 
                                                      OpStore %252 %579 
                                       f32_4 %581 = OpLoad %322 
                                       f32_2 %582 = OpVectorShuffle %581 %581 2 3 
                                Private f32* %583 = OpAccessChain %87 %22 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpCompositeExtract %582 0 
                                         f32 %586 = OpCompositeExtract %582 1 
                                       f32_3 %587 = OpCompositeConstruct %585 %586 %584 
                                                      OpStore %580 %587 
                         read_only Texture2D %588 = OpLoad %511 
                                     sampler %589 = OpLoad %513 
                  read_only Texture2DSampled %590 = OpSampledImage %588 %589 
                                       f32_3 %591 = OpLoad %580 
                                         f32 %592 = OpCompositeExtract %591 2 
                                         f32 %593 = OpImageSampleDrefExplicitLod %590 %591 %592 Lod %6 
                                Private f32* %594 = OpAccessChain %87 %32 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %357 %158 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %87 %32 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFMul %596 %598 
                                         f32 %600 = OpLoad %252 
                                         f32 %601 = OpFAdd %599 %600 
                                                      OpStore %252 %601 
                                Uniform f32* %602 = OpAccessChain %19 %276 %32 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpFNegate %603 
                                         f32 %605 = OpFAdd %604 %76 
                                Private f32* %606 = OpAccessChain %87 %32 
                                                      OpStore %606 %605 
                                         f32 %607 = OpLoad %252 
                                Private f32* %608 = OpAccessChain %87 %32 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpFMul %607 %609 
                                Uniform f32* %611 = OpAccessChain %19 %276 %32 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                                      OpStore %252 %613 
                                                      OpBranch %290 
                                             %614 = OpLabel 
                                                      OpStore %252 %76 
                                                      OpBranch %290 
                                             %290 = OpLabel 
                                         f32 %615 = OpLoad %252 
                                         f32 %616 = OpFNegate %615 
                                         f32 %617 = OpFAdd %616 %76 
                                Private f32* %618 = OpAccessChain %87 %32 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %182 
                                Private f32* %620 = OpAccessChain %87 %32 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFMul %619 %621 
                                         f32 %623 = OpLoad %252 
                                         f32 %624 = OpFAdd %622 %623 
                                                      OpStore %182 %624 
                                         f32 %625 = OpLoad %182 
                                         f32 %626 = OpLoad %178 
                                         f32 %627 = OpFMul %625 %626 
                                                      OpStore %178 %627 
                                       f32_4 %628 = OpLoad %41 
                                       f32_2 %629 = OpVectorShuffle %628 %628 0 1 
                              Uniform f32_4* %631 = OpAccessChain %19 %630 
                                       f32_4 %632 = OpLoad %631 
                                       f32_2 %633 = OpVectorShuffle %632 %632 0 1 
                                       f32_2 %634 = OpFMul %629 %633 
                              Uniform f32_4* %635 = OpAccessChain %19 %630 
                                       f32_4 %636 = OpLoad %635 
                                       f32_2 %637 = OpVectorShuffle %636 %636 2 3 
                                       f32_2 %638 = OpFAdd %634 %637 
                                       f32_4 %639 = OpLoad %41 
                                       f32_4 %640 = OpVectorShuffle %639 %638 4 5 2 3 
                                                      OpStore %41 %640 
                         read_only Texture2D %642 = OpLoad %641 
                                     sampler %644 = OpLoad %643 
                  read_only Texture2DSampled %645 = OpSampledImage %642 %644 
                                       f32_4 %646 = OpLoad %41 
                                       f32_2 %647 = OpVectorShuffle %646 %646 0 1 
                                       f32_4 %648 = OpImageSampleImplicitLod %645 %647 
                                                      OpStore %87 %648 
                                       f32_4 %649 = OpLoad %87 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 1 2 
                                       f32_3 %653 = OpFMul %650 %652 
                                       f32_3 %656 = OpFAdd %653 %655 
                                       f32_4 %657 = OpLoad %41 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %41 %658 
                                       f32_4 %659 = OpLoad %41 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 3 
                                       f32_4 %661 = OpLoad %41 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                                      OpStore %252 %663 
                                         f32 %664 = OpLoad %252 
                                         f32 %665 = OpExtInst %1 32 %664 
                                                      OpStore %252 %665 
                                       f32_4 %666 = OpLoad %41 
                                       f32_3 %667 = OpVectorShuffle %666 %666 0 1 3 
                                         f32 %668 = OpLoad %252 
                                       f32_3 %669 = OpCompositeConstruct %668 %668 %668 
                                       f32_3 %670 = OpFMul %667 %669 
                                       f32_4 %671 = OpLoad %41 
                                       f32_4 %672 = OpVectorShuffle %671 %670 4 5 2 6 
                                                      OpStore %41 %672 
                                       f32_3 %673 = OpLoad %169 
                                       f32_4 %674 = OpLoad %41 
                                       f32_3 %675 = OpVectorShuffle %674 %674 0 1 3 
                                         f32 %676 = OpDot %673 %675 
                                                      OpStore %252 %676 
                                         f32 %677 = OpLoad %252 
                                         f32 %678 = OpExtInst %1 40 %677 %250 
                                                      OpStore %252 %678 
                                       f32_4 %679 = OpLoad %79 
                                       f32_3 %680 = OpVectorShuffle %679 %679 0 1 3 
                              Uniform f32_3* %682 = OpAccessChain %19 %98 
                                       f32_3 %683 = OpLoad %682 
                                       f32_3 %684 = OpFNegate %683 
                                       f32_3 %685 = OpFAdd %680 %684 
                                       f32_4 %686 = OpLoad %79 
                                       f32_4 %687 = OpVectorShuffle %686 %685 4 5 2 6 
                                                      OpStore %79 %687 
                                       f32_4 %688 = OpLoad %79 
                                       f32_3 %689 = OpVectorShuffle %688 %688 0 1 3 
                                       f32_4 %690 = OpLoad %79 
                                       f32_3 %691 = OpVectorShuffle %690 %690 0 1 3 
                                         f32 %692 = OpDot %689 %691 
                                Private f32* %693 = OpAccessChain %87 %32 
                                                      OpStore %693 %692 
                                Private f32* %694 = OpAccessChain %87 %32 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpExtInst %1 32 %695 
                                Private f32* %697 = OpAccessChain %87 %32 
                                                      OpStore %697 %696 
                                       f32_4 %698 = OpLoad %79 
                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 3 
                                       f32_3 %700 = OpFNegate %699 
                                       f32_4 %701 = OpLoad %87 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpFMul %700 %702 
                                       f32_3 %704 = OpLoad %169 
                                       f32_3 %705 = OpFAdd %703 %704 
                                                      OpStore %169 %705 
                                       f32_3 %706 = OpLoad %169 
                                       f32_3 %707 = OpLoad %169 
                                         f32 %708 = OpDot %706 %707 
                                Private f32* %709 = OpAccessChain %79 %32 
                                                      OpStore %709 %708 
                                Private f32* %710 = OpAccessChain %79 %32 
                                         f32 %711 = OpLoad %710 
                                         f32 %712 = OpExtInst %1 32 %711 
                                Private f32* %713 = OpAccessChain %79 %32 
                                                      OpStore %713 %712 
                                       f32_3 %714 = OpLoad %169 
                                       f32_4 %715 = OpLoad %79 
                                       f32_3 %716 = OpVectorShuffle %715 %715 0 0 0 
                                       f32_3 %717 = OpFMul %714 %716 
                                                      OpStore %169 %717 
                                       f32_3 %718 = OpLoad %169 
                                       f32_4 %719 = OpLoad %41 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 3 
                                         f32 %721 = OpDot %718 %720 
                                Private f32* %722 = OpAccessChain %169 %32 
                                                      OpStore %722 %721 
                                Private f32* %723 = OpAccessChain %169 %32 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpExtInst %1 40 %724 %250 
                                Private f32* %726 = OpAccessChain %169 %32 
                                                      OpStore %726 %725 
                                Private f32* %728 = OpAccessChain %87 %158 
                                         f32 %729 = OpLoad %728 
                                         f32 %731 = OpFMul %729 %730 
                                                      OpStore %727 %731 
                                Private f32* %732 = OpAccessChain %169 %32 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpExtInst %1 30 %733 
                                Private f32* %735 = OpAccessChain %169 %32 
                                                      OpStore %735 %734 
                                Private f32* %736 = OpAccessChain %169 %32 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpLoad %727 
                                         f32 %739 = OpFMul %737 %738 
                                Private f32* %740 = OpAccessChain %169 %32 
                                                      OpStore %740 %739 
                                Private f32* %741 = OpAccessChain %169 %32 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpExtInst %1 29 %742 
                                Private f32* %744 = OpAccessChain %169 %32 
                                                      OpStore %744 %743 
                                         f32 %745 = OpLoad %178 
                                                      OpStore %727 %745 
                                         f32 %746 = OpLoad %727 
                                         f32 %747 = OpExtInst %1 43 %746 %250 %76 
                                                      OpStore %727 %747 
                                         f32 %748 = OpLoad %727 
                                Private f32* %749 = OpAccessChain %169 %32 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpFMul %748 %750 
                                Private f32* %752 = OpAccessChain %169 %32 
                                                      OpStore %752 %751 
                                         f32 %753 = OpLoad %178 
                                         f32 %754 = OpLoad %252 
                                         f32 %755 = OpFMul %753 %754 
                                                      OpStore %727 %755 
                                         f32 %756 = OpLoad %727 
                                       f32_3 %757 = OpCompositeConstruct %756 %756 %756 
                              Uniform f32_4* %759 = OpAccessChain %19 %758 
                                       f32_4 %760 = OpLoad %759 
                                       f32_3 %761 = OpVectorShuffle %760 %760 0 1 2 
                                       f32_3 %762 = OpFMul %757 %761 
                                       f32_4 %763 = OpLoad %41 
                                       f32_4 %764 = OpVectorShuffle %763 %762 4 5 6 3 
                                                      OpStore %41 %764 
                              Uniform f32_4* %765 = OpAccessChain %19 %758 
                                       f32_4 %766 = OpLoad %765 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                         f32 %772 = OpDot %767 %771 
                                                      OpStore %727 %772 
                                         f32 %773 = OpLoad %727 
                                Private f32* %774 = OpAccessChain %169 %32 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpFMul %773 %775 
                                Private f32* %777 = OpAccessChain %41 %158 
                                                      OpStore %777 %776 
                                Private f32* %778 = OpAccessChain %9 %32 
                                         f32 %779 = OpLoad %778 
                                Uniform f32* %781 = OpAccessChain %19 %780 %22 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFMul %779 %782 
                                Uniform f32* %784 = OpAccessChain %19 %780 %158 
                                         f32 %785 = OpLoad %784 
                                         f32 %786 = OpFAdd %783 %785 
                                Private f32* %787 = OpAccessChain %9 %32 
                                                      OpStore %787 %786 
                                Private f32* %788 = OpAccessChain %9 %32 
                                         f32 %789 = OpLoad %788 
                                         f32 %790 = OpFNegate %789 
                                         f32 %791 = OpFAdd %790 %76 
                                Private f32* %792 = OpAccessChain %9 %32 
                                                      OpStore %792 %791 
                                Private f32* %793 = OpAccessChain %9 %32 
                                         f32 %794 = OpLoad %793 
                                         f32 %795 = OpExtInst %1 43 %794 %250 %76 
                                Private f32* %796 = OpAccessChain %9 %32 
                                                      OpStore %796 %795 
                                       f32_4 %797 = OpLoad %9 
                                       f32_4 %798 = OpVectorShuffle %797 %797 0 0 0 0 
                                       f32_4 %799 = OpLoad %41 
                                       f32_4 %800 = OpFMul %798 %799 
                                                      OpStore %9 %800 
                                       f32_4 %803 = OpLoad %9 
                                       f32_4 %804 = OpFNegate %803 
                                       f32_4 %805 = OpExtInst %1 29 %804 
                                                      OpStore %802 %805 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat6;
float u_xlat8;
vec2 u_xlat9;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = (-u_xlat3.xyz) * u_xlat4.xxx + (-_LightDir.xyz);
    u_xlat9.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat9.xxx;
    u_xlat9.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat2 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat9.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat13 = u_xlat1.w * 128.0;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.y = dot((-_LightDir.xyz), u_xlat1.xyz);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat13;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat12 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x + u_xlat2.x;
    u_xlat1.x = u_xlat12;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat8 = u_xlat12 * u_xlat4.y;
    u_xlat2.xyz = vec3(u_xlat8) * _LightColor.xyz;
    u_xlat4.x = u_xlat4.x * u_xlat1.x;
    u_xlat8 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat8 * u_xlat4.x;
    u_xlat0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 374
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %42 %369 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 42 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %211 DescriptorSet 211 
                                                      OpDecorate %211 Binding 211 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %220 DescriptorSet 220 
                                                      OpDecorate %220 Binding 220 
                                                      OpDecorate %222 DescriptorSet 222 
                                                      OpDecorate %222 Binding 222 
                                                      OpDecorate %369 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypeVector %6 2 
                                              %39 = OpTypePointer Private %38 
                               Private f32_2* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                                          i32 %62 = OpConstant 2 
                                          u32 %67 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                               Private f32_4* %74 = OpVariable Private 
                                              %82 = OpTypePointer Private %10 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %92 = OpConstant 0 
                                             %124 = OpTypePointer Uniform %10 
                                         i32 %131 = OpConstant 5 
                                         u32 %158 = OpConstant 3 
                              Private f32_3* %168 = OpVariable Private 
                                         i32 %182 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                                         i32 %202 = OpConstant 9 
        UniformConstant read_only Texture2D* %211 = OpVariable UniformConstant 
                    UniformConstant sampler* %213 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %220 = OpVariable UniformConstant 
                    UniformConstant sampler* %222 = OpVariable UniformConstant 
                              Private f32_3* %227 = OpVariable Private 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %233 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %233 %233 %233 
                                         f32 %238 = OpConstant 3.674022E-40 
                                Private f32* %241 = OpVariable Private 
                                         f32 %264 = OpConstant 3.674022E-40 
                                       f32_2 %265 = OpConstantComposite %264 %264 
                                         i32 %285 = OpConstant 4 
                                         i32 %296 = OpConstant 8 
                                Private f32* %331 = OpVariable Private 
                                         i32 %338 = OpConstant 7 
                                         f32 %354 = OpConstant 3.674022E-40 
                                         f32 %355 = OpConstant 3.674022E-40 
                                         f32 %356 = OpConstant 3.674022E-40 
                                       f32_3 %357 = OpConstantComposite %354 %355 %356 
                                             %368 = OpTypePointer Output %7 
                               Output f32_4* %369 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                                      OpStore %40 %47 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_2 %59 = OpLoad %40 
                                        f32_4 %60 = OpImageSampleImplicitLod %58 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                                      OpStore %48 %61 
                                 Uniform f32* %63 = OpAccessChain %16 %62 %29 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %48 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %16 %62 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                                      OpStore %48 %70 
                                          f32 %72 = OpLoad %48 
                                          f32 %73 = OpFDiv %71 %72 
                                                      OpStore %48 %73 
                                          f32 %75 = OpLoad %48 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %74 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %74 %81 
                                        f32_4 %84 = OpLoad %74 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %16 %86 %18 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %16 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %74 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %74 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %74 %102 
                              Uniform f32_4* %103 = OpAccessChain %16 %86 %62 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %74 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %74 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %74 %113 
                                       f32_4 %114 = OpLoad %74 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_4* %116 = OpAccessChain %16 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %74 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %74 %121 
                                       f32_4 %122 = OpLoad %74 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Uniform f32_3* %125 = OpAccessChain %16 %92 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %123 %127 
                                                      OpStore %83 %128 
                                       f32_4 %129 = OpLoad %74 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 3 
                              Uniform f32_4* %132 = OpAccessChain %16 %131 
                                       f32_4 %133 = OpLoad %132 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFNegate %134 
                                       f32_3 %136 = OpFAdd %130 %135 
                                       f32_4 %137 = OpLoad %74 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %74 %138 
                                       f32_4 %139 = OpLoad %74 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                                       f32_4 %141 = OpLoad %74 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 3 
                                         f32 %143 = OpDot %140 %142 
                                Private f32* %144 = OpAccessChain %9 %29 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpExtInst %1 31 %146 
                                Private f32* %148 = OpAccessChain %9 %29 
                                                      OpStore %148 %147 
                                Private f32* %149 = OpAccessChain %9 %19 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFNegate %150 
                                         f32 %152 = OpLoad %48 
                                         f32 %153 = OpFMul %151 %152 
                                Private f32* %154 = OpAccessChain %9 %29 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpFAdd %153 %155 
                                Private f32* %157 = OpAccessChain %9 %29 
                                                      OpStore %157 %156 
                                Uniform f32* %159 = OpAccessChain %16 %131 %158 
                                         f32 %160 = OpLoad %159 
                                Private f32* %161 = OpAccessChain %9 %29 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %160 %162 
                                Private f32* %164 = OpAccessChain %74 %19 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                Private f32* %167 = OpAccessChain %9 %29 
                                                      OpStore %167 %166 
                                       f32_3 %169 = OpLoad %83 
                                       f32_3 %170 = OpLoad %83 
                                         f32 %171 = OpDot %169 %170 
                                Private f32* %172 = OpAccessChain %168 %29 
                                                      OpStore %172 %171 
                                Private f32* %173 = OpAccessChain %168 %29 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpExtInst %1 32 %174 
                                Private f32* %176 = OpAccessChain %168 %29 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %83 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpLoad %168 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 0 0 
                                       f32_3 %181 = OpFMul %178 %180 
                              Uniform f32_4* %183 = OpAccessChain %16 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFNegate %185 
                                       f32_3 %187 = OpFAdd %181 %186 
                                                      OpStore %168 %187 
                                       f32_3 %189 = OpLoad %168 
                                       f32_3 %190 = OpLoad %168 
                                         f32 %191 = OpDot %189 %190 
                                Private f32* %192 = OpAccessChain %188 %29 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %188 %29 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpExtInst %1 32 %194 
                                Private f32* %196 = OpAccessChain %188 %29 
                                                      OpStore %196 %195 
                                       f32_3 %197 = OpLoad %168 
                                       f32_2 %198 = OpLoad %188 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 0 0 
                                       f32_3 %200 = OpFMul %197 %199 
                                                      OpStore %168 %200 
                                       f32_2 %201 = OpLoad %40 
                              Uniform f32_4* %203 = OpAccessChain %16 %202 
                                       f32_4 %204 = OpLoad %203 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFMul %201 %205 
                              Uniform f32_4* %207 = OpAccessChain %16 %202 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFAdd %206 %209 
                                                      OpStore %188 %210 
                         read_only Texture2D %212 = OpLoad %211 
                                     sampler %214 = OpLoad %213 
                  read_only Texture2DSampled %215 = OpSampledImage %212 %214 
                                       f32_2 %216 = OpLoad %40 
                                       f32_4 %217 = OpImageSampleImplicitLod %215 %216 
                                         f32 %218 = OpCompositeExtract %217 0 
                                Private f32* %219 = OpAccessChain %40 %29 
                                                      OpStore %219 %218 
                         read_only Texture2D %221 = OpLoad %220 
                                     sampler %223 = OpLoad %222 
                  read_only Texture2DSampled %224 = OpSampledImage %221 %223 
                                       f32_2 %225 = OpLoad %188 
                                       f32_4 %226 = OpImageSampleImplicitLod %224 %225 
                                                      OpStore %74 %226 
                                       f32_4 %228 = OpLoad %74 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_3 %235 = OpFAdd %232 %234 
                                                      OpStore %227 %235 
                                Private f32* %236 = OpAccessChain %74 %158 
                                         f32 %237 = OpLoad %236 
                                         f32 %239 = OpFMul %237 %238 
                                Private f32* %240 = OpAccessChain %74 %29 
                                                      OpStore %240 %239 
                                       f32_3 %242 = OpLoad %227 
                                       f32_3 %243 = OpLoad %227 
                                         f32 %244 = OpDot %242 %243 
                                                      OpStore %241 %244 
                                         f32 %245 = OpLoad %241 
                                         f32 %246 = OpExtInst %1 32 %245 
                                                      OpStore %241 %246 
                                       f32_3 %247 = OpLoad %227 
                                         f32 %248 = OpLoad %241 
                                       f32_3 %249 = OpCompositeConstruct %248 %248 %248 
                                       f32_3 %250 = OpFMul %247 %249 
                                                      OpStore %227 %250 
                                       f32_3 %251 = OpLoad %168 
                                       f32_3 %252 = OpLoad %227 
                                         f32 %253 = OpDot %251 %252 
                                Private f32* %254 = OpAccessChain %168 %29 
                                                      OpStore %254 %253 
                              Uniform f32_4* %255 = OpAccessChain %16 %182 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpFNegate %257 
                                       f32_3 %259 = OpLoad %227 
                                         f32 %260 = OpDot %258 %259 
                                Private f32* %261 = OpAccessChain %168 %67 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %168 
                                       f32_2 %263 = OpVectorShuffle %262 %262 0 1 
                                       f32_2 %266 = OpExtInst %1 40 %263 %265 
                                       f32_3 %267 = OpLoad %168 
                                       f32_3 %268 = OpVectorShuffle %267 %266 3 4 2 
                                                      OpStore %168 %268 
                                Private f32* %269 = OpAccessChain %168 %29 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpExtInst %1 30 %270 
                                Private f32* %272 = OpAccessChain %168 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %168 %29 
                                         f32 %274 = OpLoad %273 
                                Private f32* %275 = OpAccessChain %74 %29 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %274 %276 
                                Private f32* %278 = OpAccessChain %168 %29 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %168 %29 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpExtInst %1 29 %280 
                                Private f32* %282 = OpAccessChain %168 %29 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %9 %29 
                                         f32 %284 = OpLoad %283 
                                Uniform f32* %286 = OpAccessChain %16 %285 %19 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFMul %284 %287 
                                Uniform f32* %289 = OpAccessChain %16 %285 %158 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFAdd %288 %290 
                                                      OpStore %48 %291 
                                         f32 %292 = OpLoad %48 
                                         f32 %293 = OpExtInst %1 43 %292 %264 %71 
                                                      OpStore %48 %293 
                                Private f32* %294 = OpAccessChain %9 %29 
                                         f32 %295 = OpLoad %294 
                                Uniform f32* %297 = OpAccessChain %16 %296 %19 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %295 %298 
                                Uniform f32* %300 = OpAccessChain %16 %296 %158 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %9 %29 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %9 %29 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFNegate %305 
                                         f32 %307 = OpFAdd %306 %71 
                                Private f32* %308 = OpAccessChain %9 %29 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %9 %29 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpExtInst %1 43 %310 %264 %71 
                                Private f32* %312 = OpAccessChain %9 %29 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %40 %29 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                         f32 %316 = OpFAdd %315 %71 
                                Private f32* %317 = OpAccessChain %227 %29 
                                                      OpStore %317 %316 
                                         f32 %318 = OpLoad %48 
                                Private f32* %319 = OpAccessChain %227 %29 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %40 %29 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                                      OpStore %48 %324 
                                         f32 %325 = OpLoad %48 
                                Private f32* %326 = OpAccessChain %40 %29 
                                                      OpStore %326 %325 
                                Private f32* %327 = OpAccessChain %40 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpExtInst %1 43 %328 %264 %71 
                                Private f32* %330 = OpAccessChain %40 %29 
                                                      OpStore %330 %329 
                                         f32 %332 = OpLoad %48 
                                Private f32* %333 = OpAccessChain %168 %67 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                                      OpStore %331 %335 
                                         f32 %336 = OpLoad %331 
                                       f32_3 %337 = OpCompositeConstruct %336 %336 %336 
                              Uniform f32_4* %339 = OpAccessChain %16 %338 
                                       f32_4 %340 = OpLoad %339 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFMul %337 %341 
                                       f32_4 %343 = OpLoad %74 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %74 %344 
                                Private f32* %345 = OpAccessChain %168 %29 
                                         f32 %346 = OpLoad %345 
                                Private f32* %347 = OpAccessChain %40 %29 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                Private f32* %350 = OpAccessChain %168 %29 
                                                      OpStore %350 %349 
                              Uniform f32_4* %351 = OpAccessChain %16 %338 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                         f32 %358 = OpDot %353 %357 
                                                      OpStore %331 %358 
                                         f32 %359 = OpLoad %331 
                                Private f32* %360 = OpAccessChain %168 %29 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                Private f32* %363 = OpAccessChain %74 %158 
                                                      OpStore %363 %362 
                                       f32_4 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 0 0 0 0 
                                       f32_4 %366 = OpLoad %74 
                                       f32_4 %367 = OpFMul %365 %366 
                                                      OpStore %9 %367 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpFNegate %370 
                                       f32_4 %372 = OpExtInst %1 29 %371 
                                                      OpStore %369 %372 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat8.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat8.xy);
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    u_xlat4 = u_xlat4 * u_xlat8.x + u_xlat3.x;
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat3 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat4 = u_xlat4 * u_xlat3.w;
    u_xlat8.x = u_xlat4;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat12) + (-_LightDir.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat1.w * 128.0;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.x = dot((-_LightDir.xyz), u_xlat1.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat4 = u_xlat4 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat4) * _LightColor.xyz;
    u_xlat4 = max(u_xlat13, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = u_xlat8.x * u_xlat4;
    u_xlat8.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat8.x * u_xlat4;
    u_xlat0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 423
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %418 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %194 DescriptorSet 194 
                                                      OpDecorate %194 Binding 194 
                                                      OpDecorate %196 DescriptorSet 196 
                                                      OpDecorate %196 Binding 196 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate %219 DescriptorSet 219 
                                                      OpDecorate %219 Binding 219 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %418 Location 418 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                                              %85 = OpTypePointer Private %10 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                              %90 = OpTypePointer Uniform %7 
                                          i32 %95 = OpConstant 0 
                                         i32 %127 = OpConstant 5 
                                         u32 %150 = OpConstant 3 
                                Private f32* %160 = OpVariable Private 
                                         i32 %163 = OpConstant 4 
                                         f32 %171 = OpConstant 3.674022E-40 
                                         i32 %175 = OpConstant 8 
                                             %192 = OpTypePointer Private %42 
                              Private f32_2* %193 = OpVariable Private 
        UniformConstant read_only Texture2D* %194 = OpVariable UniformConstant 
                    UniformConstant sampler* %196 = OpVariable UniformConstant 
                                         i32 %206 = OpConstant 10 
        UniformConstant read_only Texture2D* %217 = OpVariable UniformConstant 
                    UniformConstant sampler* %219 = OpVariable UniformConstant 
                                         i32 %237 = OpConstant 9 
                                             %260 = OpTypePointer Uniform %10 
        UniformConstant read_only Texture2D* %272 = OpVariable UniformConstant 
                    UniformConstant sampler* %274 = OpVariable UniformConstant 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         i32 %305 = OpConstant 6 
                                         f32 %329 = OpConstant 3.674022E-40 
                                       f32_3 %330 = OpConstantComposite %329 %329 %329 
                                         f32 %332 = OpConstant 3.674022E-40 
                                       f32_3 %333 = OpConstantComposite %332 %332 %332 
                                         f32 %339 = OpConstant 3.674022E-40 
                                Private f32* %341 = OpVariable Private 
                                         i32 %379 = OpConstant 7 
                                         f32 %402 = OpConstant 3.674022E-40 
                                         f32 %403 = OpConstant 3.674022E-40 
                                         f32 %404 = OpConstant 3.674022E-40 
                                       f32_3 %405 = OpConstantComposite %402 %403 %404 
                                             %417 = OpTypePointer Output %7 
                               Output f32_4* %418 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %87 = OpLoad %77 
                                        f32_3 %88 = OpVectorShuffle %87 %87 1 1 1 
                               Uniform f32_4* %91 = OpAccessChain %17 %89 %19 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %86 %94 
                               Uniform f32_4* %96 = OpAccessChain %17 %89 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %77 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_3 %102 = OpLoad %86 
                                       f32_3 %103 = OpFAdd %101 %102 
                                       f32_4 %104 = OpLoad %77 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %77 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %89 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %77 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %77 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %77 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %77 %116 
                                       f32_4 %117 = OpLoad %77 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %119 = OpAccessChain %17 %89 %89 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %77 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 6 
                                                      OpStore %77 %124 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                              Uniform f32_4* %128 = OpAccessChain %17 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFNegate %130 
                                       f32_3 %132 = OpFAdd %126 %131 
                                                      OpStore %86 %132 
                                       f32_3 %133 = OpLoad %86 
                                       f32_3 %134 = OpLoad %86 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpExtInst %1 31 %138 
                                Private f32* %140 = OpAccessChain %9 %30 
                                                      OpStore %140 %139 
                                Private f32* %141 = OpAccessChain %9 %20 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %50 
                                         f32 %145 = OpFMul %143 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %17 %127 %150 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %9 %30 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %152 %154 
                                Private f32* %156 = OpAccessChain %77 %20 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %161 = OpAccessChain %9 %30 
                                         f32 %162 = OpLoad %161 
                                Uniform f32* %164 = OpAccessChain %17 %163 %20 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFMul %162 %165 
                                Uniform f32* %167 = OpAccessChain %17 %163 %150 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFAdd %166 %168 
                                                      OpStore %160 %169 
                                         f32 %170 = OpLoad %160 
                                         f32 %172 = OpExtInst %1 43 %170 %171 %74 
                                                      OpStore %160 %172 
                                Private f32* %173 = OpAccessChain %9 %30 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %17 %175 %20 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %174 %177 
                                Uniform f32* %179 = OpAccessChain %17 %175 %150 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFAdd %178 %180 
                                Private f32* %182 = OpAccessChain %9 %30 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %9 %30 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFNegate %184 
                                         f32 %186 = OpFAdd %185 %74 
                                Private f32* %187 = OpAccessChain %9 %30 
                                                      OpStore %187 %186 
                                Private f32* %188 = OpAccessChain %9 %30 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpExtInst %1 43 %189 %171 %74 
                                Private f32* %191 = OpAccessChain %9 %30 
                                                      OpStore %191 %190 
                         read_only Texture2D %195 = OpLoad %194 
                                     sampler %197 = OpLoad %196 
                  read_only Texture2DSampled %198 = OpSampledImage %195 %197 
                                       f32_4 %199 = OpLoad %39 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_4 %201 = OpImageSampleImplicitLod %198 %200 
                                         f32 %202 = OpCompositeExtract %201 0 
                                Private f32* %203 = OpAccessChain %193 %30 
                                                      OpStore %203 %202 
                                       f32_4 %204 = OpLoad %39 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                              Uniform f32_4* %207 = OpAccessChain %17 %206 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFMul %205 %209 
                              Uniform f32_4* %211 = OpAccessChain %17 %206 
                                       f32_4 %212 = OpLoad %211 
                                       f32_2 %213 = OpVectorShuffle %212 %212 2 3 
                                       f32_2 %214 = OpFAdd %210 %213 
                                       f32_4 %215 = OpLoad %39 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %39 %216 
                         read_only Texture2D %218 = OpLoad %217 
                                     sampler %220 = OpLoad %219 
                  read_only Texture2DSampled %221 = OpSampledImage %218 %220 
                                       f32_4 %222 = OpLoad %39 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 1 
                                       f32_4 %224 = OpImageSampleImplicitLod %221 %223 
                                                      OpStore %39 %224 
                                Private f32* %225 = OpAccessChain %193 %30 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %227 %74 
                                                      OpStore %50 %228 
                                         f32 %229 = OpLoad %160 
                                         f32 %230 = OpLoad %50 
                                         f32 %231 = OpFMul %229 %230 
                                Private f32* %232 = OpAccessChain %193 %30 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFAdd %231 %233 
                                                      OpStore %160 %234 
                                       f32_4 %235 = OpLoad %77 
                                       f32_2 %236 = OpVectorShuffle %235 %235 1 1 
                              Uniform f32_4* %238 = OpAccessChain %17 %237 %19 
                                       f32_4 %239 = OpLoad %238 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFMul %236 %240 
                                                      OpStore %193 %241 
                              Uniform f32_4* %242 = OpAccessChain %17 %237 %95 
                                       f32_4 %243 = OpLoad %242 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                       f32_4 %245 = OpLoad %77 
                                       f32_2 %246 = OpVectorShuffle %245 %245 0 0 
                                       f32_2 %247 = OpFMul %244 %246 
                                       f32_2 %248 = OpLoad %193 
                                       f32_2 %249 = OpFAdd %247 %248 
                                                      OpStore %193 %249 
                              Uniform f32_4* %250 = OpAccessChain %17 %237 %65 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_4 %253 = OpLoad %77 
                                       f32_2 %254 = OpVectorShuffle %253 %253 3 3 
                                       f32_2 %255 = OpFMul %252 %254 
                                       f32_2 %256 = OpLoad %193 
                                       f32_2 %257 = OpFAdd %255 %256 
                                                      OpStore %193 %257 
                                       f32_4 %258 = OpLoad %77 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 3 
                              Uniform f32_3* %261 = OpAccessChain %17 %95 
                                       f32_3 %262 = OpLoad %261 
                                       f32_3 %263 = OpFNegate %262 
                                       f32_3 %264 = OpFAdd %259 %263 
                                       f32_4 %265 = OpLoad %77 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %77 %266 
                                       f32_2 %267 = OpLoad %193 
                              Uniform f32_4* %268 = OpAccessChain %17 %237 %89 
                                       f32_4 %269 = OpLoad %268 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %271 = OpFAdd %267 %270 
                                                      OpStore %193 %271 
                         read_only Texture2D %273 = OpLoad %272 
                                     sampler %275 = OpLoad %274 
                  read_only Texture2DSampled %276 = OpSampledImage %273 %275 
                                       f32_2 %277 = OpLoad %193 
                                       f32_4 %279 = OpImageSampleImplicitLod %276 %277 Bias %7 
                                         f32 %280 = OpCompositeExtract %279 3 
                                Private f32* %281 = OpAccessChain %193 %30 
                                                      OpStore %281 %280 
                                Private f32* %282 = OpAccessChain %193 %30 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpLoad %160 
                                         f32 %285 = OpFMul %283 %284 
                                                      OpStore %160 %285 
                                         f32 %286 = OpLoad %160 
                                Private f32* %287 = OpAccessChain %193 %30 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %193 %30 
                                         f32 %289 = OpLoad %288 
                                         f32 %290 = OpExtInst %1 43 %289 %171 %74 
                                Private f32* %291 = OpAccessChain %193 %30 
                                                      OpStore %291 %290 
                                       f32_4 %292 = OpLoad %77 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_4 %294 = OpLoad %77 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                         f32 %296 = OpDot %293 %295 
                                                      OpStore %50 %296 
                                         f32 %297 = OpLoad %50 
                                         f32 %298 = OpExtInst %1 32 %297 
                                                      OpStore %50 %298 
                                       f32_4 %299 = OpLoad %77 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFNegate %300 
                                         f32 %302 = OpLoad %50 
                                       f32_3 %303 = OpCompositeConstruct %302 %302 %302 
                                       f32_3 %304 = OpFMul %301 %303 
                              Uniform f32_4* %306 = OpAccessChain %17 %305 
                                       f32_4 %307 = OpLoad %306 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFNegate %308 
                                       f32_3 %310 = OpFAdd %304 %309 
                                       f32_4 %311 = OpLoad %77 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %77 %312 
                                       f32_4 %313 = OpLoad %77 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_4 %315 = OpLoad %77 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                         f32 %317 = OpDot %314 %316 
                                                      OpStore %50 %317 
                                         f32 %318 = OpLoad %50 
                                         f32 %319 = OpExtInst %1 32 %318 
                                                      OpStore %50 %319 
                                         f32 %320 = OpLoad %50 
                                       f32_3 %321 = OpCompositeConstruct %320 %320 %320 
                                       f32_4 %322 = OpLoad %77 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_4 %325 = OpLoad %77 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %77 %326 
                                       f32_4 %327 = OpLoad %39 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_3 %334 = OpFAdd %331 %333 
                                       f32_4 %335 = OpLoad %39 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %39 %336 
                                Private f32* %337 = OpAccessChain %39 %150 
                                         f32 %338 = OpLoad %337 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %50 %340 
                                       f32_4 %342 = OpLoad %39 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %39 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpDot %343 %345 
                                                      OpStore %341 %346 
                                         f32 %347 = OpLoad %341 
                                         f32 %348 = OpExtInst %1 32 %347 
                                                      OpStore %341 %348 
                                         f32 %349 = OpLoad %341 
                                       f32_3 %350 = OpCompositeConstruct %349 %349 %349 
                                       f32_4 %351 = OpLoad %39 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %39 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %39 %355 
                                       f32_4 %356 = OpLoad %77 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_4 %358 = OpLoad %39 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 1 2 
                                         f32 %360 = OpDot %357 %359 
                                                      OpStore %341 %360 
                              Uniform f32_4* %361 = OpAccessChain %17 %305 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFNegate %363 
                                       f32_4 %365 = OpLoad %39 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                         f32 %367 = OpDot %364 %366 
                                Private f32* %368 = OpAccessChain %39 %30 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %39 %30 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpExtInst %1 40 %370 %171 
                                Private f32* %372 = OpAccessChain %39 %30 
                                                      OpStore %372 %371 
                                         f32 %373 = OpLoad %160 
                                Private f32* %374 = OpAccessChain %39 %30 
                                         f32 %375 = OpLoad %374 
                                         f32 %376 = OpFMul %373 %375 
                                                      OpStore %160 %376 
                                         f32 %377 = OpLoad %160 
                                       f32_3 %378 = OpCompositeConstruct %377 %377 %377 
                              Uniform f32_4* %380 = OpAccessChain %17 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFMul %378 %382 
                                       f32_4 %384 = OpLoad %77 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %77 %385 
                                         f32 %386 = OpLoad %341 
                                         f32 %387 = OpExtInst %1 40 %386 %171 
                                                      OpStore %160 %387 
                                         f32 %388 = OpLoad %160 
                                         f32 %389 = OpExtInst %1 30 %388 
                                                      OpStore %160 %389 
                                         f32 %390 = OpLoad %160 
                                         f32 %391 = OpLoad %50 
                                         f32 %392 = OpFMul %390 %391 
                                                      OpStore %160 %392 
                                         f32 %393 = OpLoad %160 
                                         f32 %394 = OpExtInst %1 29 %393 
                                                      OpStore %160 %394 
                                Private f32* %395 = OpAccessChain %193 %30 
                                         f32 %396 = OpLoad %395 
                                         f32 %397 = OpLoad %160 
                                         f32 %398 = OpFMul %396 %397 
                                                      OpStore %160 %398 
                              Uniform f32_4* %399 = OpAccessChain %17 %379 
                                       f32_4 %400 = OpLoad %399 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                                         f32 %406 = OpDot %401 %405 
                                Private f32* %407 = OpAccessChain %193 %30 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %193 %30 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %160 
                                         f32 %411 = OpFMul %409 %410 
                                Private f32* %412 = OpAccessChain %77 %150 
                                                      OpStore %412 %411 
                                       f32_4 %413 = OpLoad %9 
                                       f32_4 %414 = OpVectorShuffle %413 %413 0 0 0 0 
                                       f32_4 %415 = OpLoad %77 
                                       f32_4 %416 = OpFMul %414 %415 
                                                      OpStore %9 %416 
                                       f32_4 %419 = OpLoad %9 
                                       f32_4 %420 = OpFNegate %419 
                                       f32_4 %421 = OpExtInst %1 29 %420 
                                                      OpStore %418 %421 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(3) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(4) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat6.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat6.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = max(abs(u_xlat3.y), abs(u_xlat3.x));
    u_xlat11 = max(abs(u_xlat3.z), u_xlat11);
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.z);
    u_xlat11 = max(u_xlat11, 9.99999975e-06);
    u_xlat11 = u_xlat11 * _LightProjectionParams.w;
    u_xlat11 = _LightProjectionParams.y / u_xlat11;
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat3.xyz,u_xlat11);
    u_xlat11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat16 = (-_LightShadowData.x) + 1.0;
    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
    u_xlat16 = (-u_xlat11) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat16 + u_xlat11;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = u_xlat1.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 477
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %91 %472 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpMemberDecorate %43 0 Offset 43 
                                                      OpMemberDecorate %43 1 Offset 43 
                                                      OpMemberDecorate %43 2 Offset 43 
                                                      OpMemberDecorate %43 3 Offset 43 
                                                      OpMemberDecorate %43 4 Offset 43 
                                                      OpMemberDecorate %43 5 Offset 43 
                                                      OpMemberDecorate %43 6 Offset 43 
                                                      OpMemberDecorate %43 7 Offset 43 
                                                      OpMemberDecorate %43 8 Offset 43 
                                                      OpMemberDecorate %43 9 Offset 43 
                                                      OpMemberDecorate %43 10 Offset 43 
                                                      OpDecorate %43 Block 
                                                      OpDecorate %45 DescriptorSet 45 
                                                      OpDecorate %45 Binding 45 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate vs_TEXCOORD1 Location 91 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %282 DescriptorSet 282 
                                                      OpDecorate %282 Binding 282 
                                                      OpDecorate %324 DescriptorSet 324 
                                                      OpDecorate %324 Binding 324 
                                                      OpDecorate %326 DescriptorSet 326 
                                                      OpDecorate %326 Binding 326 
                                                      OpDecorate %472 Location 472 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %7 %7 %7 
                                              %44 = OpTypePointer Uniform %43 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %45 = OpVariable Uniform 
                                              %46 = OpTypeInt 32 1 
                                          i32 %47 = OpConstant 10 
                                              %48 = OpTypePointer Uniform %7 
                               Private f32_4* %59 = OpVariable Private 
         UniformConstant read_only Texture2D* %60 = OpVariable UniformConstant 
                     UniformConstant sampler* %62 = OpVariable UniformConstant 
                                          i32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %74 = OpConstant 1 
                                          f32 %79 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %40 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %86 = OpConstant 1 
                                          u32 %87 = OpConstant 2 
                                              %90 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %92 = OpTypePointer Input %6 
                              Private f32_4* %101 = OpVariable Private 
                              Private f32_3* %108 = OpVariable Private 
                                         i32 %111 = OpConstant 3 
                                         i32 %116 = OpConstant 0 
                                         i32 %148 = OpConstant 6 
                                         u32 %172 = OpConstant 3 
                                         i32 %184 = OpConstant 5 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         i32 %199 = OpConstant 9 
                                         i32 %218 = OpConstant 7 
                                             %226 = OpTypePointer Uniform %40 
                                         i32 %246 = OpConstant 4 
                                         f32 %252 = OpConstant 3.674022E-40 
                                             %270 = OpTypePointer Function %7 
                                             %278 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %279 = OpTypePointer UniformConstant %278 
      UniformConstant read_only TextureCube* %280 = OpVariable UniformConstant 
                    UniformConstant sampler* %282 = OpVariable UniformConstant 
                                             %284 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %285 = OpTypeSampledImage %284 
                                Private f32* %290 = OpVariable Private 
        UniformConstant read_only Texture2D* %324 = OpVariable UniformConstant 
                    UniformConstant sampler* %326 = OpVariable UniformConstant 
                                         f32 %376 = OpConstant 3.674022E-40 
                                       f32_3 %377 = OpConstantComposite %376 %376 %376 
                                         f32 %379 = OpConstant 3.674022E-40 
                                       f32_3 %380 = OpConstantComposite %379 %379 %379 
                                         f32 %386 = OpConstant 3.674022E-40 
                                Private f32* %388 = OpVariable Private 
                                         i32 %426 = OpConstant 8 
                                         f32 %457 = OpConstant 3.674022E-40 
                                         f32 %458 = OpConstant 3.674022E-40 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_3 %460 = OpConstantComposite %457 %458 %459 
                                             %471 = OpTypePointer Output %7 
                               Output f32_4* %472 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %271 = OpVariable Function 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %49 = OpAccessChain %45 %47 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                                        f32_2 %52 = OpFMul %39 %51 
                               Uniform f32_4* %53 = OpAccessChain %45 %47 
                                        f32_4 %54 = OpLoad %53 
                                        f32_2 %55 = OpVectorShuffle %54 %54 2 3 
                                        f32_2 %56 = OpFAdd %52 %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %56 4 5 2 3 
                                                      OpStore %9 %58 
                          read_only Texture2D %61 = OpLoad %60 
                                      sampler %63 = OpLoad %62 
                   read_only Texture2DSampled %64 = OpSampledImage %61 %63 
                                        f32_4 %65 = OpLoad %9 
                                        f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                                        f32_4 %67 = OpImageSampleImplicitLod %64 %66 
                                                      OpStore %59 %67 
                                 Uniform f32* %70 = OpAccessChain %45 %68 %36 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpLoad %21 
                                          f32 %73 = OpFMul %71 %72 
                                 Uniform f32* %75 = OpAccessChain %45 %68 %74 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFAdd %73 %76 
                                 Private f32* %78 = OpAccessChain %9 %36 
                                                      OpStore %78 %77 
                                 Private f32* %80 = OpAccessChain %9 %36 
                                          f32 %81 = OpLoad %80 
                                          f32 %82 = OpFDiv %79 %81 
                                 Private f32* %83 = OpAccessChain %9 %36 
                                                      OpStore %83 %82 
                                 Uniform f32* %88 = OpAccessChain %45 %86 %87 
                                          f32 %89 = OpLoad %88 
                                   Input f32* %93 = OpAccessChain vs_TEXCOORD1 %87 
                                          f32 %94 = OpLoad %93 
                                          f32 %95 = OpFDiv %89 %94 
                                 Private f32* %96 = OpAccessChain %85 %36 
                                                      OpStore %96 %95 
                                        f32_3 %97 = OpLoad %85 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad vs_TEXCOORD1 
                                       f32_3 %100 = OpFMul %98 %99 
                                                      OpStore %85 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad %85 
                                       f32_3 %105 = OpFMul %103 %104 
                                       f32_4 %106 = OpLoad %101 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %101 %107 
                                       f32_4 %109 = OpLoad %101 
                                       f32_3 %110 = OpVectorShuffle %109 %109 1 1 1 
                              Uniform f32_4* %112 = OpAccessChain %45 %111 %86 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_3 %115 = OpFMul %110 %114 
                                                      OpStore %108 %115 
                              Uniform f32_4* %117 = OpAccessChain %45 %111 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_4 %120 = OpLoad %101 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 0 0 
                                       f32_3 %122 = OpFMul %119 %121 
                                       f32_3 %123 = OpLoad %108 
                                       f32_3 %124 = OpFAdd %122 %123 
                                       f32_4 %125 = OpLoad %101 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %101 %126 
                              Uniform f32_4* %127 = OpAccessChain %45 %111 %68 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_4 %130 = OpLoad %101 
                                       f32_3 %131 = OpVectorShuffle %130 %130 2 2 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %101 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                                       f32_3 %135 = OpFAdd %132 %134 
                                       f32_4 %136 = OpLoad %101 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %101 %137 
                                       f32_4 %138 = OpLoad %101 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                              Uniform f32_4* %140 = OpAccessChain %45 %111 %111 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %139 %142 
                                       f32_4 %144 = OpLoad %101 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 2 6 
                                                      OpStore %101 %145 
                                       f32_4 %146 = OpLoad %101 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 3 
                              Uniform f32_4* %149 = OpAccessChain %45 %148 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFNegate %151 
                                       f32_3 %153 = OpFAdd %147 %152 
                                                      OpStore %108 %153 
                                       f32_3 %154 = OpLoad %108 
                                       f32_3 %155 = OpLoad %108 
                                         f32 %156 = OpDot %154 %155 
                                Private f32* %157 = OpAccessChain %85 %36 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %85 %36 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 31 %159 
                                Private f32* %161 = OpAccessChain %85 %36 
                                                      OpStore %161 %160 
                                Private f32* %162 = OpAccessChain %85 %87 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFNegate %163 
                                Private f32* %165 = OpAccessChain %9 %36 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFMul %164 %166 
                                Private f32* %168 = OpAccessChain %85 %36 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFAdd %167 %169 
                                Private f32* %171 = OpAccessChain %9 %36 
                                                      OpStore %171 %170 
                                Uniform f32* %173 = OpAccessChain %45 %148 %172 
                                         f32 %174 = OpLoad %173 
                                Private f32* %175 = OpAccessChain %9 %36 
                                         f32 %176 = OpLoad %175 
                                         f32 %177 = OpFMul %174 %176 
                                Private f32* %178 = OpAccessChain %101 %87 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFAdd %177 %179 
                                Private f32* %181 = OpAccessChain %9 %36 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %9 %36 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %45 %184 %87 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpFMul %183 %186 
                                Uniform f32* %188 = OpAccessChain %45 %184 %172 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFAdd %187 %189 
                                Private f32* %191 = OpAccessChain %85 %36 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %85 %36 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpExtInst %1 43 %193 %194 %79 
                                Private f32* %196 = OpAccessChain %85 %36 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %9 %36 
                                         f32 %198 = OpLoad %197 
                                Uniform f32* %200 = OpAccessChain %45 %199 %87 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFMul %198 %201 
                                Uniform f32* %203 = OpAccessChain %45 %199 %172 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFAdd %202 %204 
                                Private f32* %206 = OpAccessChain %9 %36 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %9 %36 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %209 %79 
                                Private f32* %211 = OpAccessChain %9 %36 
                                                      OpStore %211 %210 
                                Private f32* %212 = OpAccessChain %9 %36 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpExtInst %1 43 %213 %194 %79 
                                Private f32* %215 = OpAccessChain %9 %36 
                                                      OpStore %215 %214 
                                       f32_4 %216 = OpLoad %101 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 3 
                              Uniform f32_4* %219 = OpAccessChain %45 %218 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFNegate %221 
                                       f32_3 %223 = OpFAdd %217 %222 
                                                      OpStore %108 %223 
                                       f32_4 %224 = OpLoad %101 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 3 
                              Uniform f32_3* %227 = OpAccessChain %45 %116 
                                       f32_3 %228 = OpLoad %227 
                                       f32_3 %229 = OpFNegate %228 
                                       f32_3 %230 = OpFAdd %225 %229 
                                       f32_4 %231 = OpLoad %101 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %101 %232 
                                Private f32* %233 = OpAccessChain %108 %74 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpExtInst %1 4 %234 
                                Private f32* %236 = OpAccessChain %108 %36 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 4 %237 
                                         f32 %239 = OpExtInst %1 40 %235 %238 
                                                      OpStore %21 %239 
                                Private f32* %240 = OpAccessChain %108 %87 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpExtInst %1 4 %241 
                                         f32 %243 = OpLoad %21 
                                         f32 %244 = OpExtInst %1 40 %242 %243 
                                                      OpStore %21 %244 
                                         f32 %245 = OpLoad %21 
                                Uniform f32* %247 = OpAccessChain %45 %246 %87 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFNegate %248 
                                         f32 %250 = OpFAdd %245 %249 
                                                      OpStore %21 %250 
                                         f32 %251 = OpLoad %21 
                                         f32 %253 = OpExtInst %1 40 %251 %252 
                                                      OpStore %21 %253 
                                         f32 %254 = OpLoad %21 
                                Uniform f32* %255 = OpAccessChain %45 %246 %172 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %254 %256 
                                                      OpStore %21 %257 
                                Uniform f32* %258 = OpAccessChain %45 %246 %74 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpLoad %21 
                                         f32 %261 = OpFDiv %259 %260 
                                                      OpStore %21 %261 
                                         f32 %262 = OpLoad %21 
                                Uniform f32* %263 = OpAccessChain %45 %246 %36 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %262 %265 
                                                      OpStore %21 %266 
                                         f32 %267 = OpLoad %21 
                                         f32 %268 = OpFNegate %267 
                                         f32 %269 = OpFAdd %268 %79 
                                                      OpStore %21 %269 
                                       f32_3 %272 = OpLoad %108 
                                         f32 %273 = OpLoad %21 
                                         f32 %274 = OpCompositeExtract %272 0 
                                         f32 %275 = OpCompositeExtract %272 1 
                                         f32 %276 = OpCompositeExtract %272 2 
                                       f32_4 %277 = OpCompositeConstruct %274 %275 %276 %273 
                                                      OpStore %271 %277 
                       read_only TextureCube %281 = OpLoad %280 
                                     sampler %283 = OpLoad %282 
                read_only TextureCubeSampled %286 = OpSampledImage %281 %283 
                                       f32_4 %287 = OpLoad %271 
                                         f32 %288 = OpCompositeExtract %287 3 
                                         f32 %289 = OpImageSampleDrefImplicitLod %286 %287 %288 
                                                      OpStore %21 %289 
                                Uniform f32* %291 = OpAccessChain %45 %184 %36 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFNegate %292 
                                         f32 %294 = OpFAdd %293 %79 
                                                      OpStore %290 %294 
                                         f32 %295 = OpLoad %21 
                                         f32 %296 = OpLoad %290 
                                         f32 %297 = OpFMul %295 %296 
                                Uniform f32* %298 = OpAccessChain %45 %184 %36 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFAdd %297 %299 
                                                      OpStore %21 %300 
                                         f32 %301 = OpLoad %21 
                                         f32 %302 = OpFNegate %301 
                                         f32 %303 = OpFAdd %302 %79 
                                                      OpStore %290 %303 
                                Private f32* %304 = OpAccessChain %85 %36 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpLoad %290 
                                         f32 %307 = OpFMul %305 %306 
                                         f32 %308 = OpLoad %21 
                                         f32 %309 = OpFAdd %307 %308 
                                Private f32* %310 = OpAccessChain %85 %36 
                                                      OpStore %310 %309 
                                       f32_3 %311 = OpLoad %108 
                                       f32_3 %312 = OpLoad %108 
                                         f32 %313 = OpDot %311 %312 
                                                      OpStore %21 %313 
                                         f32 %314 = OpLoad %21 
                                Uniform f32* %315 = OpAccessChain %45 %218 %172 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                                      OpStore %290 %317 
                                         f32 %318 = OpLoad %21 
                                         f32 %319 = OpExtInst %1 32 %318 
                                                      OpStore %21 %319 
                                         f32 %320 = OpLoad %21 
                                       f32_3 %321 = OpCompositeConstruct %320 %320 %320 
                                       f32_3 %322 = OpLoad %108 
                                       f32_3 %323 = OpFMul %321 %322 
                                                      OpStore %108 %323 
                         read_only Texture2D %325 = OpLoad %324 
                                     sampler %327 = OpLoad %326 
                  read_only Texture2DSampled %328 = OpSampledImage %325 %327 
                                         f32 %329 = OpLoad %290 
                                       f32_2 %330 = OpCompositeConstruct %329 %329 
                                       f32_4 %331 = OpImageSampleImplicitLod %328 %330 
                                         f32 %332 = OpCompositeExtract %331 0 
                                                      OpStore %21 %332 
                                Private f32* %333 = OpAccessChain %85 %36 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpLoad %21 
                                         f32 %336 = OpFMul %334 %335 
                                Private f32* %337 = OpAccessChain %85 %36 
                                                      OpStore %337 %336 
                                Private f32* %338 = OpAccessChain %85 %36 
                                         f32 %339 = OpLoad %338 
                                                      OpStore %21 %339 
                                         f32 %340 = OpLoad %21 
                                         f32 %341 = OpExtInst %1 43 %340 %194 %79 
                                                      OpStore %21 %341 
                                       f32_4 %342 = OpLoad %101 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %101 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpDot %343 %345 
                                                      OpStore %290 %346 
                                         f32 %347 = OpLoad %290 
                                         f32 %348 = OpExtInst %1 32 %347 
                                                      OpStore %290 %348 
                                       f32_4 %349 = OpLoad %101 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFNegate %350 
                                         f32 %352 = OpLoad %290 
                                       f32_3 %353 = OpCompositeConstruct %352 %352 %352 
                                       f32_3 %354 = OpFMul %351 %353 
                                       f32_3 %355 = OpLoad %108 
                                       f32_3 %356 = OpFNegate %355 
                                       f32_3 %357 = OpFAdd %354 %356 
                                       f32_4 %358 = OpLoad %101 
                                       f32_4 %359 = OpVectorShuffle %358 %357 4 5 6 3 
                                                      OpStore %101 %359 
                                       f32_4 %360 = OpLoad %101 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %101 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %361 %363 
                                                      OpStore %290 %364 
                                         f32 %365 = OpLoad %290 
                                         f32 %366 = OpExtInst %1 32 %365 
                                                      OpStore %290 %366 
                                         f32 %367 = OpLoad %290 
                                       f32_3 %368 = OpCompositeConstruct %367 %367 %367 
                                       f32_4 %369 = OpLoad %101 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %368 %370 
                                       f32_4 %372 = OpLoad %101 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %101 %373 
                                       f32_4 %374 = OpLoad %59 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_3 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %59 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %59 %383 
                                Private f32* %384 = OpAccessChain %59 %172 
                                         f32 %385 = OpLoad %384 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %290 %387 
                                       f32_4 %389 = OpLoad %59 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %59 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                                      OpStore %388 %393 
                                         f32 %394 = OpLoad %388 
                                         f32 %395 = OpExtInst %1 32 %394 
                                                      OpStore %388 %395 
                                         f32 %396 = OpLoad %388 
                                       f32_3 %397 = OpCompositeConstruct %396 %396 %396 
                                       f32_4 %398 = OpLoad %59 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %59 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %59 %402 
                                       f32_4 %403 = OpLoad %101 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_4 %405 = OpLoad %59 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                         f32 %407 = OpDot %404 %406 
                                                      OpStore %388 %407 
                                       f32_3 %408 = OpLoad %108 
                                       f32_3 %409 = OpFNegate %408 
                                       f32_4 %410 = OpLoad %59 
                                       f32_3 %411 = OpVectorShuffle %410 %410 0 1 2 
                                         f32 %412 = OpDot %409 %411 
                                Private f32* %413 = OpAccessChain %59 %36 
                                                      OpStore %413 %412 
                                Private f32* %414 = OpAccessChain %59 %36 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpExtInst %1 40 %415 %194 
                                Private f32* %417 = OpAccessChain %59 %36 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %85 %36 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %59 %36 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %85 %36 
                                                      OpStore %423 %422 
                                       f32_3 %424 = OpLoad %85 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 0 0 
                              Uniform f32_4* %427 = OpAccessChain %45 %426 
                                       f32_4 %428 = OpLoad %427 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFMul %425 %429 
                                       f32_4 %431 = OpLoad %101 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %101 %432 
                                         f32 %433 = OpLoad %388 
                                         f32 %434 = OpExtInst %1 40 %433 %194 
                                Private f32* %435 = OpAccessChain %85 %36 
                                                      OpStore %435 %434 
                                Private f32* %436 = OpAccessChain %85 %36 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpExtInst %1 30 %437 
                                Private f32* %439 = OpAccessChain %85 %36 
                                                      OpStore %439 %438 
                                Private f32* %440 = OpAccessChain %85 %36 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpLoad %290 
                                         f32 %443 = OpFMul %441 %442 
                                Private f32* %444 = OpAccessChain %85 %36 
                                                      OpStore %444 %443 
                                Private f32* %445 = OpAccessChain %85 %36 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpExtInst %1 29 %446 
                                Private f32* %448 = OpAccessChain %85 %36 
                                                      OpStore %448 %447 
                                         f32 %449 = OpLoad %21 
                                Private f32* %450 = OpAccessChain %85 %36 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFMul %449 %451 
                                Private f32* %453 = OpAccessChain %85 %36 
                                                      OpStore %453 %452 
                              Uniform f32_4* %454 = OpAccessChain %45 %426 
                                       f32_4 %455 = OpLoad %454 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                         f32 %461 = OpDot %456 %460 
                                                      OpStore %21 %461 
                                         f32 %462 = OpLoad %21 
                                Private f32* %463 = OpAccessChain %85 %36 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpFMul %462 %464 
                                Private f32* %466 = OpAccessChain %101 %172 
                                                      OpStore %466 %465 
                                       f32_4 %467 = OpLoad %9 
                                       f32_4 %468 = OpVectorShuffle %467 %467 0 0 0 0 
                                       f32_4 %469 = OpLoad %101 
                                       f32_4 %470 = OpFMul %468 %469 
                                                      OpStore %9 %470 
                                       f32_4 %473 = OpLoad %9 
                                       f32_4 %474 = OpFNegate %473 
                                       f32_4 %475 = OpExtInst %1 29 %474 
                                                      OpStore %472 %475 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(3) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(4) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat13);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat19);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat13 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb19 = u_xlat13<0.99000001;
    if(u_xlatb19){
        u_xlat19 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat19 = max(abs(u_xlat6.z), u_xlat19);
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.z);
        u_xlat19 = max(u_xlat19, 9.99999975e-06);
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat19 = _LightProjectionParams.y / u_xlat19;
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.x);
        u_xlat10.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat19);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat12.x = (-_LightShadowData.x) + 1.0;
        u_xlat6.x = u_xlat6.x * u_xlat12.x + _LightShadowData.x;
    } else {
        u_xlat6.x = 1.0;
    }
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat13 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat12.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat12.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat18) + (-u_xlat3.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat12.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12.xy = max(u_xlat12.xy, vec2(0.0, 0.0));
    u_xlat1.x = u_xlat1.w * 128.0;
    u_xlat18 = log2(u_xlat12.y);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat1.x = u_xlat6.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat1.xyz = u_xlat6.xxx * _LightColor.xyz;
    u_xlat6.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat6.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 558
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %553 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpMemberDecorate %14 10 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %385 DescriptorSet 385 
                                                      OpDecorate %385 Binding 385 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %553 Location 553 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                                              %84 = OpTypePointer Private %10 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %149 = OpConstant 3 
                              Private f32_3* %159 = OpVariable Private 
                                         i32 %162 = OpConstant 7 
                                Private f32* %168 = OpVariable Private 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %183 = OpVariable UniformConstant 
                    UniformConstant sampler* %185 = OpVariable UniformConstant 
                                         i32 %194 = OpConstant 5 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %204 = OpTypeBool 
                                             %205 = OpTypePointer Private %204 
                               Private bool* %206 = OpVariable Private 
                                         f32 %208 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
                                         i32 %227 = OpConstant 4 
                                         f32 %233 = OpConstant 3.674022E-40 
                              Private f32_4* %251 = OpVariable Private 
                                         f32 %253 = OpConstant 3.674022E-40 
                                       f32_3 %254 = OpConstantComposite %253 %253 %253 
                                             %258 = OpTypePointer Function %7 
                                             %267 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %268 = OpTypePointer UniformConstant %267 
      UniformConstant read_only TextureCube* %269 = OpVariable UniformConstant 
                    UniformConstant sampler* %271 = OpVariable UniformConstant 
                                             %273 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %274 = OpTypeSampledImage %273 
                              Private f32_3* %280 = OpVariable Private 
                                         f32 %282 = OpConstant 3.674022E-40 
                                       f32_3 %283 = OpConstantComposite %282 %282 %253 
                                       f32_3 %300 = OpConstantComposite %282 %253 %282 
                                       f32_3 %317 = OpConstantComposite %253 %282 %282 
                                         f32 %334 = OpConstant 3.674022E-40 
                                       f32_4 %335 = OpConstantComposite %334 %334 %334 %334 
                                             %338 = OpTypePointer Private %41 
                              Private f32_2* %339 = OpVariable Private 
                                         i32 %376 = OpConstant 10 
        UniformConstant read_only Texture2D* %385 = OpVariable UniformConstant 
                    UniformConstant sampler* %387 = OpVariable UniformConstant 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
                                         f32 %397 = OpConstant 3.674022E-40 
                                       f32_3 %398 = OpConstantComposite %397 %397 %397 
                                             %427 = OpTypePointer Uniform %10 
                                       f32_2 %473 = OpConstantComposite %202 %202 
                                         f32 %477 = OpConstant 3.674022E-40 
                                         i32 %508 = OpConstant 8 
                                         f32 %518 = OpConstant 3.674022E-40 
                                         f32 %519 = OpConstant 3.674022E-40 
                                         f32 %520 = OpConstant 3.674022E-40 
                                       f32_3 %521 = OpConstantComposite %518 %519 %520 
                                         i32 %531 = OpConstant 9 
                                             %552 = OpTypePointer Output %7 
                               Output f32_4* %553 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %259 = OpVariable Function 
                             Function f32_4* %285 = OpVariable Function 
                             Function f32_4* %302 = OpVariable Function 
                             Function f32_4* %319 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %76 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %76 %83 
                                        f32_4 %86 = OpLoad %76 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %16 %88 %18 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %76 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %76 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %76 %104 
                              Uniform f32_4* %105 = OpAccessChain %16 %88 %64 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %76 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %76 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %76 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %76 %115 
                                       f32_4 %116 = OpLoad %76 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %16 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %76 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %76 %123 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %16 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                                      OpStore %85 %131 
                                       f32_3 %132 = OpLoad %85 
                                       f32_3 %133 = OpLoad %85 
                                         f32 %134 = OpDot %132 %133 
                                Private f32* %135 = OpAccessChain %9 %29 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 31 %137 
                                Private f32* %139 = OpAccessChain %9 %29 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %19 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpLoad %49 
                                         f32 %144 = OpFMul %142 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFAdd %144 %146 
                                Private f32* %148 = OpAccessChain %9 %29 
                                                      OpStore %148 %147 
                                Uniform f32* %150 = OpAccessChain %16 %126 %149 
                                         f32 %151 = OpLoad %150 
                                Private f32* %152 = OpAccessChain %9 %29 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %151 %153 
                                Private f32* %155 = OpAccessChain %76 %19 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %154 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                                      OpStore %158 %157 
                                       f32_4 %160 = OpLoad %76 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 3 
                              Uniform f32_4* %163 = OpAccessChain %16 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFAdd %161 %166 
                                                      OpStore %159 %167 
                                       f32_3 %169 = OpLoad %159 
                                       f32_3 %170 = OpLoad %159 
                                         f32 %171 = OpDot %169 %170 
                                                      OpStore %168 %171 
                                         f32 %173 = OpLoad %168 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %172 %174 
                                       f32_3 %175 = OpLoad %159 
                                         f32 %176 = OpLoad %172 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %85 %178 
                                         f32 %179 = OpLoad %168 
                                Uniform f32* %180 = OpAccessChain %16 %162 %149 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFMul %179 %181 
                                                      OpStore %168 %182 
                         read_only Texture2D %184 = OpLoad %183 
                                     sampler %186 = OpLoad %185 
                  read_only Texture2DSampled %187 = OpSampledImage %184 %186 
                                         f32 %188 = OpLoad %168 
                                       f32_2 %189 = OpCompositeConstruct %188 %188 
                                       f32_4 %190 = OpImageSampleImplicitLod %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                                      OpStore %168 %191 
                                Private f32* %192 = OpAccessChain %9 %29 
                                         f32 %193 = OpLoad %192 
                                Uniform f32* %195 = OpAccessChain %16 %194 %19 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %193 %196 
                                Uniform f32* %198 = OpAccessChain %16 %194 %149 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFAdd %197 %199 
                                                      OpStore %172 %200 
                                         f32 %201 = OpLoad %172 
                                         f32 %203 = OpExtInst %1 43 %201 %202 %73 
                                                      OpStore %172 %203 
                                         f32 %207 = OpLoad %172 
                                        bool %209 = OpFOrdLessThan %207 %208 
                                                      OpStore %206 %209 
                                        bool %210 = OpLoad %206 
                                                      OpSelectionMerge %212 None 
                                                      OpBranchConditional %210 %211 %354 
                                             %211 = OpLabel 
                                Private f32* %214 = OpAccessChain %159 %69 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                Private f32* %217 = OpAccessChain %159 %29 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpExtInst %1 4 %218 
                                         f32 %220 = OpExtInst %1 40 %216 %219 
                                                      OpStore %213 %220 
                                Private f32* %221 = OpAccessChain %159 %19 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpExtInst %1 4 %222 
                                         f32 %224 = OpLoad %213 
                                         f32 %225 = OpExtInst %1 40 %223 %224 
                                                      OpStore %213 %225 
                                         f32 %226 = OpLoad %213 
                                Uniform f32* %228 = OpAccessChain %16 %227 %19 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpFNegate %229 
                                         f32 %231 = OpFAdd %226 %230 
                                                      OpStore %213 %231 
                                         f32 %232 = OpLoad %213 
                                         f32 %234 = OpExtInst %1 40 %232 %233 
                                                      OpStore %213 %234 
                                         f32 %235 = OpLoad %213 
                                Uniform f32* %236 = OpAccessChain %16 %227 %149 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFMul %235 %237 
                                                      OpStore %213 %238 
                                Uniform f32* %239 = OpAccessChain %16 %227 %69 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpLoad %213 
                                         f32 %242 = OpFDiv %240 %241 
                                                      OpStore %213 %242 
                                         f32 %243 = OpLoad %213 
                                Uniform f32* %244 = OpAccessChain %16 %227 %29 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFAdd %243 %246 
                                                      OpStore %213 %247 
                                         f32 %248 = OpLoad %213 
                                         f32 %249 = OpFNegate %248 
                                         f32 %250 = OpFAdd %249 %73 
                                                      OpStore %213 %250 
                                       f32_3 %252 = OpLoad %159 
                                       f32_3 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %251 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                      OpStore %251 %257 
                                       f32_4 %260 = OpLoad %251 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                         f32 %262 = OpLoad %213 
                                         f32 %263 = OpCompositeExtract %261 0 
                                         f32 %264 = OpCompositeExtract %261 1 
                                         f32 %265 = OpCompositeExtract %261 2 
                                       f32_4 %266 = OpCompositeConstruct %263 %264 %265 %262 
                                                      OpStore %259 %266 
                       read_only TextureCube %270 = OpLoad %269 
                                     sampler %272 = OpLoad %271 
                read_only TextureCubeSampled %275 = OpSampledImage %270 %272 
                                       f32_4 %276 = OpLoad %259 
                                         f32 %277 = OpCompositeExtract %276 3 
                                         f32 %278 = OpImageSampleDrefImplicitLod %275 %276 %277 
                                Private f32* %279 = OpAccessChain %251 %29 
                                                      OpStore %279 %278 
                                       f32_3 %281 = OpLoad %159 
                                       f32_3 %284 = OpFAdd %281 %283 
                                                      OpStore %280 %284 
                                       f32_3 %286 = OpLoad %280 
                                         f32 %287 = OpLoad %213 
                                         f32 %288 = OpCompositeExtract %286 0 
                                         f32 %289 = OpCompositeExtract %286 1 
                                         f32 %290 = OpCompositeExtract %286 2 
                                       f32_4 %291 = OpCompositeConstruct %288 %289 %290 %287 
                                                      OpStore %285 %291 
                       read_only TextureCube %292 = OpLoad %269 
                                     sampler %293 = OpLoad %271 
                read_only TextureCubeSampled %294 = OpSampledImage %292 %293 
                                       f32_4 %295 = OpLoad %285 
                                         f32 %296 = OpCompositeExtract %295 3 
                                         f32 %297 = OpImageSampleDrefImplicitLod %294 %295 %296 
                                Private f32* %298 = OpAccessChain %251 %69 
                                                      OpStore %298 %297 
                                       f32_3 %299 = OpLoad %159 
                                       f32_3 %301 = OpFAdd %299 %300 
                                                      OpStore %280 %301 
                                       f32_3 %303 = OpLoad %280 
                                         f32 %304 = OpLoad %213 
                                         f32 %305 = OpCompositeExtract %303 0 
                                         f32 %306 = OpCompositeExtract %303 1 
                                         f32 %307 = OpCompositeExtract %303 2 
                                       f32_4 %308 = OpCompositeConstruct %305 %306 %307 %304 
                                                      OpStore %302 %308 
                       read_only TextureCube %309 = OpLoad %269 
                                     sampler %310 = OpLoad %271 
                read_only TextureCubeSampled %311 = OpSampledImage %309 %310 
                                       f32_4 %312 = OpLoad %302 
                                         f32 %313 = OpCompositeExtract %312 3 
                                         f32 %314 = OpImageSampleDrefImplicitLod %311 %312 %313 
                                Private f32* %315 = OpAccessChain %251 %19 
                                                      OpStore %315 %314 
                                       f32_3 %316 = OpLoad %159 
                                       f32_3 %318 = OpFAdd %316 %317 
                                                      OpStore %159 %318 
                                       f32_3 %320 = OpLoad %159 
                                         f32 %321 = OpLoad %213 
                                         f32 %322 = OpCompositeExtract %320 0 
                                         f32 %323 = OpCompositeExtract %320 1 
                                         f32 %324 = OpCompositeExtract %320 2 
                                       f32_4 %325 = OpCompositeConstruct %322 %323 %324 %321 
                                                      OpStore %319 %325 
                       read_only TextureCube %326 = OpLoad %269 
                                     sampler %327 = OpLoad %271 
                read_only TextureCubeSampled %328 = OpSampledImage %326 %327 
                                       f32_4 %329 = OpLoad %319 
                                         f32 %330 = OpCompositeExtract %329 3 
                                         f32 %331 = OpImageSampleDrefImplicitLod %328 %329 %330 
                                Private f32* %332 = OpAccessChain %251 %149 
                                                      OpStore %332 %331 
                                       f32_4 %333 = OpLoad %251 
                                         f32 %336 = OpDot %333 %335 
                                Private f32* %337 = OpAccessChain %159 %29 
                                                      OpStore %337 %336 
                                Uniform f32* %340 = OpAccessChain %16 %194 %29 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %342 %73 
                                Private f32* %344 = OpAccessChain %339 %29 
                                                      OpStore %344 %343 
                                Private f32* %345 = OpAccessChain %159 %29 
                                         f32 %346 = OpLoad %345 
                                Private f32* %347 = OpAccessChain %339 %29 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                Uniform f32* %350 = OpAccessChain %16 %194 %29 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFAdd %349 %351 
                                Private f32* %353 = OpAccessChain %159 %29 
                                                      OpStore %353 %352 
                                                      OpBranch %212 
                                             %354 = OpLabel 
                                Private f32* %355 = OpAccessChain %159 %29 
                                                      OpStore %355 %73 
                                                      OpBranch %212 
                                             %212 = OpLabel 
                                Private f32* %356 = OpAccessChain %159 %29 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFNegate %357 
                                         f32 %359 = OpFAdd %358 %73 
                                Private f32* %360 = OpAccessChain %339 %29 
                                                      OpStore %360 %359 
                                         f32 %361 = OpLoad %172 
                                Private f32* %362 = OpAccessChain %339 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                Private f32* %365 = OpAccessChain %159 %29 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFAdd %364 %366 
                                Private f32* %368 = OpAccessChain %159 %29 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %159 %29 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpLoad %168 
                                         f32 %372 = OpFMul %370 %371 
                                Private f32* %373 = OpAccessChain %159 %29 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %38 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                              Uniform f32_4* %377 = OpAccessChain %16 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                       f32_2 %380 = OpFMul %375 %379 
                              Uniform f32_4* %381 = OpAccessChain %16 %376 
                                       f32_4 %382 = OpLoad %381 
                                       f32_2 %383 = OpVectorShuffle %382 %382 2 3 
                                       f32_2 %384 = OpFAdd %380 %383 
                                                      OpStore %339 %384 
                         read_only Texture2D %386 = OpLoad %385 
                                     sampler %388 = OpLoad %387 
                  read_only Texture2DSampled %389 = OpSampledImage %386 %388 
                                       f32_2 %390 = OpLoad %339 
                                       f32_4 %391 = OpImageSampleImplicitLod %389 %390 
                                                      OpStore %38 %391 
                                       f32_4 %392 = OpLoad %38 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %396 = OpFMul %393 %395 
                                       f32_3 %399 = OpFAdd %396 %398 
                                       f32_4 %400 = OpLoad %38 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %38 %401 
                                       f32_4 %402 = OpLoad %38 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_4 %404 = OpLoad %38 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                         f32 %406 = OpDot %403 %405 
                                Private f32* %407 = OpAccessChain %339 %29 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %339 %29 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 32 %409 
                                Private f32* %411 = OpAccessChain %339 %29 
                                                      OpStore %411 %410 
                                       f32_2 %412 = OpLoad %339 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 0 0 
                                       f32_4 %414 = OpLoad %38 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %38 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %38 %418 
                                       f32_3 %419 = OpLoad %85 
                                       f32_3 %420 = OpFNegate %419 
                                       f32_4 %421 = OpLoad %38 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                         f32 %423 = OpDot %420 %422 
                                Private f32* %424 = OpAccessChain %339 %29 
                                                      OpStore %424 %423 
                                       f32_4 %425 = OpLoad %76 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 3 
                              Uniform f32_3* %428 = OpAccessChain %16 %94 
                                       f32_3 %429 = OpLoad %428 
                                       f32_3 %430 = OpFNegate %429 
                                       f32_3 %431 = OpFAdd %426 %430 
                                       f32_4 %432 = OpLoad %76 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %76 %433 
                                       f32_4 %434 = OpLoad %76 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_4 %436 = OpLoad %76 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                         f32 %438 = OpDot %435 %437 
                                                      OpStore %49 %438 
                                         f32 %439 = OpLoad %49 
                                         f32 %440 = OpExtInst %1 32 %439 
                                                      OpStore %49 %440 
                                       f32_4 %441 = OpLoad %76 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpFNegate %442 
                                         f32 %444 = OpLoad %49 
                                       f32_3 %445 = OpCompositeConstruct %444 %444 %444 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_3 %447 = OpLoad %85 
                                       f32_3 %448 = OpFNegate %447 
                                       f32_3 %449 = OpFAdd %446 %448 
                                       f32_4 %450 = OpLoad %76 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                                      OpStore %76 %451 
                                       f32_4 %452 = OpLoad %76 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                       f32_4 %454 = OpLoad %76 
                                       f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                                         f32 %456 = OpDot %453 %455 
                                                      OpStore %49 %456 
                                         f32 %457 = OpLoad %49 
                                         f32 %458 = OpExtInst %1 32 %457 
                                                      OpStore %49 %458 
                                         f32 %459 = OpLoad %49 
                                       f32_3 %460 = OpCompositeConstruct %459 %459 %459 
                                       f32_4 %461 = OpLoad %76 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpFMul %460 %462 
                                       f32_4 %464 = OpLoad %76 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %76 %465 
                                       f32_4 %466 = OpLoad %76 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_4 %468 = OpLoad %38 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %467 %469 
                                Private f32* %471 = OpAccessChain %339 %69 
                                                      OpStore %471 %470 
                                       f32_2 %472 = OpLoad %339 
                                       f32_2 %474 = OpExtInst %1 40 %472 %473 
                                                      OpStore %339 %474 
                                Private f32* %475 = OpAccessChain %38 %149 
                                         f32 %476 = OpLoad %475 
                                         f32 %478 = OpFMul %476 %477 
                                Private f32* %479 = OpAccessChain %38 %29 
                                                      OpStore %479 %478 
                                Private f32* %480 = OpAccessChain %339 %69 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpExtInst %1 30 %481 
                                                      OpStore %49 %482 
                                         f32 %483 = OpLoad %49 
                                Private f32* %484 = OpAccessChain %38 %29 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                                      OpStore %49 %486 
                                         f32 %487 = OpLoad %49 
                                         f32 %488 = OpExtInst %1 29 %487 
                                                      OpStore %49 %488 
                                Private f32* %489 = OpAccessChain %159 %29 
                                         f32 %490 = OpLoad %489 
                                Private f32* %491 = OpAccessChain %38 %29 
                                                      OpStore %491 %490 
                                Private f32* %492 = OpAccessChain %38 %29 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpExtInst %1 43 %493 %202 %73 
                                Private f32* %495 = OpAccessChain %38 %29 
                                                      OpStore %495 %494 
                                         f32 %496 = OpLoad %49 
                                Private f32* %497 = OpAccessChain %38 %29 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpFMul %496 %498 
                                                      OpStore %49 %499 
                                Private f32* %500 = OpAccessChain %159 %29 
                                         f32 %501 = OpLoad %500 
                                Private f32* %502 = OpAccessChain %339 %29 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %501 %503 
                                Private f32* %505 = OpAccessChain %159 %29 
                                                      OpStore %505 %504 
                                       f32_3 %506 = OpLoad %159 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 0 0 
                              Uniform f32_4* %509 = OpAccessChain %16 %508 
                                       f32_4 %510 = OpLoad %509 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
                                       f32_3 %512 = OpFMul %507 %511 
                                       f32_4 %513 = OpLoad %38 
                                       f32_4 %514 = OpVectorShuffle %513 %512 4 5 6 3 
                                                      OpStore %38 %514 
                              Uniform f32_4* %515 = OpAccessChain %16 %508 
                                       f32_4 %516 = OpLoad %515 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                         f32 %522 = OpDot %517 %521 
                                Private f32* %523 = OpAccessChain %159 %29 
                                                      OpStore %523 %522 
                                Private f32* %524 = OpAccessChain %159 %29 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpLoad %49 
                                         f32 %527 = OpFMul %525 %526 
                                Private f32* %528 = OpAccessChain %38 %149 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %29 
                                         f32 %530 = OpLoad %529 
                                Uniform f32* %532 = OpAccessChain %16 %531 %19 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpFMul %530 %533 
                                Uniform f32* %535 = OpAccessChain %16 %531 %149 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFAdd %534 %536 
                                Private f32* %538 = OpAccessChain %9 %29 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %9 %29 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFNegate %540 
                                         f32 %542 = OpFAdd %541 %73 
                                Private f32* %543 = OpAccessChain %9 %29 
                                                      OpStore %543 %542 
                                Private f32* %544 = OpAccessChain %9 %29 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpExtInst %1 43 %545 %202 %73 
                                Private f32* %547 = OpAccessChain %9 %29 
                                                      OpStore %547 %546 
                                       f32_4 %548 = OpLoad %9 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 0 0 0 
                                       f32_4 %550 = OpLoad %38 
                                       f32_4 %551 = OpFMul %549 %550 
                                                      OpStore %9 %551 
                                       f32_4 %554 = OpLoad %9 
                                       f32_4 %555 = OpFNegate %554 
                                       f32_4 %556 = OpExtInst %1 29 %555 
                                                      OpStore %553 %556 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(5) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat6.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat6.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat11 = max(abs(u_xlat3.y), abs(u_xlat3.x));
    u_xlat11 = max(abs(u_xlat3.z), u_xlat11);
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.z);
    u_xlat11 = max(u_xlat11, 9.99999975e-06);
    u_xlat11 = u_xlat11 * _LightProjectionParams.w;
    u_xlat11 = _LightProjectionParams.y / u_xlat11;
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat3.xyz,u_xlat11);
    u_xlat11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat16 = (-_LightShadowData.x) + 1.0;
    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
    u_xlat16 = (-u_xlat11) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat16 + u_xlat11;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    u_xlat0 = u_xlat1.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 522
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %92 %517 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 11 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %42 ArrayStride 42 
                                                      OpDecorate %43 ArrayStride 43 
                                                      OpMemberDecorate %44 0 Offset 44 
                                                      OpMemberDecorate %44 1 Offset 44 
                                                      OpMemberDecorate %44 2 Offset 44 
                                                      OpMemberDecorate %44 3 Offset 44 
                                                      OpMemberDecorate %44 4 Offset 44 
                                                      OpMemberDecorate %44 5 Offset 44 
                                                      OpMemberDecorate %44 6 Offset 44 
                                                      OpMemberDecorate %44 7 Offset 44 
                                                      OpMemberDecorate %44 8 Offset 44 
                                                      OpMemberDecorate %44 9 Offset 44 
                                                      OpMemberDecorate %44 10 Offset 44 
                                                      OpMemberDecorate %44 11 Offset 44 
                                                      OpDecorate %44 Block 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %61 DescriptorSet 61 
                                                      OpDecorate %61 Binding 61 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate vs_TEXCOORD1 Location 92 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %316 DescriptorSet 316 
                                                      OpDecorate %316 Binding 316 
                                                      OpDecorate %318 DescriptorSet 318 
                                                      OpDecorate %318 Binding 318 
                                                      OpDecorate %368 DescriptorSet 368 
                                                      OpDecorate %368 Binding 368 
                                                      OpDecorate %370 DescriptorSet 370 
                                                      OpDecorate %370 Binding 370 
                                                      OpDecorate %517 Location 517 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %12 = OpTypeVector %6 2 
                                              %20 = OpTypePointer Private %6 
                                 Private f32* %21 = OpVariable Private 
                                              %22 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %23 = OpTypePointer UniformConstant %22 
         UniformConstant read_only Texture2D* %24 = OpVariable UniformConstant 
                                              %26 = OpTypeSampler 
                                              %27 = OpTypePointer UniformConstant %26 
                     UniformConstant sampler* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampledImage %22 
                                              %35 = OpTypeInt 32 0 
                                          u32 %36 = OpConstant 0 
                                              %40 = OpTypeVector %6 3 
                                          u32 %41 = OpConstant 4 
                                              %42 = OpTypeArray %7 %41 
                                              %43 = OpTypeArray %7 %41 
                                              %44 = OpTypeStruct %40 %7 %7 %42 %7 %7 %7 %7 %7 %7 %43 %7 
                                              %45 = OpTypePointer Uniform %44 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %46 = OpVariable Uniform 
                                              %47 = OpTypeInt 32 1 
                                          i32 %48 = OpConstant 11 
                                              %49 = OpTypePointer Uniform %7 
                               Private f32_4* %60 = OpVariable Private 
         UniformConstant read_only Texture2D* %61 = OpVariable UniformConstant 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                          i32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %75 = OpConstant 1 
                                          f32 %80 = OpConstant 3.674022E-40 
                                              %85 = OpTypePointer Private %40 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %87 = OpConstant 1 
                                          u32 %88 = OpConstant 2 
                                              %91 = OpTypePointer Input %40 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %93 = OpTypePointer Input %6 
                              Private f32_4* %102 = OpVariable Private 
                              Private f32_3* %109 = OpVariable Private 
                                         i32 %112 = OpConstant 3 
                                         i32 %117 = OpConstant 0 
                                         i32 %149 = OpConstant 6 
                                         u32 %173 = OpConstant 3 
                                         i32 %185 = OpConstant 5 
                                         f32 %195 = OpConstant 3.674022E-40 
                                         i32 %200 = OpConstant 9 
                                         i32 %219 = OpConstant 7 
                                         i32 %238 = OpConstant 4 
                                         f32 %244 = OpConstant 3.674022E-40 
                                             %262 = OpTypePointer Function %7 
                                             %270 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %271 = OpTypePointer UniformConstant %270 
      UniformConstant read_only TextureCube* %272 = OpVariable UniformConstant 
                    UniformConstant sampler* %274 = OpVariable UniformConstant 
                                             %276 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %277 = OpTypeSampledImage %276 
                                Private f32* %282 = OpVariable Private 
        UniformConstant read_only Texture2D* %316 = OpVariable UniformConstant 
                    UniformConstant sampler* %318 = OpVariable UniformConstant 
                              Private f32_3* %330 = OpVariable Private 
                                         i32 %333 = OpConstant 10 
                                             %356 = OpTypePointer Uniform %40 
      UniformConstant read_only TextureCube* %368 = OpVariable UniformConstant 
                    UniformConstant sampler* %370 = OpVariable UniformConstant 
                                             %372 = OpTypeSampledImage %270 
                                         f32 %375 = OpConstant 3.674022E-40 
                                         f32 %421 = OpConstant 3.674022E-40 
                                       f32_3 %422 = OpConstantComposite %421 %421 %421 
                                         f32 %424 = OpConstant 3.674022E-40 
                                       f32_3 %425 = OpConstantComposite %424 %424 %424 
                                         f32 %431 = OpConstant 3.674022E-40 
                                Private f32* %433 = OpVariable Private 
                                         i32 %471 = OpConstant 8 
                                         f32 %502 = OpConstant 3.674022E-40 
                                         f32 %503 = OpConstant 3.674022E-40 
                                         f32 %504 = OpConstant 3.674022E-40 
                                       f32_3 %505 = OpConstantComposite %502 %503 %504 
                                             %516 = OpTypePointer Output %7 
                               Output f32_4* %517 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %263 = OpVariable Function 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                        f32_4 %18 = OpLoad %9 
                                        f32_4 %19 = OpVectorShuffle %18 %17 4 5 2 3 
                                                      OpStore %9 %19 
                          read_only Texture2D %25 = OpLoad %24 
                                      sampler %29 = OpLoad %28 
                   read_only Texture2DSampled %31 = OpSampledImage %25 %29 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_4 %34 = OpImageSampleImplicitLod %31 %33 
                                          f32 %37 = OpCompositeExtract %34 0 
                                                      OpStore %21 %37 
                                        f32_4 %38 = OpLoad %9 
                                        f32_2 %39 = OpVectorShuffle %38 %38 0 1 
                               Uniform f32_4* %50 = OpAccessChain %46 %48 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                        f32_2 %53 = OpFMul %39 %52 
                               Uniform f32_4* %54 = OpAccessChain %46 %48 
                                        f32_4 %55 = OpLoad %54 
                                        f32_2 %56 = OpVectorShuffle %55 %55 2 3 
                                        f32_2 %57 = OpFAdd %53 %56 
                                        f32_4 %58 = OpLoad %9 
                                        f32_4 %59 = OpVectorShuffle %58 %57 4 5 2 3 
                                                      OpStore %9 %59 
                          read_only Texture2D %62 = OpLoad %61 
                                      sampler %64 = OpLoad %63 
                   read_only Texture2DSampled %65 = OpSampledImage %62 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_2 %67 = OpVectorShuffle %66 %66 0 1 
                                        f32_4 %68 = OpImageSampleImplicitLod %65 %67 
                                                      OpStore %60 %68 
                                 Uniform f32* %71 = OpAccessChain %46 %69 %36 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpLoad %21 
                                          f32 %74 = OpFMul %72 %73 
                                 Uniform f32* %76 = OpAccessChain %46 %69 %75 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFAdd %74 %77 
                                 Private f32* %79 = OpAccessChain %9 %36 
                                                      OpStore %79 %78 
                                 Private f32* %81 = OpAccessChain %9 %36 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFDiv %80 %82 
                                 Private f32* %84 = OpAccessChain %9 %36 
                                                      OpStore %84 %83 
                                 Uniform f32* %89 = OpAccessChain %46 %87 %88 
                                          f32 %90 = OpLoad %89 
                                   Input f32* %94 = OpAccessChain vs_TEXCOORD1 %88 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpFDiv %90 %95 
                                 Private f32* %97 = OpAccessChain %86 %36 
                                                      OpStore %97 %96 
                                        f32_3 %98 = OpLoad %86 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpLoad vs_TEXCOORD1 
                                       f32_3 %101 = OpFMul %99 %100 
                                                      OpStore %86 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpLoad %86 
                                       f32_3 %106 = OpFMul %104 %105 
                                       f32_4 %107 = OpLoad %102 
                                       f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                                      OpStore %102 %108 
                                       f32_4 %110 = OpLoad %102 
                                       f32_3 %111 = OpVectorShuffle %110 %110 1 1 1 
                              Uniform f32_4* %113 = OpAccessChain %46 %112 %87 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFMul %111 %115 
                                                      OpStore %109 %116 
                              Uniform f32_4* %118 = OpAccessChain %46 %112 %117 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_4 %121 = OpLoad %102 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 0 0 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_3 %124 = OpLoad %109 
                                       f32_3 %125 = OpFAdd %123 %124 
                                       f32_4 %126 = OpLoad %102 
                                       f32_4 %127 = OpVectorShuffle %126 %125 4 5 2 6 
                                                      OpStore %102 %127 
                              Uniform f32_4* %128 = OpAccessChain %46 %112 %69 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_4 %131 = OpLoad %102 
                                       f32_3 %132 = OpVectorShuffle %131 %131 2 2 2 
                                       f32_3 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %102 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 3 
                                       f32_3 %136 = OpFAdd %133 %135 
                                       f32_4 %137 = OpLoad %102 
                                       f32_4 %138 = OpVectorShuffle %137 %136 4 5 2 6 
                                                      OpStore %102 %138 
                                       f32_4 %139 = OpLoad %102 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 3 
                              Uniform f32_4* %141 = OpAccessChain %46 %112 %112 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFAdd %140 %143 
                                       f32_4 %145 = OpLoad %102 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 2 6 
                                                      OpStore %102 %146 
                                       f32_4 %147 = OpLoad %102 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 3 
                              Uniform f32_4* %150 = OpAccessChain %46 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %148 %153 
                                                      OpStore %109 %154 
                                       f32_3 %155 = OpLoad %109 
                                       f32_3 %156 = OpLoad %109 
                                         f32 %157 = OpDot %155 %156 
                                Private f32* %158 = OpAccessChain %86 %36 
                                                      OpStore %158 %157 
                                Private f32* %159 = OpAccessChain %86 %36 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpExtInst %1 31 %160 
                                Private f32* %162 = OpAccessChain %86 %36 
                                                      OpStore %162 %161 
                                Private f32* %163 = OpAccessChain %86 %88 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFNegate %164 
                                Private f32* %166 = OpAccessChain %9 %36 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFMul %165 %167 
                                Private f32* %169 = OpAccessChain %86 %36 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFAdd %168 %170 
                                Private f32* %172 = OpAccessChain %9 %36 
                                                      OpStore %172 %171 
                                Uniform f32* %174 = OpAccessChain %46 %149 %173 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %9 %36 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFMul %175 %177 
                                Private f32* %179 = OpAccessChain %102 %88 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFAdd %178 %180 
                                Private f32* %182 = OpAccessChain %9 %36 
                                                      OpStore %182 %181 
                                Private f32* %183 = OpAccessChain %9 %36 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %186 = OpAccessChain %46 %185 %88 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFMul %184 %187 
                                Uniform f32* %189 = OpAccessChain %46 %185 %173 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpFAdd %188 %190 
                                Private f32* %192 = OpAccessChain %86 %36 
                                                      OpStore %192 %191 
                                Private f32* %193 = OpAccessChain %86 %36 
                                         f32 %194 = OpLoad %193 
                                         f32 %196 = OpExtInst %1 43 %194 %195 %80 
                                Private f32* %197 = OpAccessChain %86 %36 
                                                      OpStore %197 %196 
                                Private f32* %198 = OpAccessChain %9 %36 
                                         f32 %199 = OpLoad %198 
                                Uniform f32* %201 = OpAccessChain %46 %200 %88 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFMul %199 %202 
                                Uniform f32* %204 = OpAccessChain %46 %200 %173 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFAdd %203 %205 
                                Private f32* %207 = OpAccessChain %9 %36 
                                                      OpStore %207 %206 
                                Private f32* %208 = OpAccessChain %9 %36 
                                         f32 %209 = OpLoad %208 
                                         f32 %210 = OpFNegate %209 
                                         f32 %211 = OpFAdd %210 %80 
                                Private f32* %212 = OpAccessChain %9 %36 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %9 %36 
                                         f32 %214 = OpLoad %213 
                                         f32 %215 = OpExtInst %1 43 %214 %195 %80 
                                Private f32* %216 = OpAccessChain %9 %36 
                                                      OpStore %216 %215 
                                       f32_4 %217 = OpLoad %102 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 3 
                              Uniform f32_4* %220 = OpAccessChain %46 %219 
                                       f32_4 %221 = OpLoad %220 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %218 %223 
                                                      OpStore %109 %224 
                                Private f32* %225 = OpAccessChain %109 %75 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpExtInst %1 4 %226 
                                Private f32* %228 = OpAccessChain %109 %36 
                                         f32 %229 = OpLoad %228 
                                         f32 %230 = OpExtInst %1 4 %229 
                                         f32 %231 = OpExtInst %1 40 %227 %230 
                                                      OpStore %21 %231 
                                Private f32* %232 = OpAccessChain %109 %88 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 4 %233 
                                         f32 %235 = OpLoad %21 
                                         f32 %236 = OpExtInst %1 40 %234 %235 
                                                      OpStore %21 %236 
                                         f32 %237 = OpLoad %21 
                                Uniform f32* %239 = OpAccessChain %46 %238 %88 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFNegate %240 
                                         f32 %242 = OpFAdd %237 %241 
                                                      OpStore %21 %242 
                                         f32 %243 = OpLoad %21 
                                         f32 %245 = OpExtInst %1 40 %243 %244 
                                                      OpStore %21 %245 
                                         f32 %246 = OpLoad %21 
                                Uniform f32* %247 = OpAccessChain %46 %238 %173 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFMul %246 %248 
                                                      OpStore %21 %249 
                                Uniform f32* %250 = OpAccessChain %46 %238 %75 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpLoad %21 
                                         f32 %253 = OpFDiv %251 %252 
                                                      OpStore %21 %253 
                                         f32 %254 = OpLoad %21 
                                Uniform f32* %255 = OpAccessChain %46 %238 %36 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFAdd %254 %257 
                                                      OpStore %21 %258 
                                         f32 %259 = OpLoad %21 
                                         f32 %260 = OpFNegate %259 
                                         f32 %261 = OpFAdd %260 %80 
                                                      OpStore %21 %261 
                                       f32_3 %264 = OpLoad %109 
                                         f32 %265 = OpLoad %21 
                                         f32 %266 = OpCompositeExtract %264 0 
                                         f32 %267 = OpCompositeExtract %264 1 
                                         f32 %268 = OpCompositeExtract %264 2 
                                       f32_4 %269 = OpCompositeConstruct %266 %267 %268 %265 
                                                      OpStore %263 %269 
                       read_only TextureCube %273 = OpLoad %272 
                                     sampler %275 = OpLoad %274 
                read_only TextureCubeSampled %278 = OpSampledImage %273 %275 
                                       f32_4 %279 = OpLoad %263 
                                         f32 %280 = OpCompositeExtract %279 3 
                                         f32 %281 = OpImageSampleDrefImplicitLod %278 %279 %280 
                                                      OpStore %21 %281 
                                Uniform f32* %283 = OpAccessChain %46 %185 %36 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFNegate %284 
                                         f32 %286 = OpFAdd %285 %80 
                                                      OpStore %282 %286 
                                         f32 %287 = OpLoad %21 
                                         f32 %288 = OpLoad %282 
                                         f32 %289 = OpFMul %287 %288 
                                Uniform f32* %290 = OpAccessChain %46 %185 %36 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFAdd %289 %291 
                                                      OpStore %21 %292 
                                         f32 %293 = OpLoad %21 
                                         f32 %294 = OpFNegate %293 
                                         f32 %295 = OpFAdd %294 %80 
                                                      OpStore %282 %295 
                                Private f32* %296 = OpAccessChain %86 %36 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpLoad %282 
                                         f32 %299 = OpFMul %297 %298 
                                         f32 %300 = OpLoad %21 
                                         f32 %301 = OpFAdd %299 %300 
                                Private f32* %302 = OpAccessChain %86 %36 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %109 
                                       f32_3 %304 = OpLoad %109 
                                         f32 %305 = OpDot %303 %304 
                                                      OpStore %21 %305 
                                         f32 %306 = OpLoad %21 
                                Uniform f32* %307 = OpAccessChain %46 %219 %173 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpFMul %306 %308 
                                                      OpStore %282 %309 
                                         f32 %310 = OpLoad %21 
                                         f32 %311 = OpExtInst %1 32 %310 
                                                      OpStore %21 %311 
                                         f32 %312 = OpLoad %21 
                                       f32_3 %313 = OpCompositeConstruct %312 %312 %312 
                                       f32_3 %314 = OpLoad %109 
                                       f32_3 %315 = OpFMul %313 %314 
                                                      OpStore %109 %315 
                         read_only Texture2D %317 = OpLoad %316 
                                     sampler %319 = OpLoad %318 
                  read_only Texture2DSampled %320 = OpSampledImage %317 %319 
                                         f32 %321 = OpLoad %282 
                                       f32_2 %322 = OpCompositeConstruct %321 %321 
                                       f32_4 %323 = OpImageSampleImplicitLod %320 %322 
                                         f32 %324 = OpCompositeExtract %323 0 
                                                      OpStore %21 %324 
                                Private f32* %325 = OpAccessChain %86 %36 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpLoad %21 
                                         f32 %328 = OpFMul %326 %327 
                                Private f32* %329 = OpAccessChain %86 %36 
                                                      OpStore %329 %328 
                                       f32_4 %331 = OpLoad %102 
                                       f32_3 %332 = OpVectorShuffle %331 %331 1 1 1 
                              Uniform f32_4* %334 = OpAccessChain %46 %333 %87 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_3 %337 = OpFMul %332 %336 
                                                      OpStore %330 %337 
                              Uniform f32_4* %338 = OpAccessChain %46 %333 %117 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %102 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 0 0 
                                       f32_3 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %330 
                                       f32_3 %345 = OpFAdd %343 %344 
                                                      OpStore %330 %345 
                              Uniform f32_4* %346 = OpAccessChain %46 %333 %69 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %102 
                                       f32_3 %350 = OpVectorShuffle %349 %349 3 3 3 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_3 %352 = OpLoad %330 
                                       f32_3 %353 = OpFAdd %351 %352 
                                                      OpStore %330 %353 
                                       f32_4 %354 = OpLoad %102 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 3 
                              Uniform f32_3* %357 = OpAccessChain %46 %117 
                                       f32_3 %358 = OpLoad %357 
                                       f32_3 %359 = OpFNegate %358 
                                       f32_3 %360 = OpFAdd %355 %359 
                                       f32_4 %361 = OpLoad %102 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
                                                      OpStore %102 %362 
                                       f32_3 %363 = OpLoad %330 
                              Uniform f32_4* %364 = OpAccessChain %46 %333 %112 
                                       f32_4 %365 = OpLoad %364 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFAdd %363 %366 
                                                      OpStore %330 %367 
                       read_only TextureCube %369 = OpLoad %368 
                                     sampler %371 = OpLoad %370 
                read_only TextureCubeSampled %373 = OpSampledImage %369 %371 
                                       f32_3 %374 = OpLoad %330 
                                       f32_4 %376 = OpImageSampleImplicitLod %373 %374 Bias %7 
                                         f32 %377 = OpCompositeExtract %376 3 
                                                      OpStore %21 %377 
                                         f32 %378 = OpLoad %21 
                                Private f32* %379 = OpAccessChain %86 %36 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFMul %378 %380 
                                Private f32* %382 = OpAccessChain %86 %36 
                                                      OpStore %382 %381 
                                Private f32* %383 = OpAccessChain %86 %36 
                                         f32 %384 = OpLoad %383 
                                                      OpStore %21 %384 
                                         f32 %385 = OpLoad %21 
                                         f32 %386 = OpExtInst %1 43 %385 %195 %80 
                                                      OpStore %21 %386 
                                       f32_4 %387 = OpLoad %102 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %102 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                         f32 %391 = OpDot %388 %390 
                                                      OpStore %282 %391 
                                         f32 %392 = OpLoad %282 
                                         f32 %393 = OpExtInst %1 32 %392 
                                                      OpStore %282 %393 
                                       f32_4 %394 = OpLoad %102 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFNegate %395 
                                         f32 %397 = OpLoad %282 
                                       f32_3 %398 = OpCompositeConstruct %397 %397 %397 
                                       f32_3 %399 = OpFMul %396 %398 
                                       f32_3 %400 = OpLoad %109 
                                       f32_3 %401 = OpFNegate %400 
                                       f32_3 %402 = OpFAdd %399 %401 
                                       f32_4 %403 = OpLoad %102 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %102 %404 
                                       f32_4 %405 = OpLoad %102 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_4 %407 = OpLoad %102 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                         f32 %409 = OpDot %406 %408 
                                                      OpStore %282 %409 
                                         f32 %410 = OpLoad %282 
                                         f32 %411 = OpExtInst %1 32 %410 
                                                      OpStore %282 %411 
                                         f32 %412 = OpLoad %282 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_4 %414 = OpLoad %102 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %102 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 6 3 
                                                      OpStore %102 %418 
                                       f32_4 %419 = OpLoad %60 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                       f32_3 %423 = OpFMul %420 %422 
                                       f32_3 %426 = OpFAdd %423 %425 
                                       f32_4 %427 = OpLoad %60 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                                      OpStore %60 %428 
                                Private f32* %429 = OpAccessChain %60 %173 
                                         f32 %430 = OpLoad %429 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %282 %432 
                                       f32_4 %434 = OpLoad %60 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_4 %436 = OpLoad %60 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                         f32 %438 = OpDot %435 %437 
                                                      OpStore %433 %438 
                                         f32 %439 = OpLoad %433 
                                         f32 %440 = OpExtInst %1 32 %439 
                                                      OpStore %433 %440 
                                         f32 %441 = OpLoad %433 
                                       f32_3 %442 = OpCompositeConstruct %441 %441 %441 
                                       f32_4 %443 = OpLoad %60 
                                       f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32_3 %445 = OpFMul %442 %444 
                                       f32_4 %446 = OpLoad %60 
                                       f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                                      OpStore %60 %447 
                                       f32_4 %448 = OpLoad %102 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_4 %450 = OpLoad %60 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                         f32 %452 = OpDot %449 %451 
                                                      OpStore %433 %452 
                                       f32_3 %453 = OpLoad %109 
                                       f32_3 %454 = OpFNegate %453 
                                       f32_4 %455 = OpLoad %60 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                         f32 %457 = OpDot %454 %456 
                                Private f32* %458 = OpAccessChain %60 %36 
                                                      OpStore %458 %457 
                                Private f32* %459 = OpAccessChain %60 %36 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpExtInst %1 40 %460 %195 
                                Private f32* %462 = OpAccessChain %60 %36 
                                                      OpStore %462 %461 
                                Private f32* %463 = OpAccessChain %86 %36 
                                         f32 %464 = OpLoad %463 
                                Private f32* %465 = OpAccessChain %60 %36 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFMul %464 %466 
                                Private f32* %468 = OpAccessChain %86 %36 
                                                      OpStore %468 %467 
                                       f32_3 %469 = OpLoad %86 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 0 0 
                              Uniform f32_4* %472 = OpAccessChain %46 %471 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                       f32_3 %475 = OpFMul %470 %474 
                                       f32_4 %476 = OpLoad %102 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 6 3 
                                                      OpStore %102 %477 
                                         f32 %478 = OpLoad %433 
                                         f32 %479 = OpExtInst %1 40 %478 %195 
                                Private f32* %480 = OpAccessChain %86 %36 
                                                      OpStore %480 %479 
                                Private f32* %481 = OpAccessChain %86 %36 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpExtInst %1 30 %482 
                                Private f32* %484 = OpAccessChain %86 %36 
                                                      OpStore %484 %483 
                                Private f32* %485 = OpAccessChain %86 %36 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpLoad %282 
                                         f32 %488 = OpFMul %486 %487 
                                Private f32* %489 = OpAccessChain %86 %36 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %86 %36 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpExtInst %1 29 %491 
                                Private f32* %493 = OpAccessChain %86 %36 
                                                      OpStore %493 %492 
                                         f32 %494 = OpLoad %21 
                                Private f32* %495 = OpAccessChain %86 %36 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpFMul %494 %496 
                                Private f32* %498 = OpAccessChain %86 %36 
                                                      OpStore %498 %497 
                              Uniform f32_4* %499 = OpAccessChain %46 %471 
                                       f32_4 %500 = OpLoad %499 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                         f32 %506 = OpDot %501 %505 
                                                      OpStore %21 %506 
                                         f32 %507 = OpLoad %21 
                                Private f32* %508 = OpAccessChain %86 %36 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFMul %507 %509 
                                Private f32* %511 = OpAccessChain %102 %173 
                                                      OpStore %511 %510 
                                       f32_4 %512 = OpLoad %9 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 0 0 0 
                                       f32_4 %514 = OpLoad %102 
                                       f32_4 %515 = OpFMul %513 %514 
                                                      OpStore %9 %515 
                                       f32_4 %518 = OpLoad %9 
                                       f32_4 %519 = OpFNegate %518 
                                       f32_4 %520 = OpExtInst %1 29 %519 
                                                      OpStore %517 %520 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(5) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat13);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat19);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat13 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb19 = u_xlat13<0.99000001;
    if(u_xlatb19){
        u_xlat19 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat19 = max(abs(u_xlat6.z), u_xlat19);
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.z);
        u_xlat19 = max(u_xlat19, 9.99999975e-06);
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat19 = _LightProjectionParams.y / u_xlat19;
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.x);
        u_xlat10.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat19);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat12.x = (-_LightShadowData.x) + 1.0;
        u_xlat6.x = u_xlat6.x * u_xlat12.x + _LightShadowData.x;
    } else {
        u_xlat6.x = 1.0;
    }
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat13 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat4.w;
    u_xlat12.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat12.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat18) + (-u_xlat3.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat12.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12.xy = max(u_xlat12.xy, vec2(0.0, 0.0));
    u_xlat1.x = u_xlat1.w * 128.0;
    u_xlat18 = log2(u_xlat12.y);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat1.x = u_xlat6.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat1.xyz = u_xlat6.xxx * _LightColor.xyz;
    u_xlat6.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat6.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 616
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %611 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %270 DescriptorSet 270 
                                                      OpDecorate %270 Binding 270 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %414 DescriptorSet 414 
                                                      OpDecorate %414 Binding 414 
                                                      OpDecorate %416 DescriptorSet 416 
                                                      OpDecorate %416 Binding 416 
                                                      OpDecorate %443 DescriptorSet 443 
                                                      OpDecorate %443 Binding 443 
                                                      OpDecorate %445 DescriptorSet 445 
                                                      OpDecorate %445 Binding 445 
                                                      OpDecorate %611 Location 611 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %7 %14 %7 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                                              %85 = OpTypePointer Private %10 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                              %90 = OpTypePointer Uniform %7 
                                          i32 %95 = OpConstant 0 
                                         i32 %127 = OpConstant 6 
                                         u32 %150 = OpConstant 3 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %163 = OpConstant 7 
                                Private f32* %169 = OpVariable Private 
                                Private f32* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %184 = OpVariable UniformConstant 
                    UniformConstant sampler* %186 = OpVariable UniformConstant 
                                         i32 %195 = OpConstant 5 
                                         f32 %203 = OpConstant 3.674022E-40 
                                             %205 = OpTypeBool 
                                             %206 = OpTypePointer Private %205 
                               Private bool* %207 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                                Private f32* %214 = OpVariable Private 
                                         i32 %228 = OpConstant 4 
                                         f32 %234 = OpConstant 3.674022E-40 
                              Private f32_4* %252 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                                             %259 = OpTypePointer Function %7 
                                             %268 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %269 = OpTypePointer UniformConstant %268 
      UniformConstant read_only TextureCube* %270 = OpVariable UniformConstant 
                    UniformConstant sampler* %272 = OpVariable UniformConstant 
                                             %274 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %275 = OpTypeSampledImage %274 
                              Private f32_3* %281 = OpVariable Private 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_3 %284 = OpConstantComposite %283 %283 %254 
                                       f32_3 %301 = OpConstantComposite %283 %254 %283 
                                       f32_3 %318 = OpConstantComposite %254 %283 %283 
                                         f32 %335 = OpConstant 3.674022E-40 
                                       f32_4 %336 = OpConstantComposite %335 %335 %335 %335 
                                             %339 = OpTypePointer Private %42 
                              Private f32_2* %340 = OpVariable Private 
                                         i32 %377 = OpConstant 10 
      UniformConstant read_only TextureCube* %414 = OpVariable UniformConstant 
                    UniformConstant sampler* %416 = OpVariable UniformConstant 
                                             %418 = OpTypeSampledImage %268 
                                         f32 %422 = OpConstant 3.674022E-40 
                                         i32 %434 = OpConstant 11 
        UniformConstant read_only Texture2D* %443 = OpVariable UniformConstant 
                    UniformConstant sampler* %445 = OpVariable UniformConstant 
                                         f32 %452 = OpConstant 3.674022E-40 
                                       f32_3 %453 = OpConstantComposite %452 %452 %452 
                                         f32 %455 = OpConstant 3.674022E-40 
                                       f32_3 %456 = OpConstantComposite %455 %455 %455 
                                             %485 = OpTypePointer Uniform %10 
                                       f32_2 %531 = OpConstantComposite %203 %203 
                                         f32 %535 = OpConstant 3.674022E-40 
                                         i32 %566 = OpConstant 8 
                                         f32 %576 = OpConstant 3.674022E-40 
                                         f32 %577 = OpConstant 3.674022E-40 
                                         f32 %578 = OpConstant 3.674022E-40 
                                       f32_3 %579 = OpConstantComposite %576 %577 %578 
                                         i32 %589 = OpConstant 9 
                                             %610 = OpTypePointer Output %7 
                               Output f32_4* %611 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %260 = OpVariable Function 
                             Function f32_4* %286 = OpVariable Function 
                             Function f32_4* %303 = OpVariable Function 
                             Function f32_4* %320 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %87 = OpLoad %77 
                                        f32_3 %88 = OpVectorShuffle %87 %87 1 1 1 
                               Uniform f32_4* %91 = OpAccessChain %17 %89 %19 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %86 %94 
                               Uniform f32_4* %96 = OpAccessChain %17 %89 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %77 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_3 %102 = OpLoad %86 
                                       f32_3 %103 = OpFAdd %101 %102 
                                       f32_4 %104 = OpLoad %77 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %77 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %89 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %77 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %77 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %77 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %77 %116 
                                       f32_4 %117 = OpLoad %77 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %119 = OpAccessChain %17 %89 %89 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %77 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 6 
                                                      OpStore %77 %124 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                              Uniform f32_4* %128 = OpAccessChain %17 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFNegate %130 
                                       f32_3 %132 = OpFAdd %126 %131 
                                                      OpStore %86 %132 
                                       f32_3 %133 = OpLoad %86 
                                       f32_3 %134 = OpLoad %86 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpExtInst %1 31 %138 
                                Private f32* %140 = OpAccessChain %9 %30 
                                                      OpStore %140 %139 
                                Private f32* %141 = OpAccessChain %9 %20 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %50 
                                         f32 %145 = OpFMul %143 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %17 %127 %150 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %9 %30 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %152 %154 
                                Private f32* %156 = OpAccessChain %77 %20 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                       f32_4 %161 = OpLoad %77 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 3 
                              Uniform f32_4* %164 = OpAccessChain %17 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFNegate %166 
                                       f32_3 %168 = OpFAdd %162 %167 
                                                      OpStore %160 %168 
                                       f32_3 %170 = OpLoad %160 
                                       f32_3 %171 = OpLoad %160 
                                         f32 %172 = OpDot %170 %171 
                                                      OpStore %169 %172 
                                         f32 %174 = OpLoad %169 
                                         f32 %175 = OpExtInst %1 32 %174 
                                                      OpStore %173 %175 
                                       f32_3 %176 = OpLoad %160 
                                         f32 %177 = OpLoad %173 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %86 %179 
                                         f32 %180 = OpLoad %169 
                                Uniform f32* %181 = OpAccessChain %17 %163 %150 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                                      OpStore %169 %183 
                         read_only Texture2D %185 = OpLoad %184 
                                     sampler %187 = OpLoad %186 
                  read_only Texture2DSampled %188 = OpSampledImage %185 %187 
                                         f32 %189 = OpLoad %169 
                                       f32_2 %190 = OpCompositeConstruct %189 %189 
                                       f32_4 %191 = OpImageSampleImplicitLod %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                                      OpStore %169 %192 
                                Private f32* %193 = OpAccessChain %9 %30 
                                         f32 %194 = OpLoad %193 
                                Uniform f32* %196 = OpAccessChain %17 %195 %20 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                Uniform f32* %199 = OpAccessChain %17 %195 %150 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFAdd %198 %200 
                                                      OpStore %173 %201 
                                         f32 %202 = OpLoad %173 
                                         f32 %204 = OpExtInst %1 43 %202 %203 %74 
                                                      OpStore %173 %204 
                                         f32 %208 = OpLoad %173 
                                        bool %210 = OpFOrdLessThan %208 %209 
                                                      OpStore %207 %210 
                                        bool %211 = OpLoad %207 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %355 
                                             %212 = OpLabel 
                                Private f32* %215 = OpAccessChain %160 %70 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 4 %216 
                                Private f32* %218 = OpAccessChain %160 %30 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 4 %219 
                                         f32 %221 = OpExtInst %1 40 %217 %220 
                                                      OpStore %214 %221 
                                Private f32* %222 = OpAccessChain %160 %20 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 4 %223 
                                         f32 %225 = OpLoad %214 
                                         f32 %226 = OpExtInst %1 40 %224 %225 
                                                      OpStore %214 %226 
                                         f32 %227 = OpLoad %214 
                                Uniform f32* %229 = OpAccessChain %17 %228 %20 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %227 %231 
                                                      OpStore %214 %232 
                                         f32 %233 = OpLoad %214 
                                         f32 %235 = OpExtInst %1 40 %233 %234 
                                                      OpStore %214 %235 
                                         f32 %236 = OpLoad %214 
                                Uniform f32* %237 = OpAccessChain %17 %228 %150 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                                      OpStore %214 %239 
                                Uniform f32* %240 = OpAccessChain %17 %228 %70 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpLoad %214 
                                         f32 %243 = OpFDiv %241 %242 
                                                      OpStore %214 %243 
                                         f32 %244 = OpLoad %214 
                                Uniform f32* %245 = OpAccessChain %17 %228 %30 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %244 %247 
                                                      OpStore %214 %248 
                                         f32 %249 = OpLoad %214 
                                         f32 %250 = OpFNegate %249 
                                         f32 %251 = OpFAdd %250 %74 
                                                      OpStore %214 %251 
                                       f32_3 %253 = OpLoad %160 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %252 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %252 %258 
                                       f32_4 %261 = OpLoad %252 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                         f32 %263 = OpLoad %214 
                                         f32 %264 = OpCompositeExtract %262 0 
                                         f32 %265 = OpCompositeExtract %262 1 
                                         f32 %266 = OpCompositeExtract %262 2 
                                       f32_4 %267 = OpCompositeConstruct %264 %265 %266 %263 
                                                      OpStore %260 %267 
                       read_only TextureCube %271 = OpLoad %270 
                                     sampler %273 = OpLoad %272 
                read_only TextureCubeSampled %276 = OpSampledImage %271 %273 
                                       f32_4 %277 = OpLoad %260 
                                         f32 %278 = OpCompositeExtract %277 3 
                                         f32 %279 = OpImageSampleDrefImplicitLod %276 %277 %278 
                                Private f32* %280 = OpAccessChain %252 %30 
                                                      OpStore %280 %279 
                                       f32_3 %282 = OpLoad %160 
                                       f32_3 %285 = OpFAdd %282 %284 
                                                      OpStore %281 %285 
                                       f32_3 %287 = OpLoad %281 
                                         f32 %288 = OpLoad %214 
                                         f32 %289 = OpCompositeExtract %287 0 
                                         f32 %290 = OpCompositeExtract %287 1 
                                         f32 %291 = OpCompositeExtract %287 2 
                                       f32_4 %292 = OpCompositeConstruct %289 %290 %291 %288 
                                                      OpStore %286 %292 
                       read_only TextureCube %293 = OpLoad %270 
                                     sampler %294 = OpLoad %272 
                read_only TextureCubeSampled %295 = OpSampledImage %293 %294 
                                       f32_4 %296 = OpLoad %286 
                                         f32 %297 = OpCompositeExtract %296 3 
                                         f32 %298 = OpImageSampleDrefImplicitLod %295 %296 %297 
                                Private f32* %299 = OpAccessChain %252 %70 
                                                      OpStore %299 %298 
                                       f32_3 %300 = OpLoad %160 
                                       f32_3 %302 = OpFAdd %300 %301 
                                                      OpStore %281 %302 
                                       f32_3 %304 = OpLoad %281 
                                         f32 %305 = OpLoad %214 
                                         f32 %306 = OpCompositeExtract %304 0 
                                         f32 %307 = OpCompositeExtract %304 1 
                                         f32 %308 = OpCompositeExtract %304 2 
                                       f32_4 %309 = OpCompositeConstruct %306 %307 %308 %305 
                                                      OpStore %303 %309 
                       read_only TextureCube %310 = OpLoad %270 
                                     sampler %311 = OpLoad %272 
                read_only TextureCubeSampled %312 = OpSampledImage %310 %311 
                                       f32_4 %313 = OpLoad %303 
                                         f32 %314 = OpCompositeExtract %313 3 
                                         f32 %315 = OpImageSampleDrefImplicitLod %312 %313 %314 
                                Private f32* %316 = OpAccessChain %252 %20 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %160 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %160 %319 
                                       f32_3 %321 = OpLoad %160 
                                         f32 %322 = OpLoad %214 
                                         f32 %323 = OpCompositeExtract %321 0 
                                         f32 %324 = OpCompositeExtract %321 1 
                                         f32 %325 = OpCompositeExtract %321 2 
                                       f32_4 %326 = OpCompositeConstruct %323 %324 %325 %322 
                                                      OpStore %320 %326 
                       read_only TextureCube %327 = OpLoad %270 
                                     sampler %328 = OpLoad %272 
                read_only TextureCubeSampled %329 = OpSampledImage %327 %328 
                                       f32_4 %330 = OpLoad %320 
                                         f32 %331 = OpCompositeExtract %330 3 
                                         f32 %332 = OpImageSampleDrefImplicitLod %329 %330 %331 
                                Private f32* %333 = OpAccessChain %252 %150 
                                                      OpStore %333 %332 
                                       f32_4 %334 = OpLoad %252 
                                         f32 %337 = OpDot %334 %336 
                                Private f32* %338 = OpAccessChain %160 %30 
                                                      OpStore %338 %337 
                                Uniform f32* %341 = OpAccessChain %17 %195 %30 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFNegate %342 
                                         f32 %344 = OpFAdd %343 %74 
                                Private f32* %345 = OpAccessChain %340 %30 
                                                      OpStore %345 %344 
                                Private f32* %346 = OpAccessChain %160 %30 
                                         f32 %347 = OpLoad %346 
                                Private f32* %348 = OpAccessChain %340 %30 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFMul %347 %349 
                                Uniform f32* %351 = OpAccessChain %17 %195 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFAdd %350 %352 
                                Private f32* %354 = OpAccessChain %160 %30 
                                                      OpStore %354 %353 
                                                      OpBranch %213 
                                             %355 = OpLabel 
                                Private f32* %356 = OpAccessChain %160 %30 
                                                      OpStore %356 %74 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                Private f32* %357 = OpAccessChain %160 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFNegate %358 
                                         f32 %360 = OpFAdd %359 %74 
                                Private f32* %361 = OpAccessChain %340 %30 
                                                      OpStore %361 %360 
                                         f32 %362 = OpLoad %173 
                                Private f32* %363 = OpAccessChain %340 %30 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                Private f32* %366 = OpAccessChain %160 %30 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpFAdd %365 %367 
                                Private f32* %369 = OpAccessChain %160 %30 
                                                      OpStore %369 %368 
                                Private f32* %370 = OpAccessChain %160 %30 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpLoad %169 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %160 %30 
                                                      OpStore %374 %373 
                                       f32_4 %375 = OpLoad %77 
                                       f32_3 %376 = OpVectorShuffle %375 %375 1 1 1 
                              Uniform f32_4* %378 = OpAccessChain %17 %377 %19 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %376 %380 
                                       f32_4 %382 = OpLoad %252 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 6 3 
                                                      OpStore %252 %383 
                              Uniform f32_4* %384 = OpAccessChain %17 %377 %95 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %77 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 0 0 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %252 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                       f32_4 %393 = OpLoad %252 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                                      OpStore %252 %394 
                              Uniform f32_4* %395 = OpAccessChain %17 %377 %65 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %77 
                                       f32_3 %399 = OpVectorShuffle %398 %398 3 3 3 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %252 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %252 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %252 %405 
                                       f32_4 %406 = OpLoad %252 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                              Uniform f32_4* %408 = OpAccessChain %17 %377 %89 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_3 %411 = OpFAdd %407 %410 
                                       f32_4 %412 = OpLoad %252 
                                       f32_4 %413 = OpVectorShuffle %412 %411 4 5 6 3 
                                                      OpStore %252 %413 
                       read_only TextureCube %415 = OpLoad %414 
                                     sampler %417 = OpLoad %416 
                read_only TextureCubeSampled %419 = OpSampledImage %415 %417 
                                       f32_4 %420 = OpLoad %252 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_4 %423 = OpImageSampleImplicitLod %419 %421 Bias %7 
                                         f32 %424 = OpCompositeExtract %423 3 
                                Private f32* %425 = OpAccessChain %340 %30 
                                                      OpStore %425 %424 
                                Private f32* %426 = OpAccessChain %340 %30 
                                         f32 %427 = OpLoad %426 
                                Private f32* %428 = OpAccessChain %160 %30 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                Private f32* %431 = OpAccessChain %160 %30 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %39 
                                       f32_2 %433 = OpVectorShuffle %432 %432 0 1 
                              Uniform f32_4* %435 = OpAccessChain %17 %434 
                                       f32_4 %436 = OpLoad %435 
                                       f32_2 %437 = OpVectorShuffle %436 %436 0 1 
                                       f32_2 %438 = OpFMul %433 %437 
                              Uniform f32_4* %439 = OpAccessChain %17 %434 
                                       f32_4 %440 = OpLoad %439 
                                       f32_2 %441 = OpVectorShuffle %440 %440 2 3 
                                       f32_2 %442 = OpFAdd %438 %441 
                                                      OpStore %340 %442 
                         read_only Texture2D %444 = OpLoad %443 
                                     sampler %446 = OpLoad %445 
                  read_only Texture2DSampled %447 = OpSampledImage %444 %446 
                                       f32_2 %448 = OpLoad %340 
                                       f32_4 %449 = OpImageSampleImplicitLod %447 %448 
                                                      OpStore %39 %449 
                                       f32_4 %450 = OpLoad %39 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                       f32_3 %454 = OpFMul %451 %453 
                                       f32_3 %457 = OpFAdd %454 %456 
                                       f32_4 %458 = OpLoad %39 
                                       f32_4 %459 = OpVectorShuffle %458 %457 4 5 6 3 
                                                      OpStore %39 %459 
                                       f32_4 %460 = OpLoad %39 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_4 %462 = OpLoad %39 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                         f32 %464 = OpDot %461 %463 
                                Private f32* %465 = OpAccessChain %340 %30 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %340 %30 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 32 %467 
                                Private f32* %469 = OpAccessChain %340 %30 
                                                      OpStore %469 %468 
                                       f32_2 %470 = OpLoad %340 
                                       f32_3 %471 = OpVectorShuffle %470 %470 0 0 0 
                                       f32_4 %472 = OpLoad %39 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                       f32_3 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %39 
                                       f32_4 %476 = OpVectorShuffle %475 %474 4 5 6 3 
                                                      OpStore %39 %476 
                                       f32_3 %477 = OpLoad %86 
                                       f32_3 %478 = OpFNegate %477 
                                       f32_4 %479 = OpLoad %39 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                         f32 %481 = OpDot %478 %480 
                                Private f32* %482 = OpAccessChain %340 %30 
                                                      OpStore %482 %481 
                                       f32_4 %483 = OpLoad %77 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 3 
                              Uniform f32_3* %486 = OpAccessChain %17 %95 
                                       f32_3 %487 = OpLoad %486 
                                       f32_3 %488 = OpFNegate %487 
                                       f32_3 %489 = OpFAdd %484 %488 
                                       f32_4 %490 = OpLoad %77 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 6 3 
                                                      OpStore %77 %491 
                                       f32_4 %492 = OpLoad %77 
                                       f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                                       f32_4 %494 = OpLoad %77 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                         f32 %496 = OpDot %493 %495 
                                                      OpStore %50 %496 
                                         f32 %497 = OpLoad %50 
                                         f32 %498 = OpExtInst %1 32 %497 
                                                      OpStore %50 %498 
                                       f32_4 %499 = OpLoad %77 
                                       f32_3 %500 = OpVectorShuffle %499 %499 0 1 2 
                                       f32_3 %501 = OpFNegate %500 
                                         f32 %502 = OpLoad %50 
                                       f32_3 %503 = OpCompositeConstruct %502 %502 %502 
                                       f32_3 %504 = OpFMul %501 %503 
                                       f32_3 %505 = OpLoad %86 
                                       f32_3 %506 = OpFNegate %505 
                                       f32_3 %507 = OpFAdd %504 %506 
                                       f32_4 %508 = OpLoad %77 
                                       f32_4 %509 = OpVectorShuffle %508 %507 4 5 6 3 
                                                      OpStore %77 %509 
                                       f32_4 %510 = OpLoad %77 
                                       f32_3 %511 = OpVectorShuffle %510 %510 0 1 2 
                                       f32_4 %512 = OpLoad %77 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                         f32 %514 = OpDot %511 %513 
                                                      OpStore %50 %514 
                                         f32 %515 = OpLoad %50 
                                         f32 %516 = OpExtInst %1 32 %515 
                                                      OpStore %50 %516 
                                         f32 %517 = OpLoad %50 
                                       f32_3 %518 = OpCompositeConstruct %517 %517 %517 
                                       f32_4 %519 = OpLoad %77 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_4 %522 = OpLoad %77 
                                       f32_4 %523 = OpVectorShuffle %522 %521 4 5 6 3 
                                                      OpStore %77 %523 
                                       f32_4 %524 = OpLoad %77 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                       f32_4 %526 = OpLoad %39 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                                         f32 %528 = OpDot %525 %527 
                                Private f32* %529 = OpAccessChain %340 %70 
                                                      OpStore %529 %528 
                                       f32_2 %530 = OpLoad %340 
                                       f32_2 %532 = OpExtInst %1 40 %530 %531 
                                                      OpStore %340 %532 
                                Private f32* %533 = OpAccessChain %39 %150 
                                         f32 %534 = OpLoad %533 
                                         f32 %536 = OpFMul %534 %535 
                                Private f32* %537 = OpAccessChain %39 %30 
                                                      OpStore %537 %536 
                                Private f32* %538 = OpAccessChain %340 %70 
                                         f32 %539 = OpLoad %538 
                                         f32 %540 = OpExtInst %1 30 %539 
                                                      OpStore %50 %540 
                                         f32 %541 = OpLoad %50 
                                Private f32* %542 = OpAccessChain %39 %30 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFMul %541 %543 
                                                      OpStore %50 %544 
                                         f32 %545 = OpLoad %50 
                                         f32 %546 = OpExtInst %1 29 %545 
                                                      OpStore %50 %546 
                                Private f32* %547 = OpAccessChain %160 %30 
                                         f32 %548 = OpLoad %547 
                                Private f32* %549 = OpAccessChain %39 %30 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %39 %30 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpExtInst %1 43 %551 %203 %74 
                                Private f32* %553 = OpAccessChain %39 %30 
                                                      OpStore %553 %552 
                                         f32 %554 = OpLoad %50 
                                Private f32* %555 = OpAccessChain %39 %30 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFMul %554 %556 
                                                      OpStore %50 %557 
                                Private f32* %558 = OpAccessChain %160 %30 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %340 %30 
                                         f32 %561 = OpLoad %560 
                                         f32 %562 = OpFMul %559 %561 
                                Private f32* %563 = OpAccessChain %160 %30 
                                                      OpStore %563 %562 
                                       f32_3 %564 = OpLoad %160 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 0 0 
                              Uniform f32_4* %567 = OpAccessChain %17 %566 
                                       f32_4 %568 = OpLoad %567 
                                       f32_3 %569 = OpVectorShuffle %568 %568 0 1 2 
                                       f32_3 %570 = OpFMul %565 %569 
                                       f32_4 %571 = OpLoad %39 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 5 6 3 
                                                      OpStore %39 %572 
                              Uniform f32_4* %573 = OpAccessChain %17 %566 
                                       f32_4 %574 = OpLoad %573 
                                       f32_3 %575 = OpVectorShuffle %574 %574 0 1 2 
                                         f32 %580 = OpDot %575 %579 
                                Private f32* %581 = OpAccessChain %160 %30 
                                                      OpStore %581 %580 
                                Private f32* %582 = OpAccessChain %160 %30 
                                         f32 %583 = OpLoad %582 
                                         f32 %584 = OpLoad %50 
                                         f32 %585 = OpFMul %583 %584 
                                Private f32* %586 = OpAccessChain %39 %150 
                                                      OpStore %586 %585 
                                Private f32* %587 = OpAccessChain %9 %30 
                                         f32 %588 = OpLoad %587 
                                Uniform f32* %590 = OpAccessChain %17 %589 %20 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFMul %588 %591 
                                Uniform f32* %593 = OpAccessChain %17 %589 %150 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFAdd %592 %594 
                                Private f32* %596 = OpAccessChain %9 %30 
                                                      OpStore %596 %595 
                                Private f32* %597 = OpAccessChain %9 %30 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFNegate %598 
                                         f32 %600 = OpFAdd %599 %74 
                                Private f32* %601 = OpAccessChain %9 %30 
                                                      OpStore %601 %600 
                                Private f32* %602 = OpAccessChain %9 %30 
                                         f32 %603 = OpLoad %602 
                                         f32 %604 = OpExtInst %1 43 %603 %203 %74 
                                Private f32* %605 = OpAccessChain %9 %30 
                                                      OpStore %605 %604 
                                       f32_4 %606 = OpLoad %9 
                                       f32_4 %607 = OpVectorShuffle %606 %606 0 0 0 0 
                                       f32_4 %608 = OpLoad %39 
                                       f32_4 %609 = OpFMul %607 %608 
                                                      OpStore %9 %609 
                                       f32_4 %612 = OpLoad %9 
                                       f32_4 %613 = OpFNegate %612 
                                       f32_4 %614 = OpExtInst %1 29 %613 
                                                      OpStore %611 %614 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend One One, One One
  ZWrite Off
  GpuProgramID 130940
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat11;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = inversesqrt(u_xlat11);
    u_xlat11 = u_xlat11 * _LightPos.w;
    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat11));
    u_xlat7.xyz = vec3(u_xlat16) * u_xlat4.xyz;
    u_xlat6.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-u_xlat7.xyz);
    u_xlat3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xxx;
    u_xlat6.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat7.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat6.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat3.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat1.xxxx * u_xlat3;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 365
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %85 %359 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate vs_TEXCOORD1 Location 85 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate %359 Location 359 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %10 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 8 
                                              %44 = OpTypePointer Uniform %10 
                                              %53 = OpTypePointer Private %10 
                               Private f32_4* %54 = OpVariable Private 
         UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 2 
                                              %63 = OpTypePointer Uniform %6 
                                          u32 %68 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %78 = OpTypePointer Private %36 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 1 
                                          u32 %81 = OpConstant 2 
                                              %84 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %86 = OpTypePointer Input %6 
                               Private f32_4* %95 = OpVariable Private 
                              Private f32_3* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 3 
                                         i32 %110 = OpConstant 0 
                                             %142 = OpTypePointer Uniform %36 
                              Private f32_3* %155 = OpVariable Private 
                                         i32 %158 = OpConstant 5 
                                         i32 %166 = OpConstant 4 
                                         u32 %190 = OpConstant 3 
                                         i32 %202 = OpConstant 7 
                                         f32 %217 = OpConstant 3.674022E-40 
                                Private f32* %223 = OpVariable Private 
        UniformConstant read_only Texture2D* %230 = OpVariable UniformConstant 
                    UniformConstant sampler* %232 = OpVariable UniformConstant 
                                         f32 %268 = OpConstant 3.674022E-40 
                                       f32_3 %269 = OpConstantComposite %268 %268 %268 
                                         f32 %271 = OpConstant 3.674022E-40 
                                       f32_3 %272 = OpConstantComposite %271 %271 %271 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         i32 %320 = OpConstant 6 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %349 = OpConstant 3.674022E-40 
                                         f32 %350 = OpConstant 3.674022E-40 
                                       f32_3 %351 = OpConstantComposite %348 %349 %350 
                                             %358 = OpTypePointer Output %10 
                               Output f32_4* %359 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %35 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                                      OpStore %9 %52 
                          read_only Texture2D %56 = OpLoad %55 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                                        f32_2 %60 = OpLoad %9 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                                      OpStore %54 %61 
                                 Uniform f32* %64 = OpAccessChain %41 %62 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %19 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %41 %62 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %33 
                                                      OpStore %72 %71 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %33 
                                                      OpStore %77 %76 
                                 Uniform f32* %82 = OpAccessChain %41 %80 %81 
                                          f32 %83 = OpLoad %82 
                                   Input f32* %87 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFDiv %83 %88 
                                 Private f32* %90 = OpAccessChain %79 %33 
                                                      OpStore %90 %89 
                                        f32_3 %91 = OpLoad %79 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpLoad vs_TEXCOORD1 
                                        f32_3 %94 = OpFMul %92 %93 
                                                      OpStore %79 %94 
                                        f32_2 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpLoad %79 
                                        f32_3 %99 = OpFMul %97 %98 
                                       f32_4 %100 = OpLoad %95 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %95 %101 
                                       f32_4 %103 = OpLoad %95 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %41 %105 %80 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %102 %109 
                              Uniform f32_4* %111 = OpAccessChain %41 %105 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %95 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 0 0 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_3 %117 = OpLoad %102 
                                       f32_3 %118 = OpFAdd %116 %117 
                                       f32_4 %119 = OpLoad %95 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %95 %120 
                              Uniform f32_4* %121 = OpAccessChain %41 %105 %62 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %95 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %95 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                                       f32_3 %129 = OpFAdd %126 %128 
                                       f32_4 %130 = OpLoad %95 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 6 
                                                      OpStore %95 %131 
                                       f32_4 %132 = OpLoad %95 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 3 
                              Uniform f32_4* %134 = OpAccessChain %41 %105 %105 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFAdd %133 %136 
                                       f32_4 %138 = OpLoad %95 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 2 6 
                                                      OpStore %95 %139 
                                       f32_4 %140 = OpLoad %95 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 3 
                              Uniform f32_3* %143 = OpAccessChain %41 %110 
                                       f32_3 %144 = OpLoad %143 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %102 %146 
                                       f32_3 %147 = OpLoad %102 
                                       f32_3 %148 = OpLoad %102 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %150 = OpAccessChain %79 %33 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %79 %33 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpExtInst %1 32 %152 
                                Private f32* %154 = OpAccessChain %79 %33 
                                                      OpStore %154 %153 
                                       f32_4 %156 = OpLoad %95 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 3 
                              Uniform f32_4* %159 = OpAccessChain %41 %158 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %162 = OpFNegate %161 
                                       f32_3 %163 = OpFAdd %157 %162 
                                                      OpStore %155 %163 
                                       f32_4 %164 = OpLoad %95 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 3 
                              Uniform f32_4* %167 = OpAccessChain %41 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %165 %170 
                                       f32_4 %172 = OpLoad %95 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 2 6 
                                                      OpStore %95 %173 
                                       f32_4 %174 = OpLoad %95 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 3 
                                       f32_4 %176 = OpLoad %95 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 3 
                                         f32 %178 = OpDot %175 %177 
                                                      OpStore %19 %178 
                                         f32 %179 = OpLoad %19 
                                         f32 %180 = OpExtInst %1 31 %179 
                                                      OpStore %19 %180 
                                Private f32* %181 = OpAccessChain %79 %81 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFNegate %182 
                                Private f32* %184 = OpAccessChain %9 %33 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %183 %185 
                                         f32 %187 = OpLoad %19 
                                         f32 %188 = OpFAdd %186 %187 
                                Private f32* %189 = OpAccessChain %9 %33 
                                                      OpStore %189 %188 
                                Uniform f32* %191 = OpAccessChain %41 %166 %190 
                                         f32 %192 = OpLoad %191 
                                Private f32* %193 = OpAccessChain %9 %33 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %192 %194 
                                Private f32* %196 = OpAccessChain %95 %81 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFAdd %195 %197 
                                Private f32* %199 = OpAccessChain %9 %33 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %33 
                                         f32 %201 = OpLoad %200 
                                Uniform f32* %203 = OpAccessChain %41 %202 %81 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %201 %204 
                                Uniform f32* %206 = OpAccessChain %41 %202 %190 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFAdd %205 %207 
                                Private f32* %209 = OpAccessChain %9 %33 
                                                      OpStore %209 %208 
                                Private f32* %210 = OpAccessChain %9 %33 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpFNegate %211 
                                         f32 %213 = OpFAdd %212 %73 
                                Private f32* %214 = OpAccessChain %9 %33 
                                                      OpStore %214 %213 
                                Private f32* %215 = OpAccessChain %9 %33 
                                         f32 %216 = OpLoad %215 
                                         f32 %218 = OpExtInst %1 43 %216 %217 %73 
                                Private f32* %219 = OpAccessChain %9 %33 
                                                      OpStore %219 %218 
                                       f32_3 %220 = OpLoad %155 
                                       f32_3 %221 = OpLoad %155 
                                         f32 %222 = OpDot %220 %221 
                                                      OpStore %19 %222 
                                         f32 %224 = OpLoad %19 
                                         f32 %225 = OpExtInst %1 32 %224 
                                                      OpStore %223 %225 
                                         f32 %226 = OpLoad %19 
                                Uniform f32* %227 = OpAccessChain %41 %158 %190 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                                      OpStore %19 %229 
                         read_only Texture2D %231 = OpLoad %230 
                                     sampler %233 = OpLoad %232 
                  read_only Texture2DSampled %234 = OpSampledImage %231 %233 
                                         f32 %235 = OpLoad %19 
                                       f32_2 %236 = OpCompositeConstruct %235 %235 
                                       f32_4 %237 = OpImageSampleImplicitLod %234 %236 
                                         f32 %238 = OpCompositeExtract %237 0 
                                                      OpStore %19 %238 
                                         f32 %239 = OpLoad %223 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_3 %241 = OpLoad %155 
                                       f32_3 %242 = OpFMul %240 %241 
                                       f32_4 %243 = OpLoad %95 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %95 %244 
                                       f32_3 %245 = OpLoad %102 
                                       f32_3 %246 = OpFNegate %245 
                                       f32_3 %247 = OpLoad %79 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %95 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_3 %252 = OpFNegate %251 
                                       f32_3 %253 = OpFAdd %249 %252 
                                                      OpStore %102 %253 
                                       f32_3 %254 = OpLoad %102 
                                       f32_3 %255 = OpLoad %102 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %79 %33 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %79 %33 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %79 %33 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %79 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %102 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %102 %265 
                                       f32_4 %266 = OpLoad %54 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %273 = OpFAdd %270 %272 
                                       f32_4 %274 = OpLoad %54 
                                       f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                      OpStore %54 %275 
                                Private f32* %276 = OpAccessChain %54 %190 
                                         f32 %277 = OpLoad %276 
                                         f32 %279 = OpFMul %277 %278 
                                Private f32* %280 = OpAccessChain %79 %33 
                                                      OpStore %280 %279 
                                       f32_4 %281 = OpLoad %54 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %54 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                         f32 %285 = OpDot %282 %284 
                                                      OpStore %223 %285 
                                         f32 %286 = OpLoad %223 
                                         f32 %287 = OpExtInst %1 32 %286 
                                                      OpStore %223 %287 
                                         f32 %288 = OpLoad %223 
                                       f32_3 %289 = OpCompositeConstruct %288 %288 %288 
                                       f32_4 %290 = OpLoad %54 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %54 
                                       f32_4 %294 = OpVectorShuffle %293 %292 4 5 6 3 
                                                      OpStore %54 %294 
                                       f32_3 %295 = OpLoad %102 
                                       f32_4 %296 = OpLoad %54 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                         f32 %298 = OpDot %295 %297 
                                                      OpStore %223 %298 
                                       f32_4 %299 = OpLoad %95 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFNegate %300 
                                       f32_4 %302 = OpLoad %54 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                         f32 %304 = OpDot %301 %303 
                                Private f32* %305 = OpAccessChain %54 %33 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %54 %33 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpExtInst %1 40 %307 %217 
                                Private f32* %309 = OpAccessChain %54 %33 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %19 
                                Private f32* %311 = OpAccessChain %54 %33 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                Private f32* %314 = OpAccessChain %54 %33 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %19 
                                                      OpStore %19 %315 
                                         f32 %316 = OpLoad %19 
                                         f32 %317 = OpExtInst %1 43 %316 %217 %73 
                                                      OpStore %19 %317 
                                       f32_4 %318 = OpLoad %54 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                              Uniform f32_4* %321 = OpAccessChain %41 %320 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_3 %324 = OpFMul %319 %323 
                                       f32_4 %325 = OpLoad %54 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %54 %326 
                                         f32 %327 = OpLoad %223 
                                         f32 %328 = OpExtInst %1 40 %327 %217 
                                                      OpStore %223 %328 
                                         f32 %329 = OpLoad %223 
                                         f32 %330 = OpExtInst %1 30 %329 
                                                      OpStore %223 %330 
                                         f32 %331 = OpLoad %223 
                                Private f32* %332 = OpAccessChain %79 %33 
                                         f32 %333 = OpLoad %332 
                                         f32 %334 = OpFMul %331 %333 
                                Private f32* %335 = OpAccessChain %79 %33 
                                                      OpStore %335 %334 
                                Private f32* %336 = OpAccessChain %79 %33 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpExtInst %1 29 %337 
                                Private f32* %339 = OpAccessChain %79 %33 
                                                      OpStore %339 %338 
                                         f32 %340 = OpLoad %19 
                                Private f32* %341 = OpAccessChain %79 %33 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %340 %342 
                                Private f32* %344 = OpAccessChain %79 %33 
                                                      OpStore %344 %343 
                              Uniform f32_4* %345 = OpAccessChain %41 %320 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                         f32 %352 = OpDot %347 %351 
                                                      OpStore %19 %352 
                                         f32 %353 = OpLoad %19 
                                Private f32* %354 = OpAccessChain %79 %33 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                Private f32* %357 = OpAccessChain %54 %190 
                                                      OpStore %357 %356 
                                       f32_2 %360 = OpLoad %9 
                                       f32_4 %361 = OpVectorShuffle %360 %360 0 0 0 0 
                                       f32_4 %362 = OpLoad %54 
                                       f32_4 %363 = OpFMul %361 %362 
                                                      OpStore %359 %363 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1.x = (-u_xlat5.z) * u_xlat1.x + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xyz = (-u_xlat2.xyw) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xxx;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat0.w * 128.0;
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xxx;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat5.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat4 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    SV_Target0 = u_xlat1.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 332
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %85 %326 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate vs_TEXCOORD1 Location 85 
                                                      OpDecorate %326 Location 326 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %10 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 8 
                                              %44 = OpTypePointer Uniform %10 
                                              %53 = OpTypePointer Private %10 
                               Private f32_4* %54 = OpVariable Private 
         UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 2 
                                              %63 = OpTypePointer Uniform %6 
                                          u32 %68 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %78 = OpTypePointer Private %36 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 1 
                                          u32 %81 = OpConstant 2 
                                              %84 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %86 = OpTypePointer Input %6 
                               Private f32_4* %95 = OpVariable Private 
                              Private f32_3* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 3 
                                         i32 %110 = OpConstant 0 
                                         i32 %142 = OpConstant 4 
                                             %150 = OpTypePointer Uniform %36 
                                         u32 %175 = OpConstant 3 
                                         i32 %187 = OpConstant 7 
                                         f32 %202 = OpConstant 3.674022E-40 
                                         i32 %221 = OpConstant 5 
                                         f32 %241 = OpConstant 3.674022E-40 
                                       f32_3 %242 = OpConstantComposite %241 %241 %241 
                                         f32 %244 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %244 %244 %244 
                                Private f32* %249 = OpVariable Private 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_2 %286 = OpConstantComposite %202 %202 
                                         i32 %292 = OpConstant 6 
                                         f32 %315 = OpConstant 3.674022E-40 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %317 = OpConstant 3.674022E-40 
                                       f32_3 %318 = OpConstantComposite %315 %316 %317 
                                             %325 = OpTypePointer Output %10 
                               Output f32_4* %326 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %35 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                                      OpStore %9 %52 
                          read_only Texture2D %56 = OpLoad %55 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                                        f32_2 %60 = OpLoad %9 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                                      OpStore %54 %61 
                                 Uniform f32* %64 = OpAccessChain %41 %62 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %19 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %41 %62 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %33 
                                                      OpStore %72 %71 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %33 
                                                      OpStore %77 %76 
                                 Uniform f32* %82 = OpAccessChain %41 %80 %81 
                                          f32 %83 = OpLoad %82 
                                   Input f32* %87 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFDiv %83 %88 
                                 Private f32* %90 = OpAccessChain %79 %33 
                                                      OpStore %90 %89 
                                        f32_3 %91 = OpLoad %79 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpLoad vs_TEXCOORD1 
                                        f32_3 %94 = OpFMul %92 %93 
                                                      OpStore %79 %94 
                                        f32_2 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpLoad %79 
                                        f32_3 %99 = OpFMul %97 %98 
                                       f32_4 %100 = OpLoad %95 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %95 %101 
                                       f32_4 %103 = OpLoad %95 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %41 %105 %80 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %102 %109 
                              Uniform f32_4* %111 = OpAccessChain %41 %105 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %95 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 0 0 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_3 %117 = OpLoad %102 
                                       f32_3 %118 = OpFAdd %116 %117 
                                       f32_4 %119 = OpLoad %95 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %95 %120 
                              Uniform f32_4* %121 = OpAccessChain %41 %105 %62 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %95 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %95 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                                       f32_3 %129 = OpFAdd %126 %128 
                                       f32_4 %130 = OpLoad %95 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 6 
                                                      OpStore %95 %131 
                                       f32_4 %132 = OpLoad %95 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 3 
                              Uniform f32_4* %134 = OpAccessChain %41 %105 %105 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFAdd %133 %136 
                                       f32_4 %138 = OpLoad %95 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 2 6 
                                                      OpStore %95 %139 
                                       f32_4 %140 = OpLoad %95 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 3 
                              Uniform f32_4* %143 = OpAccessChain %41 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %141 %146 
                                                      OpStore %102 %147 
                                       f32_4 %148 = OpLoad %95 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 3 
                              Uniform f32_3* %151 = OpAccessChain %41 %110 
                                       f32_3 %152 = OpLoad %151 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %95 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 2 6 
                                                      OpStore %95 %156 
                                       f32_3 %157 = OpLoad %102 
                                       f32_3 %158 = OpLoad %102 
                                         f32 %159 = OpDot %157 %158 
                                Private f32* %160 = OpAccessChain %79 %33 
                                                      OpStore %160 %159 
                                Private f32* %161 = OpAccessChain %79 %33 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpExtInst %1 31 %162 
                                Private f32* %164 = OpAccessChain %79 %33 
                                                      OpStore %164 %163 
                                Private f32* %165 = OpAccessChain %79 %81 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFNegate %166 
                                Private f32* %168 = OpAccessChain %9 %33 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %167 %169 
                                Private f32* %171 = OpAccessChain %79 %33 
                                         f32 %172 = OpLoad %171 
                                         f32 %173 = OpFAdd %170 %172 
                                Private f32* %174 = OpAccessChain %9 %33 
                                                      OpStore %174 %173 
                                Uniform f32* %176 = OpAccessChain %41 %142 %175 
                                         f32 %177 = OpLoad %176 
                                Private f32* %178 = OpAccessChain %9 %33 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                Private f32* %181 = OpAccessChain %95 %81 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFAdd %180 %182 
                                Private f32* %184 = OpAccessChain %9 %33 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %9 %33 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %188 = OpAccessChain %41 %187 %81 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %186 %189 
                                Uniform f32* %191 = OpAccessChain %41 %187 %175 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpFAdd %190 %192 
                                Private f32* %194 = OpAccessChain %9 %33 
                                                      OpStore %194 %193 
                                Private f32* %195 = OpAccessChain %9 %33 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFNegate %196 
                                         f32 %198 = OpFAdd %197 %73 
                                Private f32* %199 = OpAccessChain %9 %33 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %33 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpExtInst %1 43 %201 %202 %73 
                                Private f32* %204 = OpAccessChain %9 %33 
                                                      OpStore %204 %203 
                                       f32_4 %205 = OpLoad %95 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 3 
                                       f32_4 %207 = OpLoad %95 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 3 
                                         f32 %209 = OpDot %206 %208 
                                Private f32* %210 = OpAccessChain %79 %33 
                                                      OpStore %210 %209 
                                Private f32* %211 = OpAccessChain %79 %33 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 32 %212 
                                Private f32* %214 = OpAccessChain %79 %33 
                                                      OpStore %214 %213 
                                       f32_4 %215 = OpLoad %95 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 3 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpLoad %79 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 0 0 
                                       f32_3 %220 = OpFMul %217 %219 
                              Uniform f32_4* %222 = OpAccessChain %41 %221 
                                       f32_4 %223 = OpLoad %222 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                       f32_3 %225 = OpFNegate %224 
                                       f32_3 %226 = OpFAdd %220 %225 
                                                      OpStore %79 %226 
                                       f32_3 %227 = OpLoad %79 
                                       f32_3 %228 = OpLoad %79 
                                         f32 %229 = OpDot %227 %228 
                                Private f32* %230 = OpAccessChain %95 %33 
                                                      OpStore %230 %229 
                                Private f32* %231 = OpAccessChain %95 %33 
                                         f32 %232 = OpLoad %231 
                                         f32 %233 = OpExtInst %1 32 %232 
                                Private f32* %234 = OpAccessChain %95 %33 
                                                      OpStore %234 %233 
                                       f32_3 %235 = OpLoad %79 
                                       f32_4 %236 = OpLoad %95 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 0 0 
                                       f32_3 %238 = OpFMul %235 %237 
                                                      OpStore %79 %238 
                                       f32_4 %239 = OpLoad %54 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_3 %246 = OpFAdd %243 %245 
                                       f32_4 %247 = OpLoad %54 
                                       f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                                      OpStore %54 %248 
                                Private f32* %250 = OpAccessChain %54 %175 
                                         f32 %251 = OpLoad %250 
                                         f32 %253 = OpFMul %251 %252 
                                                      OpStore %249 %253 
                                       f32_4 %254 = OpLoad %54 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_4 %256 = OpLoad %54 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                         f32 %258 = OpDot %255 %257 
                                Private f32* %259 = OpAccessChain %95 %33 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %95 %33 
                                         f32 %261 = OpLoad %260 
                                         f32 %262 = OpExtInst %1 32 %261 
                                Private f32* %263 = OpAccessChain %95 %33 
                                                      OpStore %263 %262 
                                       f32_4 %264 = OpLoad %54 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %95 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 0 0 
                                       f32_3 %268 = OpFMul %265 %267 
                                       f32_4 %269 = OpLoad %54 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %54 %270 
                                       f32_3 %271 = OpLoad %79 
                                       f32_4 %272 = OpLoad %54 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                         f32 %274 = OpDot %271 %273 
                                Private f32* %275 = OpAccessChain %79 %33 
                                                      OpStore %275 %274 
                              Uniform f32_4* %276 = OpAccessChain %41 %221 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFNegate %278 
                                       f32_4 %280 = OpLoad %54 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                         f32 %282 = OpDot %279 %281 
                                Private f32* %283 = OpAccessChain %79 %68 
                                                      OpStore %283 %282 
                                       f32_3 %284 = OpLoad %79 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                       f32_2 %287 = OpExtInst %1 40 %285 %286 
                                       f32_3 %288 = OpLoad %79 
                                       f32_3 %289 = OpVectorShuffle %288 %287 3 4 2 
                                                      OpStore %79 %289 
                                       f32_3 %290 = OpLoad %79 
                                       f32_3 %291 = OpVectorShuffle %290 %290 1 1 1 
                              Uniform f32_4* %293 = OpAccessChain %41 %292 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpFMul %291 %295 
                                       f32_4 %297 = OpLoad %95 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
                                                      OpStore %95 %298 
                                Private f32* %299 = OpAccessChain %79 %33 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpExtInst %1 30 %300 
                                Private f32* %302 = OpAccessChain %79 %33 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %79 %33 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpLoad %249 
                                         f32 %306 = OpFMul %304 %305 
                                Private f32* %307 = OpAccessChain %79 %33 
                                                      OpStore %307 %306 
                                Private f32* %308 = OpAccessChain %79 %33 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpExtInst %1 29 %309 
                                Private f32* %311 = OpAccessChain %79 %33 
                                                      OpStore %311 %310 
                              Uniform f32_4* %312 = OpAccessChain %41 %292 
                                       f32_4 %313 = OpLoad %312 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                         f32 %319 = OpDot %314 %318 
                                                      OpStore %19 %319 
                                         f32 %320 = OpLoad %19 
                                Private f32* %321 = OpAccessChain %79 %33 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFMul %320 %322 
                                Private f32* %324 = OpAccessChain %95 %175 
                                                      OpStore %324 %323 
                                       f32_2 %327 = OpLoad %9 
                                       f32_4 %328 = OpVectorShuffle %327 %327 0 0 0 0 
                                       f32_4 %329 = OpLoad %95 
                                       f32_4 %330 = OpFMul %328 %329 
                                                      OpStore %326 %330 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + u_xlat4.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = u_xlat0.w * 128.0;
    u_xlat7.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xxx;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb18 = u_xlat1.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat1 = texture(_LightTexture0, u_xlat1.xy, -8.0);
    u_xlat18 = u_xlat18 * u_xlat1.w;
    u_xlat18 = u_xlat5.x * u_xlat18;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat12) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 431
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %86 %425 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpDecorate %39 ArrayStride 39 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpMemberDecorate %40 7 Offset 40 
                                                      OpMemberDecorate %40 8 Offset 40 
                                                      OpMemberDecorate %40 9 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate vs_TEXCOORD1 Location 86 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %372 DescriptorSet 372 
                                                      OpDecorate %372 Binding 372 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %425 Location 425 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeArray %10 %37 
                                              %40 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %39 %10 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 9 
                                              %45 = OpTypePointer Uniform %10 
                                              %54 = OpTypePointer Private %10 
                               Private f32_4* %55 = OpVariable Private 
         UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                          i32 %63 = OpConstant 2 
                                              %64 = OpTypePointer Uniform %6 
                                          u32 %69 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %79 = OpTypePointer Private %36 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %81 = OpConstant 1 
                                          u32 %82 = OpConstant 2 
                                              %85 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %87 = OpTypePointer Input %6 
                               Private f32_4* %96 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                                         i32 %106 = OpConstant 3 
                                         i32 %111 = OpConstant 0 
                                             %143 = OpTypePointer Uniform %36 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %160 = OpConstant 5 
                                Private f32* %168 = OpVariable Private 
                                         u32 %172 = OpConstant 3 
        UniformConstant read_only Texture2D* %176 = OpVariable UniformConstant 
                    UniformConstant sampler* %178 = OpVariable UniformConstant 
                                         f32 %210 = OpConstant 3.674022E-40 
                                       f32_3 %211 = OpConstantComposite %210 %210 %210 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_3 %214 = OpConstantComposite %213 %213 %213 
                                         f32 %220 = OpConstant 3.674022E-40 
                                Private f32* %223 = OpVariable Private 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_2 %251 = OpConstantComposite %250 %250 
                              Private f32_3* %255 = OpVariable Private 
                                         i32 %272 = OpConstant 8 
                                         i32 %295 = OpConstant 4 
                                         i32 %334 = OpConstant 7 
                                             %363 = OpTypeBool 
                                             %364 = OpTypePointer Private %363 
                               Private bool* %365 = OpVariable Private 
                                Private f32* %369 = OpVariable Private 
        UniformConstant read_only Texture2D* %372 = OpVariable UniformConstant 
                    UniformConstant sampler* %374 = OpVariable UniformConstant 
                                         f32 %379 = OpConstant 3.674022E-40 
                                         i32 %399 = OpConstant 6 
                                         f32 %414 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                         f32 %416 = OpConstant 3.674022E-40 
                                       f32_3 %417 = OpConstantComposite %414 %415 %416 
                                             %424 = OpTypePointer Output %10 
                               Output f32_4* %425 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                                      OpStore %9 %53 
                          read_only Texture2D %57 = OpLoad %56 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                                        f32_2 %61 = OpLoad %9 
                                        f32_4 %62 = OpImageSampleImplicitLod %60 %61 
                                                      OpStore %55 %62 
                                 Uniform f32* %65 = OpAccessChain %42 %63 %33 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %19 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %42 %63 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                                      OpStore %73 %72 
                                 Private f32* %75 = OpAccessChain %9 %33 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFDiv %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                                      OpStore %78 %77 
                                 Uniform f32* %83 = OpAccessChain %42 %81 %82 
                                          f32 %84 = OpLoad %83 
                                   Input f32* %88 = OpAccessChain vs_TEXCOORD1 %82 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFDiv %84 %89 
                                 Private f32* %91 = OpAccessChain %80 %33 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %80 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFMul %93 %94 
                                                      OpStore %80 %95 
                                        f32_2 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad %80 
                                       f32_3 %100 = OpFMul %98 %99 
                                       f32_4 %101 = OpLoad %96 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %96 %102 
                                       f32_4 %104 = OpLoad %96 
                                       f32_3 %105 = OpVectorShuffle %104 %104 1 1 1 
                              Uniform f32_4* %107 = OpAccessChain %42 %106 %81 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFMul %105 %109 
                                                      OpStore %103 %110 
                              Uniform f32_4* %112 = OpAccessChain %42 %106 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %96 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %103 
                                       f32_3 %119 = OpFAdd %117 %118 
                                       f32_4 %120 = OpLoad %96 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %96 %121 
                              Uniform f32_4* %122 = OpAccessChain %42 %106 %63 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %96 
                                       f32_3 %126 = OpVectorShuffle %125 %125 2 2 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %96 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 3 
                                       f32_3 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %96 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 6 
                                                      OpStore %96 %132 
                                       f32_4 %133 = OpLoad %96 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                              Uniform f32_4* %135 = OpAccessChain %42 %106 %106 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %134 %137 
                                       f32_4 %139 = OpLoad %96 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 6 
                                                      OpStore %96 %140 
                                       f32_4 %141 = OpLoad %96 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 3 
                              Uniform f32_3* %144 = OpAccessChain %42 %111 
                                       f32_3 %145 = OpLoad %144 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %142 %146 
                                                      OpStore %103 %147 
                                       f32_3 %148 = OpLoad %103 
                                       f32_3 %149 = OpLoad %103 
                                         f32 %150 = OpDot %148 %149 
                                Private f32* %151 = OpAccessChain %80 %33 
                                                      OpStore %151 %150 
                                Private f32* %152 = OpAccessChain %80 %33 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpExtInst %1 32 %153 
                                Private f32* %155 = OpAccessChain %80 %33 
                                                      OpStore %155 %154 
                                       f32_4 %157 = OpLoad %96 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 3 
                                       f32_3 %159 = OpFNegate %158 
                              Uniform f32_4* %161 = OpAccessChain %42 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFAdd %159 %163 
                                                      OpStore %156 %164 
                                       f32_3 %165 = OpLoad %156 
                                       f32_3 %166 = OpLoad %156 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %19 %167 
                                         f32 %169 = OpLoad %19 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                         f32 %171 = OpLoad %19 
                                Uniform f32* %173 = OpAccessChain %42 %160 %172 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFMul %171 %174 
                                                      OpStore %19 %175 
                         read_only Texture2D %177 = OpLoad %176 
                                     sampler %179 = OpLoad %178 
                  read_only Texture2DSampled %180 = OpSampledImage %177 %179 
                                         f32 %181 = OpLoad %19 
                                       f32_2 %182 = OpCompositeConstruct %181 %181 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                         f32 %184 = OpCompositeExtract %183 0 
                                                      OpStore %19 %184 
                                         f32 %185 = OpLoad %168 
                                       f32_3 %186 = OpCompositeConstruct %185 %185 %185 
                                       f32_3 %187 = OpLoad %156 
                                       f32_3 %188 = OpFMul %186 %187 
                                                      OpStore %156 %188 
                                       f32_3 %189 = OpLoad %103 
                                       f32_3 %190 = OpFNegate %189 
                                       f32_3 %191 = OpLoad %80 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %156 
                                       f32_3 %195 = OpFAdd %193 %194 
                                                      OpStore %103 %195 
                                       f32_3 %196 = OpLoad %103 
                                       f32_3 %197 = OpLoad %103 
                                         f32 %198 = OpDot %196 %197 
                                Private f32* %199 = OpAccessChain %80 %33 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %80 %33 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpExtInst %1 32 %201 
                                Private f32* %203 = OpAccessChain %80 %33 
                                                      OpStore %203 %202 
                                       f32_3 %204 = OpLoad %80 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %103 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %103 %207 
                                       f32_4 %208 = OpLoad %55 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                       f32_3 %212 = OpFMul %209 %211 
                                       f32_3 %215 = OpFAdd %212 %214 
                                       f32_4 %216 = OpLoad %55 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %55 %217 
                                Private f32* %218 = OpAccessChain %55 %172 
                                         f32 %219 = OpLoad %218 
                                         f32 %221 = OpFMul %219 %220 
                                Private f32* %222 = OpAccessChain %80 %33 
                                                      OpStore %222 %221 
                                       f32_4 %224 = OpLoad %55 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_4 %226 = OpLoad %55 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                         f32 %228 = OpDot %225 %227 
                                                      OpStore %223 %228 
                                         f32 %229 = OpLoad %223 
                                         f32 %230 = OpExtInst %1 32 %229 
                                                      OpStore %223 %230 
                                         f32 %231 = OpLoad %223 
                                       f32_3 %232 = OpCompositeConstruct %231 %231 %231 
                                       f32_4 %233 = OpLoad %55 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %55 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %55 %237 
                                       f32_3 %238 = OpLoad %103 
                                       f32_4 %239 = OpLoad %55 
                                       f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                         f32 %241 = OpDot %238 %240 
                                Private f32* %242 = OpAccessChain %55 %172 
                                                      OpStore %242 %241 
                                       f32_3 %243 = OpLoad %156 
                                       f32_4 %244 = OpLoad %55 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                         f32 %246 = OpDot %243 %245 
                                Private f32* %247 = OpAccessChain %55 %33 
                                                      OpStore %247 %246 
                                       f32_4 %248 = OpLoad %55 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 3 
                                       f32_2 %252 = OpExtInst %1 40 %249 %251 
                                       f32_4 %253 = OpLoad %55 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 2 3 
                                                      OpStore %55 %254 
                                Private f32* %256 = OpAccessChain %55 %69 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 30 %257 
                                Private f32* %259 = OpAccessChain %255 %33 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %80 %33 
                                         f32 %261 = OpLoad %260 
                                Private f32* %262 = OpAccessChain %255 %33 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFMul %261 %263 
                                Private f32* %265 = OpAccessChain %80 %33 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %80 %33 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 29 %267 
                                Private f32* %269 = OpAccessChain %80 %33 
                                                      OpStore %269 %268 
                                       f32_4 %270 = OpLoad %96 
                                       f32_3 %271 = OpVectorShuffle %270 %270 1 1 1 
                              Uniform f32_4* %273 = OpAccessChain %42 %272 %81 
                                       f32_4 %274 = OpLoad %273 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 3 
                                       f32_3 %276 = OpFMul %271 %275 
                                                      OpStore %255 %276 
                              Uniform f32_4* %277 = OpAccessChain %42 %272 %111 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 3 
                                       f32_4 %280 = OpLoad %96 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
                                       f32_3 %282 = OpFMul %279 %281 
                                       f32_3 %283 = OpLoad %255 
                                       f32_3 %284 = OpFAdd %282 %283 
                                                      OpStore %255 %284 
                              Uniform f32_4* %285 = OpAccessChain %42 %272 %63 
                                       f32_4 %286 = OpLoad %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 3 
                                       f32_4 %288 = OpLoad %96 
                                       f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                       f32_3 %290 = OpFMul %287 %289 
                                       f32_3 %291 = OpLoad %255 
                                       f32_3 %292 = OpFAdd %290 %291 
                                                      OpStore %255 %292 
                                       f32_4 %293 = OpLoad %96 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 3 
                              Uniform f32_4* %296 = OpAccessChain %42 %295 
                                       f32_4 %297 = OpLoad %296 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFNegate %298 
                                       f32_3 %300 = OpFAdd %294 %299 
                                       f32_4 %301 = OpLoad %96 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 2 6 
                                                      OpStore %96 %302 
                                       f32_4 %303 = OpLoad %96 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 3 
                                       f32_4 %305 = OpLoad %96 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 3 
                                         f32 %307 = OpDot %304 %306 
                                Private f32* %308 = OpAccessChain %96 %33 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %96 %33 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpExtInst %1 31 %310 
                                Private f32* %312 = OpAccessChain %96 %33 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %80 %82 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFNegate %314 
                                Private f32* %316 = OpAccessChain %9 %33 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                Private f32* %319 = OpAccessChain %96 %33 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFAdd %318 %320 
                                Private f32* %322 = OpAccessChain %9 %33 
                                                      OpStore %322 %321 
                                Uniform f32* %323 = OpAccessChain %42 %295 %172 
                                         f32 %324 = OpLoad %323 
                                Private f32* %325 = OpAccessChain %9 %33 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFMul %324 %326 
                                Private f32* %328 = OpAccessChain %96 %82 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpFAdd %327 %329 
                                Private f32* %331 = OpAccessChain %9 %33 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %9 %33 
                                         f32 %333 = OpLoad %332 
                                Uniform f32* %335 = OpAccessChain %42 %334 %82 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFMul %333 %336 
                                Uniform f32* %338 = OpAccessChain %42 %334 %172 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFAdd %337 %339 
                                Private f32* %341 = OpAccessChain %9 %33 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %9 %33 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %344 %74 
                                Private f32* %346 = OpAccessChain %9 %33 
                                                      OpStore %346 %345 
                                Private f32* %347 = OpAccessChain %9 %33 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpExtInst %1 43 %348 %250 %74 
                                Private f32* %350 = OpAccessChain %9 %33 
                                                      OpStore %350 %349 
                                       f32_3 %351 = OpLoad %255 
                              Uniform f32_4* %352 = OpAccessChain %42 %272 %106 
                                       f32_4 %353 = OpLoad %352 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 3 
                                       f32_3 %355 = OpFAdd %351 %354 
                                                      OpStore %255 %355 
                                       f32_3 %356 = OpLoad %255 
                                       f32_2 %357 = OpVectorShuffle %356 %356 0 1 
                                       f32_3 %358 = OpLoad %255 
                                       f32_2 %359 = OpVectorShuffle %358 %358 2 2 
                                       f32_2 %360 = OpFDiv %357 %359 
                                       f32_3 %361 = OpLoad %255 
                                       f32_3 %362 = OpVectorShuffle %361 %360 3 4 2 
                                                      OpStore %255 %362 
                                Private f32* %366 = OpAccessChain %255 %82 
                                         f32 %367 = OpLoad %366 
                                        bool %368 = OpFOrdLessThan %367 %250 
                                                      OpStore %365 %368 
                                        bool %370 = OpLoad %365 
                                         f32 %371 = OpSelect %370 %74 %250 
                                                      OpStore %369 %371 
                         read_only Texture2D %373 = OpLoad %372 
                                     sampler %375 = OpLoad %374 
                  read_only Texture2DSampled %376 = OpSampledImage %373 %375 
                                       f32_3 %377 = OpLoad %255 
                                       f32_2 %378 = OpVectorShuffle %377 %377 0 1 
                                       f32_4 %380 = OpImageSampleImplicitLod %376 %378 Bias %10 
                                         f32 %381 = OpCompositeExtract %380 3 
                                Private f32* %382 = OpAccessChain %255 %33 
                                                      OpStore %382 %381 
                                         f32 %383 = OpLoad %369 
                                Private f32* %384 = OpAccessChain %255 %33 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                                      OpStore %369 %386 
                                         f32 %387 = OpLoad %19 
                                         f32 %388 = OpLoad %369 
                                         f32 %389 = OpFMul %387 %388 
                                                      OpStore %19 %389 
                                         f32 %390 = OpLoad %19 
                                                      OpStore %369 %390 
                                         f32 %391 = OpLoad %369 
                                         f32 %392 = OpExtInst %1 43 %391 %250 %74 
                                                      OpStore %369 %392 
                                         f32 %393 = OpLoad %19 
                                Private f32* %394 = OpAccessChain %55 %33 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %19 %396 
                                         f32 %397 = OpLoad %19 
                                       f32_3 %398 = OpCompositeConstruct %397 %397 %397 
                              Uniform f32_4* %400 = OpAccessChain %42 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFMul %398 %402 
                                       f32_4 %404 = OpLoad %55 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %55 %405 
                                         f32 %406 = OpLoad %369 
                                Private f32* %407 = OpAccessChain %80 %33 
                                         f32 %408 = OpLoad %407 
                                         f32 %409 = OpFMul %406 %408 
                                Private f32* %410 = OpAccessChain %80 %33 
                                                      OpStore %410 %409 
                              Uniform f32_4* %411 = OpAccessChain %42 %399 
                                       f32_4 %412 = OpLoad %411 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                         f32 %418 = OpDot %413 %417 
                                                      OpStore %19 %418 
                                         f32 %419 = OpLoad %19 
                                Private f32* %420 = OpAccessChain %80 %33 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFMul %419 %421 
                                Private f32* %423 = OpAccessChain %55 %172 
                                                      OpStore %423 %422 
                                       f32_2 %426 = OpLoad %9 
                                       f32_4 %427 = OpVectorShuffle %426 %426 0 0 0 0 
                                       f32_4 %428 = OpLoad %55 
                                       f32_4 %429 = OpFMul %427 %428 
                                                      OpStore %425 %429 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat4.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat13);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat7.xxx + (-u_xlat4.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = u_xlat0.w * 128.0;
    u_xlat7.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xxx;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat6 = max(u_xlat7.x, 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = exp2(u_xlat6);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat7.z) * u_xlat1.x + u_xlat12;
    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat12 + u_xlat2.z;
    u_xlat12 = u_xlat12 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz, -8.0);
    u_xlat18 = u_xlat1.w * u_xlat5.x;
    u_xlat1.x = u_xlat18;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = u_xlat18 * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat6 * u_xlat1.x;
    u_xlat6 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat6 * u_xlat0.x;
    SV_Target0 = vec4(u_xlat12) * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 415
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %86 %409 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpDecorate %39 ArrayStride 39 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpMemberDecorate %40 7 Offset 40 
                                                      OpMemberDecorate %40 8 Offset 40 
                                                      OpMemberDecorate %40 9 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate vs_TEXCOORD1 Location 86 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %361 DescriptorSet 361 
                                                      OpDecorate %361 Binding 361 
                                                      OpDecorate %363 DescriptorSet 363 
                                                      OpDecorate %363 Binding 363 
                                                      OpDecorate %409 Location 409 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeArray %10 %37 
                                              %40 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %39 %10 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 9 
                                              %45 = OpTypePointer Uniform %10 
                                              %54 = OpTypePointer Private %10 
                               Private f32_4* %55 = OpVariable Private 
         UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                          i32 %63 = OpConstant 2 
                                              %64 = OpTypePointer Uniform %6 
                                          u32 %69 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %79 = OpTypePointer Private %36 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %81 = OpConstant 1 
                                          u32 %82 = OpConstant 2 
                                              %85 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %87 = OpTypePointer Input %6 
                               Private f32_4* %96 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                                         i32 %106 = OpConstant 3 
                                         i32 %111 = OpConstant 0 
                                             %143 = OpTypePointer Uniform %36 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %159 = OpConstant 5 
                                Private f32* %168 = OpVariable Private 
                                         u32 %172 = OpConstant 3 
        UniformConstant read_only Texture2D* %176 = OpVariable UniformConstant 
                    UniformConstant sampler* %178 = OpVariable UniformConstant 
                                         f32 %211 = OpConstant 3.674022E-40 
                                       f32_3 %212 = OpConstantComposite %211 %211 %211 
                                         f32 %214 = OpConstant 3.674022E-40 
                                       f32_3 %215 = OpConstantComposite %214 %214 %214 
                                         f32 %221 = OpConstant 3.674022E-40 
                                Private f32* %224 = OpVariable Private 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_2 %253 = OpConstantComposite %252 %252 
                              Private f32_3* %257 = OpVariable Private 
                                         i32 %274 = OpConstant 8 
                                         i32 %297 = OpConstant 4 
                                         i32 %336 = OpConstant 7 
                                Private f32* %358 = OpVariable Private 
                                             %359 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %360 = OpTypePointer UniformConstant %359 
      UniformConstant read_only TextureCube* %361 = OpVariable UniformConstant 
                    UniformConstant sampler* %363 = OpVariable UniformConstant 
                                             %365 = OpTypeSampledImage %359 
                                         f32 %368 = OpConstant 3.674022E-40 
                                         i32 %383 = OpConstant 6 
                                         f32 %398 = OpConstant 3.674022E-40 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %400 = OpConstant 3.674022E-40 
                                       f32_3 %401 = OpConstantComposite %398 %399 %400 
                                             %408 = OpTypePointer Output %10 
                               Output f32_4* %409 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                                      OpStore %9 %53 
                          read_only Texture2D %57 = OpLoad %56 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                                        f32_2 %61 = OpLoad %9 
                                        f32_4 %62 = OpImageSampleImplicitLod %60 %61 
                                                      OpStore %55 %62 
                                 Uniform f32* %65 = OpAccessChain %42 %63 %33 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %19 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %42 %63 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                                      OpStore %73 %72 
                                 Private f32* %75 = OpAccessChain %9 %33 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFDiv %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                                      OpStore %78 %77 
                                 Uniform f32* %83 = OpAccessChain %42 %81 %82 
                                          f32 %84 = OpLoad %83 
                                   Input f32* %88 = OpAccessChain vs_TEXCOORD1 %82 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFDiv %84 %89 
                                 Private f32* %91 = OpAccessChain %80 %33 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %80 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFMul %93 %94 
                                                      OpStore %80 %95 
                                        f32_2 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad %80 
                                       f32_3 %100 = OpFMul %98 %99 
                                       f32_4 %101 = OpLoad %96 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %96 %102 
                                       f32_4 %104 = OpLoad %96 
                                       f32_3 %105 = OpVectorShuffle %104 %104 1 1 1 
                              Uniform f32_4* %107 = OpAccessChain %42 %106 %81 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFMul %105 %109 
                                                      OpStore %103 %110 
                              Uniform f32_4* %112 = OpAccessChain %42 %106 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %96 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %103 
                                       f32_3 %119 = OpFAdd %117 %118 
                                       f32_4 %120 = OpLoad %96 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %96 %121 
                              Uniform f32_4* %122 = OpAccessChain %42 %106 %63 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %96 
                                       f32_3 %126 = OpVectorShuffle %125 %125 2 2 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %96 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 3 
                                       f32_3 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %96 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 6 
                                                      OpStore %96 %132 
                                       f32_4 %133 = OpLoad %96 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                              Uniform f32_4* %135 = OpAccessChain %42 %106 %106 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %134 %137 
                                       f32_4 %139 = OpLoad %96 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 6 
                                                      OpStore %96 %140 
                                       f32_4 %141 = OpLoad %96 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 3 
                              Uniform f32_3* %144 = OpAccessChain %42 %111 
                                       f32_3 %145 = OpLoad %144 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %142 %146 
                                                      OpStore %103 %147 
                                       f32_3 %148 = OpLoad %103 
                                       f32_3 %149 = OpLoad %103 
                                         f32 %150 = OpDot %148 %149 
                                Private f32* %151 = OpAccessChain %80 %33 
                                                      OpStore %151 %150 
                                Private f32* %152 = OpAccessChain %80 %33 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpExtInst %1 32 %153 
                                Private f32* %155 = OpAccessChain %80 %33 
                                                      OpStore %155 %154 
                                       f32_4 %157 = OpLoad %96 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 3 
                              Uniform f32_4* %160 = OpAccessChain %42 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %156 %164 
                                       f32_3 %165 = OpLoad %156 
                                       f32_3 %166 = OpLoad %156 
                                         f32 %167 = OpDot %165 %166 
                                                      OpStore %19 %167 
                                         f32 %169 = OpLoad %19 
                                         f32 %170 = OpExtInst %1 32 %169 
                                                      OpStore %168 %170 
                                         f32 %171 = OpLoad %19 
                                Uniform f32* %173 = OpAccessChain %42 %159 %172 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFMul %171 %174 
                                                      OpStore %19 %175 
                         read_only Texture2D %177 = OpLoad %176 
                                     sampler %179 = OpLoad %178 
                  read_only Texture2DSampled %180 = OpSampledImage %177 %179 
                                         f32 %181 = OpLoad %19 
                                       f32_2 %182 = OpCompositeConstruct %181 %181 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                         f32 %184 = OpCompositeExtract %183 0 
                                                      OpStore %19 %184 
                                         f32 %185 = OpLoad %168 
                                       f32_3 %186 = OpCompositeConstruct %185 %185 %185 
                                       f32_3 %187 = OpLoad %156 
                                       f32_3 %188 = OpFMul %186 %187 
                                                      OpStore %156 %188 
                                       f32_3 %189 = OpLoad %103 
                                       f32_3 %190 = OpFNegate %189 
                                       f32_3 %191 = OpLoad %80 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 0 0 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %194 = OpLoad %156 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpFAdd %193 %195 
                                                      OpStore %103 %196 
                                       f32_3 %197 = OpLoad %103 
                                       f32_3 %198 = OpLoad %103 
                                         f32 %199 = OpDot %197 %198 
                                Private f32* %200 = OpAccessChain %80 %33 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %80 %33 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpExtInst %1 32 %202 
                                Private f32* %204 = OpAccessChain %80 %33 
                                                      OpStore %204 %203 
                                       f32_3 %205 = OpLoad %80 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 0 0 
                                       f32_3 %207 = OpLoad %103 
                                       f32_3 %208 = OpFMul %206 %207 
                                                      OpStore %103 %208 
                                       f32_4 %209 = OpLoad %55 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %55 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %55 %218 
                                Private f32* %219 = OpAccessChain %55 %172 
                                         f32 %220 = OpLoad %219 
                                         f32 %222 = OpFMul %220 %221 
                                Private f32* %223 = OpAccessChain %80 %33 
                                                      OpStore %223 %222 
                                       f32_4 %225 = OpLoad %55 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %55 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                         f32 %229 = OpDot %226 %228 
                                                      OpStore %224 %229 
                                         f32 %230 = OpLoad %224 
                                         f32 %231 = OpExtInst %1 32 %230 
                                                      OpStore %224 %231 
                                         f32 %232 = OpLoad %224 
                                       f32_3 %233 = OpCompositeConstruct %232 %232 %232 
                                       f32_4 %234 = OpLoad %55 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_4 %237 = OpLoad %55 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 6 3 
                                                      OpStore %55 %238 
                                       f32_3 %239 = OpLoad %103 
                                       f32_4 %240 = OpLoad %55 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                         f32 %242 = OpDot %239 %241 
                                Private f32* %243 = OpAccessChain %55 %172 
                                                      OpStore %243 %242 
                                       f32_3 %244 = OpLoad %156 
                                       f32_3 %245 = OpFNegate %244 
                                       f32_4 %246 = OpLoad %55 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                         f32 %248 = OpDot %245 %247 
                                Private f32* %249 = OpAccessChain %55 %33 
                                                      OpStore %249 %248 
                                       f32_4 %250 = OpLoad %55 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 3 
                                       f32_2 %254 = OpExtInst %1 40 %251 %253 
                                       f32_4 %255 = OpLoad %55 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %55 %256 
                                Private f32* %258 = OpAccessChain %55 %69 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 30 %259 
                                Private f32* %261 = OpAccessChain %257 %33 
                                                      OpStore %261 %260 
                                Private f32* %262 = OpAccessChain %80 %33 
                                         f32 %263 = OpLoad %262 
                                Private f32* %264 = OpAccessChain %257 %33 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %263 %265 
                                Private f32* %267 = OpAccessChain %80 %33 
                                                      OpStore %267 %266 
                                Private f32* %268 = OpAccessChain %80 %33 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 29 %269 
                                Private f32* %271 = OpAccessChain %80 %33 
                                                      OpStore %271 %270 
                                       f32_4 %272 = OpLoad %96 
                                       f32_3 %273 = OpVectorShuffle %272 %272 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %42 %274 %81 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFMul %273 %277 
                                                      OpStore %257 %278 
                              Uniform f32_4* %279 = OpAccessChain %42 %274 %111 
                                       f32_4 %280 = OpLoad %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32_4 %282 = OpLoad %96 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 0 0 
                                       f32_3 %284 = OpFMul %281 %283 
                                       f32_3 %285 = OpLoad %257 
                                       f32_3 %286 = OpFAdd %284 %285 
                                                      OpStore %257 %286 
                              Uniform f32_4* %287 = OpAccessChain %42 %274 %63 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                       f32_4 %290 = OpLoad %96 
                                       f32_3 %291 = OpVectorShuffle %290 %290 3 3 3 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_3 %293 = OpLoad %257 
                                       f32_3 %294 = OpFAdd %292 %293 
                                                      OpStore %257 %294 
                                       f32_4 %295 = OpLoad %96 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 3 
                              Uniform f32_4* %298 = OpAccessChain %42 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFNegate %300 
                                       f32_3 %302 = OpFAdd %296 %301 
                                       f32_4 %303 = OpLoad %96 
                                       f32_4 %304 = OpVectorShuffle %303 %302 4 5 2 6 
                                                      OpStore %96 %304 
                                       f32_4 %305 = OpLoad %96 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 3 
                                       f32_4 %307 = OpLoad %96 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 3 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %96 %33 
                                                      OpStore %310 %309 
                                Private f32* %311 = OpAccessChain %96 %33 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpExtInst %1 31 %312 
                                Private f32* %314 = OpAccessChain %96 %33 
                                                      OpStore %314 %313 
                                Private f32* %315 = OpAccessChain %80 %82 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFNegate %316 
                                Private f32* %318 = OpAccessChain %9 %33 
                                         f32 %319 = OpLoad %318 
                                         f32 %320 = OpFMul %317 %319 
                                Private f32* %321 = OpAccessChain %96 %33 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                Private f32* %324 = OpAccessChain %9 %33 
                                                      OpStore %324 %323 
                                Uniform f32* %325 = OpAccessChain %42 %297 %172 
                                         f32 %326 = OpLoad %325 
                                Private f32* %327 = OpAccessChain %9 %33 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                Private f32* %330 = OpAccessChain %96 %82 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFAdd %329 %331 
                                Private f32* %333 = OpAccessChain %9 %33 
                                                      OpStore %333 %332 
                                Private f32* %334 = OpAccessChain %9 %33 
                                         f32 %335 = OpLoad %334 
                                Uniform f32* %337 = OpAccessChain %42 %336 %82 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFMul %335 %338 
                                Uniform f32* %340 = OpAccessChain %42 %336 %172 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFAdd %339 %341 
                                Private f32* %343 = OpAccessChain %9 %33 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %9 %33 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFNegate %345 
                                         f32 %347 = OpFAdd %346 %74 
                                Private f32* %348 = OpAccessChain %9 %33 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %9 %33 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpExtInst %1 43 %350 %252 %74 
                                Private f32* %352 = OpAccessChain %9 %33 
                                                      OpStore %352 %351 
                                       f32_3 %353 = OpLoad %257 
                              Uniform f32_4* %354 = OpAccessChain %42 %274 %106 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_3 %357 = OpFAdd %353 %356 
                                                      OpStore %257 %357 
                       read_only TextureCube %362 = OpLoad %361 
                                     sampler %364 = OpLoad %363 
                read_only TextureCubeSampled %366 = OpSampledImage %362 %364 
                                       f32_3 %367 = OpLoad %257 
                                       f32_4 %369 = OpImageSampleImplicitLod %366 %367 Bias %10 
                                         f32 %370 = OpCompositeExtract %369 3 
                                                      OpStore %358 %370 
                                         f32 %371 = OpLoad %358 
                                         f32 %372 = OpLoad %19 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %19 %373 
                                         f32 %374 = OpLoad %19 
                                                      OpStore %358 %374 
                                         f32 %375 = OpLoad %358 
                                         f32 %376 = OpExtInst %1 43 %375 %252 %74 
                                                      OpStore %358 %376 
                                         f32 %377 = OpLoad %19 
                                Private f32* %378 = OpAccessChain %55 %33 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                                      OpStore %19 %380 
                                         f32 %381 = OpLoad %19 
                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
                              Uniform f32_4* %384 = OpAccessChain %42 %383 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFMul %382 %386 
                                       f32_4 %388 = OpLoad %55 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %55 %389 
                                         f32 %390 = OpLoad %358 
                                Private f32* %391 = OpAccessChain %80 %33 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFMul %390 %392 
                                Private f32* %394 = OpAccessChain %80 %33 
                                                      OpStore %394 %393 
                              Uniform f32_4* %395 = OpAccessChain %42 %383 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                         f32 %402 = OpDot %397 %401 
                                                      OpStore %19 %402 
                                         f32 %403 = OpLoad %19 
                                Private f32* %404 = OpAccessChain %80 %33 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %403 %405 
                                Private f32* %407 = OpAccessChain %55 %172 
                                                      OpStore %407 %406 
                                       f32_2 %410 = OpLoad %9 
                                       f32_4 %411 = OpVectorShuffle %410 %410 0 0 0 0 
                                       f32_4 %412 = OpLoad %55 
                                       f32_4 %413 = OpFMul %411 %412 
                                                      OpStore %409 %413 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
vec2 u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat5.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat5.xyz = u_xlat5.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat5.xxx + (-_LightDir.xyz);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat3.xyz = u_xlat5.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat0.w * 128.0;
    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-_LightDir.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4 = max(u_xlat5.x, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat5.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat5.x = sqrt(u_xlat5.x);
    u_xlat1.x = (-u_xlat5.z) * u_xlat1.x + u_xlat5.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat2 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat8.x = u_xlat2.w;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat2.w;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = u_xlat8.x * u_xlat4;
    u_xlat4 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat4 * u_xlat0.x;
    SV_Target0 = u_xlat1.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 394
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %88 %388 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpDecorate %25 DescriptorSet 25 
                                                      OpDecorate %25 Binding 25 
                                                      OpDecorate %39 ArrayStride 39 
                                                      OpDecorate %40 ArrayStride 40 
                                                      OpMemberDecorate %41 0 Offset 41 
                                                      OpMemberDecorate %41 1 Offset 41 
                                                      OpMemberDecorate %41 2 Offset 41 
                                                      OpMemberDecorate %41 3 Offset 41 
                                                      OpMemberDecorate %41 4 Offset 41 
                                                      OpMemberDecorate %41 5 Offset 41 
                                                      OpMemberDecorate %41 6 Offset 41 
                                                      OpMemberDecorate %41 7 Offset 41 
                                                      OpMemberDecorate %41 8 Offset 41 
                                                      OpMemberDecorate %41 9 Offset 41 
                                                      OpDecorate %41 Block 
                                                      OpDecorate %43 DescriptorSet 43 
                                                      OpDecorate %43 Binding 43 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate vs_TEXCOORD1 Location 88 
                                                      OpDecorate %337 DescriptorSet 337 
                                                      OpDecorate %337 Binding 337 
                                                      OpDecorate %339 DescriptorSet 339 
                                                      OpDecorate %339 Binding 339 
                                                      OpDecorate %388 Location 388 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                               Private f32_2* %18 = OpVariable Private 
                                              %19 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %20 = OpTypePointer UniformConstant %19 
         UniformConstant read_only Texture2D* %21 = OpVariable UniformConstant 
                                              %23 = OpTypeSampler 
                                              %24 = OpTypePointer UniformConstant %23 
                     UniformConstant sampler* %25 = OpVariable UniformConstant 
                                              %27 = OpTypeSampledImage %19 
                                              %31 = OpTypeInt 32 0 
                                          u32 %32 = OpConstant 0 
                                              %34 = OpTypePointer Private %6 
                                              %37 = OpTypeVector %6 3 
                                          u32 %38 = OpConstant 4 
                                              %39 = OpTypeArray %10 %38 
                                              %40 = OpTypeArray %10 %38 
                                              %41 = OpTypeStruct %37 %10 %10 %39 %10 %10 %10 %10 %40 %10 
                                              %42 = OpTypePointer Uniform %41 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %43 = OpVariable Uniform 
                                              %44 = OpTypeInt 32 1 
                                          i32 %45 = OpConstant 9 
                                              %46 = OpTypePointer Uniform %10 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
         UniformConstant read_only Texture2D* %57 = OpVariable UniformConstant 
                     UniformConstant sampler* %59 = OpVariable UniformConstant 
                                          i32 %64 = OpConstant 2 
                                              %65 = OpTypePointer Uniform %6 
                                          u32 %71 = OpConstant 1 
                                          f32 %76 = OpConstant 3.674022E-40 
                                              %81 = OpTypePointer Private %37 
                               Private f32_3* %82 = OpVariable Private 
                                          i32 %83 = OpConstant 1 
                                          u32 %84 = OpConstant 2 
                                              %87 = OpTypePointer Input %37 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %89 = OpTypePointer Input %6 
                               Private f32_4* %98 = OpVariable Private 
                              Private f32_3* %105 = OpVariable Private 
                                         i32 %108 = OpConstant 3 
                                         i32 %113 = OpConstant 0 
                                             %145 = OpTypePointer Uniform %37 
                                         i32 %163 = OpConstant 5 
                                         f32 %183 = OpConstant 3.674022E-40 
                                       f32_3 %184 = OpConstantComposite %183 %183 %183 
                                         f32 %186 = OpConstant 3.674022E-40 
                                       f32_3 %187 = OpConstantComposite %186 %186 %186 
                                         u32 %191 = OpConstant 3 
                                         f32 %194 = OpConstant 3.674022E-40 
                                         f32 %229 = OpConstant 3.674022E-40 
                              Private f32_2* %250 = OpVariable Private 
                                         i32 %253 = OpConstant 8 
                                         i32 %276 = OpConstant 4 
                                         i32 %315 = OpConstant 7 
        UniformConstant read_only Texture2D* %337 = OpVariable UniformConstant 
                    UniformConstant sampler* %339 = OpVariable UniformConstant 
                                         f32 %343 = OpConstant 3.674022E-40 
                                Private f32* %347 = OpVariable Private 
                                         i32 %360 = OpConstant 6 
                                         f32 %375 = OpConstant 3.674022E-40 
                                         f32 %376 = OpConstant 3.674022E-40 
                                         f32 %377 = OpConstant 3.674022E-40 
                                       f32_3 %378 = OpConstantComposite %375 %376 %377 
                                             %387 = OpTypePointer Output %10 
                               Output f32_4* %388 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %22 = OpLoad %21 
                                      sampler %26 = OpLoad %25 
                   read_only Texture2DSampled %28 = OpSampledImage %22 %26 
                                        f32_2 %29 = OpLoad %9 
                                        f32_4 %30 = OpImageSampleImplicitLod %28 %29 
                                          f32 %33 = OpCompositeExtract %30 0 
                                 Private f32* %35 = OpAccessChain %18 %32 
                                                      OpStore %35 %33 
                                        f32_2 %36 = OpLoad %9 
                               Uniform f32_4* %47 = OpAccessChain %43 %45 
                                        f32_4 %48 = OpLoad %47 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                                        f32_2 %50 = OpFMul %36 %49 
                               Uniform f32_4* %51 = OpAccessChain %43 %45 
                                        f32_4 %52 = OpLoad %51 
                                        f32_2 %53 = OpVectorShuffle %52 %52 2 3 
                                        f32_2 %54 = OpFAdd %50 %53 
                                                      OpStore %9 %54 
                          read_only Texture2D %58 = OpLoad %57 
                                      sampler %60 = OpLoad %59 
                   read_only Texture2DSampled %61 = OpSampledImage %58 %60 
                                        f32_2 %62 = OpLoad %9 
                                        f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                                      OpStore %56 %63 
                                 Uniform f32* %66 = OpAccessChain %43 %64 %32 
                                          f32 %67 = OpLoad %66 
                                 Private f32* %68 = OpAccessChain %18 %32 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFMul %67 %69 
                                 Uniform f32* %72 = OpAccessChain %43 %64 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                 Private f32* %75 = OpAccessChain %9 %32 
                                                      OpStore %75 %74 
                                 Private f32* %77 = OpAccessChain %9 %32 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFDiv %76 %78 
                                 Private f32* %80 = OpAccessChain %9 %32 
                                                      OpStore %80 %79 
                                 Uniform f32* %85 = OpAccessChain %43 %83 %84 
                                          f32 %86 = OpLoad %85 
                                   Input f32* %90 = OpAccessChain vs_TEXCOORD1 %84 
                                          f32 %91 = OpLoad %90 
                                          f32 %92 = OpFDiv %86 %91 
                                 Private f32* %93 = OpAccessChain %82 %32 
                                                      OpStore %93 %92 
                                        f32_3 %94 = OpLoad %82 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 0 0 
                                        f32_3 %96 = OpLoad vs_TEXCOORD1 
                                        f32_3 %97 = OpFMul %95 %96 
                                                      OpStore %82 %97 
                                        f32_2 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpLoad %82 
                                       f32_3 %102 = OpFMul %100 %101 
                                       f32_4 %103 = OpLoad %98 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %98 %104 
                                       f32_4 %106 = OpLoad %98 
                                       f32_3 %107 = OpVectorShuffle %106 %106 1 1 1 
                              Uniform f32_4* %109 = OpAccessChain %43 %108 %83 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_3 %112 = OpFMul %107 %111 
                                                      OpStore %105 %112 
                              Uniform f32_4* %114 = OpAccessChain %43 %108 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_4 %117 = OpLoad %98 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %116 %118 
                                       f32_3 %120 = OpLoad %105 
                                       f32_3 %121 = OpFAdd %119 %120 
                                       f32_4 %122 = OpLoad %98 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %98 %123 
                              Uniform f32_4* %124 = OpAccessChain %43 %108 %64 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_4 %127 = OpLoad %98 
                                       f32_3 %128 = OpVectorShuffle %127 %127 2 2 2 
                                       f32_3 %129 = OpFMul %126 %128 
                                       f32_4 %130 = OpLoad %98 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 3 
                                       f32_3 %132 = OpFAdd %129 %131 
                                       f32_4 %133 = OpLoad %98 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 2 6 
                                                      OpStore %98 %134 
                                       f32_4 %135 = OpLoad %98 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 3 
                              Uniform f32_4* %137 = OpAccessChain %43 %108 %108 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFAdd %136 %139 
                                       f32_4 %141 = OpLoad %98 
                                       f32_4 %142 = OpVectorShuffle %141 %140 4 5 2 6 
                                                      OpStore %98 %142 
                                       f32_4 %143 = OpLoad %98 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 3 
                              Uniform f32_3* %146 = OpAccessChain %43 %113 
                                       f32_3 %147 = OpLoad %146 
                                       f32_3 %148 = OpFNegate %147 
                                       f32_3 %149 = OpFAdd %144 %148 
                                                      OpStore %105 %149 
                                       f32_3 %150 = OpLoad %105 
                                       f32_3 %151 = OpLoad %105 
                                         f32 %152 = OpDot %150 %151 
                                Private f32* %153 = OpAccessChain %82 %32 
                                                      OpStore %153 %152 
                                Private f32* %154 = OpAccessChain %82 %32 
                                         f32 %155 = OpLoad %154 
                                         f32 %156 = OpExtInst %1 32 %155 
                                Private f32* %157 = OpAccessChain %82 %32 
                                                      OpStore %157 %156 
                                       f32_3 %158 = OpLoad %105 
                                       f32_3 %159 = OpFNegate %158 
                                       f32_3 %160 = OpLoad %82 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                              Uniform f32_4* %164 = OpAccessChain %43 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFNegate %166 
                                       f32_3 %168 = OpFAdd %162 %167 
                                                      OpStore %105 %168 
                                       f32_3 %169 = OpLoad %105 
                                       f32_3 %170 = OpLoad %105 
                                         f32 %171 = OpDot %169 %170 
                                Private f32* %172 = OpAccessChain %82 %32 
                                                      OpStore %172 %171 
                                Private f32* %173 = OpAccessChain %82 %32 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpExtInst %1 32 %174 
                                Private f32* %176 = OpAccessChain %82 %32 
                                                      OpStore %176 %175 
                                       f32_3 %177 = OpLoad %82 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 0 0 
                                       f32_3 %179 = OpLoad %105 
                                       f32_3 %180 = OpFMul %178 %179 
                                                      OpStore %105 %180 
                                       f32_4 %181 = OpLoad %56 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_3 %188 = OpFAdd %185 %187 
                                       f32_4 %189 = OpLoad %56 
                                       f32_4 %190 = OpVectorShuffle %189 %188 4 5 6 3 
                                                      OpStore %56 %190 
                                Private f32* %192 = OpAccessChain %56 %191 
                                         f32 %193 = OpLoad %192 
                                         f32 %195 = OpFMul %193 %194 
                                Private f32* %196 = OpAccessChain %82 %32 
                                                      OpStore %196 %195 
                                       f32_4 %197 = OpLoad %56 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_4 %199 = OpLoad %56 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %198 %200 
                                Private f32* %202 = OpAccessChain %18 %32 
                                                      OpStore %202 %201 
                                Private f32* %203 = OpAccessChain %18 %32 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpExtInst %1 32 %204 
                                Private f32* %206 = OpAccessChain %18 %32 
                                                      OpStore %206 %205 
                                       f32_2 %207 = OpLoad %18 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 0 0 
                                       f32_4 %209 = OpLoad %56 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %56 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %56 %213 
                                       f32_3 %214 = OpLoad %105 
                                       f32_4 %215 = OpLoad %56 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                         f32 %217 = OpDot %214 %216 
                                Private f32* %218 = OpAccessChain %18 %32 
                                                      OpStore %218 %217 
                              Uniform f32_4* %219 = OpAccessChain %43 %163 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %222 = OpFNegate %221 
                                       f32_4 %223 = OpLoad %56 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                Private f32* %226 = OpAccessChain %56 %32 
                                                      OpStore %226 %225 
                                Private f32* %227 = OpAccessChain %56 %32 
                                         f32 %228 = OpLoad %227 
                                         f32 %230 = OpExtInst %1 40 %228 %229 
                                Private f32* %231 = OpAccessChain %56 %32 
                                                      OpStore %231 %230 
                                Private f32* %232 = OpAccessChain %18 %32 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpExtInst %1 40 %233 %229 
                                Private f32* %235 = OpAccessChain %18 %32 
                                                      OpStore %235 %234 
                                Private f32* %236 = OpAccessChain %18 %32 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 30 %237 
                                Private f32* %239 = OpAccessChain %18 %32 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %18 %32 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %82 %32 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %241 %243 
                                Private f32* %245 = OpAccessChain %82 %32 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %82 %32 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 29 %247 
                                Private f32* %249 = OpAccessChain %82 %32 
                                                      OpStore %249 %248 
                                       f32_4 %251 = OpLoad %98 
                                       f32_2 %252 = OpVectorShuffle %251 %251 1 1 
                              Uniform f32_4* %254 = OpAccessChain %43 %253 %83 
                                       f32_4 %255 = OpLoad %254 
                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
                                       f32_2 %257 = OpFMul %252 %256 
                                                      OpStore %250 %257 
                              Uniform f32_4* %258 = OpAccessChain %43 %253 %113 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpLoad %98 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 0 
                                       f32_2 %263 = OpFMul %260 %262 
                                       f32_2 %264 = OpLoad %250 
                                       f32_2 %265 = OpFAdd %263 %264 
                                                      OpStore %250 %265 
                              Uniform f32_4* %266 = OpAccessChain %43 %253 %64 
                                       f32_4 %267 = OpLoad %266 
                                       f32_2 %268 = OpVectorShuffle %267 %267 0 1 
                                       f32_4 %269 = OpLoad %98 
                                       f32_2 %270 = OpVectorShuffle %269 %269 3 3 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_2 %272 = OpLoad %250 
                                       f32_2 %273 = OpFAdd %271 %272 
                                                      OpStore %250 %273 
                                       f32_4 %274 = OpLoad %98 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 3 
                              Uniform f32_4* %277 = OpAccessChain %43 %276 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFNegate %279 
                                       f32_3 %281 = OpFAdd %275 %280 
                                       f32_4 %282 = OpLoad %98 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 2 6 
                                                      OpStore %98 %283 
                                       f32_4 %284 = OpLoad %98 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 3 
                                       f32_4 %286 = OpLoad %98 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 3 
                                         f32 %288 = OpDot %285 %287 
                                Private f32* %289 = OpAccessChain %18 %32 
                                                      OpStore %289 %288 
                                Private f32* %290 = OpAccessChain %18 %32 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpExtInst %1 31 %291 
                                Private f32* %293 = OpAccessChain %18 %32 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %82 %84 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFNegate %295 
                                Private f32* %297 = OpAccessChain %9 %32 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                Private f32* %300 = OpAccessChain %18 %32 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFAdd %299 %301 
                                Private f32* %303 = OpAccessChain %9 %32 
                                                      OpStore %303 %302 
                                Uniform f32* %304 = OpAccessChain %43 %276 %191 
                                         f32 %305 = OpLoad %304 
                                Private f32* %306 = OpAccessChain %9 %32 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %98 %84 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFAdd %308 %310 
                                Private f32* %312 = OpAccessChain %9 %32 
                                                      OpStore %312 %311 
                                Private f32* %313 = OpAccessChain %9 %32 
                                         f32 %314 = OpLoad %313 
                                Uniform f32* %316 = OpAccessChain %43 %315 %84 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %314 %317 
                                Uniform f32* %319 = OpAccessChain %43 %315 %191 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFAdd %318 %320 
                                Private f32* %322 = OpAccessChain %9 %32 
                                                      OpStore %322 %321 
                                Private f32* %323 = OpAccessChain %9 %32 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFNegate %324 
                                         f32 %326 = OpFAdd %325 %76 
                                Private f32* %327 = OpAccessChain %9 %32 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %9 %32 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 43 %329 %229 %76 
                                Private f32* %331 = OpAccessChain %9 %32 
                                                      OpStore %331 %330 
                                       f32_2 %332 = OpLoad %250 
                              Uniform f32_4* %333 = OpAccessChain %43 %253 %108 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_2 %336 = OpFAdd %332 %335 
                                                      OpStore %18 %336 
                         read_only Texture2D %338 = OpLoad %337 
                                     sampler %340 = OpLoad %339 
                  read_only Texture2DSampled %341 = OpSampledImage %338 %340 
                                       f32_2 %342 = OpLoad %18 
                                       f32_4 %344 = OpImageSampleImplicitLod %341 %342 Bias %10 
                                         f32 %345 = OpCompositeExtract %344 3 
                                Private f32* %346 = OpAccessChain %18 %32 
                                                      OpStore %346 %345 
                                Private f32* %348 = OpAccessChain %18 %32 
                                         f32 %349 = OpLoad %348 
                                                      OpStore %347 %349 
                                         f32 %350 = OpLoad %347 
                                         f32 %351 = OpExtInst %1 43 %350 %229 %76 
                                                      OpStore %347 %351 
                                Private f32* %352 = OpAccessChain %18 %32 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %56 %32 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                Private f32* %357 = OpAccessChain %18 %32 
                                                      OpStore %357 %356 
                                       f32_2 %358 = OpLoad %18 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                              Uniform f32_4* %361 = OpAccessChain %43 %360 
                                       f32_4 %362 = OpLoad %361 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFMul %359 %363 
                                       f32_4 %365 = OpLoad %56 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %56 %366 
                                         f32 %367 = OpLoad %347 
                                Private f32* %368 = OpAccessChain %82 %32 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %367 %369 
                                Private f32* %371 = OpAccessChain %82 %32 
                                                      OpStore %371 %370 
                              Uniform f32_4* %372 = OpAccessChain %43 %360 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                         f32 %379 = OpDot %374 %378 
                                Private f32* %380 = OpAccessChain %18 %32 
                                                      OpStore %380 %379 
                                Private f32* %381 = OpAccessChain %18 %32 
                                         f32 %382 = OpLoad %381 
                                Private f32* %383 = OpAccessChain %82 %32 
                                         f32 %384 = OpLoad %383 
                                         f32 %385 = OpFMul %382 %384 
                                Private f32* %386 = OpAccessChain %56 %191 
                                                      OpStore %386 %385 
                                       f32_2 %389 = OpLoad %9 
                                       f32_4 %390 = OpVectorShuffle %389 %389 0 0 0 0 
                                       f32_4 %391 = OpLoad %56 
                                       f32_4 %392 = OpFMul %390 %391 
                                                      OpStore %388 %392 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(5) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat5;
vec2 u_xlat10;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0 = (-_LightShadowData.x) + 1.0;
    u_xlat5.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat2 = texture(_CameraNormalsTexture, u_xlat5.xy);
    u_xlat5.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = u_xlat10.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat0 = u_xlat10.x * u_xlat0 + _LightShadowData.x;
    u_xlat10.x = (-u_xlat0) + 1.0;
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat5.x = (-u_xlat1.z) * u_xlat5.x + u_xlat15;
    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat1.w;
    u_xlat15 = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat5.x = u_xlat5.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
    u_xlat0 = u_xlat15 * u_xlat10.x + u_xlat0;
    u_xlat1.xyz = u_xlat3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat10.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb1 = u_xlat1.z<0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat4 = texture(_LightTexture0, u_xlat10.xy, -8.0);
    u_xlat10.x = u_xlat1.x * u_xlat4.w;
    u_xlat1.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = u_xlat15 * _LightPos.w;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat10.x = u_xlat10.x * u_xlat4.x;
    u_xlat0 = u_xlat0 * u_xlat10.x;
    u_xlat10.x = u_xlat0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat2.w * 128.0;
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat0 = u_xlat0 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat0) * _LightColor.xyz;
    u_xlat0 = max(u_xlat16, 0.0);
    u_xlat0 = log2(u_xlat0);
    u_xlat0 = u_xlat0 * u_xlat15;
    u_xlat0 = exp2(u_xlat0);
    u_xlat0 = u_xlat10.x * u_xlat0;
    u_xlat10.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat10.x * u_xlat0;
    SV_Target0 = u_xlat5.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 517
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %33 %93 %511 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD0 Location 33 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %66 DescriptorSet 66 
                                                      OpDecorate %66 Binding 66 
                                                      OpDecorate %68 DescriptorSet 68 
                                                      OpDecorate %68 Binding 68 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %187 DescriptorSet 187 
                                                      OpDecorate %187 Binding 187 
                                                      OpDecorate %331 DescriptorSet 331 
                                                      OpDecorate %331 Binding 331 
                                                      OpDecorate %333 DescriptorSet 333 
                                                      OpDecorate %333 Binding 333 
                                                      OpDecorate %381 DescriptorSet 381 
                                                      OpDecorate %381 Binding 381 
                                                      OpDecorate %383 DescriptorSet 383 
                                                      OpDecorate %383 Binding 383 
                                                      OpDecorate %511 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypePointer Private %6 
                                  Private f32* %8 = OpVariable Private 
                                               %9 = OpTypeVector %6 3 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %9 %10 %10 %13 %15 %10 %10 %10 %10 %10 %16 %10 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 5 
                                          u32 %22 = OpConstant 0 
                                              %23 = OpTypePointer Uniform %6 
                                          f32 %27 = OpConstant 3.674022E-40 
                                              %29 = OpTypeVector %6 2 
                                              %30 = OpTypePointer Private %29 
                               Private f32_2* %31 = OpVariable Private 
                                              %32 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %39 = OpVariable Private 
                                              %40 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %41 = OpTypePointer UniformConstant %40 
         UniformConstant read_only Texture2D* %42 = OpVariable UniformConstant 
                                              %44 = OpTypeSampler 
                                              %45 = OpTypePointer UniformConstant %44 
                     UniformConstant sampler* %46 = OpVariable UniformConstant 
                                              %48 = OpTypeSampledImage %40 
                                          i32 %54 = OpConstant 11 
                                              %55 = OpTypePointer Uniform %10 
                                              %64 = OpTypePointer Private %10 
                               Private f32_4* %65 = OpVariable Private 
         UniformConstant read_only Texture2D* %66 = OpVariable UniformConstant 
                     UniformConstant sampler* %68 = OpVariable UniformConstant 
                                          i32 %73 = OpConstant 2 
                                          u32 %78 = OpConstant 1 
                               Private f32_2* %87 = OpVariable Private 
                                          i32 %88 = OpConstant 1 
                                          u32 %89 = OpConstant 2 
                                              %92 = OpTypePointer Input %9 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %94 = OpTypePointer Input %6 
                               Private f32_4* %99 = OpVariable Private 
                                             %113 = OpTypePointer Private %9 
                              Private f32_3* %114 = OpVariable Private 
                                         i32 %117 = OpConstant 3 
                                         i32 %122 = OpConstant 0 
                              Private f32_4* %144 = OpVariable Private 
                                         i32 %147 = OpConstant 4 
                                             %176 = OpTypePointer Function %9 
        UniformConstant read_only Texture2D* %185 = OpVariable UniformConstant 
                    UniformConstant sampler* %187 = OpVariable UniformConstant 
                                             %189 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %190 = OpTypeSampledImage %189 
                                         f32 %193 = OpConstant 3.674022E-40 
                                         i32 %209 = OpConstant 6 
                                         u32 %233 = OpConstant 3 
                                         i32 %255 = OpConstant 9 
                                         i32 %280 = OpConstant 10 
                                             %322 = OpTypeBool 
                                             %323 = OpTypePointer Private %322 
                               Private bool* %324 = OpVariable Private 
        UniformConstant read_only Texture2D* %331 = OpVariable UniformConstant 
                    UniformConstant sampler* %333 = OpVariable UniformConstant 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         i32 %349 = OpConstant 7 
                                             %357 = OpTypePointer Uniform %9 
                                Private f32* %367 = OpVariable Private 
        UniformConstant read_only Texture2D* %381 = OpVariable UniformConstant 
                    UniformConstant sampler* %383 = OpVariable UniformConstant 
                                         f32 %429 = OpConstant 3.674022E-40 
                                       f32_3 %430 = OpConstantComposite %429 %429 %429 
                                         f32 %432 = OpConstant 3.674022E-40 
                                       f32_3 %433 = OpConstantComposite %432 %432 %432 
                                         f32 %439 = OpConstant 3.674022E-40 
                                Private f32* %441 = OpVariable Private 
                                         i32 %476 = OpConstant 8 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %500 = OpConstant 3.674022E-40 
                                         f32 %501 = OpConstant 3.674022E-40 
                                       f32_3 %502 = OpConstantComposite %499 %500 %501 
                                             %510 = OpTypePointer Output %10 
                               Output f32_4* %511 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %177 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                          f32 %26 = OpFNegate %25 
                                          f32 %28 = OpFAdd %26 %27 
                                                      OpStore %8 %28 
                                        f32_4 %34 = OpLoad vs_TEXCOORD0 
                                        f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                                        f32_4 %36 = OpLoad vs_TEXCOORD0 
                                        f32_2 %37 = OpVectorShuffle %36 %36 3 3 
                                        f32_2 %38 = OpFDiv %35 %37 
                                                      OpStore %31 %38 
                          read_only Texture2D %43 = OpLoad %42 
                                      sampler %47 = OpLoad %46 
                   read_only Texture2DSampled %49 = OpSampledImage %43 %47 
                                        f32_2 %50 = OpLoad %31 
                                        f32_4 %51 = OpImageSampleImplicitLod %49 %50 
                                          f32 %52 = OpCompositeExtract %51 0 
                                                      OpStore %39 %52 
                                        f32_2 %53 = OpLoad %31 
                               Uniform f32_4* %56 = OpAccessChain %19 %54 
                                        f32_4 %57 = OpLoad %56 
                                        f32_2 %58 = OpVectorShuffle %57 %57 0 1 
                                        f32_2 %59 = OpFMul %53 %58 
                               Uniform f32_4* %60 = OpAccessChain %19 %54 
                                        f32_4 %61 = OpLoad %60 
                                        f32_2 %62 = OpVectorShuffle %61 %61 2 3 
                                        f32_2 %63 = OpFAdd %59 %62 
                                                      OpStore %31 %63 
                          read_only Texture2D %67 = OpLoad %66 
                                      sampler %69 = OpLoad %68 
                   read_only Texture2DSampled %70 = OpSampledImage %67 %69 
                                        f32_2 %71 = OpLoad %31 
                                        f32_4 %72 = OpImageSampleImplicitLod %70 %71 
                                                      OpStore %65 %72 
                                 Uniform f32* %74 = OpAccessChain %19 %73 %22 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpLoad %39 
                                          f32 %77 = OpFMul %75 %76 
                                 Uniform f32* %79 = OpAccessChain %19 %73 %78 
                                          f32 %80 = OpLoad %79 
                                          f32 %81 = OpFAdd %77 %80 
                                 Private f32* %82 = OpAccessChain %31 %22 
                                                      OpStore %82 %81 
                                 Private f32* %83 = OpAccessChain %31 %22 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFDiv %27 %84 
                                 Private f32* %86 = OpAccessChain %31 %22 
                                                      OpStore %86 %85 
                                 Uniform f32* %90 = OpAccessChain %19 %88 %89 
                                          f32 %91 = OpLoad %90 
                                   Input f32* %95 = OpAccessChain vs_TEXCOORD1 %89 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFDiv %91 %96 
                                 Private f32* %98 = OpAccessChain %87 %22 
                                                      OpStore %98 %97 
                                       f32_2 %100 = OpLoad %87 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpLoad vs_TEXCOORD1 
                                       f32_3 %103 = OpFMul %101 %102 
                                       f32_4 %104 = OpLoad %99 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %99 %105 
                                       f32_2 %106 = OpLoad %31 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 0 0 
                                       f32_4 %108 = OpLoad %99 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %99 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 6 
                                                      OpStore %99 %112 
                                       f32_4 %115 = OpLoad %99 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %118 = OpAccessChain %19 %117 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %116 %120 
                                                      OpStore %114 %121 
                              Uniform f32_4* %123 = OpAccessChain %19 %117 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %99 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_3 %129 = OpLoad %114 
                                       f32_3 %130 = OpFAdd %128 %129 
                                                      OpStore %114 %130 
                              Uniform f32_4* %131 = OpAccessChain %19 %117 %73 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %99 
                                       f32_3 %135 = OpVectorShuffle %134 %134 3 3 3 
                                       f32_3 %136 = OpFMul %133 %135 
                                       f32_3 %137 = OpLoad %114 
                                       f32_3 %138 = OpFAdd %136 %137 
                                                      OpStore %114 %138 
                                       f32_3 %139 = OpLoad %114 
                              Uniform f32_4* %140 = OpAccessChain %19 %117 %117 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFAdd %139 %142 
                                                      OpStore %114 %143 
                                       f32_3 %145 = OpLoad %114 
                                       f32_4 %146 = OpVectorShuffle %145 %145 1 1 1 1 
                              Uniform f32_4* %148 = OpAccessChain %19 %147 %88 
                                       f32_4 %149 = OpLoad %148 
                                       f32_4 %150 = OpFMul %146 %149 
                                                      OpStore %144 %150 
                              Uniform f32_4* %151 = OpAccessChain %19 %147 %122 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpLoad %114 
                                       f32_4 %154 = OpVectorShuffle %153 %153 0 0 0 0 
                                       f32_4 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %144 
                                       f32_4 %157 = OpFAdd %155 %156 
                                                      OpStore %144 %157 
                              Uniform f32_4* %158 = OpAccessChain %19 %147 %73 
                                       f32_4 %159 = OpLoad %158 
                                       f32_3 %160 = OpLoad %114 
                                       f32_4 %161 = OpVectorShuffle %160 %160 2 2 2 2 
                                       f32_4 %162 = OpFMul %159 %161 
                                       f32_4 %163 = OpLoad %144 
                                       f32_4 %164 = OpFAdd %162 %163 
                                                      OpStore %144 %164 
                                       f32_4 %165 = OpLoad %144 
                              Uniform f32_4* %166 = OpAccessChain %19 %147 %117 
                                       f32_4 %167 = OpLoad %166 
                                       f32_4 %168 = OpFAdd %165 %167 
                                                      OpStore %144 %168 
                                       f32_4 %169 = OpLoad %144 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %144 
                                       f32_3 %172 = OpVectorShuffle %171 %171 3 3 3 
                                       f32_3 %173 = OpFDiv %170 %172 
                                       f32_4 %174 = OpLoad %144 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %144 %175 
                                       f32_4 %178 = OpLoad %144 
                                       f32_2 %179 = OpVectorShuffle %178 %178 0 1 
                                Private f32* %180 = OpAccessChain %144 %89 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpCompositeExtract %179 0 
                                         f32 %183 = OpCompositeExtract %179 1 
                                       f32_3 %184 = OpCompositeConstruct %182 %183 %181 
                                                      OpStore %177 %184 
                         read_only Texture2D %186 = OpLoad %185 
                                     sampler %188 = OpLoad %187 
                  read_only Texture2DSampled %191 = OpSampledImage %186 %188 
                                       f32_3 %192 = OpLoad %177 
                                         f32 %194 = OpCompositeExtract %192 2 
                                         f32 %195 = OpImageSampleDrefExplicitLod %191 %192 %194 Lod %6 
                                Private f32* %196 = OpAccessChain %87 %22 
                                                      OpStore %196 %195 
                                Private f32* %197 = OpAccessChain %87 %22 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpLoad %8 
                                         f32 %200 = OpFMul %198 %199 
                                Uniform f32* %201 = OpAccessChain %19 %21 %22 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFAdd %200 %202 
                                                      OpStore %8 %203 
                                         f32 %204 = OpLoad %8 
                                         f32 %205 = OpFNegate %204 
                                         f32 %206 = OpFAdd %205 %27 
                                Private f32* %207 = OpAccessChain %87 %22 
                                                      OpStore %207 %206 
                                       f32_3 %208 = OpLoad %114 
                              Uniform f32_4* %210 = OpAccessChain %19 %209 
                                       f32_4 %211 = OpLoad %210 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFNegate %212 
                                       f32_3 %214 = OpFAdd %208 %213 
                                       f32_4 %215 = OpLoad %144 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 6 3 
                                                      OpStore %144 %216 
                                       f32_4 %217 = OpLoad %144 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %144 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %39 %221 
                                         f32 %222 = OpLoad %39 
                                         f32 %223 = OpExtInst %1 31 %222 
                                                      OpStore %39 %223 
                                Private f32* %224 = OpAccessChain %99 %89 
                                         f32 %225 = OpLoad %224 
                                         f32 %226 = OpFNegate %225 
                                Private f32* %227 = OpAccessChain %31 %22 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                         f32 %230 = OpLoad %39 
                                         f32 %231 = OpFAdd %229 %230 
                                Private f32* %232 = OpAccessChain %31 %22 
                                                      OpStore %232 %231 
                                Uniform f32* %234 = OpAccessChain %19 %209 %233 
                                         f32 %235 = OpLoad %234 
                                Private f32* %236 = OpAccessChain %31 %22 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFMul %235 %237 
                                Private f32* %239 = OpAccessChain %99 %233 
                                         f32 %240 = OpLoad %239 
                                         f32 %241 = OpFAdd %238 %240 
                                Private f32* %242 = OpAccessChain %31 %22 
                                                      OpStore %242 %241 
                                Private f32* %243 = OpAccessChain %31 %22 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %245 = OpAccessChain %19 %21 %89 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFMul %244 %246 
                                Uniform f32* %248 = OpAccessChain %19 %21 %233 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFAdd %247 %249 
                                                      OpStore %39 %250 
                                         f32 %251 = OpLoad %39 
                                         f32 %252 = OpExtInst %1 43 %251 %193 %27 
                                                      OpStore %39 %252 
                                Private f32* %253 = OpAccessChain %31 %22 
                                         f32 %254 = OpLoad %253 
                                Uniform f32* %256 = OpAccessChain %19 %255 %89 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %254 %257 
                                Uniform f32* %259 = OpAccessChain %19 %255 %233 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpFAdd %258 %260 
                                Private f32* %262 = OpAccessChain %31 %22 
                                                      OpStore %262 %261 
                                Private f32* %263 = OpAccessChain %31 %22 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                         f32 %266 = OpFAdd %265 %27 
                                Private f32* %267 = OpAccessChain %31 %22 
                                                      OpStore %267 %266 
                                Private f32* %268 = OpAccessChain %31 %22 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 43 %269 %193 %27 
                                Private f32* %271 = OpAccessChain %31 %22 
                                                      OpStore %271 %270 
                                         f32 %272 = OpLoad %39 
                                Private f32* %273 = OpAccessChain %87 %22 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpFMul %272 %274 
                                         f32 %276 = OpLoad %8 
                                         f32 %277 = OpFAdd %275 %276 
                                                      OpStore %8 %277 
                                       f32_3 %278 = OpLoad %114 
                                       f32_3 %279 = OpVectorShuffle %278 %278 1 1 1 
                              Uniform f32_4* %281 = OpAccessChain %19 %280 %88 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 3 
                                       f32_3 %284 = OpFMul %279 %283 
                                       f32_4 %285 = OpLoad %99 
                                       f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                      OpStore %99 %286 
                              Uniform f32_4* %287 = OpAccessChain %19 %280 %122 
                                       f32_4 %288 = OpLoad %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 3 
                                       f32_3 %290 = OpLoad %114 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 0 0 
                                       f32_3 %292 = OpFMul %289 %291 
                                       f32_4 %293 = OpLoad %99 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_3 %295 = OpFAdd %292 %294 
                                       f32_4 %296 = OpLoad %99 
                                       f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                                      OpStore %99 %297 
                              Uniform f32_4* %298 = OpAccessChain %19 %280 %73 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 3 
                                       f32_3 %301 = OpLoad %114 
                                       f32_3 %302 = OpVectorShuffle %301 %301 2 2 2 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_4 %304 = OpLoad %99 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFAdd %303 %305 
                                       f32_4 %307 = OpLoad %99 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %99 %308 
                                       f32_4 %309 = OpLoad %99 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                              Uniform f32_4* %311 = OpAccessChain %19 %280 %117 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 3 
                                       f32_3 %314 = OpFAdd %310 %313 
                                       f32_4 %315 = OpLoad %99 
                                       f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                      OpStore %99 %316 
                                       f32_4 %317 = OpLoad %99 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                                       f32_4 %319 = OpLoad %99 
                                       f32_2 %320 = OpVectorShuffle %319 %319 2 2 
                                       f32_2 %321 = OpFDiv %318 %320 
                                                      OpStore %87 %321 
                                Private f32* %325 = OpAccessChain %99 %89 
                                         f32 %326 = OpLoad %325 
                                        bool %327 = OpFOrdLessThan %326 %193 
                                                      OpStore %324 %327 
                                        bool %328 = OpLoad %324 
                                         f32 %329 = OpSelect %328 %27 %193 
                                Private f32* %330 = OpAccessChain %99 %22 
                                                      OpStore %330 %329 
                         read_only Texture2D %332 = OpLoad %331 
                                     sampler %334 = OpLoad %333 
                  read_only Texture2DSampled %335 = OpSampledImage %332 %334 
                                       f32_2 %336 = OpLoad %87 
                                       f32_4 %338 = OpImageSampleImplicitLod %335 %336 Bias %10 
                                         f32 %339 = OpCompositeExtract %338 3 
                                Private f32* %340 = OpAccessChain %87 %22 
                                                      OpStore %340 %339 
                                Private f32* %341 = OpAccessChain %99 %22 
                                         f32 %342 = OpLoad %341 
                                Private f32* %343 = OpAccessChain %87 %22 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFMul %342 %344 
                                Private f32* %346 = OpAccessChain %87 %22 
                                                      OpStore %346 %345 
                                       f32_3 %347 = OpLoad %114 
                                       f32_3 %348 = OpFNegate %347 
                              Uniform f32_4* %350 = OpAccessChain %19 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFAdd %348 %352 
                                       f32_4 %354 = OpLoad %99 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %99 %355 
                                       f32_3 %356 = OpLoad %114 
                              Uniform f32_3* %358 = OpAccessChain %19 %122 
                                       f32_3 %359 = OpLoad %358 
                                       f32_3 %360 = OpFNegate %359 
                                       f32_3 %361 = OpFAdd %356 %360 
                                                      OpStore %114 %361 
                                       f32_4 %362 = OpLoad %99 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_4 %364 = OpLoad %99 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                         f32 %366 = OpDot %363 %365 
                                                      OpStore %39 %366 
                                         f32 %368 = OpLoad %39 
                                Uniform f32* %369 = OpAccessChain %19 %349 %233 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpFMul %368 %370 
                                                      OpStore %367 %371 
                                         f32 %372 = OpLoad %39 
                                         f32 %373 = OpExtInst %1 32 %372 
                                                      OpStore %39 %373 
                                         f32 %374 = OpLoad %39 
                                       f32_3 %375 = OpCompositeConstruct %374 %374 %374 
                                       f32_4 %376 = OpLoad %99 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %99 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %99 %380 
                         read_only Texture2D %382 = OpLoad %381 
                                     sampler %384 = OpLoad %383 
                  read_only Texture2DSampled %385 = OpSampledImage %382 %384 
                                         f32 %386 = OpLoad %367 
                                       f32_2 %387 = OpCompositeConstruct %386 %386 
                                       f32_4 %388 = OpImageSampleImplicitLod %385 %387 
                                         f32 %389 = OpCompositeExtract %388 0 
                                                      OpStore %39 %389 
                                         f32 %390 = OpLoad %39 
                                Private f32* %391 = OpAccessChain %87 %22 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFMul %390 %392 
                                Private f32* %394 = OpAccessChain %87 %22 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %8 
                                Private f32* %396 = OpAccessChain %87 %22 
                                         f32 %397 = OpLoad %396 
                                         f32 %398 = OpFMul %395 %397 
                                                      OpStore %8 %398 
                                         f32 %399 = OpLoad %8 
                                Private f32* %400 = OpAccessChain %87 %22 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %87 %22 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 43 %402 %193 %27 
                                Private f32* %404 = OpAccessChain %87 %22 
                                                      OpStore %404 %403 
                                       f32_3 %405 = OpLoad %114 
                                       f32_3 %406 = OpLoad %114 
                                         f32 %407 = OpDot %405 %406 
                                                      OpStore %39 %407 
                                         f32 %408 = OpLoad %39 
                                         f32 %409 = OpExtInst %1 32 %408 
                                                      OpStore %39 %409 
                                       f32_3 %410 = OpLoad %114 
                                       f32_3 %411 = OpFNegate %410 
                                         f32 %412 = OpLoad %39 
                                       f32_3 %413 = OpCompositeConstruct %412 %412 %412 
                                       f32_3 %414 = OpFMul %411 %413 
                                       f32_4 %415 = OpLoad %99 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 1 2 
                                       f32_3 %417 = OpFAdd %414 %416 
                                                      OpStore %114 %417 
                                       f32_3 %418 = OpLoad %114 
                                       f32_3 %419 = OpLoad %114 
                                         f32 %420 = OpDot %418 %419 
                                                      OpStore %39 %420 
                                         f32 %421 = OpLoad %39 
                                         f32 %422 = OpExtInst %1 32 %421 
                                                      OpStore %39 %422 
                                         f32 %423 = OpLoad %39 
                                       f32_3 %424 = OpCompositeConstruct %423 %423 %423 
                                       f32_3 %425 = OpLoad %114 
                                       f32_3 %426 = OpFMul %424 %425 
                                                      OpStore %114 %426 
                                       f32_4 %427 = OpLoad %65 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                       f32_3 %431 = OpFMul %428 %430 
                                       f32_3 %434 = OpFAdd %431 %433 
                                       f32_4 %435 = OpLoad %65 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 6 3 
                                                      OpStore %65 %436 
                                Private f32* %437 = OpAccessChain %65 %233 
                                         f32 %438 = OpLoad %437 
                                         f32 %440 = OpFMul %438 %439 
                                                      OpStore %39 %440 
                                       f32_4 %442 = OpLoad %65 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_4 %444 = OpLoad %65 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                         f32 %446 = OpDot %443 %445 
                                                      OpStore %441 %446 
                                         f32 %447 = OpLoad %441 
                                         f32 %448 = OpExtInst %1 32 %447 
                                                      OpStore %441 %448 
                                         f32 %449 = OpLoad %441 
                                       f32_3 %450 = OpCompositeConstruct %449 %449 %449 
                                       f32_4 %451 = OpLoad %65 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                       f32_3 %453 = OpFMul %450 %452 
                                       f32_4 %454 = OpLoad %65 
                                       f32_4 %455 = OpVectorShuffle %454 %453 4 5 6 3 
                                                      OpStore %65 %455 
                                       f32_3 %456 = OpLoad %114 
                                       f32_4 %457 = OpLoad %65 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                         f32 %459 = OpDot %456 %458 
                                                      OpStore %441 %459 
                                       f32_4 %460 = OpLoad %99 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_4 %462 = OpLoad %65 
                                       f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                         f32 %464 = OpDot %461 %463 
                                Private f32* %465 = OpAccessChain %65 %22 
                                                      OpStore %465 %464 
                                Private f32* %466 = OpAccessChain %65 %22 
                                         f32 %467 = OpLoad %466 
                                         f32 %468 = OpExtInst %1 40 %467 %193 
                                Private f32* %469 = OpAccessChain %65 %22 
                                                      OpStore %469 %468 
                                         f32 %470 = OpLoad %8 
                                Private f32* %471 = OpAccessChain %65 %22 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                                      OpStore %8 %473 
                                         f32 %474 = OpLoad %8 
                                       f32_3 %475 = OpCompositeConstruct %474 %474 %474 
                              Uniform f32_4* %477 = OpAccessChain %19 %476 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFMul %475 %479 
                                       f32_4 %481 = OpLoad %99 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %99 %482 
                                         f32 %483 = OpLoad %441 
                                         f32 %484 = OpExtInst %1 40 %483 %193 
                                                      OpStore %8 %484 
                                         f32 %485 = OpLoad %8 
                                         f32 %486 = OpExtInst %1 30 %485 
                                                      OpStore %8 %486 
                                         f32 %487 = OpLoad %8 
                                         f32 %488 = OpLoad %39 
                                         f32 %489 = OpFMul %487 %488 
                                                      OpStore %8 %489 
                                         f32 %490 = OpLoad %8 
                                         f32 %491 = OpExtInst %1 29 %490 
                                                      OpStore %8 %491 
                                Private f32* %492 = OpAccessChain %87 %22 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpLoad %8 
                                         f32 %495 = OpFMul %493 %494 
                                                      OpStore %8 %495 
                              Uniform f32_4* %496 = OpAccessChain %19 %476 
                                       f32_4 %497 = OpLoad %496 
                                       f32_3 %498 = OpVectorShuffle %497 %497 0 1 2 
                                         f32 %503 = OpDot %498 %502 
                                Private f32* %504 = OpAccessChain %87 %22 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %87 %22 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpLoad %8 
                                         f32 %508 = OpFMul %506 %507 
                                Private f32* %509 = OpAccessChain %99 %233 
                                                      OpStore %509 %508 
                                       f32_2 %512 = OpLoad %31 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 0 0 0 
                                       f32_4 %514 = OpLoad %99 
                                       f32_4 %515 = OpFMul %513 %514 
                                                      OpStore %511 %515 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(5) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
float u_xlat18;
float u_xlat19;
float u_xlat20;
bool u_xlatb20;
vec2 u_xlat22;
float u_xlat27;
float u_xlat28;
bool u_xlatb28;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat27 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat9.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat19 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat28 = inversesqrt(u_xlat19);
    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat3.xy = u_xlat3.xy / u_xlat3.zz;
    u_xlat4 = texture(_LightTexture0, u_xlat3.xy, -8.0);
    u_xlatb28 = u_xlat3.z<0.0;
    u_xlat28 = u_xlatb28 ? 1.0 : float(0.0);
    u_xlat28 = u_xlat28 * u_xlat4.w;
    u_xlat19 = u_xlat19 * _LightPos.w;
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat19 = u_xlat28 * u_xlat3.x;
    u_xlat28 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
    u_xlatb20 = u_xlat28<0.99000001;
    if(u_xlatb20){
        u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
        u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
        u_xlat4.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat4.xy = floor(u_xlat4.xy);
        u_xlat3.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat4.xy);
        u_xlat5 = u_xlat3.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat6.xw = u_xlat5.xz * u_xlat5.xz;
        u_xlat22.xy = u_xlat6.xw * vec2(0.5, 0.5) + (-u_xlat3.xy);
        u_xlat5.xz = (-u_xlat3.xy) + vec2(1.0, 1.0);
        u_xlat7.xy = min(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat5.xz = (-u_xlat7.xy) * u_xlat7.xy + u_xlat5.xz;
        u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
        u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat5.yw;
        u_xlat7.x = u_xlat22.x;
        u_xlat7.y = u_xlat5.x;
        u_xlat7.z = u_xlat3.x;
        u_xlat7.w = u_xlat6.x;
        u_xlat7 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6.x = u_xlat22.y;
        u_xlat6.y = u_xlat5.z;
        u_xlat6.z = u_xlat3.y;
        u_xlat5 = u_xlat6 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat6 = u_xlat7.ywyw + u_xlat7.xzxz;
        u_xlat8 = u_xlat5.yyww + u_xlat5.xxzz;
        u_xlat3.xy = u_xlat7.yw / u_xlat6.zw;
        u_xlat3.xy = u_xlat3.xy + vec2(-1.5, 0.5);
        u_xlat22.xy = u_xlat5.yw / u_xlat8.yw;
        u_xlat22.xy = u_xlat22.xy + vec2(-1.5, 0.5);
        u_xlat5.xy = u_xlat3.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat5.zw = u_xlat22.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat6 = u_xlat6 * u_xlat8;
        u_xlat7 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xzyz;
        vec3 txVec0 = vec3(u_xlat7.xy,u_xlat3.z);
        u_xlat20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat7.zw,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat3.x = u_xlat3.x * u_xlat6.y;
        u_xlat20 = u_xlat6.x * u_xlat20 + u_xlat3.x;
        u_xlat4 = u_xlat4.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwyw;
        vec3 txVec2 = vec3(u_xlat4.xy,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat20 = u_xlat6.z * u_xlat3.x + u_xlat20;
        vec3 txVec3 = vec3(u_xlat4.zw,u_xlat3.z);
        u_xlat3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat20 = u_xlat6.w * u_xlat3.x + u_xlat20;
        u_xlat3.x = (-_LightShadowData.x) + 1.0;
        u_xlat20 = u_xlat20 * u_xlat3.x + _LightShadowData.x;
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat3.x = (-u_xlat20) + 1.0;
    u_xlat28 = u_xlat28 * u_xlat3.x + u_xlat20;
    u_xlat19 = u_xlat28 * u_xlat19;
    u_xlat1.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat3 = texture(_CameraNormalsTexture, u_xlat1.xy);
    u_xlat1.xyw = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat20 = inversesqrt(u_xlat20);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat20);
    u_xlat20 = dot(u_xlat9.xyz, u_xlat1.xyw);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlat2.xyw = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat9.xyz = (-u_xlat2.xyw) * u_xlat3.xxx + u_xlat9.xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat9.x = dot(u_xlat9.xyz, u_xlat1.xyw);
    u_xlat9.x = max(u_xlat9.x, 0.0);
    u_xlat18 = u_xlat3.w * 128.0;
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat18 = u_xlat19;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat9.x = u_xlat18 * u_xlat9.x;
    u_xlat18 = u_xlat19 * u_xlat20;
    u_xlat1.xyz = vec3(u_xlat18) * _LightColor.xyz;
    u_xlat18 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat18 * u_xlat9.x;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 801
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %42 %795 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpMemberDecorate %17 11 Offset 17 
                                                      OpMemberDecorate %17 12 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 42 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %261 DescriptorSet 261 
                                                      OpDecorate %261 Binding 261 
                                                      OpDecorate %508 DescriptorSet 508 
                                                      OpDecorate %508 Binding 508 
                                                      OpDecorate %510 DescriptorSet 510 
                                                      OpDecorate %510 Binding 510 
                                                      OpDecorate %638 DescriptorSet 638 
                                                      OpDecorate %638 Binding 638 
                                                      OpDecorate %640 DescriptorSet 640 
                                                      OpDecorate %640 Binding 640 
                                                      OpDecorate %795 Location 795 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %7 %10 %10 %13 %15 %10 %10 %10 %10 %10 %16 %10 %10 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %39 = OpTypePointer Private %10 
                               Private f32_4* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %43 = OpTypeVector %6 2 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypePointer UniformConstant %52 
         UniformConstant read_only Texture2D* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampler 
                                              %57 = OpTypePointer UniformConstant %56 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                              %60 = OpTypeSampledImage %52 
                                          i32 %66 = OpConstant 2 
                                          u32 %71 = OpConstant 1 
                                          f32 %75 = OpConstant 3.674022E-40 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_4* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %10 
                                          i32 %96 = OpConstant 0 
                                         i32 %129 = OpConstant 6 
                                         u32 %156 = OpConstant 3 
                              Private f32_3* %166 = OpVariable Private 
                                         i32 %170 = OpConstant 7 
                                Private f32* %175 = OpVariable Private 
                                Private f32* %179 = OpVariable Private 
                                         i32 %188 = OpConstant 10 
        UniformConstant read_only Texture2D* %232 = OpVariable UniformConstant 
                    UniformConstant sampler* %234 = OpVariable UniformConstant 
                                         f32 %239 = OpConstant 3.674022E-40 
                                             %242 = OpTypeBool 
                                             %243 = OpTypePointer Private %242 
                               Private bool* %244 = OpVariable Private 
                                         f32 %247 = OpConstant 3.674022E-40 
                                Private f32* %249 = OpVariable Private 
        UniformConstant read_only Texture2D* %259 = OpVariable UniformConstant 
                    UniformConstant sampler* %261 = OpVariable UniformConstant 
                                         i32 %273 = OpConstant 5 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         i32 %290 = OpConstant 4 
                              Private f32_4* %319 = OpVariable Private 
                                         i32 %322 = OpConstant 11 
                                         f32 %327 = OpConstant 3.674022E-40 
                                       f32_2 %328 = OpConstantComposite %327 %327 
                              Private f32_4* %349 = OpVariable Private 
                                       f32_4 %352 = OpConstantComposite %327 %75 %327 %75 
                              Private f32_4* %354 = OpVariable Private 
                                             %362 = OpTypePointer Private %43 
                              Private f32_2* %363 = OpVariable Private 
                                       f32_2 %374 = OpConstantComposite %75 %75 
                              Private f32_4* %378 = OpVariable Private 
                                       f32_2 %381 = OpConstantComposite %247 %247 
                                         f32 %425 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                                       f32_4 %427 = OpConstantComposite %425 %425 %425 %426 
                              Private f32_4* %445 = OpVariable Private 
                                         f32 %460 = OpConstant 3.674022E-40 
                                       f32_2 %461 = OpConstantComposite %460 %327 
                                             %499 = OpTypePointer Function %7 
        UniformConstant read_only Texture2D* %508 = OpVariable UniformConstant 
                    UniformConstant sampler* %510 = OpVariable UniformConstant 
                                             %512 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %513 = OpTypeSampledImage %512 
                                         i32 %627 = OpConstant 12 
        UniformConstant read_only Texture2D* %638 = OpVariable UniformConstant 
                    UniformConstant sampler* %640 = OpVariable UniformConstant 
                                         f32 %648 = OpConstant 3.674022E-40 
                                       f32_3 %649 = OpConstantComposite %648 %648 %648 
                                         f32 %651 = OpConstant 3.674022E-40 
                                       f32_3 %652 = OpConstantComposite %651 %651 %651 
                                             %678 = OpTypePointer Uniform %7 
                                Private f32* %724 = OpVariable Private 
                                         f32 %727 = OpConstant 3.674022E-40 
                                         i32 %755 = OpConstant 8 
                                         f32 %765 = OpConstant 3.674022E-40 
                                         f32 %766 = OpConstant 3.674022E-40 
                                         f32 %767 = OpConstant 3.674022E-40 
                                       f32_3 %768 = OpConstantComposite %765 %766 %767 
                                         i32 %777 = OpConstant 9 
                                             %794 = OpTypePointer Output %10 
                               Output f32_4* %795 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %500 = OpVariable Function 
                             Function f32_3* %518 = OpVariable Function 
                             Function f32_3* %555 = OpVariable Function 
                             Function f32_3* %577 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                        f32_4 %49 = OpLoad %40 
                                        f32_4 %50 = OpVectorShuffle %49 %48 4 5 2 3 
                                                      OpStore %40 %50 
                          read_only Texture2D %55 = OpLoad %54 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %61 = OpSampledImage %55 %59 
                                        f32_4 %62 = OpLoad %40 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %61 %63 
                                          f32 %65 = OpCompositeExtract %64 0 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %19 %66 %32 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %19 %66 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                                          f32 %76 = OpLoad %51 
                                          f32 %77 = OpFDiv %75 %76 
                                                      OpStore %51 %77 
                                          f32 %79 = OpLoad %51 
                                        f32_3 %80 = OpCompositeConstruct %79 %79 %79 
                                        f32_3 %81 = OpLoad %9 
                                        f32_3 %82 = OpFMul %80 %81 
                                        f32_4 %83 = OpLoad %78 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %78 %84 
                                        f32_4 %86 = OpLoad %78 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %19 %88 %21 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %85 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %85 %95 
                               Uniform f32_4* %97 = OpAccessChain %19 %88 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %78 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %85 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %78 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %78 %107 
                              Uniform f32_4* %108 = OpAccessChain %19 %88 %66 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %78 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %78 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %78 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %78 %118 
                                       f32_4 %119 = OpLoad %78 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %19 %88 %88 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %78 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %78 %126 
                                       f32_4 %127 = OpLoad %78 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                              Uniform f32_4* %130 = OpAccessChain %19 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %128 %133 
                                       f32_4 %135 = OpLoad %85 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %85 %136 
                                       f32_4 %137 = OpLoad %85 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %85 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                Private f32* %142 = OpAccessChain %9 %32 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %32 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 31 %144 
                                Private f32* %146 = OpAccessChain %9 %32 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %22 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                         f32 %150 = OpLoad %51 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %32 
                                                      OpStore %155 %154 
                                Uniform f32* %157 = OpAccessChain %19 %129 %156 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %32 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %78 %22 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %32 
                                                      OpStore %165 %164 
                                       f32_4 %167 = OpLoad %78 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 3 
                                       f32_3 %169 = OpFNegate %168 
                              Uniform f32_4* %171 = OpAccessChain %19 %170 
                                       f32_4 %172 = OpLoad %171 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %169 %173 
                                                      OpStore %166 %174 
                                       f32_3 %176 = OpLoad %166 
                                       f32_3 %177 = OpLoad %166 
                                         f32 %178 = OpDot %176 %177 
                                                      OpStore %175 %178 
                                         f32 %180 = OpLoad %175 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %179 %181 
                                       f32_3 %182 = OpLoad %166 
                                         f32 %183 = OpLoad %179 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpFMul %182 %184 
                                                      OpStore %166 %185 
                                       f32_4 %186 = OpLoad %78 
                                       f32_3 %187 = OpVectorShuffle %186 %186 1 1 1 
                              Uniform f32_4* %189 = OpAccessChain %19 %188 %21 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 3 
                                       f32_3 %192 = OpFMul %187 %191 
                                       f32_4 %193 = OpLoad %85 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %85 %194 
                              Uniform f32_4* %195 = OpAccessChain %19 %188 %96 
                                       f32_4 %196 = OpLoad %195 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 3 
                                       f32_4 %198 = OpLoad %78 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 0 0 
                                       f32_3 %200 = OpFMul %197 %199 
                                       f32_4 %201 = OpLoad %85 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFAdd %200 %202 
                                       f32_4 %204 = OpLoad %85 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                                      OpStore %85 %205 
                              Uniform f32_4* %206 = OpAccessChain %19 %188 %66 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 3 
                                       f32_4 %209 = OpLoad %78 
                                       f32_3 %210 = OpVectorShuffle %209 %209 3 3 3 
                                       f32_3 %211 = OpFMul %208 %210 
                                       f32_4 %212 = OpLoad %85 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFAdd %211 %213 
                                       f32_4 %215 = OpLoad %85 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 6 3 
                                                      OpStore %85 %216 
                                       f32_4 %217 = OpLoad %85 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                              Uniform f32_4* %219 = OpAccessChain %19 %188 %88 
                                       f32_4 %220 = OpLoad %219 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 3 
                                       f32_3 %222 = OpFAdd %218 %221 
                                       f32_4 %223 = OpLoad %85 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %85 %224 
                                       f32_4 %225 = OpLoad %85 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_4 %227 = OpLoad %85 
                                       f32_2 %228 = OpVectorShuffle %227 %227 2 2 
                                       f32_2 %229 = OpFDiv %226 %228 
                                       f32_4 %230 = OpLoad %85 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 2 3 
                                                      OpStore %85 %231 
                         read_only Texture2D %233 = OpLoad %232 
                                     sampler %235 = OpLoad %234 
                  read_only Texture2DSampled %236 = OpSampledImage %233 %235 
                                       f32_4 %237 = OpLoad %85 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %240 = OpImageSampleImplicitLod %236 %238 Bias %10 
                                         f32 %241 = OpCompositeExtract %240 3 
                                                      OpStore %179 %241 
                                Private f32* %245 = OpAccessChain %85 %22 
                                         f32 %246 = OpLoad %245 
                                        bool %248 = OpFOrdLessThan %246 %247 
                                                      OpStore %244 %248 
                                        bool %250 = OpLoad %244 
                                         f32 %251 = OpSelect %250 %75 %247 
                                                      OpStore %249 %251 
                                         f32 %252 = OpLoad %179 
                                         f32 %253 = OpLoad %249 
                                         f32 %254 = OpFMul %252 %253 
                                                      OpStore %179 %254 
                                         f32 %255 = OpLoad %175 
                                Uniform f32* %256 = OpAccessChain %19 %170 %156 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpFMul %255 %257 
                                                      OpStore %175 %258 
                         read_only Texture2D %260 = OpLoad %259 
                                     sampler %262 = OpLoad %261 
                  read_only Texture2DSampled %263 = OpSampledImage %260 %262 
                                         f32 %264 = OpLoad %175 
                                       f32_2 %265 = OpCompositeConstruct %264 %264 
                                       f32_4 %266 = OpImageSampleImplicitLod %263 %265 
                                         f32 %267 = OpCompositeExtract %266 0 
                                                      OpStore %175 %267 
                                         f32 %268 = OpLoad %175 
                                         f32 %269 = OpLoad %179 
                                         f32 %270 = OpFMul %268 %269 
                                                      OpStore %175 %270 
                                Private f32* %271 = OpAccessChain %9 %32 
                                         f32 %272 = OpLoad %271 
                                Uniform f32* %274 = OpAccessChain %19 %273 %22 
                                         f32 %275 = OpLoad %274 
                                         f32 %276 = OpFMul %272 %275 
                                Uniform f32* %277 = OpAccessChain %19 %273 %156 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFAdd %276 %278 
                                                      OpStore %179 %279 
                                         f32 %280 = OpLoad %179 
                                         f32 %281 = OpExtInst %1 43 %280 %247 %75 
                                                      OpStore %179 %281 
                                         f32 %282 = OpLoad %179 
                                        bool %284 = OpFOrdLessThan %282 %283 
                                                      OpStore %244 %284 
                                        bool %285 = OpLoad %244 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %611 
                                             %286 = OpLabel 
                                       f32_4 %288 = OpLoad %78 
                                       f32_4 %289 = OpVectorShuffle %288 %288 1 1 1 1 
                              Uniform f32_4* %291 = OpAccessChain %19 %290 %21 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpFMul %289 %292 
                                                      OpStore %85 %293 
                              Uniform f32_4* %294 = OpAccessChain %19 %290 %96 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %78 
                                       f32_4 %297 = OpVectorShuffle %296 %296 0 0 0 0 
                                       f32_4 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %85 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %85 %300 
                              Uniform f32_4* %301 = OpAccessChain %19 %290 %66 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %78 
                                       f32_4 %304 = OpVectorShuffle %303 %303 3 3 3 3 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %85 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %85 %307 
                                       f32_4 %308 = OpLoad %85 
                              Uniform f32_4* %309 = OpAccessChain %19 %290 %88 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpFAdd %308 %310 
                                                      OpStore %85 %311 
                                       f32_4 %312 = OpLoad %85 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_4 %314 = OpLoad %85 
                                       f32_3 %315 = OpVectorShuffle %314 %314 3 3 3 
                                       f32_3 %316 = OpFDiv %313 %315 
                                       f32_4 %317 = OpLoad %85 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %85 %318 
                                       f32_4 %320 = OpLoad %85 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                              Uniform f32_4* %323 = OpAccessChain %19 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_2 %325 = OpVectorShuffle %324 %324 2 3 
                                       f32_2 %326 = OpFMul %321 %325 
                                       f32_2 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %319 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                                      OpStore %319 %331 
                                       f32_4 %332 = OpLoad %319 
                                       f32_2 %333 = OpVectorShuffle %332 %332 0 1 
                                       f32_2 %334 = OpExtInst %1 8 %333 
                                       f32_4 %335 = OpLoad %319 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 2 3 
                                                      OpStore %319 %336 
                                       f32_4 %337 = OpLoad %85 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                              Uniform f32_4* %339 = OpAccessChain %19 %322 
                                       f32_4 %340 = OpLoad %339 
                                       f32_2 %341 = OpVectorShuffle %340 %340 2 3 
                                       f32_2 %342 = OpFMul %338 %341 
                                       f32_4 %343 = OpLoad %319 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                                       f32_2 %345 = OpFNegate %344 
                                       f32_2 %346 = OpFAdd %342 %345 
                                       f32_4 %347 = OpLoad %85 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %85 %348 
                                       f32_4 %350 = OpLoad %85 
                                       f32_4 %351 = OpVectorShuffle %350 %350 0 0 1 1 
                                       f32_4 %353 = OpFAdd %351 %352 
                                                      OpStore %349 %353 
                                       f32_4 %355 = OpLoad %349 
                                       f32_2 %356 = OpVectorShuffle %355 %355 0 2 
                                       f32_4 %357 = OpLoad %349 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 2 
                                       f32_2 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %354 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 1 2 5 
                                                      OpStore %354 %361 
                                       f32_4 %364 = OpLoad %354 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 3 
                                       f32_2 %366 = OpFMul %365 %328 
                                       f32_4 %367 = OpLoad %85 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 1 
                                       f32_2 %369 = OpFNegate %368 
                                       f32_2 %370 = OpFAdd %366 %369 
                                                      OpStore %363 %370 
                                       f32_4 %371 = OpLoad %85 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                                       f32_2 %373 = OpFNegate %372 
                                       f32_2 %375 = OpFAdd %373 %374 
                                       f32_4 %376 = OpLoad %349 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 1 5 3 
                                                      OpStore %349 %377 
                                       f32_4 %379 = OpLoad %85 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %382 = OpExtInst %1 37 %380 %381 
                                       f32_4 %383 = OpLoad %378 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 2 3 
                                                      OpStore %378 %384 
                                       f32_4 %385 = OpLoad %378 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 1 
                                       f32_2 %387 = OpFNegate %386 
                                       f32_4 %388 = OpLoad %378 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_2 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %349 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 2 
                                       f32_2 %393 = OpFAdd %390 %392 
                                       f32_4 %394 = OpLoad %349 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 1 5 3 
                                                      OpStore %349 %395 
                                       f32_4 %396 = OpLoad %85 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpExtInst %1 40 %397 %381 
                                       f32_4 %399 = OpLoad %85 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 2 3 
                                                      OpStore %85 %400 
                                       f32_4 %401 = OpLoad %85 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFNegate %402 
                                       f32_4 %404 = OpLoad %85 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_2 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %349 
                                       f32_2 %408 = OpVectorShuffle %407 %407 1 3 
                                       f32_2 %409 = OpFAdd %406 %408 
                                       f32_4 %410 = OpLoad %85 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 2 3 
                                                      OpStore %85 %411 
                                Private f32* %412 = OpAccessChain %363 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %378 %32 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %349 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %378 %71 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %85 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %378 %22 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %354 %32 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %378 %156 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %378 
                                       f32_4 %428 = OpFMul %424 %427 
                                                      OpStore %378 %428 
                                Private f32* %429 = OpAccessChain %363 %71 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %354 %32 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %349 %22 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %354 %71 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %85 %71 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %354 %22 
                                                      OpStore %437 %436 
                                       f32_4 %438 = OpLoad %354 
                                       f32_4 %439 = OpFMul %438 %427 
                                                      OpStore %349 %439 
                                       f32_4 %440 = OpLoad %378 
                                       f32_4 %441 = OpVectorShuffle %440 %440 1 3 1 3 
                                       f32_4 %442 = OpLoad %378 
                                       f32_4 %443 = OpVectorShuffle %442 %442 0 2 0 2 
                                       f32_4 %444 = OpFAdd %441 %443 
                                                      OpStore %354 %444 
                                       f32_4 %446 = OpLoad %349 
                                       f32_4 %447 = OpVectorShuffle %446 %446 1 1 3 3 
                                       f32_4 %448 = OpLoad %349 
                                       f32_4 %449 = OpVectorShuffle %448 %448 0 0 2 2 
                                       f32_4 %450 = OpFAdd %447 %449 
                                                      OpStore %445 %450 
                                       f32_4 %451 = OpLoad %378 
                                       f32_2 %452 = OpVectorShuffle %451 %451 1 3 
                                       f32_4 %453 = OpLoad %354 
                                       f32_2 %454 = OpVectorShuffle %453 %453 2 3 
                                       f32_2 %455 = OpFDiv %452 %454 
                                       f32_4 %456 = OpLoad %85 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore %85 %457 
                                       f32_4 %458 = OpLoad %85 
                                       f32_2 %459 = OpVectorShuffle %458 %458 0 1 
                                       f32_2 %462 = OpFAdd %459 %461 
                                       f32_4 %463 = OpLoad %85 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 2 3 
                                                      OpStore %85 %464 
                                       f32_4 %465 = OpLoad %349 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 3 
                                       f32_4 %467 = OpLoad %445 
                                       f32_2 %468 = OpVectorShuffle %467 %467 1 3 
                                       f32_2 %469 = OpFDiv %466 %468 
                                                      OpStore %363 %469 
                                       f32_2 %470 = OpLoad %363 
                                       f32_2 %471 = OpFAdd %470 %461 
                                                      OpStore %363 %471 
                                       f32_4 %472 = OpLoad %85 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 1 
                              Uniform f32_4* %474 = OpAccessChain %19 %322 
                                       f32_4 %475 = OpLoad %474 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 0 
                                       f32_2 %477 = OpFMul %473 %476 
                                       f32_4 %478 = OpLoad %349 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %349 %479 
                                       f32_2 %480 = OpLoad %363 
                              Uniform f32_4* %481 = OpAccessChain %19 %322 
                                       f32_4 %482 = OpLoad %481 
                                       f32_2 %483 = OpVectorShuffle %482 %482 1 1 
                                       f32_2 %484 = OpFMul %480 %483 
                                       f32_4 %485 = OpLoad %349 
                                       f32_4 %486 = OpVectorShuffle %485 %484 0 1 4 5 
                                                      OpStore %349 %486 
                                       f32_4 %487 = OpLoad %354 
                                       f32_4 %488 = OpLoad %445 
                                       f32_4 %489 = OpFMul %487 %488 
                                                      OpStore %354 %489 
                                       f32_4 %490 = OpLoad %319 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 0 1 
                              Uniform f32_4* %492 = OpAccessChain %19 %322 
                                       f32_4 %493 = OpLoad %492 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 1 0 1 
                                       f32_4 %495 = OpFMul %491 %494 
                                       f32_4 %496 = OpLoad %349 
                                       f32_4 %497 = OpVectorShuffle %496 %496 0 2 1 2 
                                       f32_4 %498 = OpFAdd %495 %497 
                                                      OpStore %378 %498 
                                       f32_4 %501 = OpLoad %378 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                Private f32* %503 = OpAccessChain %85 %22 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpCompositeExtract %502 0 
                                         f32 %506 = OpCompositeExtract %502 1 
                                       f32_3 %507 = OpCompositeConstruct %505 %506 %504 
                                                      OpStore %500 %507 
                         read_only Texture2D %509 = OpLoad %508 
                                     sampler %511 = OpLoad %510 
                  read_only Texture2DSampled %514 = OpSampledImage %509 %511 
                                       f32_3 %515 = OpLoad %500 
                                         f32 %516 = OpCompositeExtract %515 2 
                                         f32 %517 = OpImageSampleDrefExplicitLod %514 %515 %516 Lod %6 
                                                      OpStore %249 %517 
                                       f32_4 %519 = OpLoad %378 
                                       f32_2 %520 = OpVectorShuffle %519 %519 2 3 
                                Private f32* %521 = OpAccessChain %85 %22 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpCompositeExtract %520 0 
                                         f32 %524 = OpCompositeExtract %520 1 
                                       f32_3 %525 = OpCompositeConstruct %523 %524 %522 
                                                      OpStore %518 %525 
                         read_only Texture2D %526 = OpLoad %508 
                                     sampler %527 = OpLoad %510 
                  read_only Texture2DSampled %528 = OpSampledImage %526 %527 
                                       f32_3 %529 = OpLoad %518 
                                         f32 %530 = OpCompositeExtract %529 2 
                                         f32 %531 = OpImageSampleDrefExplicitLod %528 %529 %530 Lod %6 
                                Private f32* %532 = OpAccessChain %85 %32 
                                                      OpStore %532 %531 
                                Private f32* %533 = OpAccessChain %85 %32 
                                         f32 %534 = OpLoad %533 
                                Private f32* %535 = OpAccessChain %354 %71 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFMul %534 %536 
                                Private f32* %538 = OpAccessChain %85 %32 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %354 %32 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpLoad %249 
                                         f32 %542 = OpFMul %540 %541 
                                Private f32* %543 = OpAccessChain %85 %32 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFAdd %542 %544 
                                                      OpStore %249 %545 
                                       f32_4 %546 = OpLoad %319 
                                       f32_4 %547 = OpVectorShuffle %546 %546 0 1 0 1 
                              Uniform f32_4* %548 = OpAccessChain %19 %322 
                                       f32_4 %549 = OpLoad %548 
                                       f32_4 %550 = OpVectorShuffle %549 %549 0 1 0 1 
                                       f32_4 %551 = OpFMul %547 %550 
                                       f32_4 %552 = OpLoad %349 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 3 1 3 
                                       f32_4 %554 = OpFAdd %551 %553 
                                                      OpStore %319 %554 
                                       f32_4 %556 = OpLoad %319 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 1 
                                Private f32* %558 = OpAccessChain %85 %22 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpCompositeExtract %557 0 
                                         f32 %561 = OpCompositeExtract %557 1 
                                       f32_3 %562 = OpCompositeConstruct %560 %561 %559 
                                                      OpStore %555 %562 
                         read_only Texture2D %563 = OpLoad %508 
                                     sampler %564 = OpLoad %510 
                  read_only Texture2DSampled %565 = OpSampledImage %563 %564 
                                       f32_3 %566 = OpLoad %555 
                                         f32 %567 = OpCompositeExtract %566 2 
                                         f32 %568 = OpImageSampleDrefExplicitLod %565 %566 %567 Lod %6 
                                Private f32* %569 = OpAccessChain %85 %32 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %354 %22 
                                         f32 %571 = OpLoad %570 
                                Private f32* %572 = OpAccessChain %85 %32 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFMul %571 %573 
                                         f32 %575 = OpLoad %249 
                                         f32 %576 = OpFAdd %574 %575 
                                                      OpStore %249 %576 
                                       f32_4 %578 = OpLoad %319 
                                       f32_2 %579 = OpVectorShuffle %578 %578 2 3 
                                Private f32* %580 = OpAccessChain %85 %22 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpCompositeExtract %579 0 
                                         f32 %583 = OpCompositeExtract %579 1 
                                       f32_3 %584 = OpCompositeConstruct %582 %583 %581 
                                                      OpStore %577 %584 
                         read_only Texture2D %585 = OpLoad %508 
                                     sampler %586 = OpLoad %510 
                  read_only Texture2DSampled %587 = OpSampledImage %585 %586 
                                       f32_3 %588 = OpLoad %577 
                                         f32 %589 = OpCompositeExtract %588 2 
                                         f32 %590 = OpImageSampleDrefExplicitLod %587 %588 %589 Lod %6 
                                Private f32* %591 = OpAccessChain %85 %32 
                                                      OpStore %591 %590 
                                Private f32* %592 = OpAccessChain %354 %156 
                                         f32 %593 = OpLoad %592 
                                Private f32* %594 = OpAccessChain %85 %32 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFMul %593 %595 
                                         f32 %597 = OpLoad %249 
                                         f32 %598 = OpFAdd %596 %597 
                                                      OpStore %249 %598 
                                Uniform f32* %599 = OpAccessChain %19 %273 %32 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpFNegate %600 
                                         f32 %602 = OpFAdd %601 %75 
                                Private f32* %603 = OpAccessChain %85 %32 
                                                      OpStore %603 %602 
                                         f32 %604 = OpLoad %249 
                                Private f32* %605 = OpAccessChain %85 %32 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFMul %604 %606 
                                Uniform f32* %608 = OpAccessChain %19 %273 %32 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpFAdd %607 %609 
                                                      OpStore %249 %610 
                                                      OpBranch %287 
                                             %611 = OpLabel 
                                                      OpStore %249 %75 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                         f32 %612 = OpLoad %249 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFAdd %613 %75 
                                Private f32* %615 = OpAccessChain %85 %32 
                                                      OpStore %615 %614 
                                         f32 %616 = OpLoad %179 
                                Private f32* %617 = OpAccessChain %85 %32 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                         f32 %620 = OpLoad %249 
                                         f32 %621 = OpFAdd %619 %620 
                                                      OpStore %179 %621 
                                         f32 %622 = OpLoad %179 
                                         f32 %623 = OpLoad %175 
                                         f32 %624 = OpFMul %622 %623 
                                                      OpStore %175 %624 
                                       f32_4 %625 = OpLoad %40 
                                       f32_2 %626 = OpVectorShuffle %625 %625 0 1 
                              Uniform f32_4* %628 = OpAccessChain %19 %627 
                                       f32_4 %629 = OpLoad %628 
                                       f32_2 %630 = OpVectorShuffle %629 %629 0 1 
                                       f32_2 %631 = OpFMul %626 %630 
                              Uniform f32_4* %632 = OpAccessChain %19 %627 
                                       f32_4 %633 = OpLoad %632 
                                       f32_2 %634 = OpVectorShuffle %633 %633 2 3 
                                       f32_2 %635 = OpFAdd %631 %634 
                                       f32_4 %636 = OpLoad %40 
                                       f32_4 %637 = OpVectorShuffle %636 %635 4 5 2 3 
                                                      OpStore %40 %637 
                         read_only Texture2D %639 = OpLoad %638 
                                     sampler %641 = OpLoad %640 
                  read_only Texture2DSampled %642 = OpSampledImage %639 %641 
                                       f32_4 %643 = OpLoad %40 
                                       f32_2 %644 = OpVectorShuffle %643 %643 0 1 
                                       f32_4 %645 = OpImageSampleImplicitLod %642 %644 
                                                      OpStore %85 %645 
                                       f32_4 %646 = OpLoad %85 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                       f32_3 %650 = OpFMul %647 %649 
                                       f32_3 %653 = OpFAdd %650 %652 
                                       f32_4 %654 = OpLoad %40 
                                       f32_4 %655 = OpVectorShuffle %654 %653 4 5 2 6 
                                                      OpStore %40 %655 
                                       f32_4 %656 = OpLoad %40 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 3 
                                       f32_4 %658 = OpLoad %40 
                                       f32_3 %659 = OpVectorShuffle %658 %658 0 1 3 
                                         f32 %660 = OpDot %657 %659 
                                                      OpStore %249 %660 
                                         f32 %661 = OpLoad %249 
                                         f32 %662 = OpExtInst %1 32 %661 
                                                      OpStore %249 %662 
                                       f32_4 %663 = OpLoad %40 
                                       f32_3 %664 = OpVectorShuffle %663 %663 0 1 3 
                                         f32 %665 = OpLoad %249 
                                       f32_3 %666 = OpCompositeConstruct %665 %665 %665 
                                       f32_3 %667 = OpFMul %664 %666 
                                       f32_4 %668 = OpLoad %40 
                                       f32_4 %669 = OpVectorShuffle %668 %667 4 5 2 6 
                                                      OpStore %40 %669 
                                       f32_3 %670 = OpLoad %166 
                                       f32_4 %671 = OpLoad %40 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 1 3 
                                         f32 %673 = OpDot %670 %672 
                                                      OpStore %249 %673 
                                         f32 %674 = OpLoad %249 
                                         f32 %675 = OpExtInst %1 40 %674 %247 
                                                      OpStore %249 %675 
                                       f32_4 %676 = OpLoad %78 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                              Uniform f32_3* %679 = OpAccessChain %19 %96 
                                       f32_3 %680 = OpLoad %679 
                                       f32_3 %681 = OpFNegate %680 
                                       f32_3 %682 = OpFAdd %677 %681 
                                       f32_4 %683 = OpLoad %78 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 2 6 
                                                      OpStore %78 %684 
                                       f32_4 %685 = OpLoad %78 
                                       f32_3 %686 = OpVectorShuffle %685 %685 0 1 3 
                                       f32_4 %687 = OpLoad %78 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 3 
                                         f32 %689 = OpDot %686 %688 
                                Private f32* %690 = OpAccessChain %85 %32 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %85 %32 
                                         f32 %692 = OpLoad %691 
                                         f32 %693 = OpExtInst %1 32 %692 
                                Private f32* %694 = OpAccessChain %85 %32 
                                                      OpStore %694 %693 
                                       f32_4 %695 = OpLoad %78 
                                       f32_3 %696 = OpVectorShuffle %695 %695 0 1 3 
                                       f32_3 %697 = OpFNegate %696 
                                       f32_4 %698 = OpLoad %85 
                                       f32_3 %699 = OpVectorShuffle %698 %698 0 0 0 
                                       f32_3 %700 = OpFMul %697 %699 
                                       f32_3 %701 = OpLoad %166 
                                       f32_3 %702 = OpFAdd %700 %701 
                                                      OpStore %166 %702 
                                       f32_3 %703 = OpLoad %166 
                                       f32_3 %704 = OpLoad %166 
                                         f32 %705 = OpDot %703 %704 
                                Private f32* %706 = OpAccessChain %78 %32 
                                                      OpStore %706 %705 
                                Private f32* %707 = OpAccessChain %78 %32 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpExtInst %1 32 %708 
                                Private f32* %710 = OpAccessChain %78 %32 
                                                      OpStore %710 %709 
                                       f32_3 %711 = OpLoad %166 
                                       f32_4 %712 = OpLoad %78 
                                       f32_3 %713 = OpVectorShuffle %712 %712 0 0 0 
                                       f32_3 %714 = OpFMul %711 %713 
                                                      OpStore %166 %714 
                                       f32_3 %715 = OpLoad %166 
                                       f32_4 %716 = OpLoad %40 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 3 
                                         f32 %718 = OpDot %715 %717 
                                Private f32* %719 = OpAccessChain %166 %32 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %166 %32 
                                         f32 %721 = OpLoad %720 
                                         f32 %722 = OpExtInst %1 40 %721 %247 
                                Private f32* %723 = OpAccessChain %166 %32 
                                                      OpStore %723 %722 
                                Private f32* %725 = OpAccessChain %85 %156 
                                         f32 %726 = OpLoad %725 
                                         f32 %728 = OpFMul %726 %727 
                                                      OpStore %724 %728 
                                Private f32* %729 = OpAccessChain %166 %32 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpExtInst %1 30 %730 
                                Private f32* %732 = OpAccessChain %166 %32 
                                                      OpStore %732 %731 
                                Private f32* %733 = OpAccessChain %166 %32 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpLoad %724 
                                         f32 %736 = OpFMul %734 %735 
                                Private f32* %737 = OpAccessChain %166 %32 
                                                      OpStore %737 %736 
                                Private f32* %738 = OpAccessChain %166 %32 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpExtInst %1 29 %739 
                                Private f32* %741 = OpAccessChain %166 %32 
                                                      OpStore %741 %740 
                                         f32 %742 = OpLoad %175 
                                                      OpStore %724 %742 
                                         f32 %743 = OpLoad %724 
                                         f32 %744 = OpExtInst %1 43 %743 %247 %75 
                                                      OpStore %724 %744 
                                         f32 %745 = OpLoad %724 
                                Private f32* %746 = OpAccessChain %166 %32 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpFMul %745 %747 
                                Private f32* %749 = OpAccessChain %166 %32 
                                                      OpStore %749 %748 
                                         f32 %750 = OpLoad %175 
                                         f32 %751 = OpLoad %249 
                                         f32 %752 = OpFMul %750 %751 
                                                      OpStore %724 %752 
                                         f32 %753 = OpLoad %724 
                                       f32_3 %754 = OpCompositeConstruct %753 %753 %753 
                              Uniform f32_4* %756 = OpAccessChain %19 %755 
                                       f32_4 %757 = OpLoad %756 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 1 2 
                                       f32_3 %759 = OpFMul %754 %758 
                                       f32_4 %760 = OpLoad %40 
                                       f32_4 %761 = OpVectorShuffle %760 %759 4 5 6 3 
                                                      OpStore %40 %761 
                              Uniform f32_4* %762 = OpAccessChain %19 %755 
                                       f32_4 %763 = OpLoad %762 
                                       f32_3 %764 = OpVectorShuffle %763 %763 0 1 2 
                                         f32 %769 = OpDot %764 %768 
                                                      OpStore %724 %769 
                                         f32 %770 = OpLoad %724 
                                Private f32* %771 = OpAccessChain %166 %32 
                                         f32 %772 = OpLoad %771 
                                         f32 %773 = OpFMul %770 %772 
                                Private f32* %774 = OpAccessChain %40 %156 
                                                      OpStore %774 %773 
                                Private f32* %775 = OpAccessChain %9 %32 
                                         f32 %776 = OpLoad %775 
                                Uniform f32* %778 = OpAccessChain %19 %777 %22 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %776 %779 
                                Uniform f32* %781 = OpAccessChain %19 %777 %156 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFAdd %780 %782 
                                Private f32* %784 = OpAccessChain %9 %32 
                                                      OpStore %784 %783 
                                Private f32* %785 = OpAccessChain %9 %32 
                                         f32 %786 = OpLoad %785 
                                         f32 %787 = OpFNegate %786 
                                         f32 %788 = OpFAdd %787 %75 
                                Private f32* %789 = OpAccessChain %9 %32 
                                                      OpStore %789 %788 
                                Private f32* %790 = OpAccessChain %9 %32 
                                         f32 %791 = OpLoad %790 
                                         f32 %792 = OpExtInst %1 43 %791 %247 %75 
                                Private f32* %793 = OpAccessChain %9 %32 
                                                      OpStore %793 %792 
                                       f32_3 %796 = OpLoad %9 
                                       f32_4 %797 = OpVectorShuffle %796 %796 0 0 0 0 
                                       f32_4 %798 = OpLoad %40 
                                       f32_4 %799 = OpFMul %797 %798 
                                                      OpStore %795 %799 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat6;
float u_xlat8;
vec2 u_xlat9;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xyz = (-u_xlat3.xyz) * u_xlat4.xxx + (-_LightDir.xyz);
    u_xlat9.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat9.x = inversesqrt(u_xlat9.x);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat9.xxx;
    u_xlat9.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat2 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat9.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat13 = u_xlat1.w * 128.0;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat4.y = dot((-_LightDir.xyz), u_xlat1.xyz);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * u_xlat13;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat12 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.x = (-u_xlat2.x) + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x + u_xlat2.x;
    u_xlat1.x = u_xlat12;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat8 = u_xlat12 * u_xlat4.y;
    u_xlat2.xyz = vec3(u_xlat8) * _LightColor.xyz;
    u_xlat4.x = u_xlat4.x * u_xlat1.x;
    u_xlat8 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat8 * u_xlat4.x;
    SV_Target0 = u_xlat0.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 368
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %362 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %49 DescriptorSet 49 
                                                      OpDecorate %49 Binding 49 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %208 DescriptorSet 208 
                                                      OpDecorate %208 Binding 208 
                                                      OpDecorate %210 DescriptorSet 210 
                                                      OpDecorate %210 Binding 210 
                                                      OpDecorate %217 DescriptorSet 217 
                                                      OpDecorate %217 Binding 217 
                                                      OpDecorate %219 DescriptorSet 219 
                                                      OpDecorate %219 Binding 219 
                                                      OpDecorate %362 Location 362 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypeVector %6 2 
                                              %37 = OpTypePointer Private %36 
                               Private f32_2* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %46 = OpVariable Private 
                                              %47 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %48 = OpTypePointer UniformConstant %47 
         UniformConstant read_only Texture2D* %49 = OpVariable UniformConstant 
                                              %51 = OpTypeSampler 
                                              %52 = OpTypePointer UniformConstant %51 
                     UniformConstant sampler* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampledImage %47 
                                          i32 %60 = OpConstant 2 
                                          u32 %65 = OpConstant 1 
                                          f32 %69 = OpConstant 3.674022E-40 
                                              %72 = OpTypePointer Private %10 
                               Private f32_4* %73 = OpVariable Private 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %83 = OpConstant 3 
                                              %84 = OpTypePointer Uniform %10 
                                          i32 %89 = OpConstant 0 
                                             %121 = OpTypePointer Uniform %7 
                                         i32 %128 = OpConstant 5 
                                         u32 %155 = OpConstant 3 
                              Private f32_3* %165 = OpVariable Private 
                                         i32 %179 = OpConstant 6 
                              Private f32_2* %185 = OpVariable Private 
                                         i32 %199 = OpConstant 9 
        UniformConstant read_only Texture2D* %208 = OpVariable UniformConstant 
                    UniformConstant sampler* %210 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %217 = OpVariable UniformConstant 
                    UniformConstant sampler* %219 = OpVariable UniformConstant 
                              Private f32_3* %224 = OpVariable Private 
                                         f32 %227 = OpConstant 3.674022E-40 
                                       f32_3 %228 = OpConstantComposite %227 %227 %227 
                                         f32 %230 = OpConstant 3.674022E-40 
                                       f32_3 %231 = OpConstantComposite %230 %230 %230 
                                         f32 %235 = OpConstant 3.674022E-40 
                                Private f32* %238 = OpVariable Private 
                                         f32 %261 = OpConstant 3.674022E-40 
                                       f32_2 %262 = OpConstantComposite %261 %261 
                                         i32 %282 = OpConstant 4 
                                         i32 %293 = OpConstant 8 
                                Private f32* %328 = OpVariable Private 
                                         i32 %335 = OpConstant 7 
                                         f32 %351 = OpConstant 3.674022E-40 
                                         f32 %352 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                       f32_3 %354 = OpConstantComposite %351 %352 %353 
                                             %361 = OpTypePointer Output %10 
                               Output f32_4* %362 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %41 = OpLoad vs_TEXCOORD0 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                                      OpStore %38 %45 
                          read_only Texture2D %50 = OpLoad %49 
                                      sampler %54 = OpLoad %53 
                   read_only Texture2DSampled %56 = OpSampledImage %50 %54 
                                        f32_2 %57 = OpLoad %38 
                                        f32_4 %58 = OpImageSampleImplicitLod %56 %57 
                                          f32 %59 = OpCompositeExtract %58 0 
                                                      OpStore %46 %59 
                                 Uniform f32* %61 = OpAccessChain %16 %60 %29 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpLoad %46 
                                          f32 %64 = OpFMul %62 %63 
                                 Uniform f32* %66 = OpAccessChain %16 %60 %65 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpFAdd %64 %67 
                                                      OpStore %46 %68 
                                          f32 %70 = OpLoad %46 
                                          f32 %71 = OpFDiv %69 %70 
                                                      OpStore %46 %71 
                                          f32 %74 = OpLoad %46 
                                        f32_3 %75 = OpCompositeConstruct %74 %74 %74 
                                        f32_3 %76 = OpLoad %9 
                                        f32_3 %77 = OpFMul %75 %76 
                                        f32_4 %78 = OpLoad %73 
                                        f32_4 %79 = OpVectorShuffle %78 %77 4 5 6 3 
                                                      OpStore %73 %79 
                                        f32_4 %81 = OpLoad %73 
                                        f32_3 %82 = OpVectorShuffle %81 %81 1 1 1 
                               Uniform f32_4* %85 = OpAccessChain %16 %83 %18 
                                        f32_4 %86 = OpLoad %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %82 %87 
                                                      OpStore %80 %88 
                               Uniform f32_4* %90 = OpAccessChain %16 %83 %89 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %73 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 0 0 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad %80 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %73 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 5 2 6 
                                                      OpStore %73 %99 
                              Uniform f32_4* %100 = OpAccessChain %16 %83 %60 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_4 %103 = OpLoad %73 
                                       f32_3 %104 = OpVectorShuffle %103 %103 2 2 2 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %73 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %73 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 2 6 
                                                      OpStore %73 %110 
                                       f32_4 %111 = OpLoad %73 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                              Uniform f32_4* %113 = OpAccessChain %16 %83 %83 
                                       f32_4 %114 = OpLoad %113 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                                       f32_3 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %73 %118 
                                       f32_4 %119 = OpLoad %73 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_3* %122 = OpAccessChain %16 %89 
                                       f32_3 %123 = OpLoad %122 
                                       f32_3 %124 = OpFNegate %123 
                                       f32_3 %125 = OpFAdd %120 %124 
                                                      OpStore %80 %125 
                                       f32_4 %126 = OpLoad %73 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 3 
                              Uniform f32_4* %129 = OpAccessChain %16 %128 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFNegate %131 
                                       f32_3 %133 = OpFAdd %127 %132 
                                       f32_4 %134 = OpLoad %73 
                                       f32_4 %135 = OpVectorShuffle %134 %133 4 5 2 6 
                                                      OpStore %73 %135 
                                       f32_4 %136 = OpLoad %73 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 3 
                                       f32_4 %138 = OpLoad %73 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                                         f32 %140 = OpDot %137 %139 
                                Private f32* %141 = OpAccessChain %9 %29 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpExtInst %1 31 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %9 %19 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFNegate %147 
                                         f32 %149 = OpLoad %46 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %9 %29 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFAdd %150 %152 
                                Private f32* %154 = OpAccessChain %9 %29 
                                                      OpStore %154 %153 
                                Uniform f32* %156 = OpAccessChain %16 %128 %155 
                                         f32 %157 = OpLoad %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFMul %157 %159 
                                Private f32* %161 = OpAccessChain %73 %19 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFAdd %160 %162 
                                Private f32* %164 = OpAccessChain %9 %29 
                                                      OpStore %164 %163 
                                       f32_3 %166 = OpLoad %80 
                                       f32_3 %167 = OpLoad %80 
                                         f32 %168 = OpDot %166 %167 
                                Private f32* %169 = OpAccessChain %165 %29 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %165 %29 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpExtInst %1 32 %171 
                                Private f32* %173 = OpAccessChain %165 %29 
                                                      OpStore %173 %172 
                                       f32_3 %174 = OpLoad %80 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpLoad %165 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                       f32_3 %178 = OpFMul %175 %177 
                              Uniform f32_4* %180 = OpAccessChain %16 %179 
                                       f32_4 %181 = OpLoad %180 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_3 %183 = OpFNegate %182 
                                       f32_3 %184 = OpFAdd %178 %183 
                                                      OpStore %165 %184 
                                       f32_3 %186 = OpLoad %165 
                                       f32_3 %187 = OpLoad %165 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %185 %29 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %185 %29 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpExtInst %1 32 %191 
                                Private f32* %193 = OpAccessChain %185 %29 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %165 
                                       f32_2 %195 = OpLoad %185 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_3 %197 = OpFMul %194 %196 
                                                      OpStore %165 %197 
                                       f32_2 %198 = OpLoad %38 
                              Uniform f32_4* %200 = OpAccessChain %16 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_2 %202 = OpVectorShuffle %201 %201 0 1 
                                       f32_2 %203 = OpFMul %198 %202 
                              Uniform f32_4* %204 = OpAccessChain %16 %199 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 2 3 
                                       f32_2 %207 = OpFAdd %203 %206 
                                                      OpStore %185 %207 
                         read_only Texture2D %209 = OpLoad %208 
                                     sampler %211 = OpLoad %210 
                  read_only Texture2DSampled %212 = OpSampledImage %209 %211 
                                       f32_2 %213 = OpLoad %38 
                                       f32_4 %214 = OpImageSampleImplicitLod %212 %213 
                                         f32 %215 = OpCompositeExtract %214 0 
                                Private f32* %216 = OpAccessChain %38 %29 
                                                      OpStore %216 %215 
                         read_only Texture2D %218 = OpLoad %217 
                                     sampler %220 = OpLoad %219 
                  read_only Texture2DSampled %221 = OpSampledImage %218 %220 
                                       f32_2 %222 = OpLoad %185 
                                       f32_4 %223 = OpImageSampleImplicitLod %221 %222 
                                                      OpStore %73 %223 
                                       f32_4 %225 = OpLoad %73 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_3 %232 = OpFAdd %229 %231 
                                                      OpStore %224 %232 
                                Private f32* %233 = OpAccessChain %73 %155 
                                         f32 %234 = OpLoad %233 
                                         f32 %236 = OpFMul %234 %235 
                                Private f32* %237 = OpAccessChain %73 %29 
                                                      OpStore %237 %236 
                                       f32_3 %239 = OpLoad %224 
                                       f32_3 %240 = OpLoad %224 
                                         f32 %241 = OpDot %239 %240 
                                                      OpStore %238 %241 
                                         f32 %242 = OpLoad %238 
                                         f32 %243 = OpExtInst %1 32 %242 
                                                      OpStore %238 %243 
                                       f32_3 %244 = OpLoad %224 
                                         f32 %245 = OpLoad %238 
                                       f32_3 %246 = OpCompositeConstruct %245 %245 %245 
                                       f32_3 %247 = OpFMul %244 %246 
                                                      OpStore %224 %247 
                                       f32_3 %248 = OpLoad %165 
                                       f32_3 %249 = OpLoad %224 
                                         f32 %250 = OpDot %248 %249 
                                Private f32* %251 = OpAccessChain %165 %29 
                                                      OpStore %251 %250 
                              Uniform f32_4* %252 = OpAccessChain %16 %179 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFNegate %254 
                                       f32_3 %256 = OpLoad %224 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %165 %65 
                                                      OpStore %258 %257 
                                       f32_3 %259 = OpLoad %165 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %263 = OpExtInst %1 40 %260 %262 
                                       f32_3 %264 = OpLoad %165 
                                       f32_3 %265 = OpVectorShuffle %264 %263 3 4 2 
                                                      OpStore %165 %265 
                                Private f32* %266 = OpAccessChain %165 %29 
                                         f32 %267 = OpLoad %266 
                                         f32 %268 = OpExtInst %1 30 %267 
                                Private f32* %269 = OpAccessChain %165 %29 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %165 %29 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %73 %29 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %165 %29 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %165 %29 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 29 %277 
                                Private f32* %279 = OpAccessChain %165 %29 
                                                      OpStore %279 %278 
                                Private f32* %280 = OpAccessChain %9 %29 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %283 = OpAccessChain %16 %282 %19 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFMul %281 %284 
                                Uniform f32* %286 = OpAccessChain %16 %282 %155 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpFAdd %285 %287 
                                                      OpStore %46 %288 
                                         f32 %289 = OpLoad %46 
                                         f32 %290 = OpExtInst %1 43 %289 %261 %69 
                                                      OpStore %46 %290 
                                Private f32* %291 = OpAccessChain %9 %29 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %294 = OpAccessChain %16 %293 %19 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %292 %295 
                                Uniform f32* %297 = OpAccessChain %16 %293 %155 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFAdd %296 %298 
                                Private f32* %300 = OpAccessChain %9 %29 
                                                      OpStore %300 %299 
                                Private f32* %301 = OpAccessChain %9 %29 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFNegate %302 
                                         f32 %304 = OpFAdd %303 %69 
                                Private f32* %305 = OpAccessChain %9 %29 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %9 %29 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpExtInst %1 43 %307 %261 %69 
                                Private f32* %309 = OpAccessChain %9 %29 
                                                      OpStore %309 %308 
                                Private f32* %310 = OpAccessChain %38 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFNegate %311 
                                         f32 %313 = OpFAdd %312 %69 
                                Private f32* %314 = OpAccessChain %224 %29 
                                                      OpStore %314 %313 
                                         f32 %315 = OpLoad %46 
                                Private f32* %316 = OpAccessChain %224 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpFMul %315 %317 
                                Private f32* %319 = OpAccessChain %38 %29 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFAdd %318 %320 
                                                      OpStore %46 %321 
                                         f32 %322 = OpLoad %46 
                                Private f32* %323 = OpAccessChain %38 %29 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %38 %29 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 43 %325 %261 %69 
                                Private f32* %327 = OpAccessChain %38 %29 
                                                      OpStore %327 %326 
                                         f32 %329 = OpLoad %46 
                                Private f32* %330 = OpAccessChain %165 %65 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFMul %329 %331 
                                                      OpStore %328 %332 
                                         f32 %333 = OpLoad %328 
                                       f32_3 %334 = OpCompositeConstruct %333 %333 %333 
                              Uniform f32_4* %336 = OpAccessChain %16 %335 
                                       f32_4 %337 = OpLoad %336 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFMul %334 %338 
                                       f32_4 %340 = OpLoad %73 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %73 %341 
                                Private f32* %342 = OpAccessChain %165 %29 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %38 %29 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Private f32* %347 = OpAccessChain %165 %29 
                                                      OpStore %347 %346 
                              Uniform f32_4* %348 = OpAccessChain %16 %335 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                         f32 %355 = OpDot %350 %354 
                                                      OpStore %328 %355 
                                         f32 %356 = OpLoad %328 
                                Private f32* %357 = OpAccessChain %165 %29 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %356 %358 
                                Private f32* %360 = OpAccessChain %73 %155 
                                                      OpStore %360 %359 
                                       f32_3 %363 = OpLoad %9 
                                       f32_4 %364 = OpVectorShuffle %363 %363 0 0 0 0 
                                       f32_4 %365 = OpLoad %73 
                                       f32_4 %366 = OpFMul %364 %365 
                                                      OpStore %362 %366 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat8.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat8.xy);
    u_xlat8.x = (-u_xlat3.x) + 1.0;
    u_xlat4 = u_xlat4 * u_xlat8.x + u_xlat3.x;
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat3 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat4 = u_xlat4 * u_xlat3.w;
    u_xlat8.x = u_xlat4;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat12) + (-_LightDir.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = u_xlat1.w * 128.0;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.x = dot((-_LightDir.xyz), u_xlat1.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat4 = u_xlat4 * u_xlat1.x;
    u_xlat2.xyz = vec3(u_xlat4) * _LightColor.xyz;
    u_xlat4 = max(u_xlat13, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = u_xlat8.x * u_xlat4;
    u_xlat8.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat8.x * u_xlat4;
    SV_Target0 = u_xlat0.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 417
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %40 %411 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %191 DescriptorSet 191 
                                                      OpDecorate %191 Binding 191 
                                                      OpDecorate %193 DescriptorSet 193 
                                                      OpDecorate %193 Binding 193 
                                                      OpDecorate %214 DescriptorSet 214 
                                                      OpDecorate %214 Binding 214 
                                                      OpDecorate %216 DescriptorSet 216 
                                                      OpDecorate %216 Binding 216 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %411 Location 411 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %14 %10 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypePointer Private %10 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %10 
                                          i32 %92 = OpConstant 0 
                                         i32 %124 = OpConstant 5 
                                         u32 %147 = OpConstant 3 
                                Private f32* %157 = OpVariable Private 
                                         i32 %160 = OpConstant 4 
                                         f32 %168 = OpConstant 3.674022E-40 
                                         i32 %172 = OpConstant 8 
                                             %189 = OpTypePointer Private %41 
                              Private f32_2* %190 = OpVariable Private 
        UniformConstant read_only Texture2D* %191 = OpVariable UniformConstant 
                    UniformConstant sampler* %193 = OpVariable UniformConstant 
                                         i32 %203 = OpConstant 10 
        UniformConstant read_only Texture2D* %214 = OpVariable UniformConstant 
                    UniformConstant sampler* %216 = OpVariable UniformConstant 
                                         i32 %234 = OpConstant 9 
                                             %257 = OpTypePointer Uniform %7 
        UniformConstant read_only Texture2D* %269 = OpVariable UniformConstant 
                    UniformConstant sampler* %271 = OpVariable UniformConstant 
                                         f32 %275 = OpConstant 3.674022E-40 
                                         i32 %302 = OpConstant 6 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_3 %327 = OpConstantComposite %326 %326 %326 
                                         f32 %329 = OpConstant 3.674022E-40 
                                       f32_3 %330 = OpConstantComposite %329 %329 %329 
                                         f32 %336 = OpConstant 3.674022E-40 
                                Private f32* %338 = OpVariable Private 
                                         i32 %376 = OpConstant 7 
                                         f32 %399 = OpConstant 3.674022E-40 
                                         f32 %400 = OpConstant 3.674022E-40 
                                         f32 %401 = OpConstant 3.674022E-40 
                                       f32_3 %402 = OpConstantComposite %399 %400 %401 
                                             %410 = OpTypePointer Output %10 
                               Output f32_4* %411 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %17 %64 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %17 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_3 %79 = OpLoad %9 
                                        f32_3 %80 = OpFMul %78 %79 
                                        f32_4 %81 = OpLoad %76 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %76 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %76 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %76 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %76 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %64 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %76 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %76 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %76 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %76 %113 
                                       f32_4 %114 = OpLoad %76 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Uniform f32_4* %125 = OpAccessChain %17 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %123 %128 
                                                      OpStore %83 %129 
                                       f32_3 %130 = OpLoad %83 
                                       f32_3 %131 = OpLoad %83 
                                         f32 %132 = OpDot %130 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %30 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %9 %20 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpLoad %49 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFAdd %142 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                                      OpStore %146 %145 
                                Uniform f32* %148 = OpAccessChain %17 %124 %147 
                                         f32 %149 = OpLoad %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %149 %151 
                                Private f32* %153 = OpAccessChain %76 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFAdd %152 %154 
                                Private f32* %156 = OpAccessChain %9 %30 
                                                      OpStore %156 %155 
                                Private f32* %158 = OpAccessChain %9 %30 
                                         f32 %159 = OpLoad %158 
                                Uniform f32* %161 = OpAccessChain %17 %160 %20 
                                         f32 %162 = OpLoad %161 
                                         f32 %163 = OpFMul %159 %162 
                                Uniform f32* %164 = OpAccessChain %17 %160 %147 
                                         f32 %165 = OpLoad %164 
                                         f32 %166 = OpFAdd %163 %165 
                                                      OpStore %157 %166 
                                         f32 %167 = OpLoad %157 
                                         f32 %169 = OpExtInst %1 43 %167 %168 %73 
                                                      OpStore %157 %169 
                                Private f32* %170 = OpAccessChain %9 %30 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %17 %172 %20 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFMul %171 %174 
                                Uniform f32* %176 = OpAccessChain %17 %172 %147 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %9 %30 
                                                      OpStore %179 %178 
                                Private f32* %180 = OpAccessChain %9 %30 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                         f32 %183 = OpFAdd %182 %73 
                                Private f32* %184 = OpAccessChain %9 %30 
                                                      OpStore %184 %183 
                                Private f32* %185 = OpAccessChain %9 %30 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpExtInst %1 43 %186 %168 %73 
                                Private f32* %188 = OpAccessChain %9 %30 
                                                      OpStore %188 %187 
                         read_only Texture2D %192 = OpLoad %191 
                                     sampler %194 = OpLoad %193 
                  read_only Texture2DSampled %195 = OpSampledImage %192 %194 
                                       f32_4 %196 = OpLoad %38 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_4 %198 = OpImageSampleImplicitLod %195 %197 
                                         f32 %199 = OpCompositeExtract %198 0 
                                Private f32* %200 = OpAccessChain %190 %30 
                                                      OpStore %200 %199 
                                       f32_4 %201 = OpLoad %38 
                                       f32_2 %202 = OpVectorShuffle %201 %201 0 1 
                              Uniform f32_4* %204 = OpAccessChain %17 %203 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                                       f32_2 %207 = OpFMul %202 %206 
                              Uniform f32_4* %208 = OpAccessChain %17 %203 
                                       f32_4 %209 = OpLoad %208 
                                       f32_2 %210 = OpVectorShuffle %209 %209 2 3 
                                       f32_2 %211 = OpFAdd %207 %210 
                                       f32_4 %212 = OpLoad %38 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 2 3 
                                                      OpStore %38 %213 
                         read_only Texture2D %215 = OpLoad %214 
                                     sampler %217 = OpLoad %216 
                  read_only Texture2DSampled %218 = OpSampledImage %215 %217 
                                       f32_4 %219 = OpLoad %38 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
                                                      OpStore %38 %221 
                                Private f32* %222 = OpAccessChain %190 %30 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpFNegate %223 
                                         f32 %225 = OpFAdd %224 %73 
                                                      OpStore %49 %225 
                                         f32 %226 = OpLoad %157 
                                         f32 %227 = OpLoad %49 
                                         f32 %228 = OpFMul %226 %227 
                                Private f32* %229 = OpAccessChain %190 %30 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFAdd %228 %230 
                                                      OpStore %157 %231 
                                       f32_4 %232 = OpLoad %76 
                                       f32_2 %233 = OpVectorShuffle %232 %232 1 1 
                              Uniform f32_4* %235 = OpAccessChain %17 %234 %19 
                                       f32_4 %236 = OpLoad %235 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFMul %233 %237 
                                                      OpStore %190 %238 
                              Uniform f32_4* %239 = OpAccessChain %17 %234 %92 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_4 %242 = OpLoad %76 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 0 
                                       f32_2 %244 = OpFMul %241 %243 
                                       f32_2 %245 = OpLoad %190 
                                       f32_2 %246 = OpFAdd %244 %245 
                                                      OpStore %190 %246 
                              Uniform f32_4* %247 = OpAccessChain %17 %234 %64 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_4 %250 = OpLoad %76 
                                       f32_2 %251 = OpVectorShuffle %250 %250 3 3 
                                       f32_2 %252 = OpFMul %249 %251 
                                       f32_2 %253 = OpLoad %190 
                                       f32_2 %254 = OpFAdd %252 %253 
                                                      OpStore %190 %254 
                                       f32_4 %255 = OpLoad %76 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 3 
                              Uniform f32_3* %258 = OpAccessChain %17 %92 
                                       f32_3 %259 = OpLoad %258 
                                       f32_3 %260 = OpFNegate %259 
                                       f32_3 %261 = OpFAdd %256 %260 
                                       f32_4 %262 = OpLoad %76 
                                       f32_4 %263 = OpVectorShuffle %262 %261 4 5 6 3 
                                                      OpStore %76 %263 
                                       f32_2 %264 = OpLoad %190 
                              Uniform f32_4* %265 = OpAccessChain %17 %234 %86 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_2 %268 = OpFAdd %264 %267 
                                                      OpStore %190 %268 
                         read_only Texture2D %270 = OpLoad %269 
                                     sampler %272 = OpLoad %271 
                  read_only Texture2DSampled %273 = OpSampledImage %270 %272 
                                       f32_2 %274 = OpLoad %190 
                                       f32_4 %276 = OpImageSampleImplicitLod %273 %274 Bias %10 
                                         f32 %277 = OpCompositeExtract %276 3 
                                Private f32* %278 = OpAccessChain %190 %30 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %190 %30 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpLoad %157 
                                         f32 %282 = OpFMul %280 %281 
                                                      OpStore %157 %282 
                                         f32 %283 = OpLoad %157 
                                Private f32* %284 = OpAccessChain %190 %30 
                                                      OpStore %284 %283 
                                Private f32* %285 = OpAccessChain %190 %30 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpExtInst %1 43 %286 %168 %73 
                                Private f32* %288 = OpAccessChain %190 %30 
                                                      OpStore %288 %287 
                                       f32_4 %289 = OpLoad %76 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_4 %291 = OpLoad %76 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                         f32 %293 = OpDot %290 %292 
                                                      OpStore %49 %293 
                                         f32 %294 = OpLoad %49 
                                         f32 %295 = OpExtInst %1 32 %294 
                                                      OpStore %49 %295 
                                       f32_4 %296 = OpLoad %76 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpFNegate %297 
                                         f32 %299 = OpLoad %49 
                                       f32_3 %300 = OpCompositeConstruct %299 %299 %299 
                                       f32_3 %301 = OpFMul %298 %300 
                              Uniform f32_4* %303 = OpAccessChain %17 %302 
                                       f32_4 %304 = OpLoad %303 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFNegate %305 
                                       f32_3 %307 = OpFAdd %301 %306 
                                       f32_4 %308 = OpLoad %76 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %76 %309 
                                       f32_4 %310 = OpLoad %76 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %76 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                         f32 %314 = OpDot %311 %313 
                                                      OpStore %49 %314 
                                         f32 %315 = OpLoad %49 
                                         f32 %316 = OpExtInst %1 32 %315 
                                                      OpStore %49 %316 
                                         f32 %317 = OpLoad %49 
                                       f32_3 %318 = OpCompositeConstruct %317 %317 %317 
                                       f32_4 %319 = OpLoad %76 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFMul %318 %320 
                                       f32_4 %322 = OpLoad %76 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %76 %323 
                                       f32_4 %324 = OpLoad %38 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_3 %331 = OpFAdd %328 %330 
                                       f32_4 %332 = OpLoad %38 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %38 %333 
                                Private f32* %334 = OpAccessChain %38 %147 
                                         f32 %335 = OpLoad %334 
                                         f32 %337 = OpFMul %335 %336 
                                                      OpStore %49 %337 
                                       f32_4 %339 = OpLoad %38 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_4 %341 = OpLoad %38 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                         f32 %343 = OpDot %340 %342 
                                                      OpStore %338 %343 
                                         f32 %344 = OpLoad %338 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %338 %345 
                                         f32 %346 = OpLoad %338 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_4 %348 = OpLoad %38 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %38 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %38 %352 
                                       f32_4 %353 = OpLoad %76 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                       f32_4 %355 = OpLoad %38 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                         f32 %357 = OpDot %354 %356 
                                                      OpStore %338 %357 
                              Uniform f32_4* %358 = OpAccessChain %17 %302 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFNegate %360 
                                       f32_4 %362 = OpLoad %38 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                         f32 %364 = OpDot %361 %363 
                                Private f32* %365 = OpAccessChain %38 %30 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %38 %30 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpExtInst %1 40 %367 %168 
                                Private f32* %369 = OpAccessChain %38 %30 
                                                      OpStore %369 %368 
                                         f32 %370 = OpLoad %157 
                                Private f32* %371 = OpAccessChain %38 %30 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFMul %370 %372 
                                                      OpStore %157 %373 
                                         f32 %374 = OpLoad %157 
                                       f32_3 %375 = OpCompositeConstruct %374 %374 %374 
                              Uniform f32_4* %377 = OpAccessChain %17 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFMul %375 %379 
                                       f32_4 %381 = OpLoad %76 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %76 %382 
                                         f32 %383 = OpLoad %338 
                                         f32 %384 = OpExtInst %1 40 %383 %168 
                                                      OpStore %157 %384 
                                         f32 %385 = OpLoad %157 
                                         f32 %386 = OpExtInst %1 30 %385 
                                                      OpStore %157 %386 
                                         f32 %387 = OpLoad %157 
                                         f32 %388 = OpLoad %49 
                                         f32 %389 = OpFMul %387 %388 
                                                      OpStore %157 %389 
                                         f32 %390 = OpLoad %157 
                                         f32 %391 = OpExtInst %1 29 %390 
                                                      OpStore %157 %391 
                                Private f32* %392 = OpAccessChain %190 %30 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpLoad %157 
                                         f32 %395 = OpFMul %393 %394 
                                                      OpStore %157 %395 
                              Uniform f32_4* %396 = OpAccessChain %17 %376 
                                       f32_4 %397 = OpLoad %396 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                         f32 %403 = OpDot %398 %402 
                                Private f32* %404 = OpAccessChain %190 %30 
                                                      OpStore %404 %403 
                                Private f32* %405 = OpAccessChain %190 %30 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpLoad %157 
                                         f32 %408 = OpFMul %406 %407 
                                Private f32* %409 = OpAccessChain %76 %147 
                                                      OpStore %409 %408 
                                       f32_3 %412 = OpLoad %9 
                                       f32_4 %413 = OpVectorShuffle %412 %412 0 0 0 0 
                                       f32_4 %414 = OpLoad %76 
                                       f32_4 %415 = OpFMul %413 %414 
                                                      OpStore %411 %415 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(3) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(4) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat6.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat6.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = max(abs(u_xlat3.y), abs(u_xlat3.x));
    u_xlat11 = max(abs(u_xlat3.z), u_xlat11);
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.z);
    u_xlat11 = max(u_xlat11, 9.99999975e-06);
    u_xlat11 = u_xlat11 * _LightProjectionParams.w;
    u_xlat11 = _LightProjectionParams.y / u_xlat11;
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat3.xyz,u_xlat11);
    u_xlat11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat16 = (-_LightShadowData.x) + 1.0;
    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
    u_xlat16 = (-u_xlat11) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat16 + u_xlat11;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat1.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 468
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %85 %462 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpMemberDecorate %39 8 Offset 39 
                                                      OpMemberDecorate %39 9 Offset 39 
                                                      OpMemberDecorate %39 10 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate vs_TEXCOORD1 Location 85 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %276 DescriptorSet 276 
                                                      OpDecorate %276 Binding 276 
                                                      OpDecorate %318 DescriptorSet 318 
                                                      OpDecorate %318 Binding 318 
                                                      OpDecorate %320 DescriptorSet 320 
                                                      OpDecorate %320 Binding 320 
                                                      OpDecorate %462 Location 462 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %10 %10 %10 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 10 
                                              %44 = OpTypePointer Uniform %10 
                                              %53 = OpTypePointer Private %10 
                               Private f32_4* %54 = OpVariable Private 
         UniformConstant read_only Texture2D* %55 = OpVariable UniformConstant 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 2 
                                              %63 = OpTypePointer Uniform %6 
                                          u32 %68 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                                              %78 = OpTypePointer Private %36 
                               Private f32_3* %79 = OpVariable Private 
                                          i32 %80 = OpConstant 1 
                                          u32 %81 = OpConstant 2 
                                              %84 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %86 = OpTypePointer Input %6 
                               Private f32_4* %95 = OpVariable Private 
                              Private f32_3* %102 = OpVariable Private 
                                         i32 %105 = OpConstant 3 
                                         i32 %110 = OpConstant 0 
                                         i32 %142 = OpConstant 6 
                                         u32 %166 = OpConstant 3 
                                         i32 %178 = OpConstant 5 
                                         f32 %188 = OpConstant 3.674022E-40 
                                         i32 %193 = OpConstant 9 
                                         i32 %212 = OpConstant 7 
                                             %220 = OpTypePointer Uniform %36 
                                         i32 %240 = OpConstant 4 
                                         f32 %246 = OpConstant 3.674022E-40 
                                             %264 = OpTypePointer Function %10 
                                             %272 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %273 = OpTypePointer UniformConstant %272 
      UniformConstant read_only TextureCube* %274 = OpVariable UniformConstant 
                    UniformConstant sampler* %276 = OpVariable UniformConstant 
                                             %278 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %279 = OpTypeSampledImage %278 
                                Private f32* %284 = OpVariable Private 
        UniformConstant read_only Texture2D* %318 = OpVariable UniformConstant 
                    UniformConstant sampler* %320 = OpVariable UniformConstant 
                                         f32 %370 = OpConstant 3.674022E-40 
                                       f32_3 %371 = OpConstantComposite %370 %370 %370 
                                         f32 %373 = OpConstant 3.674022E-40 
                                       f32_3 %374 = OpConstantComposite %373 %373 %373 
                                         f32 %380 = OpConstant 3.674022E-40 
                                Private f32* %382 = OpVariable Private 
                                         i32 %420 = OpConstant 8 
                                         f32 %451 = OpConstant 3.674022E-40 
                                         f32 %452 = OpConstant 3.674022E-40 
                                         f32 %453 = OpConstant 3.674022E-40 
                                       f32_3 %454 = OpConstantComposite %451 %452 %453 
                                             %461 = OpTypePointer Output %10 
                               Output f32_4* %462 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %265 = OpVariable Function 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %45 = OpAccessChain %41 %43 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_2 %48 = OpFMul %35 %47 
                               Uniform f32_4* %49 = OpAccessChain %41 %43 
                                        f32_4 %50 = OpLoad %49 
                                        f32_2 %51 = OpVectorShuffle %50 %50 2 3 
                                        f32_2 %52 = OpFAdd %48 %51 
                                                      OpStore %9 %52 
                          read_only Texture2D %56 = OpLoad %55 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %59 = OpSampledImage %56 %58 
                                        f32_2 %60 = OpLoad %9 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                                      OpStore %54 %61 
                                 Uniform f32* %64 = OpAccessChain %41 %62 %33 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %19 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %41 %62 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                 Private f32* %72 = OpAccessChain %9 %33 
                                                      OpStore %72 %71 
                                 Private f32* %74 = OpAccessChain %9 %33 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFDiv %73 %75 
                                 Private f32* %77 = OpAccessChain %9 %33 
                                                      OpStore %77 %76 
                                 Uniform f32* %82 = OpAccessChain %41 %80 %81 
                                          f32 %83 = OpLoad %82 
                                   Input f32* %87 = OpAccessChain vs_TEXCOORD1 %81 
                                          f32 %88 = OpLoad %87 
                                          f32 %89 = OpFDiv %83 %88 
                                 Private f32* %90 = OpAccessChain %79 %33 
                                                      OpStore %90 %89 
                                        f32_3 %91 = OpLoad %79 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_3 %93 = OpLoad vs_TEXCOORD1 
                                        f32_3 %94 = OpFMul %92 %93 
                                                      OpStore %79 %94 
                                        f32_2 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpLoad %79 
                                        f32_3 %99 = OpFMul %97 %98 
                                       f32_4 %100 = OpLoad %95 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %95 %101 
                                       f32_4 %103 = OpLoad %95 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %106 = OpAccessChain %41 %105 %80 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpFMul %104 %108 
                                                      OpStore %102 %109 
                              Uniform f32_4* %111 = OpAccessChain %41 %105 %110 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 2 
                                       f32_4 %114 = OpLoad %95 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 0 0 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_3 %117 = OpLoad %102 
                                       f32_3 %118 = OpFAdd %116 %117 
                                       f32_4 %119 = OpLoad %95 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %95 %120 
                              Uniform f32_4* %121 = OpAccessChain %41 %105 %62 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_4 %124 = OpLoad %95 
                                       f32_3 %125 = OpVectorShuffle %124 %124 2 2 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %95 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                                       f32_3 %129 = OpFAdd %126 %128 
                                       f32_4 %130 = OpLoad %95 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 6 
                                                      OpStore %95 %131 
                                       f32_4 %132 = OpLoad %95 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 3 
                              Uniform f32_4* %134 = OpAccessChain %41 %105 %105 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFAdd %133 %136 
                                       f32_4 %138 = OpLoad %95 
                                       f32_4 %139 = OpVectorShuffle %138 %137 4 5 2 6 
                                                      OpStore %95 %139 
                                       f32_4 %140 = OpLoad %95 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 3 
                              Uniform f32_4* %143 = OpAccessChain %41 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %141 %146 
                                                      OpStore %102 %147 
                                       f32_3 %148 = OpLoad %102 
                                       f32_3 %149 = OpLoad %102 
                                         f32 %150 = OpDot %148 %149 
                                Private f32* %151 = OpAccessChain %79 %33 
                                                      OpStore %151 %150 
                                Private f32* %152 = OpAccessChain %79 %33 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpExtInst %1 31 %153 
                                Private f32* %155 = OpAccessChain %79 %33 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %79 %81 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFNegate %157 
                                Private f32* %159 = OpAccessChain %9 %33 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %79 %33 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %33 
                                                      OpStore %165 %164 
                                Uniform f32* %167 = OpAccessChain %41 %142 %166 
                                         f32 %168 = OpLoad %167 
                                Private f32* %169 = OpAccessChain %9 %33 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %168 %170 
                                Private f32* %172 = OpAccessChain %95 %81 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFAdd %171 %173 
                                Private f32* %175 = OpAccessChain %9 %33 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %33 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %179 = OpAccessChain %41 %178 %81 
                                         f32 %180 = OpLoad %179 
                                         f32 %181 = OpFMul %177 %180 
                                Uniform f32* %182 = OpAccessChain %41 %178 %166 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFAdd %181 %183 
                                Private f32* %185 = OpAccessChain %79 %33 
                                                      OpStore %185 %184 
                                Private f32* %186 = OpAccessChain %79 %33 
                                         f32 %187 = OpLoad %186 
                                         f32 %189 = OpExtInst %1 43 %187 %188 %73 
                                Private f32* %190 = OpAccessChain %79 %33 
                                                      OpStore %190 %189 
                                Private f32* %191 = OpAccessChain %9 %33 
                                         f32 %192 = OpLoad %191 
                                Uniform f32* %194 = OpAccessChain %41 %193 %81 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFMul %192 %195 
                                Uniform f32* %197 = OpAccessChain %41 %193 %166 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpFAdd %196 %198 
                                Private f32* %200 = OpAccessChain %9 %33 
                                                      OpStore %200 %199 
                                Private f32* %201 = OpAccessChain %9 %33 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpFNegate %202 
                                         f32 %204 = OpFAdd %203 %73 
                                Private f32* %205 = OpAccessChain %9 %33 
                                                      OpStore %205 %204 
                                Private f32* %206 = OpAccessChain %9 %33 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpExtInst %1 43 %207 %188 %73 
                                Private f32* %209 = OpAccessChain %9 %33 
                                                      OpStore %209 %208 
                                       f32_4 %210 = OpLoad %95 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 3 
                              Uniform f32_4* %213 = OpAccessChain %41 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFNegate %215 
                                       f32_3 %217 = OpFAdd %211 %216 
                                                      OpStore %102 %217 
                                       f32_4 %218 = OpLoad %95 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 3 
                              Uniform f32_3* %221 = OpAccessChain %41 %110 
                                       f32_3 %222 = OpLoad %221 
                                       f32_3 %223 = OpFNegate %222 
                                       f32_3 %224 = OpFAdd %219 %223 
                                       f32_4 %225 = OpLoad %95 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %95 %226 
                                Private f32* %227 = OpAccessChain %102 %68 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpExtInst %1 4 %228 
                                Private f32* %230 = OpAccessChain %102 %33 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpExtInst %1 4 %231 
                                         f32 %233 = OpExtInst %1 40 %229 %232 
                                                      OpStore %19 %233 
                                Private f32* %234 = OpAccessChain %102 %81 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpExtInst %1 4 %235 
                                         f32 %237 = OpLoad %19 
                                         f32 %238 = OpExtInst %1 40 %236 %237 
                                                      OpStore %19 %238 
                                         f32 %239 = OpLoad %19 
                                Uniform f32* %241 = OpAccessChain %41 %240 %81 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %239 %243 
                                                      OpStore %19 %244 
                                         f32 %245 = OpLoad %19 
                                         f32 %247 = OpExtInst %1 40 %245 %246 
                                                      OpStore %19 %247 
                                         f32 %248 = OpLoad %19 
                                Uniform f32* %249 = OpAccessChain %41 %240 %166 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFMul %248 %250 
                                                      OpStore %19 %251 
                                Uniform f32* %252 = OpAccessChain %41 %240 %68 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpLoad %19 
                                         f32 %255 = OpFDiv %253 %254 
                                                      OpStore %19 %255 
                                         f32 %256 = OpLoad %19 
                                Uniform f32* %257 = OpAccessChain %41 %240 %33 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFNegate %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore %19 %260 
                                         f32 %261 = OpLoad %19 
                                         f32 %262 = OpFNegate %261 
                                         f32 %263 = OpFAdd %262 %73 
                                                      OpStore %19 %263 
                                       f32_3 %266 = OpLoad %102 
                                         f32 %267 = OpLoad %19 
                                         f32 %268 = OpCompositeExtract %266 0 
                                         f32 %269 = OpCompositeExtract %266 1 
                                         f32 %270 = OpCompositeExtract %266 2 
                                       f32_4 %271 = OpCompositeConstruct %268 %269 %270 %267 
                                                      OpStore %265 %271 
                       read_only TextureCube %275 = OpLoad %274 
                                     sampler %277 = OpLoad %276 
                read_only TextureCubeSampled %280 = OpSampledImage %275 %277 
                                       f32_4 %281 = OpLoad %265 
                                         f32 %282 = OpCompositeExtract %281 3 
                                         f32 %283 = OpImageSampleDrefImplicitLod %280 %281 %282 
                                                      OpStore %19 %283 
                                Uniform f32* %285 = OpAccessChain %41 %178 %33 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFNegate %286 
                                         f32 %288 = OpFAdd %287 %73 
                                                      OpStore %284 %288 
                                         f32 %289 = OpLoad %19 
                                         f32 %290 = OpLoad %284 
                                         f32 %291 = OpFMul %289 %290 
                                Uniform f32* %292 = OpAccessChain %41 %178 %33 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFAdd %291 %293 
                                                      OpStore %19 %294 
                                         f32 %295 = OpLoad %19 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %73 
                                                      OpStore %284 %297 
                                Private f32* %298 = OpAccessChain %79 %33 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpLoad %284 
                                         f32 %301 = OpFMul %299 %300 
                                         f32 %302 = OpLoad %19 
                                         f32 %303 = OpFAdd %301 %302 
                                Private f32* %304 = OpAccessChain %79 %33 
                                                      OpStore %304 %303 
                                       f32_3 %305 = OpLoad %102 
                                       f32_3 %306 = OpLoad %102 
                                         f32 %307 = OpDot %305 %306 
                                                      OpStore %19 %307 
                                         f32 %308 = OpLoad %19 
                                Uniform f32* %309 = OpAccessChain %41 %212 %166 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %308 %310 
                                                      OpStore %284 %311 
                                         f32 %312 = OpLoad %19 
                                         f32 %313 = OpExtInst %1 32 %312 
                                                      OpStore %19 %313 
                                         f32 %314 = OpLoad %19 
                                       f32_3 %315 = OpCompositeConstruct %314 %314 %314 
                                       f32_3 %316 = OpLoad %102 
                                       f32_3 %317 = OpFMul %315 %316 
                                                      OpStore %102 %317 
                         read_only Texture2D %319 = OpLoad %318 
                                     sampler %321 = OpLoad %320 
                  read_only Texture2DSampled %322 = OpSampledImage %319 %321 
                                         f32 %323 = OpLoad %284 
                                       f32_2 %324 = OpCompositeConstruct %323 %323 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                         f32 %326 = OpCompositeExtract %325 0 
                                                      OpStore %19 %326 
                                Private f32* %327 = OpAccessChain %79 %33 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpLoad %19 
                                         f32 %330 = OpFMul %328 %329 
                                Private f32* %331 = OpAccessChain %79 %33 
                                                      OpStore %331 %330 
                                Private f32* %332 = OpAccessChain %79 %33 
                                         f32 %333 = OpLoad %332 
                                                      OpStore %19 %333 
                                         f32 %334 = OpLoad %19 
                                         f32 %335 = OpExtInst %1 43 %334 %188 %73 
                                                      OpStore %19 %335 
                                       f32_4 %336 = OpLoad %95 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %95 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %340 = OpDot %337 %339 
                                                      OpStore %284 %340 
                                         f32 %341 = OpLoad %284 
                                         f32 %342 = OpExtInst %1 32 %341 
                                                      OpStore %284 %342 
                                       f32_4 %343 = OpLoad %95 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFNegate %344 
                                         f32 %346 = OpLoad %284 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_3 %349 = OpLoad %102 
                                       f32_3 %350 = OpFNegate %349 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %95 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %95 %353 
                                       f32_4 %354 = OpLoad %95 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %95 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                         f32 %358 = OpDot %355 %357 
                                                      OpStore %284 %358 
                                         f32 %359 = OpLoad %284 
                                         f32 %360 = OpExtInst %1 32 %359 
                                                      OpStore %284 %360 
                                         f32 %361 = OpLoad %284 
                                       f32_3 %362 = OpCompositeConstruct %361 %361 %361 
                                       f32_4 %363 = OpLoad %95 
                                       f32_3 %364 = OpVectorShuffle %363 %363 0 1 2 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %95 
                                       f32_4 %367 = OpVectorShuffle %366 %365 4 5 6 3 
                                                      OpStore %95 %367 
                                       f32_4 %368 = OpLoad %54 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %372 = OpFMul %369 %371 
                                       f32_3 %375 = OpFAdd %372 %374 
                                       f32_4 %376 = OpLoad %54 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %54 %377 
                                Private f32* %378 = OpAccessChain %54 %166 
                                         f32 %379 = OpLoad %378 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %284 %381 
                                       f32_4 %383 = OpLoad %54 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_4 %385 = OpLoad %54 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                         f32 %387 = OpDot %384 %386 
                                                      OpStore %382 %387 
                                         f32 %388 = OpLoad %382 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %382 %389 
                                         f32 %390 = OpLoad %382 
                                       f32_3 %391 = OpCompositeConstruct %390 %390 %390 
                                       f32_4 %392 = OpLoad %54 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %54 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %54 %396 
                                       f32_4 %397 = OpLoad %95 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_4 %399 = OpLoad %54 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                         f32 %401 = OpDot %398 %400 
                                                      OpStore %382 %401 
                                       f32_3 %402 = OpLoad %102 
                                       f32_3 %403 = OpFNegate %402 
                                       f32_4 %404 = OpLoad %54 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                         f32 %406 = OpDot %403 %405 
                                Private f32* %407 = OpAccessChain %54 %33 
                                                      OpStore %407 %406 
                                Private f32* %408 = OpAccessChain %54 %33 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpExtInst %1 40 %409 %188 
                                Private f32* %411 = OpAccessChain %54 %33 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %79 %33 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %54 %33 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFMul %413 %415 
                                Private f32* %417 = OpAccessChain %79 %33 
                                                      OpStore %417 %416 
                                       f32_3 %418 = OpLoad %79 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                              Uniform f32_4* %421 = OpAccessChain %41 %420 
                                       f32_4 %422 = OpLoad %421 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFMul %419 %423 
                                       f32_4 %425 = OpLoad %95 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %95 %426 
                                         f32 %427 = OpLoad %382 
                                         f32 %428 = OpExtInst %1 40 %427 %188 
                                Private f32* %429 = OpAccessChain %79 %33 
                                                      OpStore %429 %428 
                                Private f32* %430 = OpAccessChain %79 %33 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 30 %431 
                                Private f32* %433 = OpAccessChain %79 %33 
                                                      OpStore %433 %432 
                                Private f32* %434 = OpAccessChain %79 %33 
                                         f32 %435 = OpLoad %434 
                                         f32 %436 = OpLoad %284 
                                         f32 %437 = OpFMul %435 %436 
                                Private f32* %438 = OpAccessChain %79 %33 
                                                      OpStore %438 %437 
                                Private f32* %439 = OpAccessChain %79 %33 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpExtInst %1 29 %440 
                                Private f32* %442 = OpAccessChain %79 %33 
                                                      OpStore %442 %441 
                                         f32 %443 = OpLoad %19 
                                Private f32* %444 = OpAccessChain %79 %33 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                Private f32* %447 = OpAccessChain %79 %33 
                                                      OpStore %447 %446 
                              Uniform f32_4* %448 = OpAccessChain %41 %420 
                                       f32_4 %449 = OpLoad %448 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                         f32 %455 = OpDot %450 %454 
                                                      OpStore %19 %455 
                                         f32 %456 = OpLoad %19 
                                Private f32* %457 = OpAccessChain %79 %33 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                Private f32* %460 = OpAccessChain %95 %166 
                                                      OpStore %460 %459 
                                       f32_2 %463 = OpLoad %9 
                                       f32_4 %464 = OpVectorShuffle %463 %463 0 0 0 0 
                                       f32_4 %465 = OpLoad %95 
                                       f32_4 %466 = OpFMul %464 %465 
                                                      OpStore %462 %466 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(3) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(4) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat13);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat19);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat13 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb19 = u_xlat13<0.99000001;
    if(u_xlatb19){
        u_xlat19 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat19 = max(abs(u_xlat6.z), u_xlat19);
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.z);
        u_xlat19 = max(u_xlat19, 9.99999975e-06);
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat19 = _LightProjectionParams.y / u_xlat19;
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.x);
        u_xlat10.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat19);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat12.x = (-_LightShadowData.x) + 1.0;
        u_xlat6.x = u_xlat6.x * u_xlat12.x + _LightShadowData.x;
    } else {
        u_xlat6.x = 1.0;
    }
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat13 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat12.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat12.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat18) + (-u_xlat3.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat12.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12.xy = max(u_xlat12.xy, vec2(0.0, 0.0));
    u_xlat1.x = u_xlat1.w * 128.0;
    u_xlat18 = log2(u_xlat12.y);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat1.x = u_xlat6.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat1.xyz = u_xlat6.xxx * _LightColor.xyz;
    u_xlat6.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat6.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 552
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %39 %546 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpMemberDecorate %14 10 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 39 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate %182 DescriptorSet 182 
                                                      OpDecorate %182 Binding 182 
                                                      OpDecorate %266 DescriptorSet 266 
                                                      OpDecorate %266 Binding 266 
                                                      OpDecorate %268 DescriptorSet 268 
                                                      OpDecorate %268 Binding 268 
                                                      OpDecorate %382 DescriptorSet 382 
                                                      OpDecorate %382 Binding 382 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %546 Location 546 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypePointer Private %10 
                               Private f32_4* %37 = OpVariable Private 
                                              %38 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %40 = OpTypeVector %6 2 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                               Private f32_4* %75 = OpVariable Private 
                               Private f32_3* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %10 
                                          i32 %91 = OpConstant 0 
                                         i32 %123 = OpConstant 6 
                                         u32 %146 = OpConstant 3 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                Private f32* %165 = OpVariable Private 
                                Private f32* %169 = OpVariable Private 
        UniformConstant read_only Texture2D* %180 = OpVariable UniformConstant 
                    UniformConstant sampler* %182 = OpVariable UniformConstant 
                                         i32 %191 = OpConstant 5 
                                         f32 %199 = OpConstant 3.674022E-40 
                                             %201 = OpTypeBool 
                                             %202 = OpTypePointer Private %201 
                               Private bool* %203 = OpVariable Private 
                                         f32 %205 = OpConstant 3.674022E-40 
                                Private f32* %210 = OpVariable Private 
                                         i32 %224 = OpConstant 4 
                                         f32 %230 = OpConstant 3.674022E-40 
                              Private f32_4* %248 = OpVariable Private 
                                         f32 %250 = OpConstant 3.674022E-40 
                                       f32_3 %251 = OpConstantComposite %250 %250 %250 
                                             %255 = OpTypePointer Function %10 
                                             %264 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %265 = OpTypePointer UniformConstant %264 
      UniformConstant read_only TextureCube* %266 = OpVariable UniformConstant 
                    UniformConstant sampler* %268 = OpVariable UniformConstant 
                                             %270 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %271 = OpTypeSampledImage %270 
                              Private f32_3* %277 = OpVariable Private 
                                         f32 %279 = OpConstant 3.674022E-40 
                                       f32_3 %280 = OpConstantComposite %279 %279 %250 
                                       f32_3 %297 = OpConstantComposite %279 %250 %279 
                                       f32_3 %314 = OpConstantComposite %250 %279 %279 
                                         f32 %331 = OpConstant 3.674022E-40 
                                       f32_4 %332 = OpConstantComposite %331 %331 %331 %331 
                                             %335 = OpTypePointer Private %40 
                              Private f32_2* %336 = OpVariable Private 
                                         i32 %373 = OpConstant 10 
        UniformConstant read_only Texture2D* %382 = OpVariable UniformConstant 
                    UniformConstant sampler* %384 = OpVariable UniformConstant 
                                         f32 %391 = OpConstant 3.674022E-40 
                                       f32_3 %392 = OpConstantComposite %391 %391 %391 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_3 %395 = OpConstantComposite %394 %394 %394 
                                             %424 = OpTypePointer Uniform %7 
                                       f32_2 %470 = OpConstantComposite %199 %199 
                                         f32 %474 = OpConstant 3.674022E-40 
                                         i32 %505 = OpConstant 8 
                                         f32 %515 = OpConstant 3.674022E-40 
                                         f32 %516 = OpConstant 3.674022E-40 
                                         f32 %517 = OpConstant 3.674022E-40 
                                       f32_3 %518 = OpConstantComposite %515 %516 %517 
                                         i32 %528 = OpConstant 9 
                                             %545 = OpTypePointer Output %10 
                               Output f32_4* %546 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %256 = OpVariable Function 
                             Function f32_4* %282 = OpVariable Function 
                             Function f32_4* %299 = OpVariable Function 
                             Function f32_4* %316 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %41 = OpLoad vs_TEXCOORD0 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                        f32_4 %46 = OpLoad %37 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %37 %47 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_4 %59 = OpLoad %37 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %48 %62 
                                 Uniform f32* %64 = OpAccessChain %16 %63 %29 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %48 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %16 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %48 %71 
                                          f32 %73 = OpLoad %48 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %48 %74 
                                          f32 %76 = OpLoad %48 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_3 %78 = OpLoad %9 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_4 %80 = OpLoad %75 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %75 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %16 %85 %18 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                                      OpStore %82 %90 
                               Uniform f32_4* %92 = OpAccessChain %16 %85 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %75 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_3 %98 = OpLoad %82 
                                        f32_3 %99 = OpFAdd %97 %98 
                                       f32_4 %100 = OpLoad %75 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 6 
                                                      OpStore %75 %101 
                              Uniform f32_4* %102 = OpAccessChain %16 %85 %63 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_4 %105 = OpLoad %75 
                                       f32_3 %106 = OpVectorShuffle %105 %105 2 2 2 
                                       f32_3 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %75 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 3 
                                       f32_3 %110 = OpFAdd %107 %109 
                                       f32_4 %111 = OpLoad %75 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 6 
                                                      OpStore %75 %112 
                                       f32_4 %113 = OpLoad %75 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                              Uniform f32_4* %115 = OpAccessChain %16 %85 %85 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %75 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %75 %120 
                                       f32_4 %121 = OpLoad %75 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 3 
                              Uniform f32_4* %124 = OpAccessChain %16 %123 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                                      OpStore %82 %128 
                                       f32_3 %129 = OpLoad %82 
                                       f32_3 %130 = OpLoad %82 
                                         f32 %131 = OpDot %129 %130 
                                Private f32* %132 = OpAccessChain %9 %29 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %9 %29 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %19 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFNegate %138 
                                         f32 %140 = OpLoad %48 
                                         f32 %141 = OpFMul %139 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFAdd %141 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %16 %123 %146 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %9 %29 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFMul %148 %150 
                                Private f32* %152 = OpAccessChain %75 %19 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %29 
                                                      OpStore %155 %154 
                                       f32_4 %157 = OpLoad %75 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 3 
                              Uniform f32_4* %160 = OpAccessChain %16 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %156 %164 
                                       f32_3 %166 = OpLoad %156 
                                       f32_3 %167 = OpLoad %156 
                                         f32 %168 = OpDot %166 %167 
                                                      OpStore %165 %168 
                                         f32 %170 = OpLoad %165 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %169 %171 
                                       f32_3 %172 = OpLoad %156 
                                         f32 %173 = OpLoad %169 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore %82 %175 
                                         f32 %176 = OpLoad %165 
                                Uniform f32* %177 = OpAccessChain %16 %159 %146 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %176 %178 
                                                      OpStore %165 %179 
                         read_only Texture2D %181 = OpLoad %180 
                                     sampler %183 = OpLoad %182 
                  read_only Texture2DSampled %184 = OpSampledImage %181 %183 
                                         f32 %185 = OpLoad %165 
                                       f32_2 %186 = OpCompositeConstruct %185 %185 
                                       f32_4 %187 = OpImageSampleImplicitLod %184 %186 
                                         f32 %188 = OpCompositeExtract %187 0 
                                                      OpStore %165 %188 
                                Private f32* %189 = OpAccessChain %9 %29 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %192 = OpAccessChain %16 %191 %19 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %190 %193 
                                Uniform f32* %195 = OpAccessChain %16 %191 %146 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFAdd %194 %196 
                                                      OpStore %169 %197 
                                         f32 %198 = OpLoad %169 
                                         f32 %200 = OpExtInst %1 43 %198 %199 %72 
                                                      OpStore %169 %200 
                                         f32 %204 = OpLoad %169 
                                        bool %206 = OpFOrdLessThan %204 %205 
                                                      OpStore %203 %206 
                                        bool %207 = OpLoad %203 
                                                      OpSelectionMerge %209 None 
                                                      OpBranchConditional %207 %208 %351 
                                             %208 = OpLabel 
                                Private f32* %211 = OpAccessChain %156 %68 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpExtInst %1 4 %212 
                                Private f32* %214 = OpAccessChain %156 %29 
                                         f32 %215 = OpLoad %214 
                                         f32 %216 = OpExtInst %1 4 %215 
                                         f32 %217 = OpExtInst %1 40 %213 %216 
                                                      OpStore %210 %217 
                                Private f32* %218 = OpAccessChain %156 %19 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 4 %219 
                                         f32 %221 = OpLoad %210 
                                         f32 %222 = OpExtInst %1 40 %220 %221 
                                                      OpStore %210 %222 
                                         f32 %223 = OpLoad %210 
                                Uniform f32* %225 = OpAccessChain %16 %224 %19 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpFNegate %226 
                                         f32 %228 = OpFAdd %223 %227 
                                                      OpStore %210 %228 
                                         f32 %229 = OpLoad %210 
                                         f32 %231 = OpExtInst %1 40 %229 %230 
                                                      OpStore %210 %231 
                                         f32 %232 = OpLoad %210 
                                Uniform f32* %233 = OpAccessChain %16 %224 %146 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFMul %232 %234 
                                                      OpStore %210 %235 
                                Uniform f32* %236 = OpAccessChain %16 %224 %68 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpLoad %210 
                                         f32 %239 = OpFDiv %237 %238 
                                                      OpStore %210 %239 
                                         f32 %240 = OpLoad %210 
                                Uniform f32* %241 = OpAccessChain %16 %224 %29 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFNegate %242 
                                         f32 %244 = OpFAdd %240 %243 
                                                      OpStore %210 %244 
                                         f32 %245 = OpLoad %210 
                                         f32 %246 = OpFNegate %245 
                                         f32 %247 = OpFAdd %246 %72 
                                                      OpStore %210 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %252 = OpFAdd %249 %251 
                                       f32_4 %253 = OpLoad %248 
                                       f32_4 %254 = OpVectorShuffle %253 %252 4 5 6 3 
                                                      OpStore %248 %254 
                                       f32_4 %257 = OpLoad %248 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                         f32 %259 = OpLoad %210 
                                         f32 %260 = OpCompositeExtract %258 0 
                                         f32 %261 = OpCompositeExtract %258 1 
                                         f32 %262 = OpCompositeExtract %258 2 
                                       f32_4 %263 = OpCompositeConstruct %260 %261 %262 %259 
                                                      OpStore %256 %263 
                       read_only TextureCube %267 = OpLoad %266 
                                     sampler %269 = OpLoad %268 
                read_only TextureCubeSampled %272 = OpSampledImage %267 %269 
                                       f32_4 %273 = OpLoad %256 
                                         f32 %274 = OpCompositeExtract %273 3 
                                         f32 %275 = OpImageSampleDrefImplicitLod %272 %273 %274 
                                Private f32* %276 = OpAccessChain %248 %29 
                                                      OpStore %276 %275 
                                       f32_3 %278 = OpLoad %156 
                                       f32_3 %281 = OpFAdd %278 %280 
                                                      OpStore %277 %281 
                                       f32_3 %283 = OpLoad %277 
                                         f32 %284 = OpLoad %210 
                                         f32 %285 = OpCompositeExtract %283 0 
                                         f32 %286 = OpCompositeExtract %283 1 
                                         f32 %287 = OpCompositeExtract %283 2 
                                       f32_4 %288 = OpCompositeConstruct %285 %286 %287 %284 
                                                      OpStore %282 %288 
                       read_only TextureCube %289 = OpLoad %266 
                                     sampler %290 = OpLoad %268 
                read_only TextureCubeSampled %291 = OpSampledImage %289 %290 
                                       f32_4 %292 = OpLoad %282 
                                         f32 %293 = OpCompositeExtract %292 3 
                                         f32 %294 = OpImageSampleDrefImplicitLod %291 %292 %293 
                                Private f32* %295 = OpAccessChain %248 %68 
                                                      OpStore %295 %294 
                                       f32_3 %296 = OpLoad %156 
                                       f32_3 %298 = OpFAdd %296 %297 
                                                      OpStore %277 %298 
                                       f32_3 %300 = OpLoad %277 
                                         f32 %301 = OpLoad %210 
                                         f32 %302 = OpCompositeExtract %300 0 
                                         f32 %303 = OpCompositeExtract %300 1 
                                         f32 %304 = OpCompositeExtract %300 2 
                                       f32_4 %305 = OpCompositeConstruct %302 %303 %304 %301 
                                                      OpStore %299 %305 
                       read_only TextureCube %306 = OpLoad %266 
                                     sampler %307 = OpLoad %268 
                read_only TextureCubeSampled %308 = OpSampledImage %306 %307 
                                       f32_4 %309 = OpLoad %299 
                                         f32 %310 = OpCompositeExtract %309 3 
                                         f32 %311 = OpImageSampleDrefImplicitLod %308 %309 %310 
                                Private f32* %312 = OpAccessChain %248 %19 
                                                      OpStore %312 %311 
                                       f32_3 %313 = OpLoad %156 
                                       f32_3 %315 = OpFAdd %313 %314 
                                                      OpStore %156 %315 
                                       f32_3 %317 = OpLoad %156 
                                         f32 %318 = OpLoad %210 
                                         f32 %319 = OpCompositeExtract %317 0 
                                         f32 %320 = OpCompositeExtract %317 1 
                                         f32 %321 = OpCompositeExtract %317 2 
                                       f32_4 %322 = OpCompositeConstruct %319 %320 %321 %318 
                                                      OpStore %316 %322 
                       read_only TextureCube %323 = OpLoad %266 
                                     sampler %324 = OpLoad %268 
                read_only TextureCubeSampled %325 = OpSampledImage %323 %324 
                                       f32_4 %326 = OpLoad %316 
                                         f32 %327 = OpCompositeExtract %326 3 
                                         f32 %328 = OpImageSampleDrefImplicitLod %325 %326 %327 
                                Private f32* %329 = OpAccessChain %248 %146 
                                                      OpStore %329 %328 
                                       f32_4 %330 = OpLoad %248 
                                         f32 %333 = OpDot %330 %332 
                                Private f32* %334 = OpAccessChain %156 %29 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %16 %191 %29 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %72 
                                Private f32* %341 = OpAccessChain %336 %29 
                                                      OpStore %341 %340 
                                Private f32* %342 = OpAccessChain %156 %29 
                                         f32 %343 = OpLoad %342 
                                Private f32* %344 = OpAccessChain %336 %29 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpFMul %343 %345 
                                Uniform f32* %347 = OpAccessChain %16 %191 %29 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFAdd %346 %348 
                                Private f32* %350 = OpAccessChain %156 %29 
                                                      OpStore %350 %349 
                                                      OpBranch %209 
                                             %351 = OpLabel 
                                Private f32* %352 = OpAccessChain %156 %29 
                                                      OpStore %352 %72 
                                                      OpBranch %209 
                                             %209 = OpLabel 
                                Private f32* %353 = OpAccessChain %156 %29 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpFNegate %354 
                                         f32 %356 = OpFAdd %355 %72 
                                Private f32* %357 = OpAccessChain %336 %29 
                                                      OpStore %357 %356 
                                         f32 %358 = OpLoad %169 
                                Private f32* %359 = OpAccessChain %336 %29 
                                         f32 %360 = OpLoad %359 
                                         f32 %361 = OpFMul %358 %360 
                                Private f32* %362 = OpAccessChain %156 %29 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFAdd %361 %363 
                                Private f32* %365 = OpAccessChain %156 %29 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %156 %29 
                                         f32 %367 = OpLoad %366 
                                         f32 %368 = OpLoad %165 
                                         f32 %369 = OpFMul %367 %368 
                                Private f32* %370 = OpAccessChain %156 %29 
                                                      OpStore %370 %369 
                                       f32_4 %371 = OpLoad %37 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                              Uniform f32_4* %374 = OpAccessChain %16 %373 
                                       f32_4 %375 = OpLoad %374 
                                       f32_2 %376 = OpVectorShuffle %375 %375 0 1 
                                       f32_2 %377 = OpFMul %372 %376 
                              Uniform f32_4* %378 = OpAccessChain %16 %373 
                                       f32_4 %379 = OpLoad %378 
                                       f32_2 %380 = OpVectorShuffle %379 %379 2 3 
                                       f32_2 %381 = OpFAdd %377 %380 
                                                      OpStore %336 %381 
                         read_only Texture2D %383 = OpLoad %382 
                                     sampler %385 = OpLoad %384 
                  read_only Texture2DSampled %386 = OpSampledImage %383 %385 
                                       f32_2 %387 = OpLoad %336 
                                       f32_4 %388 = OpImageSampleImplicitLod %386 %387 
                                                      OpStore %37 %388 
                                       f32_4 %389 = OpLoad %37 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_3 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %37 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %37 %398 
                                       f32_4 %399 = OpLoad %37 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %37 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                         f32 %403 = OpDot %400 %402 
                                Private f32* %404 = OpAccessChain %336 %29 
                                                      OpStore %404 %403 
                                Private f32* %405 = OpAccessChain %336 %29 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpExtInst %1 32 %406 
                                Private f32* %408 = OpAccessChain %336 %29 
                                                      OpStore %408 %407 
                                       f32_2 %409 = OpLoad %336 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 0 0 
                                       f32_4 %411 = OpLoad %37 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_3 %413 = OpFMul %410 %412 
                                       f32_4 %414 = OpLoad %37 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 6 3 
                                                      OpStore %37 %415 
                                       f32_3 %416 = OpLoad %82 
                                       f32_3 %417 = OpFNegate %416 
                                       f32_4 %418 = OpLoad %37 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                         f32 %420 = OpDot %417 %419 
                                Private f32* %421 = OpAccessChain %336 %29 
                                                      OpStore %421 %420 
                                       f32_4 %422 = OpLoad %75 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 3 
                              Uniform f32_3* %425 = OpAccessChain %16 %91 
                                       f32_3 %426 = OpLoad %425 
                                       f32_3 %427 = OpFNegate %426 
                                       f32_3 %428 = OpFAdd %423 %427 
                                       f32_4 %429 = OpLoad %75 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                      OpStore %75 %430 
                                       f32_4 %431 = OpLoad %75 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_4 %433 = OpLoad %75 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                         f32 %435 = OpDot %432 %434 
                                                      OpStore %48 %435 
                                         f32 %436 = OpLoad %48 
                                         f32 %437 = OpExtInst %1 32 %436 
                                                      OpStore %48 %437 
                                       f32_4 %438 = OpLoad %75 
                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
                                       f32_3 %440 = OpFNegate %439 
                                         f32 %441 = OpLoad %48 
                                       f32_3 %442 = OpCompositeConstruct %441 %441 %441 
                                       f32_3 %443 = OpFMul %440 %442 
                                       f32_3 %444 = OpLoad %82 
                                       f32_3 %445 = OpFNegate %444 
                                       f32_3 %446 = OpFAdd %443 %445 
                                       f32_4 %447 = OpLoad %75 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %75 %448 
                                       f32_4 %449 = OpLoad %75 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_4 %451 = OpLoad %75 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                         f32 %453 = OpDot %450 %452 
                                                      OpStore %48 %453 
                                         f32 %454 = OpLoad %48 
                                         f32 %455 = OpExtInst %1 32 %454 
                                                      OpStore %48 %455 
                                         f32 %456 = OpLoad %48 
                                       f32_3 %457 = OpCompositeConstruct %456 %456 %456 
                                       f32_4 %458 = OpLoad %75 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %75 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                                      OpStore %75 %462 
                                       f32_4 %463 = OpLoad %75 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
                                       f32_4 %465 = OpLoad %37 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                                         f32 %467 = OpDot %464 %466 
                                Private f32* %468 = OpAccessChain %336 %68 
                                                      OpStore %468 %467 
                                       f32_2 %469 = OpLoad %336 
                                       f32_2 %471 = OpExtInst %1 40 %469 %470 
                                                      OpStore %336 %471 
                                Private f32* %472 = OpAccessChain %37 %146 
                                         f32 %473 = OpLoad %472 
                                         f32 %475 = OpFMul %473 %474 
                                Private f32* %476 = OpAccessChain %37 %29 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %336 %68 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpExtInst %1 30 %478 
                                                      OpStore %48 %479 
                                         f32 %480 = OpLoad %48 
                                Private f32* %481 = OpAccessChain %37 %29 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFMul %480 %482 
                                                      OpStore %48 %483 
                                         f32 %484 = OpLoad %48 
                                         f32 %485 = OpExtInst %1 29 %484 
                                                      OpStore %48 %485 
                                Private f32* %486 = OpAccessChain %156 %29 
                                         f32 %487 = OpLoad %486 
                                Private f32* %488 = OpAccessChain %37 %29 
                                                      OpStore %488 %487 
                                Private f32* %489 = OpAccessChain %37 %29 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpExtInst %1 43 %490 %199 %72 
                                Private f32* %492 = OpAccessChain %37 %29 
                                                      OpStore %492 %491 
                                         f32 %493 = OpLoad %48 
                                Private f32* %494 = OpAccessChain %37 %29 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                                      OpStore %48 %496 
                                Private f32* %497 = OpAccessChain %156 %29 
                                         f32 %498 = OpLoad %497 
                                Private f32* %499 = OpAccessChain %336 %29 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %498 %500 
                                Private f32* %502 = OpAccessChain %156 %29 
                                                      OpStore %502 %501 
                                       f32_3 %503 = OpLoad %156 
                                       f32_3 %504 = OpVectorShuffle %503 %503 0 0 0 
                              Uniform f32_4* %506 = OpAccessChain %16 %505 
                                       f32_4 %507 = OpLoad %506 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_3 %509 = OpFMul %504 %508 
                                       f32_4 %510 = OpLoad %37 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 6 3 
                                                      OpStore %37 %511 
                              Uniform f32_4* %512 = OpAccessChain %16 %505 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                         f32 %519 = OpDot %514 %518 
                                Private f32* %520 = OpAccessChain %156 %29 
                                                      OpStore %520 %519 
                                Private f32* %521 = OpAccessChain %156 %29 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %48 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %37 %146 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %29 
                                         f32 %527 = OpLoad %526 
                                Uniform f32* %529 = OpAccessChain %16 %528 %19 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %527 %530 
                                Uniform f32* %532 = OpAccessChain %16 %528 %146 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpFAdd %531 %533 
                                Private f32* %535 = OpAccessChain %9 %29 
                                                      OpStore %535 %534 
                                Private f32* %536 = OpAccessChain %9 %29 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpFNegate %537 
                                         f32 %539 = OpFAdd %538 %72 
                                Private f32* %540 = OpAccessChain %9 %29 
                                                      OpStore %540 %539 
                                Private f32* %541 = OpAccessChain %9 %29 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpExtInst %1 43 %542 %199 %72 
                                Private f32* %544 = OpAccessChain %9 %29 
                                                      OpStore %544 %543 
                                       f32_3 %547 = OpLoad %9 
                                       f32_4 %548 = OpVectorShuffle %547 %547 0 0 0 0 
                                       f32_4 %549 = OpLoad %37 
                                       f32_4 %550 = OpFMul %548 %549 
                                                      OpStore %546 %550 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(5) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
float u_xlat11;
float u_xlat15;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1.x = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat6.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat6.xyz = u_xlat6.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat1.x = (-u_xlat6.z) * u_xlat1.x + u_xlat6.x;
    u_xlat1.x = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat2.z;
    u_xlat6.x = u_xlat1.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat1.x = u_xlat1.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat11 = max(abs(u_xlat3.y), abs(u_xlat3.x));
    u_xlat11 = max(abs(u_xlat3.z), u_xlat11);
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.z);
    u_xlat11 = max(u_xlat11, 9.99999975e-06);
    u_xlat11 = u_xlat11 * _LightProjectionParams.w;
    u_xlat11 = _LightProjectionParams.y / u_xlat11;
    u_xlat11 = u_xlat11 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat3.xyz,u_xlat11);
    u_xlat11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat16 = (-_LightShadowData.x) + 1.0;
    u_xlat11 = u_xlat11 * u_xlat16 + _LightShadowData.x;
    u_xlat16 = (-u_xlat11) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat16 + u_xlat11;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16 = u_xlat11 * _LightPos.w;
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat4.w;
    u_xlat11 = u_xlat6.x;
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16) + (-u_xlat3.xyz);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat15 = u_xlat0.w * 128.0;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16);
    u_xlat16 = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat16, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat15;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat11 * u_xlat0.x;
    u_xlat5 = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat2.w = u_xlat5 * u_xlat0.x;
    SV_Target0 = u_xlat1.xxxx * u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 513
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %86 %507 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %22 DescriptorSet 22 
                                                      OpDecorate %22 Binding 22 
                                                      OpDecorate %26 DescriptorSet 26 
                                                      OpDecorate %26 Binding 26 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpDecorate %39 ArrayStride 39 
                                                      OpMemberDecorate %40 0 Offset 40 
                                                      OpMemberDecorate %40 1 Offset 40 
                                                      OpMemberDecorate %40 2 Offset 40 
                                                      OpMemberDecorate %40 3 Offset 40 
                                                      OpMemberDecorate %40 4 Offset 40 
                                                      OpMemberDecorate %40 5 Offset 40 
                                                      OpMemberDecorate %40 6 Offset 40 
                                                      OpMemberDecorate %40 7 Offset 40 
                                                      OpMemberDecorate %40 8 Offset 40 
                                                      OpMemberDecorate %40 9 Offset 40 
                                                      OpMemberDecorate %40 10 Offset 40 
                                                      OpMemberDecorate %40 11 Offset 40 
                                                      OpDecorate %40 Block 
                                                      OpDecorate %42 DescriptorSet 42 
                                                      OpDecorate %42 Binding 42 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate vs_TEXCOORD1 Location 86 
                                                      OpDecorate %266 DescriptorSet 266 
                                                      OpDecorate %266 Binding 266 
                                                      OpDecorate %268 DescriptorSet 268 
                                                      OpDecorate %268 Binding 268 
                                                      OpDecorate %310 DescriptorSet 310 
                                                      OpDecorate %310 Binding 310 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %362 DescriptorSet 362 
                                                      OpDecorate %362 Binding 362 
                                                      OpDecorate %364 DescriptorSet 364 
                                                      OpDecorate %364 Binding 364 
                                                      OpDecorate %507 Location 507 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %18 = OpTypePointer Private %6 
                                 Private f32* %19 = OpVariable Private 
                                              %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %21 = OpTypePointer UniformConstant %20 
         UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                              %24 = OpTypeSampler 
                                              %25 = OpTypePointer UniformConstant %24 
                     UniformConstant sampler* %26 = OpVariable UniformConstant 
                                              %28 = OpTypeSampledImage %20 
                                              %32 = OpTypeInt 32 0 
                                          u32 %33 = OpConstant 0 
                                              %36 = OpTypeVector %6 3 
                                          u32 %37 = OpConstant 4 
                                              %38 = OpTypeArray %10 %37 
                                              %39 = OpTypeArray %10 %37 
                                              %40 = OpTypeStruct %36 %10 %10 %38 %10 %10 %10 %10 %10 %10 %39 %10 
                                              %41 = OpTypePointer Uniform %40 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %42 = OpVariable Uniform 
                                              %43 = OpTypeInt 32 1 
                                          i32 %44 = OpConstant 11 
                                              %45 = OpTypePointer Uniform %10 
                                              %54 = OpTypePointer Private %10 
                               Private f32_4* %55 = OpVariable Private 
         UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                          i32 %63 = OpConstant 2 
                                              %64 = OpTypePointer Uniform %6 
                                          u32 %69 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %79 = OpTypePointer Private %36 
                               Private f32_3* %80 = OpVariable Private 
                                          i32 %81 = OpConstant 1 
                                          u32 %82 = OpConstant 2 
                                              %85 = OpTypePointer Input %36 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %87 = OpTypePointer Input %6 
                               Private f32_4* %96 = OpVariable Private 
                              Private f32_3* %103 = OpVariable Private 
                                         i32 %106 = OpConstant 3 
                                         i32 %111 = OpConstant 0 
                                         i32 %143 = OpConstant 6 
                                         u32 %167 = OpConstant 3 
                                         i32 %179 = OpConstant 5 
                                         f32 %189 = OpConstant 3.674022E-40 
                                         i32 %194 = OpConstant 9 
                                         i32 %213 = OpConstant 7 
                                         i32 %232 = OpConstant 4 
                                         f32 %238 = OpConstant 3.674022E-40 
                                             %256 = OpTypePointer Function %10 
                                             %264 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %265 = OpTypePointer UniformConstant %264 
      UniformConstant read_only TextureCube* %266 = OpVariable UniformConstant 
                    UniformConstant sampler* %268 = OpVariable UniformConstant 
                                             %270 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %271 = OpTypeSampledImage %270 
                                Private f32* %276 = OpVariable Private 
        UniformConstant read_only Texture2D* %310 = OpVariable UniformConstant 
                    UniformConstant sampler* %312 = OpVariable UniformConstant 
                              Private f32_3* %324 = OpVariable Private 
                                         i32 %327 = OpConstant 10 
                                             %350 = OpTypePointer Uniform %36 
      UniformConstant read_only TextureCube* %362 = OpVariable UniformConstant 
                    UniformConstant sampler* %364 = OpVariable UniformConstant 
                                             %366 = OpTypeSampledImage %264 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_3 %416 = OpConstantComposite %415 %415 %415 
                                         f32 %418 = OpConstant 3.674022E-40 
                                       f32_3 %419 = OpConstantComposite %418 %418 %418 
                                         f32 %425 = OpConstant 3.674022E-40 
                                Private f32* %427 = OpVariable Private 
                                         i32 %465 = OpConstant 8 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %498 = OpConstant 3.674022E-40 
                                       f32_3 %499 = OpConstantComposite %496 %497 %498 
                                             %506 = OpTypePointer Output %10 
                               Output f32_4* %507 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %257 = OpVariable Function 
                                        f32_4 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                        f32_4 %15 = OpLoad vs_TEXCOORD0 
                                        f32_2 %16 = OpVectorShuffle %15 %15 3 3 
                                        f32_2 %17 = OpFDiv %14 %16 
                                                      OpStore %9 %17 
                          read_only Texture2D %23 = OpLoad %22 
                                      sampler %27 = OpLoad %26 
                   read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                                        f32_2 %30 = OpLoad %9 
                                        f32_4 %31 = OpImageSampleImplicitLod %29 %30 
                                          f32 %34 = OpCompositeExtract %31 0 
                                                      OpStore %19 %34 
                                        f32_2 %35 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %42 %44 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                        f32_2 %49 = OpFMul %35 %48 
                               Uniform f32_4* %50 = OpAccessChain %42 %44 
                                        f32_4 %51 = OpLoad %50 
                                        f32_2 %52 = OpVectorShuffle %51 %51 2 3 
                                        f32_2 %53 = OpFAdd %49 %52 
                                                      OpStore %9 %53 
                          read_only Texture2D %57 = OpLoad %56 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                                        f32_2 %61 = OpLoad %9 
                                        f32_4 %62 = OpImageSampleImplicitLod %60 %61 
                                                      OpStore %55 %62 
                                 Uniform f32* %65 = OpAccessChain %42 %63 %33 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %19 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %42 %63 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                 Private f32* %73 = OpAccessChain %9 %33 
                                                      OpStore %73 %72 
                                 Private f32* %75 = OpAccessChain %9 %33 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpFDiv %74 %76 
                                 Private f32* %78 = OpAccessChain %9 %33 
                                                      OpStore %78 %77 
                                 Uniform f32* %83 = OpAccessChain %42 %81 %82 
                                          f32 %84 = OpLoad %83 
                                   Input f32* %88 = OpAccessChain vs_TEXCOORD1 %82 
                                          f32 %89 = OpLoad %88 
                                          f32 %90 = OpFDiv %84 %89 
                                 Private f32* %91 = OpAccessChain %80 %33 
                                                      OpStore %91 %90 
                                        f32_3 %92 = OpLoad %80 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFMul %93 %94 
                                                      OpStore %80 %95 
                                        f32_2 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                        f32_3 %99 = OpLoad %80 
                                       f32_3 %100 = OpFMul %98 %99 
                                       f32_4 %101 = OpLoad %96 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 6 3 
                                                      OpStore %96 %102 
                                       f32_4 %104 = OpLoad %96 
                                       f32_3 %105 = OpVectorShuffle %104 %104 1 1 1 
                              Uniform f32_4* %107 = OpAccessChain %42 %106 %81 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                       f32_3 %110 = OpFMul %105 %109 
                                                      OpStore %103 %110 
                              Uniform f32_4* %112 = OpAccessChain %42 %106 %111 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                                       f32_4 %115 = OpLoad %96 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 0 0 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_3 %118 = OpLoad %103 
                                       f32_3 %119 = OpFAdd %117 %118 
                                       f32_4 %120 = OpLoad %96 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %96 %121 
                              Uniform f32_4* %122 = OpAccessChain %42 %106 %63 
                                       f32_4 %123 = OpLoad %122 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                                       f32_4 %125 = OpLoad %96 
                                       f32_3 %126 = OpVectorShuffle %125 %125 2 2 2 
                                       f32_3 %127 = OpFMul %124 %126 
                                       f32_4 %128 = OpLoad %96 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 3 
                                       f32_3 %130 = OpFAdd %127 %129 
                                       f32_4 %131 = OpLoad %96 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 6 
                                                      OpStore %96 %132 
                                       f32_4 %133 = OpLoad %96 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 3 
                              Uniform f32_4* %135 = OpAccessChain %42 %106 %106 
                                       f32_4 %136 = OpLoad %135 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %134 %137 
                                       f32_4 %139 = OpLoad %96 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 6 
                                                      OpStore %96 %140 
                                       f32_4 %141 = OpLoad %96 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 3 
                              Uniform f32_4* %144 = OpAccessChain %42 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                       f32_3 %147 = OpFNegate %146 
                                       f32_3 %148 = OpFAdd %142 %147 
                                                      OpStore %103 %148 
                                       f32_3 %149 = OpLoad %103 
                                       f32_3 %150 = OpLoad %103 
                                         f32 %151 = OpDot %149 %150 
                                Private f32* %152 = OpAccessChain %80 %33 
                                                      OpStore %152 %151 
                                Private f32* %153 = OpAccessChain %80 %33 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpExtInst %1 31 %154 
                                Private f32* %156 = OpAccessChain %80 %33 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %80 %82 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFNegate %158 
                                Private f32* %160 = OpAccessChain %9 %33 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Private f32* %163 = OpAccessChain %80 %33 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %9 %33 
                                                      OpStore %166 %165 
                                Uniform f32* %168 = OpAccessChain %42 %143 %167 
                                         f32 %169 = OpLoad %168 
                                Private f32* %170 = OpAccessChain %9 %33 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %169 %171 
                                Private f32* %173 = OpAccessChain %96 %82 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFAdd %172 %174 
                                Private f32* %176 = OpAccessChain %9 %33 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %9 %33 
                                         f32 %178 = OpLoad %177 
                                Uniform f32* %180 = OpAccessChain %42 %179 %82 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFMul %178 %181 
                                Uniform f32* %183 = OpAccessChain %42 %179 %167 
                                         f32 %184 = OpLoad %183 
                                         f32 %185 = OpFAdd %182 %184 
                                Private f32* %186 = OpAccessChain %80 %33 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %80 %33 
                                         f32 %188 = OpLoad %187 
                                         f32 %190 = OpExtInst %1 43 %188 %189 %74 
                                Private f32* %191 = OpAccessChain %80 %33 
                                                      OpStore %191 %190 
                                Private f32* %192 = OpAccessChain %9 %33 
                                         f32 %193 = OpLoad %192 
                                Uniform f32* %195 = OpAccessChain %42 %194 %82 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %193 %196 
                                Uniform f32* %198 = OpAccessChain %42 %194 %167 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFAdd %197 %199 
                                Private f32* %201 = OpAccessChain %9 %33 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %9 %33 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %74 
                                Private f32* %206 = OpAccessChain %9 %33 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %9 %33 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpExtInst %1 43 %208 %189 %74 
                                Private f32* %210 = OpAccessChain %9 %33 
                                                      OpStore %210 %209 
                                       f32_4 %211 = OpLoad %96 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 3 
                              Uniform f32_4* %214 = OpAccessChain %42 %213 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_3 %218 = OpFAdd %212 %217 
                                                      OpStore %103 %218 
                                Private f32* %219 = OpAccessChain %103 %69 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %103 %33 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 4 %223 
                                         f32 %225 = OpExtInst %1 40 %221 %224 
                                                      OpStore %19 %225 
                                Private f32* %226 = OpAccessChain %103 %82 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpExtInst %1 4 %227 
                                         f32 %229 = OpLoad %19 
                                         f32 %230 = OpExtInst %1 40 %228 %229 
                                                      OpStore %19 %230 
                                         f32 %231 = OpLoad %19 
                                Uniform f32* %233 = OpAccessChain %42 %232 %82 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %231 %235 
                                                      OpStore %19 %236 
                                         f32 %237 = OpLoad %19 
                                         f32 %239 = OpExtInst %1 40 %237 %238 
                                                      OpStore %19 %239 
                                         f32 %240 = OpLoad %19 
                                Uniform f32* %241 = OpAccessChain %42 %232 %167 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                                      OpStore %19 %243 
                                Uniform f32* %244 = OpAccessChain %42 %232 %69 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpLoad %19 
                                         f32 %247 = OpFDiv %245 %246 
                                                      OpStore %19 %247 
                                         f32 %248 = OpLoad %19 
                                Uniform f32* %249 = OpAccessChain %42 %232 %33 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFNegate %250 
                                         f32 %252 = OpFAdd %248 %251 
                                                      OpStore %19 %252 
                                         f32 %253 = OpLoad %19 
                                         f32 %254 = OpFNegate %253 
                                         f32 %255 = OpFAdd %254 %74 
                                                      OpStore %19 %255 
                                       f32_3 %258 = OpLoad %103 
                                         f32 %259 = OpLoad %19 
                                         f32 %260 = OpCompositeExtract %258 0 
                                         f32 %261 = OpCompositeExtract %258 1 
                                         f32 %262 = OpCompositeExtract %258 2 
                                       f32_4 %263 = OpCompositeConstruct %260 %261 %262 %259 
                                                      OpStore %257 %263 
                       read_only TextureCube %267 = OpLoad %266 
                                     sampler %269 = OpLoad %268 
                read_only TextureCubeSampled %272 = OpSampledImage %267 %269 
                                       f32_4 %273 = OpLoad %257 
                                         f32 %274 = OpCompositeExtract %273 3 
                                         f32 %275 = OpImageSampleDrefImplicitLod %272 %273 %274 
                                                      OpStore %19 %275 
                                Uniform f32* %277 = OpAccessChain %42 %179 %33 
                                         f32 %278 = OpLoad %277 
                                         f32 %279 = OpFNegate %278 
                                         f32 %280 = OpFAdd %279 %74 
                                                      OpStore %276 %280 
                                         f32 %281 = OpLoad %19 
                                         f32 %282 = OpLoad %276 
                                         f32 %283 = OpFMul %281 %282 
                                Uniform f32* %284 = OpAccessChain %42 %179 %33 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFAdd %283 %285 
                                                      OpStore %19 %286 
                                         f32 %287 = OpLoad %19 
                                         f32 %288 = OpFNegate %287 
                                         f32 %289 = OpFAdd %288 %74 
                                                      OpStore %276 %289 
                                Private f32* %290 = OpAccessChain %80 %33 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpLoad %276 
                                         f32 %293 = OpFMul %291 %292 
                                         f32 %294 = OpLoad %19 
                                         f32 %295 = OpFAdd %293 %294 
                                Private f32* %296 = OpAccessChain %80 %33 
                                                      OpStore %296 %295 
                                       f32_3 %297 = OpLoad %103 
                                       f32_3 %298 = OpLoad %103 
                                         f32 %299 = OpDot %297 %298 
                                                      OpStore %19 %299 
                                         f32 %300 = OpLoad %19 
                                Uniform f32* %301 = OpAccessChain %42 %213 %167 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFMul %300 %302 
                                                      OpStore %276 %303 
                                         f32 %304 = OpLoad %19 
                                         f32 %305 = OpExtInst %1 32 %304 
                                                      OpStore %19 %305 
                                         f32 %306 = OpLoad %19 
                                       f32_3 %307 = OpCompositeConstruct %306 %306 %306 
                                       f32_3 %308 = OpLoad %103 
                                       f32_3 %309 = OpFMul %307 %308 
                                                      OpStore %103 %309 
                         read_only Texture2D %311 = OpLoad %310 
                                     sampler %313 = OpLoad %312 
                  read_only Texture2DSampled %314 = OpSampledImage %311 %313 
                                         f32 %315 = OpLoad %276 
                                       f32_2 %316 = OpCompositeConstruct %315 %315 
                                       f32_4 %317 = OpImageSampleImplicitLod %314 %316 
                                         f32 %318 = OpCompositeExtract %317 0 
                                                      OpStore %19 %318 
                                Private f32* %319 = OpAccessChain %80 %33 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpLoad %19 
                                         f32 %322 = OpFMul %320 %321 
                                Private f32* %323 = OpAccessChain %80 %33 
                                                      OpStore %323 %322 
                                       f32_4 %325 = OpLoad %96 
                                       f32_3 %326 = OpVectorShuffle %325 %325 1 1 1 
                              Uniform f32_4* %328 = OpAccessChain %42 %327 %81 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFMul %326 %330 
                                                      OpStore %324 %331 
                              Uniform f32_4* %332 = OpAccessChain %42 %327 %111 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %96 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 0 0 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_3 %338 = OpLoad %324 
                                       f32_3 %339 = OpFAdd %337 %338 
                                                      OpStore %324 %339 
                              Uniform f32_4* %340 = OpAccessChain %42 %327 %63 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_4 %343 = OpLoad %96 
                                       f32_3 %344 = OpVectorShuffle %343 %343 3 3 3 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_3 %346 = OpLoad %324 
                                       f32_3 %347 = OpFAdd %345 %346 
                                                      OpStore %324 %347 
                                       f32_4 %348 = OpLoad %96 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 3 
                              Uniform f32_3* %351 = OpAccessChain %42 %111 
                                       f32_3 %352 = OpLoad %351 
                                       f32_3 %353 = OpFNegate %352 
                                       f32_3 %354 = OpFAdd %349 %353 
                                       f32_4 %355 = OpLoad %96 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %96 %356 
                                       f32_3 %357 = OpLoad %324 
                              Uniform f32_4* %358 = OpAccessChain %42 %327 %106 
                                       f32_4 %359 = OpLoad %358 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %357 %360 
                                                      OpStore %324 %361 
                       read_only TextureCube %363 = OpLoad %362 
                                     sampler %365 = OpLoad %364 
                read_only TextureCubeSampled %367 = OpSampledImage %363 %365 
                                       f32_3 %368 = OpLoad %324 
                                       f32_4 %370 = OpImageSampleImplicitLod %367 %368 Bias %10 
                                         f32 %371 = OpCompositeExtract %370 3 
                                                      OpStore %19 %371 
                                         f32 %372 = OpLoad %19 
                                Private f32* %373 = OpAccessChain %80 %33 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                Private f32* %376 = OpAccessChain %80 %33 
                                                      OpStore %376 %375 
                                Private f32* %377 = OpAccessChain %80 %33 
                                         f32 %378 = OpLoad %377 
                                                      OpStore %19 %378 
                                         f32 %379 = OpLoad %19 
                                         f32 %380 = OpExtInst %1 43 %379 %189 %74 
                                                      OpStore %19 %380 
                                       f32_4 %381 = OpLoad %96 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %96 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                         f32 %385 = OpDot %382 %384 
                                                      OpStore %276 %385 
                                         f32 %386 = OpLoad %276 
                                         f32 %387 = OpExtInst %1 32 %386 
                                                      OpStore %276 %387 
                                       f32_4 %388 = OpLoad %96 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFNegate %389 
                                         f32 %391 = OpLoad %276 
                                       f32_3 %392 = OpCompositeConstruct %391 %391 %391 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_3 %394 = OpLoad %103 
                                       f32_3 %395 = OpFNegate %394 
                                       f32_3 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %96 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %96 %398 
                                       f32_4 %399 = OpLoad %96 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_4 %401 = OpLoad %96 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                         f32 %403 = OpDot %400 %402 
                                                      OpStore %276 %403 
                                         f32 %404 = OpLoad %276 
                                         f32 %405 = OpExtInst %1 32 %404 
                                                      OpStore %276 %405 
                                         f32 %406 = OpLoad %276 
                                       f32_3 %407 = OpCompositeConstruct %406 %406 %406 
                                       f32_4 %408 = OpLoad %96 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_4 %411 = OpLoad %96 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                                      OpStore %96 %412 
                                       f32_4 %413 = OpLoad %55 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %55 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %55 %422 
                                Private f32* %423 = OpAccessChain %55 %167 
                                         f32 %424 = OpLoad %423 
                                         f32 %426 = OpFMul %424 %425 
                                                      OpStore %276 %426 
                                       f32_4 %428 = OpLoad %55 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_4 %430 = OpLoad %55 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                                         f32 %432 = OpDot %429 %431 
                                                      OpStore %427 %432 
                                         f32 %433 = OpLoad %427 
                                         f32 %434 = OpExtInst %1 32 %433 
                                                      OpStore %427 %434 
                                         f32 %435 = OpLoad %427 
                                       f32_3 %436 = OpCompositeConstruct %435 %435 %435 
                                       f32_4 %437 = OpLoad %55 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_3 %439 = OpFMul %436 %438 
                                       f32_4 %440 = OpLoad %55 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 6 3 
                                                      OpStore %55 %441 
                                       f32_4 %442 = OpLoad %96 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_4 %444 = OpLoad %55 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                         f32 %446 = OpDot %443 %445 
                                                      OpStore %427 %446 
                                       f32_3 %447 = OpLoad %103 
                                       f32_3 %448 = OpFNegate %447 
                                       f32_4 %449 = OpLoad %55 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                         f32 %451 = OpDot %448 %450 
                                Private f32* %452 = OpAccessChain %55 %33 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %55 %33 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpExtInst %1 40 %454 %189 
                                Private f32* %456 = OpAccessChain %55 %33 
                                                      OpStore %456 %455 
                                Private f32* %457 = OpAccessChain %80 %33 
                                         f32 %458 = OpLoad %457 
                                Private f32* %459 = OpAccessChain %55 %33 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpFMul %458 %460 
                                Private f32* %462 = OpAccessChain %80 %33 
                                                      OpStore %462 %461 
                                       f32_3 %463 = OpLoad %80 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 0 0 
                              Uniform f32_4* %466 = OpAccessChain %42 %465 
                                       f32_4 %467 = OpLoad %466 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFMul %464 %468 
                                       f32_4 %470 = OpLoad %96 
                                       f32_4 %471 = OpVectorShuffle %470 %469 4 5 6 3 
                                                      OpStore %96 %471 
                                         f32 %472 = OpLoad %427 
                                         f32 %473 = OpExtInst %1 40 %472 %189 
                                Private f32* %474 = OpAccessChain %80 %33 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %80 %33 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpExtInst %1 30 %476 
                                Private f32* %478 = OpAccessChain %80 %33 
                                                      OpStore %478 %477 
                                Private f32* %479 = OpAccessChain %80 %33 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpLoad %276 
                                         f32 %482 = OpFMul %480 %481 
                                Private f32* %483 = OpAccessChain %80 %33 
                                                      OpStore %483 %482 
                                Private f32* %484 = OpAccessChain %80 %33 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpExtInst %1 29 %485 
                                Private f32* %487 = OpAccessChain %80 %33 
                                                      OpStore %487 %486 
                                         f32 %488 = OpLoad %19 
                                Private f32* %489 = OpAccessChain %80 %33 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %488 %490 
                                Private f32* %492 = OpAccessChain %80 %33 
                                                      OpStore %492 %491 
                              Uniform f32_4* %493 = OpAccessChain %42 %465 
                                       f32_4 %494 = OpLoad %493 
                                       f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                         f32 %500 = OpDot %495 %499 
                                                      OpStore %19 %500 
                                         f32 %501 = OpLoad %19 
                                Private f32* %502 = OpAccessChain %80 %33 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpFMul %501 %503 
                                Private f32* %505 = OpAccessChain %96 %167 
                                                      OpStore %505 %504 
                                       f32_2 %508 = OpLoad %9 
                                       f32_4 %509 = OpVectorShuffle %508 %508 0 0 0 0 
                                       f32_4 %510 = OpLoad %96 
                                       f32_4 %511 = OpFMul %509 %510 
                                                      OpStore %507 %511 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraNormalsTexture;
UNITY_LOCATION(4) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(5) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = inversesqrt(u_xlat13);
    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat19);
    u_xlat13 = u_xlat13 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat13 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlatb19 = u_xlat13<0.99000001;
    if(u_xlatb19){
        u_xlat19 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat19 = max(abs(u_xlat6.z), u_xlat19);
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.z);
        u_xlat19 = max(u_xlat19, 9.99999975e-06);
        u_xlat19 = u_xlat19 * _LightProjectionParams.w;
        u_xlat19 = _LightProjectionParams.y / u_xlat19;
        u_xlat19 = u_xlat19 + (-_LightProjectionParams.x);
        u_xlat10.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat10.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat10.xyz,u_xlat19);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat19);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat6.x = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat12.x = (-_LightShadowData.x) + 1.0;
        u_xlat6.x = u_xlat6.x * u_xlat12.x + _LightShadowData.x;
    } else {
        u_xlat6.x = 1.0;
    }
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat13 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat6.x = u_xlat6.x * u_xlat4.w;
    u_xlat12.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat1 = texture(_CameraNormalsTexture, u_xlat12.xy);
    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat18) + (-u_xlat3.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat12.y = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12.xy = max(u_xlat12.xy, vec2(0.0, 0.0));
    u_xlat1.x = u_xlat1.w * 128.0;
    u_xlat18 = log2(u_xlat12.y);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat1.x = u_xlat6.x;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat1.xyz = u_xlat6.xxx * _LightColor.xyz;
    u_xlat6.x = dot(_LightColor.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat1.w = u_xlat6.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 610
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %40 %604 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpMemberDecorate %15 10 Offset 15 
                                                      OpMemberDecorate %15 11 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %181 DescriptorSet 181 
                                                      OpDecorate %181 Binding 181 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %267 DescriptorSet 267 
                                                      OpDecorate %267 Binding 267 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %413 DescriptorSet 413 
                                                      OpDecorate %413 Binding 413 
                                                      OpDecorate %440 DescriptorSet 440 
                                                      OpDecorate %440 Binding 440 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                                      OpDecorate %604 Location 604 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %10 %14 %10 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypePointer Private %10 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %10 
                                          i32 %92 = OpConstant 0 
                                         i32 %124 = OpConstant 6 
                                         u32 %147 = OpConstant 3 
                              Private f32_3* %157 = OpVariable Private 
                                         i32 %160 = OpConstant 7 
                                Private f32* %166 = OpVariable Private 
                                Private f32* %170 = OpVariable Private 
        UniformConstant read_only Texture2D* %181 = OpVariable UniformConstant 
                    UniformConstant sampler* %183 = OpVariable UniformConstant 
                                         i32 %192 = OpConstant 5 
                                         f32 %200 = OpConstant 3.674022E-40 
                                             %202 = OpTypeBool 
                                             %203 = OpTypePointer Private %202 
                               Private bool* %204 = OpVariable Private 
                                         f32 %206 = OpConstant 3.674022E-40 
                                Private f32* %211 = OpVariable Private 
                                         i32 %225 = OpConstant 4 
                                         f32 %231 = OpConstant 3.674022E-40 
                              Private f32_4* %249 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
                                       f32_3 %252 = OpConstantComposite %251 %251 %251 
                                             %256 = OpTypePointer Function %10 
                                             %265 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %266 = OpTypePointer UniformConstant %265 
      UniformConstant read_only TextureCube* %267 = OpVariable UniformConstant 
                    UniformConstant sampler* %269 = OpVariable UniformConstant 
                                             %271 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %272 = OpTypeSampledImage %271 
                              Private f32_3* %278 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
                                       f32_3 %281 = OpConstantComposite %280 %280 %251 
                                       f32_3 %298 = OpConstantComposite %280 %251 %280 
                                       f32_3 %315 = OpConstantComposite %251 %280 %280 
                                         f32 %332 = OpConstant 3.674022E-40 
                                       f32_4 %333 = OpConstantComposite %332 %332 %332 %332 
                                             %336 = OpTypePointer Private %41 
                              Private f32_2* %337 = OpVariable Private 
                                         i32 %374 = OpConstant 10 
      UniformConstant read_only TextureCube* %411 = OpVariable UniformConstant 
                    UniformConstant sampler* %413 = OpVariable UniformConstant 
                                             %415 = OpTypeSampledImage %265 
                                         f32 %419 = OpConstant 3.674022E-40 
                                         i32 %431 = OpConstant 11 
        UniformConstant read_only Texture2D* %440 = OpVariable UniformConstant 
                    UniformConstant sampler* %442 = OpVariable UniformConstant 
                                         f32 %449 = OpConstant 3.674022E-40 
                                       f32_3 %450 = OpConstantComposite %449 %449 %449 
                                         f32 %452 = OpConstant 3.674022E-40 
                                       f32_3 %453 = OpConstantComposite %452 %452 %452 
                                             %482 = OpTypePointer Uniform %7 
                                       f32_2 %528 = OpConstantComposite %200 %200 
                                         f32 %532 = OpConstant 3.674022E-40 
                                         i32 %563 = OpConstant 8 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %574 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                       f32_3 %576 = OpConstantComposite %573 %574 %575 
                                         i32 %586 = OpConstant 9 
                                             %603 = OpTypePointer Output %10 
                               Output f32_4* %604 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %257 = OpVariable Function 
                             Function f32_4* %283 = OpVariable Function 
                             Function f32_4* %300 = OpVariable Function 
                             Function f32_4* %317 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %17 %64 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %17 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_3 %79 = OpLoad %9 
                                        f32_3 %80 = OpFMul %78 %79 
                                        f32_4 %81 = OpLoad %76 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %76 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %76 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %76 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %76 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %64 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %76 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %76 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %76 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %76 %113 
                                       f32_4 %114 = OpLoad %76 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Uniform f32_4* %125 = OpAccessChain %17 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %123 %128 
                                                      OpStore %83 %129 
                                       f32_3 %130 = OpLoad %83 
                                       f32_3 %131 = OpLoad %83 
                                         f32 %132 = OpDot %130 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %30 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %9 %20 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpLoad %49 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFAdd %142 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                                      OpStore %146 %145 
                                Uniform f32* %148 = OpAccessChain %17 %124 %147 
                                         f32 %149 = OpLoad %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %149 %151 
                                Private f32* %153 = OpAccessChain %76 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFAdd %152 %154 
                                Private f32* %156 = OpAccessChain %9 %30 
                                                      OpStore %156 %155 
                                       f32_4 %158 = OpLoad %76 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 3 
                              Uniform f32_4* %161 = OpAccessChain %17 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFNegate %163 
                                       f32_3 %165 = OpFAdd %159 %164 
                                                      OpStore %157 %165 
                                       f32_3 %167 = OpLoad %157 
                                       f32_3 %168 = OpLoad %157 
                                         f32 %169 = OpDot %167 %168 
                                                      OpStore %166 %169 
                                         f32 %171 = OpLoad %166 
                                         f32 %172 = OpExtInst %1 32 %171 
                                                      OpStore %170 %172 
                                       f32_3 %173 = OpLoad %157 
                                         f32 %174 = OpLoad %170 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_3 %176 = OpFMul %173 %175 
                                                      OpStore %83 %176 
                                         f32 %177 = OpLoad %166 
                                Uniform f32* %178 = OpAccessChain %17 %160 %147 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                                      OpStore %166 %180 
                         read_only Texture2D %182 = OpLoad %181 
                                     sampler %184 = OpLoad %183 
                  read_only Texture2DSampled %185 = OpSampledImage %182 %184 
                                         f32 %186 = OpLoad %166 
                                       f32_2 %187 = OpCompositeConstruct %186 %186 
                                       f32_4 %188 = OpImageSampleImplicitLod %185 %187 
                                         f32 %189 = OpCompositeExtract %188 0 
                                                      OpStore %166 %189 
                                Private f32* %190 = OpAccessChain %9 %30 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %17 %192 %20 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Uniform f32* %196 = OpAccessChain %17 %192 %147 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFAdd %195 %197 
                                                      OpStore %170 %198 
                                         f32 %199 = OpLoad %170 
                                         f32 %201 = OpExtInst %1 43 %199 %200 %73 
                                                      OpStore %170 %201 
                                         f32 %205 = OpLoad %170 
                                        bool %207 = OpFOrdLessThan %205 %206 
                                                      OpStore %204 %207 
                                        bool %208 = OpLoad %204 
                                                      OpSelectionMerge %210 None 
                                                      OpBranchConditional %208 %209 %352 
                                             %209 = OpLabel 
                                Private f32* %212 = OpAccessChain %157 %69 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpExtInst %1 4 %213 
                                Private f32* %215 = OpAccessChain %157 %30 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 4 %216 
                                         f32 %218 = OpExtInst %1 40 %214 %217 
                                                      OpStore %211 %218 
                                Private f32* %219 = OpAccessChain %157 %20 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 4 %220 
                                         f32 %222 = OpLoad %211 
                                         f32 %223 = OpExtInst %1 40 %221 %222 
                                                      OpStore %211 %223 
                                         f32 %224 = OpLoad %211 
                                Uniform f32* %226 = OpAccessChain %17 %225 %20 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %224 %228 
                                                      OpStore %211 %229 
                                         f32 %230 = OpLoad %211 
                                         f32 %232 = OpExtInst %1 40 %230 %231 
                                                      OpStore %211 %232 
                                         f32 %233 = OpLoad %211 
                                Uniform f32* %234 = OpAccessChain %17 %225 %147 
                                         f32 %235 = OpLoad %234 
                                         f32 %236 = OpFMul %233 %235 
                                                      OpStore %211 %236 
                                Uniform f32* %237 = OpAccessChain %17 %225 %69 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpLoad %211 
                                         f32 %240 = OpFDiv %238 %239 
                                                      OpStore %211 %240 
                                         f32 %241 = OpLoad %211 
                                Uniform f32* %242 = OpAccessChain %17 %225 %30 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFNegate %243 
                                         f32 %245 = OpFAdd %241 %244 
                                                      OpStore %211 %245 
                                         f32 %246 = OpLoad %211 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %247 %73 
                                                      OpStore %211 %248 
                                       f32_3 %250 = OpLoad %157 
                                       f32_3 %253 = OpFAdd %250 %252 
                                       f32_4 %254 = OpLoad %249 
                                       f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                                      OpStore %249 %255 
                                       f32_4 %258 = OpLoad %249 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                         f32 %260 = OpLoad %211 
                                         f32 %261 = OpCompositeExtract %259 0 
                                         f32 %262 = OpCompositeExtract %259 1 
                                         f32 %263 = OpCompositeExtract %259 2 
                                       f32_4 %264 = OpCompositeConstruct %261 %262 %263 %260 
                                                      OpStore %257 %264 
                       read_only TextureCube %268 = OpLoad %267 
                                     sampler %270 = OpLoad %269 
                read_only TextureCubeSampled %273 = OpSampledImage %268 %270 
                                       f32_4 %274 = OpLoad %257 
                                         f32 %275 = OpCompositeExtract %274 3 
                                         f32 %276 = OpImageSampleDrefImplicitLod %273 %274 %275 
                                Private f32* %277 = OpAccessChain %249 %30 
                                                      OpStore %277 %276 
                                       f32_3 %279 = OpLoad %157 
                                       f32_3 %282 = OpFAdd %279 %281 
                                                      OpStore %278 %282 
                                       f32_3 %284 = OpLoad %278 
                                         f32 %285 = OpLoad %211 
                                         f32 %286 = OpCompositeExtract %284 0 
                                         f32 %287 = OpCompositeExtract %284 1 
                                         f32 %288 = OpCompositeExtract %284 2 
                                       f32_4 %289 = OpCompositeConstruct %286 %287 %288 %285 
                                                      OpStore %283 %289 
                       read_only TextureCube %290 = OpLoad %267 
                                     sampler %291 = OpLoad %269 
                read_only TextureCubeSampled %292 = OpSampledImage %290 %291 
                                       f32_4 %293 = OpLoad %283 
                                         f32 %294 = OpCompositeExtract %293 3 
                                         f32 %295 = OpImageSampleDrefImplicitLod %292 %293 %294 
                                Private f32* %296 = OpAccessChain %249 %69 
                                                      OpStore %296 %295 
                                       f32_3 %297 = OpLoad %157 
                                       f32_3 %299 = OpFAdd %297 %298 
                                                      OpStore %278 %299 
                                       f32_3 %301 = OpLoad %278 
                                         f32 %302 = OpLoad %211 
                                         f32 %303 = OpCompositeExtract %301 0 
                                         f32 %304 = OpCompositeExtract %301 1 
                                         f32 %305 = OpCompositeExtract %301 2 
                                       f32_4 %306 = OpCompositeConstruct %303 %304 %305 %302 
                                                      OpStore %300 %306 
                       read_only TextureCube %307 = OpLoad %267 
                                     sampler %308 = OpLoad %269 
                read_only TextureCubeSampled %309 = OpSampledImage %307 %308 
                                       f32_4 %310 = OpLoad %300 
                                         f32 %311 = OpCompositeExtract %310 3 
                                         f32 %312 = OpImageSampleDrefImplicitLod %309 %310 %311 
                                Private f32* %313 = OpAccessChain %249 %20 
                                                      OpStore %313 %312 
                                       f32_3 %314 = OpLoad %157 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %157 %316 
                                       f32_3 %318 = OpLoad %157 
                                         f32 %319 = OpLoad %211 
                                         f32 %320 = OpCompositeExtract %318 0 
                                         f32 %321 = OpCompositeExtract %318 1 
                                         f32 %322 = OpCompositeExtract %318 2 
                                       f32_4 %323 = OpCompositeConstruct %320 %321 %322 %319 
                                                      OpStore %317 %323 
                       read_only TextureCube %324 = OpLoad %267 
                                     sampler %325 = OpLoad %269 
                read_only TextureCubeSampled %326 = OpSampledImage %324 %325 
                                       f32_4 %327 = OpLoad %317 
                                         f32 %328 = OpCompositeExtract %327 3 
                                         f32 %329 = OpImageSampleDrefImplicitLod %326 %327 %328 
                                Private f32* %330 = OpAccessChain %249 %147 
                                                      OpStore %330 %329 
                                       f32_4 %331 = OpLoad %249 
                                         f32 %334 = OpDot %331 %333 
                                Private f32* %335 = OpAccessChain %157 %30 
                                                      OpStore %335 %334 
                                Uniform f32* %338 = OpAccessChain %17 %192 %30 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpFNegate %339 
                                         f32 %341 = OpFAdd %340 %73 
                                Private f32* %342 = OpAccessChain %337 %30 
                                                      OpStore %342 %341 
                                Private f32* %343 = OpAccessChain %157 %30 
                                         f32 %344 = OpLoad %343 
                                Private f32* %345 = OpAccessChain %337 %30 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFMul %344 %346 
                                Uniform f32* %348 = OpAccessChain %17 %192 %30 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpFAdd %347 %349 
                                Private f32* %351 = OpAccessChain %157 %30 
                                                      OpStore %351 %350 
                                                      OpBranch %210 
                                             %352 = OpLabel 
                                Private f32* %353 = OpAccessChain %157 %30 
                                                      OpStore %353 %73 
                                                      OpBranch %210 
                                             %210 = OpLabel 
                                Private f32* %354 = OpAccessChain %157 %30 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %73 
                                Private f32* %358 = OpAccessChain %337 %30 
                                                      OpStore %358 %357 
                                         f32 %359 = OpLoad %170 
                                Private f32* %360 = OpAccessChain %337 %30 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                Private f32* %363 = OpAccessChain %157 %30 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFAdd %362 %364 
                                Private f32* %366 = OpAccessChain %157 %30 
                                                      OpStore %366 %365 
                                Private f32* %367 = OpAccessChain %157 %30 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %166 
                                         f32 %370 = OpFMul %368 %369 
                                Private f32* %371 = OpAccessChain %157 %30 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %76 
                                       f32_3 %373 = OpVectorShuffle %372 %372 1 1 1 
                              Uniform f32_4* %375 = OpAccessChain %17 %374 %19 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %373 %377 
                                       f32_4 %379 = OpLoad %249 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %249 %380 
                              Uniform f32_4* %381 = OpAccessChain %17 %374 %92 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %76 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 0 0 
                                       f32_3 %386 = OpFMul %383 %385 
                                       f32_4 %387 = OpLoad %249 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFAdd %386 %388 
                                       f32_4 %390 = OpLoad %249 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %249 %391 
                              Uniform f32_4* %392 = OpAccessChain %17 %374 %64 
                                       f32_4 %393 = OpLoad %392 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                       f32_4 %395 = OpLoad %76 
                                       f32_3 %396 = OpVectorShuffle %395 %395 3 3 3 
                                       f32_3 %397 = OpFMul %394 %396 
                                       f32_4 %398 = OpLoad %249 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpFAdd %397 %399 
                                       f32_4 %401 = OpLoad %249 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                                      OpStore %249 %402 
                                       f32_4 %403 = OpLoad %249 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                              Uniform f32_4* %405 = OpAccessChain %17 %374 %86 
                                       f32_4 %406 = OpLoad %405 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %404 %407 
                                       f32_4 %409 = OpLoad %249 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %249 %410 
                       read_only TextureCube %412 = OpLoad %411 
                                     sampler %414 = OpLoad %413 
                read_only TextureCubeSampled %416 = OpSampledImage %412 %414 
                                       f32_4 %417 = OpLoad %249 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %420 = OpImageSampleImplicitLod %416 %418 Bias %10 
                                         f32 %421 = OpCompositeExtract %420 3 
                                Private f32* %422 = OpAccessChain %337 %30 
                                                      OpStore %422 %421 
                                Private f32* %423 = OpAccessChain %337 %30 
                                         f32 %424 = OpLoad %423 
                                Private f32* %425 = OpAccessChain %157 %30 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %157 %30 
                                                      OpStore %428 %427 
                                       f32_4 %429 = OpLoad %38 
                                       f32_2 %430 = OpVectorShuffle %429 %429 0 1 
                              Uniform f32_4* %432 = OpAccessChain %17 %431 
                                       f32_4 %433 = OpLoad %432 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                                       f32_2 %435 = OpFMul %430 %434 
                              Uniform f32_4* %436 = OpAccessChain %17 %431 
                                       f32_4 %437 = OpLoad %436 
                                       f32_2 %438 = OpVectorShuffle %437 %437 2 3 
                                       f32_2 %439 = OpFAdd %435 %438 
                                                      OpStore %337 %439 
                         read_only Texture2D %441 = OpLoad %440 
                                     sampler %443 = OpLoad %442 
                  read_only Texture2DSampled %444 = OpSampledImage %441 %443 
                                       f32_2 %445 = OpLoad %337 
                                       f32_4 %446 = OpImageSampleImplicitLod %444 %445 
                                                      OpStore %38 %446 
                                       f32_4 %447 = OpLoad %38 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                                       f32_3 %451 = OpFMul %448 %450 
                                       f32_3 %454 = OpFAdd %451 %453 
                                       f32_4 %455 = OpLoad %38 
                                       f32_4 %456 = OpVectorShuffle %455 %454 4 5 6 3 
                                                      OpStore %38 %456 
                                       f32_4 %457 = OpLoad %38 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_4 %459 = OpLoad %38 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                         f32 %461 = OpDot %458 %460 
                                Private f32* %462 = OpAccessChain %337 %30 
                                                      OpStore %462 %461 
                                Private f32* %463 = OpAccessChain %337 %30 
                                         f32 %464 = OpLoad %463 
                                         f32 %465 = OpExtInst %1 32 %464 
                                Private f32* %466 = OpAccessChain %337 %30 
                                                      OpStore %466 %465 
                                       f32_2 %467 = OpLoad %337 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 0 0 
                                       f32_4 %469 = OpLoad %38 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_3 %471 = OpFMul %468 %470 
                                       f32_4 %472 = OpLoad %38 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 6 3 
                                                      OpStore %38 %473 
                                       f32_3 %474 = OpLoad %83 
                                       f32_3 %475 = OpFNegate %474 
                                       f32_4 %476 = OpLoad %38 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                         f32 %478 = OpDot %475 %477 
                                Private f32* %479 = OpAccessChain %337 %30 
                                                      OpStore %479 %478 
                                       f32_4 %480 = OpLoad %76 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 3 
                              Uniform f32_3* %483 = OpAccessChain %17 %92 
                                       f32_3 %484 = OpLoad %483 
                                       f32_3 %485 = OpFNegate %484 
                                       f32_3 %486 = OpFAdd %481 %485 
                                       f32_4 %487 = OpLoad %76 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 5 6 3 
                                                      OpStore %76 %488 
                                       f32_4 %489 = OpLoad %76 
                                       f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                       f32_4 %491 = OpLoad %76 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                         f32 %493 = OpDot %490 %492 
                                                      OpStore %49 %493 
                                         f32 %494 = OpLoad %49 
                                         f32 %495 = OpExtInst %1 32 %494 
                                                      OpStore %49 %495 
                                       f32_4 %496 = OpLoad %76 
                                       f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                                       f32_3 %498 = OpFNegate %497 
                                         f32 %499 = OpLoad %49 
                                       f32_3 %500 = OpCompositeConstruct %499 %499 %499 
                                       f32_3 %501 = OpFMul %498 %500 
                                       f32_3 %502 = OpLoad %83 
                                       f32_3 %503 = OpFNegate %502 
                                       f32_3 %504 = OpFAdd %501 %503 
                                       f32_4 %505 = OpLoad %76 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
                                                      OpStore %76 %506 
                                       f32_4 %507 = OpLoad %76 
                                       f32_3 %508 = OpVectorShuffle %507 %507 0 1 2 
                                       f32_4 %509 = OpLoad %76 
                                       f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                                         f32 %511 = OpDot %508 %510 
                                                      OpStore %49 %511 
                                         f32 %512 = OpLoad %49 
                                         f32 %513 = OpExtInst %1 32 %512 
                                                      OpStore %49 %513 
                                         f32 %514 = OpLoad %49 
                                       f32_3 %515 = OpCompositeConstruct %514 %514 %514 
                                       f32_4 %516 = OpLoad %76 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFMul %515 %517 
                                       f32_4 %519 = OpLoad %76 
                                       f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                                      OpStore %76 %520 
                                       f32_4 %521 = OpLoad %76 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_4 %523 = OpLoad %38 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 1 2 
                                         f32 %525 = OpDot %522 %524 
                                Private f32* %526 = OpAccessChain %337 %69 
                                                      OpStore %526 %525 
                                       f32_2 %527 = OpLoad %337 
                                       f32_2 %529 = OpExtInst %1 40 %527 %528 
                                                      OpStore %337 %529 
                                Private f32* %530 = OpAccessChain %38 %147 
                                         f32 %531 = OpLoad %530 
                                         f32 %533 = OpFMul %531 %532 
                                Private f32* %534 = OpAccessChain %38 %30 
                                                      OpStore %534 %533 
                                Private f32* %535 = OpAccessChain %337 %69 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpExtInst %1 30 %536 
                                                      OpStore %49 %537 
                                         f32 %538 = OpLoad %49 
                                Private f32* %539 = OpAccessChain %38 %30 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                                      OpStore %49 %541 
                                         f32 %542 = OpLoad %49 
                                         f32 %543 = OpExtInst %1 29 %542 
                                                      OpStore %49 %543 
                                Private f32* %544 = OpAccessChain %157 %30 
                                         f32 %545 = OpLoad %544 
                                Private f32* %546 = OpAccessChain %38 %30 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %38 %30 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpExtInst %1 43 %548 %200 %73 
                                Private f32* %550 = OpAccessChain %38 %30 
                                                      OpStore %550 %549 
                                         f32 %551 = OpLoad %49 
                                Private f32* %552 = OpAccessChain %38 %30 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                                      OpStore %49 %554 
                                Private f32* %555 = OpAccessChain %157 %30 
                                         f32 %556 = OpLoad %555 
                                Private f32* %557 = OpAccessChain %337 %30 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpFMul %556 %558 
                                Private f32* %560 = OpAccessChain %157 %30 
                                                      OpStore %560 %559 
                                       f32_3 %561 = OpLoad %157 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 0 0 
                              Uniform f32_4* %564 = OpAccessChain %17 %563 
                                       f32_4 %565 = OpLoad %564 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                       f32_3 %567 = OpFMul %562 %566 
                                       f32_4 %568 = OpLoad %38 
                                       f32_4 %569 = OpVectorShuffle %568 %567 4 5 6 3 
                                                      OpStore %38 %569 
                              Uniform f32_4* %570 = OpAccessChain %17 %563 
                                       f32_4 %571 = OpLoad %570 
                                       f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                         f32 %577 = OpDot %572 %576 
                                Private f32* %578 = OpAccessChain %157 %30 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %157 %30 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpLoad %49 
                                         f32 %582 = OpFMul %580 %581 
                                Private f32* %583 = OpAccessChain %38 %147 
                                                      OpStore %583 %582 
                                Private f32* %584 = OpAccessChain %9 %30 
                                         f32 %585 = OpLoad %584 
                                Uniform f32* %587 = OpAccessChain %17 %586 %20 
                                         f32 %588 = OpLoad %587 
                                         f32 %589 = OpFMul %585 %588 
                                Uniform f32* %590 = OpAccessChain %17 %586 %147 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFAdd %589 %591 
                                Private f32* %593 = OpAccessChain %9 %30 
                                                      OpStore %593 %592 
                                Private f32* %594 = OpAccessChain %9 %30 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFNegate %595 
                                         f32 %597 = OpFAdd %596 %73 
                                Private f32* %598 = OpAccessChain %9 %30 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %9 %30 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %200 %73 
                                Private f32* %602 = OpAccessChain %9 %30 
                                                      OpStore %602 %601 
                                       f32_3 %605 = OpLoad %9 
                                       f32_4 %606 = OpVectorShuffle %605 %605 0 0 0 0 
                                       f32_4 %607 = OpLoad %38 
                                       f32_4 %608 = OpFMul %606 %607 
                                                      OpStore %604 %608 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
}
}
}
}